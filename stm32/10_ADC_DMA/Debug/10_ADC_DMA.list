
10_ADC_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b74  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08004d14  08004d14  00005d14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d98  08004d98  00006068  2**0
                  CONTENTS
  4 .ARM          00000008  08004d98  08004d98  00005d98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004da0  08004da0  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004da0  08004da0  00005da0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004da4  08004da4  00005da4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004da8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000264  20000068  08004e10  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002cc  08004e10  000062cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ba09  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002219  00000000  00000000  00011aa1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000998  00000000  00000000  00013cc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000073a  00000000  00000000  00014658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001814d  00000000  00000000  00014d92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000da11  00000000  00000000  0002cedf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009381c  00000000  00000000  0003a8f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ce10c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c90  00000000  00000000  000ce150  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  000d0de0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004cfc 	.word	0x08004cfc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08004cfc 	.word	0x08004cfc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b084      	sub	sp, #16
 8000574:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000576:	463b      	mov	r3, r7
 8000578:	2200      	movs	r2, #0
 800057a:	601a      	str	r2, [r3, #0]
 800057c:	605a      	str	r2, [r3, #4]
 800057e:	609a      	str	r2, [r3, #8]
 8000580:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000582:	4b28      	ldr	r3, [pc, #160]	@ (8000624 <MX_ADC1_Init+0xb4>)
 8000584:	4a28      	ldr	r2, [pc, #160]	@ (8000628 <MX_ADC1_Init+0xb8>)
 8000586:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000588:	4b26      	ldr	r3, [pc, #152]	@ (8000624 <MX_ADC1_Init+0xb4>)
 800058a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800058e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000590:	4b24      	ldr	r3, [pc, #144]	@ (8000624 <MX_ADC1_Init+0xb4>)
 8000592:	2200      	movs	r2, #0
 8000594:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000596:	4b23      	ldr	r3, [pc, #140]	@ (8000624 <MX_ADC1_Init+0xb4>)
 8000598:	2201      	movs	r2, #1
 800059a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800059c:	4b21      	ldr	r3, [pc, #132]	@ (8000624 <MX_ADC1_Init+0xb4>)
 800059e:	2201      	movs	r2, #1
 80005a0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005a2:	4b20      	ldr	r3, [pc, #128]	@ (8000624 <MX_ADC1_Init+0xb4>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005aa:	4b1e      	ldr	r3, [pc, #120]	@ (8000624 <MX_ADC1_Init+0xb4>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005b0:	4b1c      	ldr	r3, [pc, #112]	@ (8000624 <MX_ADC1_Init+0xb4>)
 80005b2:	4a1e      	ldr	r2, [pc, #120]	@ (800062c <MX_ADC1_Init+0xbc>)
 80005b4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005b6:	4b1b      	ldr	r3, [pc, #108]	@ (8000624 <MX_ADC1_Init+0xb4>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80005bc:	4b19      	ldr	r3, [pc, #100]	@ (8000624 <MX_ADC1_Init+0xb4>)
 80005be:	2202      	movs	r2, #2
 80005c0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80005c2:	4b18      	ldr	r3, [pc, #96]	@ (8000624 <MX_ADC1_Init+0xb4>)
 80005c4:	2201      	movs	r2, #1
 80005c6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005ca:	4b16      	ldr	r3, [pc, #88]	@ (8000624 <MX_ADC1_Init+0xb4>)
 80005cc:	2201      	movs	r2, #1
 80005ce:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005d0:	4814      	ldr	r0, [pc, #80]	@ (8000624 <MX_ADC1_Init+0xb4>)
 80005d2:	f000 fc0b 	bl	8000dec <HAL_ADC_Init>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80005dc:	f000 f99a 	bl	8000914 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80005e0:	2307      	movs	r3, #7
 80005e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80005e4:	2301      	movs	r3, #1
 80005e6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 80005e8:	2306      	movs	r3, #6
 80005ea:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005ec:	463b      	mov	r3, r7
 80005ee:	4619      	mov	r1, r3
 80005f0:	480c      	ldr	r0, [pc, #48]	@ (8000624 <MX_ADC1_Init+0xb4>)
 80005f2:	f000 fe67 	bl	80012c4 <HAL_ADC_ConfigChannel>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80005fc:	f000 f98a 	bl	8000914 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000600:	2306      	movs	r3, #6
 8000602:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000604:	2302      	movs	r3, #2
 8000606:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000608:	463b      	mov	r3, r7
 800060a:	4619      	mov	r1, r3
 800060c:	4805      	ldr	r0, [pc, #20]	@ (8000624 <MX_ADC1_Init+0xb4>)
 800060e:	f000 fe59 	bl	80012c4 <HAL_ADC_ConfigChannel>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000618:	f000 f97c 	bl	8000914 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800061c:	bf00      	nop
 800061e:	3710      	adds	r7, #16
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	20000084 	.word	0x20000084
 8000628:	40012000 	.word	0x40012000
 800062c:	0f000001 	.word	0x0f000001

08000630 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b08a      	sub	sp, #40	@ 0x28
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000638:	f107 0314 	add.w	r3, r7, #20
 800063c:	2200      	movs	r2, #0
 800063e:	601a      	str	r2, [r3, #0]
 8000640:	605a      	str	r2, [r3, #4]
 8000642:	609a      	str	r2, [r3, #8]
 8000644:	60da      	str	r2, [r3, #12]
 8000646:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4a33      	ldr	r2, [pc, #204]	@ (800071c <HAL_ADC_MspInit+0xec>)
 800064e:	4293      	cmp	r3, r2
 8000650:	d15f      	bne.n	8000712 <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000652:	2300      	movs	r3, #0
 8000654:	613b      	str	r3, [r7, #16]
 8000656:	4b32      	ldr	r3, [pc, #200]	@ (8000720 <HAL_ADC_MspInit+0xf0>)
 8000658:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800065a:	4a31      	ldr	r2, [pc, #196]	@ (8000720 <HAL_ADC_MspInit+0xf0>)
 800065c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000660:	6453      	str	r3, [r2, #68]	@ 0x44
 8000662:	4b2f      	ldr	r3, [pc, #188]	@ (8000720 <HAL_ADC_MspInit+0xf0>)
 8000664:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000666:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800066a:	613b      	str	r3, [r7, #16]
 800066c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800066e:	2300      	movs	r3, #0
 8000670:	60fb      	str	r3, [r7, #12]
 8000672:	4b2b      	ldr	r3, [pc, #172]	@ (8000720 <HAL_ADC_MspInit+0xf0>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000676:	4a2a      	ldr	r2, [pc, #168]	@ (8000720 <HAL_ADC_MspInit+0xf0>)
 8000678:	f043 0301 	orr.w	r3, r3, #1
 800067c:	6313      	str	r3, [r2, #48]	@ 0x30
 800067e:	4b28      	ldr	r3, [pc, #160]	@ (8000720 <HAL_ADC_MspInit+0xf0>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000682:	f003 0301 	and.w	r3, r3, #1
 8000686:	60fb      	str	r3, [r7, #12]
 8000688:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800068a:	23c0      	movs	r3, #192	@ 0xc0
 800068c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800068e:	2303      	movs	r3, #3
 8000690:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000692:	2300      	movs	r3, #0
 8000694:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000696:	f107 0314 	add.w	r3, r7, #20
 800069a:	4619      	mov	r1, r3
 800069c:	4821      	ldr	r0, [pc, #132]	@ (8000724 <HAL_ADC_MspInit+0xf4>)
 800069e:	f001 fddf 	bl	8002260 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80006a2:	4b21      	ldr	r3, [pc, #132]	@ (8000728 <HAL_ADC_MspInit+0xf8>)
 80006a4:	4a21      	ldr	r2, [pc, #132]	@ (800072c <HAL_ADC_MspInit+0xfc>)
 80006a6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80006a8:	4b1f      	ldr	r3, [pc, #124]	@ (8000728 <HAL_ADC_MspInit+0xf8>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80006ae:	4b1e      	ldr	r3, [pc, #120]	@ (8000728 <HAL_ADC_MspInit+0xf8>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80006b4:	4b1c      	ldr	r3, [pc, #112]	@ (8000728 <HAL_ADC_MspInit+0xf8>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80006ba:	4b1b      	ldr	r3, [pc, #108]	@ (8000728 <HAL_ADC_MspInit+0xf8>)
 80006bc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80006c0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80006c2:	4b19      	ldr	r3, [pc, #100]	@ (8000728 <HAL_ADC_MspInit+0xf8>)
 80006c4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80006c8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80006ca:	4b17      	ldr	r3, [pc, #92]	@ (8000728 <HAL_ADC_MspInit+0xf8>)
 80006cc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80006d0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80006d2:	4b15      	ldr	r3, [pc, #84]	@ (8000728 <HAL_ADC_MspInit+0xf8>)
 80006d4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80006d8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80006da:	4b13      	ldr	r3, [pc, #76]	@ (8000728 <HAL_ADC_MspInit+0xf8>)
 80006dc:	2200      	movs	r2, #0
 80006de:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80006e0:	4b11      	ldr	r3, [pc, #68]	@ (8000728 <HAL_ADC_MspInit+0xf8>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80006e6:	4810      	ldr	r0, [pc, #64]	@ (8000728 <HAL_ADC_MspInit+0xf8>)
 80006e8:	f001 f9b8 	bl	8001a5c <HAL_DMA_Init>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80006f2:	f000 f90f 	bl	8000914 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	4a0b      	ldr	r2, [pc, #44]	@ (8000728 <HAL_ADC_MspInit+0xf8>)
 80006fa:	639a      	str	r2, [r3, #56]	@ 0x38
 80006fc:	4a0a      	ldr	r2, [pc, #40]	@ (8000728 <HAL_ADC_MspInit+0xf8>)
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000702:	2200      	movs	r2, #0
 8000704:	2100      	movs	r1, #0
 8000706:	2012      	movs	r0, #18
 8000708:	f001 f971 	bl	80019ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800070c:	2012      	movs	r0, #18
 800070e:	f001 f98a 	bl	8001a26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000712:	bf00      	nop
 8000714:	3728      	adds	r7, #40	@ 0x28
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	40012000 	.word	0x40012000
 8000720:	40023800 	.word	0x40023800
 8000724:	40020000 	.word	0x40020000
 8000728:	200000cc 	.word	0x200000cc
 800072c:	40026410 	.word	0x40026410

08000730 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000736:	2300      	movs	r3, #0
 8000738:	607b      	str	r3, [r7, #4]
 800073a:	4b0c      	ldr	r3, [pc, #48]	@ (800076c <MX_DMA_Init+0x3c>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073e:	4a0b      	ldr	r2, [pc, #44]	@ (800076c <MX_DMA_Init+0x3c>)
 8000740:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000744:	6313      	str	r3, [r2, #48]	@ 0x30
 8000746:	4b09      	ldr	r3, [pc, #36]	@ (800076c <MX_DMA_Init+0x3c>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800074e:	607b      	str	r3, [r7, #4]
 8000750:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000752:	2200      	movs	r2, #0
 8000754:	2100      	movs	r1, #0
 8000756:	2038      	movs	r0, #56	@ 0x38
 8000758:	f001 f949 	bl	80019ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800075c:	2038      	movs	r0, #56	@ 0x38
 800075e:	f001 f962 	bl	8001a26 <HAL_NVIC_EnableIRQ>

}
 8000762:	bf00      	nop
 8000764:	3708      	adds	r7, #8
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	40023800 	.word	0x40023800

08000770 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000770:	b480      	push	{r7}
 8000772:	b083      	sub	sp, #12
 8000774:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	607b      	str	r3, [r7, #4]
 800077a:	4b10      	ldr	r3, [pc, #64]	@ (80007bc <MX_GPIO_Init+0x4c>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077e:	4a0f      	ldr	r2, [pc, #60]	@ (80007bc <MX_GPIO_Init+0x4c>)
 8000780:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000784:	6313      	str	r3, [r2, #48]	@ 0x30
 8000786:	4b0d      	ldr	r3, [pc, #52]	@ (80007bc <MX_GPIO_Init+0x4c>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800078e:	607b      	str	r3, [r7, #4]
 8000790:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	603b      	str	r3, [r7, #0]
 8000796:	4b09      	ldr	r3, [pc, #36]	@ (80007bc <MX_GPIO_Init+0x4c>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079a:	4a08      	ldr	r2, [pc, #32]	@ (80007bc <MX_GPIO_Init+0x4c>)
 800079c:	f043 0301 	orr.w	r3, r3, #1
 80007a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007a2:	4b06      	ldr	r3, [pc, #24]	@ (80007bc <MX_GPIO_Init+0x4c>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a6:	f003 0301 	and.w	r3, r3, #1
 80007aa:	603b      	str	r3, [r7, #0]
 80007ac:	683b      	ldr	r3, [r7, #0]

}
 80007ae:	bf00      	nop
 80007b0:	370c      	adds	r7, #12
 80007b2:	46bd      	mov	sp, r7
 80007b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b8:	4770      	bx	lr
 80007ba:	bf00      	nop
 80007bc:	40023800 	.word	0x40023800

080007c0 <__io_putchar>:
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */

PUTCHAR_PROTOTYPE
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 80007c8:	1d39      	adds	r1, r7, #4
 80007ca:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80007ce:	2201      	movs	r2, #1
 80007d0:	4803      	ldr	r0, [pc, #12]	@ (80007e0 <__io_putchar+0x20>)
 80007d2:	f002 fbb1 	bl	8002f38 <HAL_UART_Transmit>

  return ch;
 80007d6:	687b      	ldr	r3, [r7, #4]
}
 80007d8:	4618      	mov	r0, r3
 80007da:	3708      	adds	r7, #8
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	20000134 	.word	0x20000134

080007e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007e8:	f000 fa6a 	bl	8000cc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007ec:	f000 f82a 	bl	8000844 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007f0:	f7ff ffbe 	bl	8000770 <MX_GPIO_Init>
  MX_DMA_Init();
 80007f4:	f7ff ff9c 	bl	8000730 <MX_DMA_Init>
  MX_ADC1_Init();
 80007f8:	f7ff feba 	bl	8000570 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 80007fc:	f000 f9bc 	bl	8000b78 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

//  HAL_ADC_Start_IT(&hadc1);
  HAL_ADC_Start_DMA(&hadc1, adcValue, 2);
 8000800:	2202      	movs	r2, #2
 8000802:	490c      	ldr	r1, [pc, #48]	@ (8000834 <main+0x50>)
 8000804:	480c      	ldr	r0, [pc, #48]	@ (8000838 <main+0x54>)
 8000806:	f000 fc45 	bl	8001094 <HAL_ADC_Start_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

      HAL_Delay(500);
 800080a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800080e:	f000 fac9 	bl	8000da4 <HAL_Delay>
      printf("adc -> value1 : %4d\n\r", adcValue[0]);
 8000812:	4b08      	ldr	r3, [pc, #32]	@ (8000834 <main+0x50>)
 8000814:	881b      	ldrh	r3, [r3, #0]
 8000816:	b29b      	uxth	r3, r3
 8000818:	4619      	mov	r1, r3
 800081a:	4808      	ldr	r0, [pc, #32]	@ (800083c <main+0x58>)
 800081c:	f003 fc00 	bl	8004020 <iprintf>
      printf("adc -> value2 : %4d\n\r", adcValue[1]);
 8000820:	4b04      	ldr	r3, [pc, #16]	@ (8000834 <main+0x50>)
 8000822:	885b      	ldrh	r3, [r3, #2]
 8000824:	b29b      	uxth	r3, r3
 8000826:	4619      	mov	r1, r3
 8000828:	4805      	ldr	r0, [pc, #20]	@ (8000840 <main+0x5c>)
 800082a:	f003 fbf9 	bl	8004020 <iprintf>
      HAL_Delay(500);
 800082e:	bf00      	nop
 8000830:	e7eb      	b.n	800080a <main+0x26>
 8000832:	bf00      	nop
 8000834:	2000012c 	.word	0x2000012c
 8000838:	20000084 	.word	0x20000084
 800083c:	08004d14 	.word	0x08004d14
 8000840:	08004d2c 	.word	0x08004d2c

08000844 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b094      	sub	sp, #80	@ 0x50
 8000848:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800084a:	f107 0320 	add.w	r3, r7, #32
 800084e:	2230      	movs	r2, #48	@ 0x30
 8000850:	2100      	movs	r1, #0
 8000852:	4618      	mov	r0, r3
 8000854:	f003 fc39 	bl	80040ca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000858:	f107 030c 	add.w	r3, r7, #12
 800085c:	2200      	movs	r2, #0
 800085e:	601a      	str	r2, [r3, #0]
 8000860:	605a      	str	r2, [r3, #4]
 8000862:	609a      	str	r2, [r3, #8]
 8000864:	60da      	str	r2, [r3, #12]
 8000866:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000868:	2300      	movs	r3, #0
 800086a:	60bb      	str	r3, [r7, #8]
 800086c:	4b27      	ldr	r3, [pc, #156]	@ (800090c <SystemClock_Config+0xc8>)
 800086e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000870:	4a26      	ldr	r2, [pc, #152]	@ (800090c <SystemClock_Config+0xc8>)
 8000872:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000876:	6413      	str	r3, [r2, #64]	@ 0x40
 8000878:	4b24      	ldr	r3, [pc, #144]	@ (800090c <SystemClock_Config+0xc8>)
 800087a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800087c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000880:	60bb      	str	r3, [r7, #8]
 8000882:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000884:	2300      	movs	r3, #0
 8000886:	607b      	str	r3, [r7, #4]
 8000888:	4b21      	ldr	r3, [pc, #132]	@ (8000910 <SystemClock_Config+0xcc>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4a20      	ldr	r2, [pc, #128]	@ (8000910 <SystemClock_Config+0xcc>)
 800088e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000892:	6013      	str	r3, [r2, #0]
 8000894:	4b1e      	ldr	r3, [pc, #120]	@ (8000910 <SystemClock_Config+0xcc>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800089c:	607b      	str	r3, [r7, #4]
 800089e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008a0:	2301      	movs	r3, #1
 80008a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008a4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80008a8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008aa:	2302      	movs	r3, #2
 80008ac:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008ae:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80008b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80008b4:	2304      	movs	r3, #4
 80008b6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80008b8:	2364      	movs	r3, #100	@ 0x64
 80008ba:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008bc:	2302      	movs	r3, #2
 80008be:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008c0:	2304      	movs	r3, #4
 80008c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008c4:	f107 0320 	add.w	r3, r7, #32
 80008c8:	4618      	mov	r0, r3
 80008ca:	f001 fe4d 	bl	8002568 <HAL_RCC_OscConfig>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80008d4:	f000 f81e 	bl	8000914 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008d8:	230f      	movs	r3, #15
 80008da:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008dc:	2302      	movs	r3, #2
 80008de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008e0:	2300      	movs	r3, #0
 80008e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008ea:	2300      	movs	r3, #0
 80008ec:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80008ee:	f107 030c 	add.w	r3, r7, #12
 80008f2:	2103      	movs	r1, #3
 80008f4:	4618      	mov	r0, r3
 80008f6:	f002 f8af 	bl	8002a58 <HAL_RCC_ClockConfig>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000900:	f000 f808 	bl	8000914 <Error_Handler>
  }
}
 8000904:	bf00      	nop
 8000906:	3750      	adds	r7, #80	@ 0x50
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	40023800 	.word	0x40023800
 8000910:	40007000 	.word	0x40007000

08000914 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000918:	b672      	cpsid	i
}
 800091a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800091c:	bf00      	nop
 800091e:	e7fd      	b.n	800091c <Error_Handler+0x8>

08000920 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000920:	b480      	push	{r7}
 8000922:	b083      	sub	sp, #12
 8000924:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000926:	2300      	movs	r3, #0
 8000928:	607b      	str	r3, [r7, #4]
 800092a:	4b10      	ldr	r3, [pc, #64]	@ (800096c <HAL_MspInit+0x4c>)
 800092c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800092e:	4a0f      	ldr	r2, [pc, #60]	@ (800096c <HAL_MspInit+0x4c>)
 8000930:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000934:	6453      	str	r3, [r2, #68]	@ 0x44
 8000936:	4b0d      	ldr	r3, [pc, #52]	@ (800096c <HAL_MspInit+0x4c>)
 8000938:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800093a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800093e:	607b      	str	r3, [r7, #4]
 8000940:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000942:	2300      	movs	r3, #0
 8000944:	603b      	str	r3, [r7, #0]
 8000946:	4b09      	ldr	r3, [pc, #36]	@ (800096c <HAL_MspInit+0x4c>)
 8000948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800094a:	4a08      	ldr	r2, [pc, #32]	@ (800096c <HAL_MspInit+0x4c>)
 800094c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000950:	6413      	str	r3, [r2, #64]	@ 0x40
 8000952:	4b06      	ldr	r3, [pc, #24]	@ (800096c <HAL_MspInit+0x4c>)
 8000954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000956:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800095a:	603b      	str	r3, [r7, #0]
 800095c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800095e:	bf00      	nop
 8000960:	370c      	adds	r7, #12
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop
 800096c:	40023800 	.word	0x40023800

08000970 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000974:	bf00      	nop
 8000976:	e7fd      	b.n	8000974 <NMI_Handler+0x4>

08000978 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800097c:	bf00      	nop
 800097e:	e7fd      	b.n	800097c <HardFault_Handler+0x4>

08000980 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000984:	bf00      	nop
 8000986:	e7fd      	b.n	8000984 <MemManage_Handler+0x4>

08000988 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800098c:	bf00      	nop
 800098e:	e7fd      	b.n	800098c <BusFault_Handler+0x4>

08000990 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000994:	bf00      	nop
 8000996:	e7fd      	b.n	8000994 <UsageFault_Handler+0x4>

08000998 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800099c:	bf00      	nop
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr

080009a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009a6:	b480      	push	{r7}
 80009a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009aa:	bf00      	nop
 80009ac:	46bd      	mov	sp, r7
 80009ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b2:	4770      	bx	lr

080009b4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009b8:	bf00      	nop
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr

080009c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009c2:	b580      	push	{r7, lr}
 80009c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009c6:	f000 f9cd 	bl	8000d64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009ca:	bf00      	nop
 80009cc:	bd80      	pop	{r7, pc}
	...

080009d0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80009d4:	4802      	ldr	r0, [pc, #8]	@ (80009e0 <ADC_IRQHandler+0x10>)
 80009d6:	f000 fa4c 	bl	8000e72 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80009da:	bf00      	nop
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	20000084 	.word	0x20000084

080009e4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80009e8:	4802      	ldr	r0, [pc, #8]	@ (80009f4 <USART2_IRQHandler+0x10>)
 80009ea:	f002 fb31 	bl	8003050 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80009ee:	bf00      	nop
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	20000134 	.word	0x20000134

080009f8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80009fc:	4802      	ldr	r0, [pc, #8]	@ (8000a08 <DMA2_Stream0_IRQHandler+0x10>)
 80009fe:	f001 f9c5 	bl	8001d8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000a02:	bf00      	nop
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	200000cc 	.word	0x200000cc

08000a0c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b086      	sub	sp, #24
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	60f8      	str	r0, [r7, #12]
 8000a14:	60b9      	str	r1, [r7, #8]
 8000a16:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a18:	2300      	movs	r3, #0
 8000a1a:	617b      	str	r3, [r7, #20]
 8000a1c:	e00a      	b.n	8000a34 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a1e:	f3af 8000 	nop.w
 8000a22:	4601      	mov	r1, r0
 8000a24:	68bb      	ldr	r3, [r7, #8]
 8000a26:	1c5a      	adds	r2, r3, #1
 8000a28:	60ba      	str	r2, [r7, #8]
 8000a2a:	b2ca      	uxtb	r2, r1
 8000a2c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a2e:	697b      	ldr	r3, [r7, #20]
 8000a30:	3301      	adds	r3, #1
 8000a32:	617b      	str	r3, [r7, #20]
 8000a34:	697a      	ldr	r2, [r7, #20]
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	429a      	cmp	r2, r3
 8000a3a:	dbf0      	blt.n	8000a1e <_read+0x12>
  }

  return len;
 8000a3c:	687b      	ldr	r3, [r7, #4]
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	3718      	adds	r7, #24
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}

08000a46 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a46:	b580      	push	{r7, lr}
 8000a48:	b086      	sub	sp, #24
 8000a4a:	af00      	add	r7, sp, #0
 8000a4c:	60f8      	str	r0, [r7, #12]
 8000a4e:	60b9      	str	r1, [r7, #8]
 8000a50:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a52:	2300      	movs	r3, #0
 8000a54:	617b      	str	r3, [r7, #20]
 8000a56:	e009      	b.n	8000a6c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000a58:	68bb      	ldr	r3, [r7, #8]
 8000a5a:	1c5a      	adds	r2, r3, #1
 8000a5c:	60ba      	str	r2, [r7, #8]
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	4618      	mov	r0, r3
 8000a62:	f7ff fead 	bl	80007c0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a66:	697b      	ldr	r3, [r7, #20]
 8000a68:	3301      	adds	r3, #1
 8000a6a:	617b      	str	r3, [r7, #20]
 8000a6c:	697a      	ldr	r2, [r7, #20]
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	429a      	cmp	r2, r3
 8000a72:	dbf1      	blt.n	8000a58 <_write+0x12>
  }
  return len;
 8000a74:	687b      	ldr	r3, [r7, #4]
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	3718      	adds	r7, #24
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}

08000a7e <_close>:

int _close(int file)
{
 8000a7e:	b480      	push	{r7}
 8000a80:	b083      	sub	sp, #12
 8000a82:	af00      	add	r7, sp, #0
 8000a84:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a86:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	370c      	adds	r7, #12
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr

08000a96 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a96:	b480      	push	{r7}
 8000a98:	b083      	sub	sp, #12
 8000a9a:	af00      	add	r7, sp, #0
 8000a9c:	6078      	str	r0, [r7, #4]
 8000a9e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000aa6:	605a      	str	r2, [r3, #4]
  return 0;
 8000aa8:	2300      	movs	r3, #0
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	370c      	adds	r7, #12
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr

08000ab6 <_isatty>:

int _isatty(int file)
{
 8000ab6:	b480      	push	{r7}
 8000ab8:	b083      	sub	sp, #12
 8000aba:	af00      	add	r7, sp, #0
 8000abc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000abe:	2301      	movs	r3, #1
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	370c      	adds	r7, #12
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr

08000acc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b085      	sub	sp, #20
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	60f8      	str	r0, [r7, #12]
 8000ad4:	60b9      	str	r1, [r7, #8]
 8000ad6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ad8:	2300      	movs	r3, #0
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	3714      	adds	r7, #20
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
	...

08000ae8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b086      	sub	sp, #24
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000af0:	4a14      	ldr	r2, [pc, #80]	@ (8000b44 <_sbrk+0x5c>)
 8000af2:	4b15      	ldr	r3, [pc, #84]	@ (8000b48 <_sbrk+0x60>)
 8000af4:	1ad3      	subs	r3, r2, r3
 8000af6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000afc:	4b13      	ldr	r3, [pc, #76]	@ (8000b4c <_sbrk+0x64>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d102      	bne.n	8000b0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b04:	4b11      	ldr	r3, [pc, #68]	@ (8000b4c <_sbrk+0x64>)
 8000b06:	4a12      	ldr	r2, [pc, #72]	@ (8000b50 <_sbrk+0x68>)
 8000b08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b0a:	4b10      	ldr	r3, [pc, #64]	@ (8000b4c <_sbrk+0x64>)
 8000b0c:	681a      	ldr	r2, [r3, #0]
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	4413      	add	r3, r2
 8000b12:	693a      	ldr	r2, [r7, #16]
 8000b14:	429a      	cmp	r2, r3
 8000b16:	d207      	bcs.n	8000b28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b18:	f003 fb26 	bl	8004168 <__errno>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	220c      	movs	r2, #12
 8000b20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b22:	f04f 33ff 	mov.w	r3, #4294967295
 8000b26:	e009      	b.n	8000b3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b28:	4b08      	ldr	r3, [pc, #32]	@ (8000b4c <_sbrk+0x64>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b2e:	4b07      	ldr	r3, [pc, #28]	@ (8000b4c <_sbrk+0x64>)
 8000b30:	681a      	ldr	r2, [r3, #0]
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	4413      	add	r3, r2
 8000b36:	4a05      	ldr	r2, [pc, #20]	@ (8000b4c <_sbrk+0x64>)
 8000b38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b3a:	68fb      	ldr	r3, [r7, #12]
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	3718      	adds	r7, #24
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	20020000 	.word	0x20020000
 8000b48:	00000400 	.word	0x00000400
 8000b4c:	20000130 	.word	0x20000130
 8000b50:	200002d0 	.word	0x200002d0

08000b54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b58:	4b06      	ldr	r3, [pc, #24]	@ (8000b74 <SystemInit+0x20>)
 8000b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b5e:	4a05      	ldr	r2, [pc, #20]	@ (8000b74 <SystemInit+0x20>)
 8000b60:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b64:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b68:	bf00      	nop
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	e000ed00 	.word	0xe000ed00

08000b78 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b7c:	4b11      	ldr	r3, [pc, #68]	@ (8000bc4 <MX_USART2_UART_Init+0x4c>)
 8000b7e:	4a12      	ldr	r2, [pc, #72]	@ (8000bc8 <MX_USART2_UART_Init+0x50>)
 8000b80:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b82:	4b10      	ldr	r3, [pc, #64]	@ (8000bc4 <MX_USART2_UART_Init+0x4c>)
 8000b84:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b88:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b8a:	4b0e      	ldr	r3, [pc, #56]	@ (8000bc4 <MX_USART2_UART_Init+0x4c>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b90:	4b0c      	ldr	r3, [pc, #48]	@ (8000bc4 <MX_USART2_UART_Init+0x4c>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b96:	4b0b      	ldr	r3, [pc, #44]	@ (8000bc4 <MX_USART2_UART_Init+0x4c>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b9c:	4b09      	ldr	r3, [pc, #36]	@ (8000bc4 <MX_USART2_UART_Init+0x4c>)
 8000b9e:	220c      	movs	r2, #12
 8000ba0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ba2:	4b08      	ldr	r3, [pc, #32]	@ (8000bc4 <MX_USART2_UART_Init+0x4c>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ba8:	4b06      	ldr	r3, [pc, #24]	@ (8000bc4 <MX_USART2_UART_Init+0x4c>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bae:	4805      	ldr	r0, [pc, #20]	@ (8000bc4 <MX_USART2_UART_Init+0x4c>)
 8000bb0:	f002 f972 	bl	8002e98 <HAL_UART_Init>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000bba:	f7ff feab 	bl	8000914 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bbe:	bf00      	nop
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	20000134 	.word	0x20000134
 8000bc8:	40004400 	.word	0x40004400

08000bcc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b08a      	sub	sp, #40	@ 0x28
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd4:	f107 0314 	add.w	r3, r7, #20
 8000bd8:	2200      	movs	r2, #0
 8000bda:	601a      	str	r2, [r3, #0]
 8000bdc:	605a      	str	r2, [r3, #4]
 8000bde:	609a      	str	r2, [r3, #8]
 8000be0:	60da      	str	r2, [r3, #12]
 8000be2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a1d      	ldr	r2, [pc, #116]	@ (8000c60 <HAL_UART_MspInit+0x94>)
 8000bea:	4293      	cmp	r3, r2
 8000bec:	d133      	bne.n	8000c56 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bee:	2300      	movs	r3, #0
 8000bf0:	613b      	str	r3, [r7, #16]
 8000bf2:	4b1c      	ldr	r3, [pc, #112]	@ (8000c64 <HAL_UART_MspInit+0x98>)
 8000bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bf6:	4a1b      	ldr	r2, [pc, #108]	@ (8000c64 <HAL_UART_MspInit+0x98>)
 8000bf8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bfc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bfe:	4b19      	ldr	r3, [pc, #100]	@ (8000c64 <HAL_UART_MspInit+0x98>)
 8000c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c06:	613b      	str	r3, [r7, #16]
 8000c08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	60fb      	str	r3, [r7, #12]
 8000c0e:	4b15      	ldr	r3, [pc, #84]	@ (8000c64 <HAL_UART_MspInit+0x98>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c12:	4a14      	ldr	r2, [pc, #80]	@ (8000c64 <HAL_UART_MspInit+0x98>)
 8000c14:	f043 0301 	orr.w	r3, r3, #1
 8000c18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c1a:	4b12      	ldr	r3, [pc, #72]	@ (8000c64 <HAL_UART_MspInit+0x98>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c1e:	f003 0301 	and.w	r3, r3, #1
 8000c22:	60fb      	str	r3, [r7, #12]
 8000c24:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c26:	230c      	movs	r3, #12
 8000c28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2a:	2302      	movs	r3, #2
 8000c2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c32:	2303      	movs	r3, #3
 8000c34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c36:	2307      	movs	r3, #7
 8000c38:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c3a:	f107 0314 	add.w	r3, r7, #20
 8000c3e:	4619      	mov	r1, r3
 8000c40:	4809      	ldr	r0, [pc, #36]	@ (8000c68 <HAL_UART_MspInit+0x9c>)
 8000c42:	f001 fb0d 	bl	8002260 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000c46:	2200      	movs	r2, #0
 8000c48:	2100      	movs	r1, #0
 8000c4a:	2026      	movs	r0, #38	@ 0x26
 8000c4c:	f000 fecf 	bl	80019ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000c50:	2026      	movs	r0, #38	@ 0x26
 8000c52:	f000 fee8 	bl	8001a26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000c56:	bf00      	nop
 8000c58:	3728      	adds	r7, #40	@ 0x28
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	40004400 	.word	0x40004400
 8000c64:	40023800 	.word	0x40023800
 8000c68:	40020000 	.word	0x40020000

08000c6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c6c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ca4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c70:	f7ff ff70 	bl	8000b54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c74:	480c      	ldr	r0, [pc, #48]	@ (8000ca8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c76:	490d      	ldr	r1, [pc, #52]	@ (8000cac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c78:	4a0d      	ldr	r2, [pc, #52]	@ (8000cb0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c7c:	e002      	b.n	8000c84 <LoopCopyDataInit>

08000c7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c82:	3304      	adds	r3, #4

08000c84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c88:	d3f9      	bcc.n	8000c7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c8a:	4a0a      	ldr	r2, [pc, #40]	@ (8000cb4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c8c:	4c0a      	ldr	r4, [pc, #40]	@ (8000cb8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c90:	e001      	b.n	8000c96 <LoopFillZerobss>

08000c92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c94:	3204      	adds	r2, #4

08000c96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c98:	d3fb      	bcc.n	8000c92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c9a:	f003 fa6b 	bl	8004174 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c9e:	f7ff fda1 	bl	80007e4 <main>
  bx  lr    
 8000ca2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ca4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ca8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cac:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000cb0:	08004da8 	.word	0x08004da8
  ldr r2, =_sbss
 8000cb4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000cb8:	200002cc 	.word	0x200002cc

08000cbc <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cbc:	e7fe      	b.n	8000cbc <DMA1_Stream0_IRQHandler>
	...

08000cc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cc4:	4b0e      	ldr	r3, [pc, #56]	@ (8000d00 <HAL_Init+0x40>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a0d      	ldr	r2, [pc, #52]	@ (8000d00 <HAL_Init+0x40>)
 8000cca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000cce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cd0:	4b0b      	ldr	r3, [pc, #44]	@ (8000d00 <HAL_Init+0x40>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a0a      	ldr	r2, [pc, #40]	@ (8000d00 <HAL_Init+0x40>)
 8000cd6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000cda:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cdc:	4b08      	ldr	r3, [pc, #32]	@ (8000d00 <HAL_Init+0x40>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a07      	ldr	r2, [pc, #28]	@ (8000d00 <HAL_Init+0x40>)
 8000ce2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ce6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ce8:	2003      	movs	r0, #3
 8000cea:	f000 fe75 	bl	80019d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cee:	200f      	movs	r0, #15
 8000cf0:	f000 f808 	bl	8000d04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cf4:	f7ff fe14 	bl	8000920 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cf8:	2300      	movs	r3, #0
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	40023c00 	.word	0x40023c00

08000d04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d0c:	4b12      	ldr	r3, [pc, #72]	@ (8000d58 <HAL_InitTick+0x54>)
 8000d0e:	681a      	ldr	r2, [r3, #0]
 8000d10:	4b12      	ldr	r3, [pc, #72]	@ (8000d5c <HAL_InitTick+0x58>)
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	4619      	mov	r1, r3
 8000d16:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d22:	4618      	mov	r0, r3
 8000d24:	f000 fe8d 	bl	8001a42 <HAL_SYSTICK_Config>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	e00e      	b.n	8000d50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	2b0f      	cmp	r3, #15
 8000d36:	d80a      	bhi.n	8000d4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d38:	2200      	movs	r2, #0
 8000d3a:	6879      	ldr	r1, [r7, #4]
 8000d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d40:	f000 fe55 	bl	80019ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d44:	4a06      	ldr	r2, [pc, #24]	@ (8000d60 <HAL_InitTick+0x5c>)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	e000      	b.n	8000d50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d4e:	2301      	movs	r3, #1
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	3708      	adds	r7, #8
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	20000000 	.word	0x20000000
 8000d5c:	20000008 	.word	0x20000008
 8000d60:	20000004 	.word	0x20000004

08000d64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d68:	4b06      	ldr	r3, [pc, #24]	@ (8000d84 <HAL_IncTick+0x20>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	461a      	mov	r2, r3
 8000d6e:	4b06      	ldr	r3, [pc, #24]	@ (8000d88 <HAL_IncTick+0x24>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4413      	add	r3, r2
 8000d74:	4a04      	ldr	r2, [pc, #16]	@ (8000d88 <HAL_IncTick+0x24>)
 8000d76:	6013      	str	r3, [r2, #0]
}
 8000d78:	bf00      	nop
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	20000008 	.word	0x20000008
 8000d88:	2000017c 	.word	0x2000017c

08000d8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d90:	4b03      	ldr	r3, [pc, #12]	@ (8000da0 <HAL_GetTick+0x14>)
 8000d92:	681b      	ldr	r3, [r3, #0]
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	2000017c 	.word	0x2000017c

08000da4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b084      	sub	sp, #16
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dac:	f7ff ffee 	bl	8000d8c <HAL_GetTick>
 8000db0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dbc:	d005      	beq.n	8000dca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dbe:	4b0a      	ldr	r3, [pc, #40]	@ (8000de8 <HAL_Delay+0x44>)
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	461a      	mov	r2, r3
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	4413      	add	r3, r2
 8000dc8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000dca:	bf00      	nop
 8000dcc:	f7ff ffde 	bl	8000d8c <HAL_GetTick>
 8000dd0:	4602      	mov	r2, r0
 8000dd2:	68bb      	ldr	r3, [r7, #8]
 8000dd4:	1ad3      	subs	r3, r2, r3
 8000dd6:	68fa      	ldr	r2, [r7, #12]
 8000dd8:	429a      	cmp	r2, r3
 8000dda:	d8f7      	bhi.n	8000dcc <HAL_Delay+0x28>
  {
  }
}
 8000ddc:	bf00      	nop
 8000dde:	bf00      	nop
 8000de0:	3710      	adds	r7, #16
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	20000008 	.word	0x20000008

08000dec <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b084      	sub	sp, #16
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000df4:	2300      	movs	r3, #0
 8000df6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d101      	bne.n	8000e02 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	e033      	b.n	8000e6a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d109      	bne.n	8000e1e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000e0a:	6878      	ldr	r0, [r7, #4]
 8000e0c:	f7ff fc10 	bl	8000630 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	2200      	movs	r2, #0
 8000e14:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	2200      	movs	r2, #0
 8000e1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e22:	f003 0310 	and.w	r3, r3, #16
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d118      	bne.n	8000e5c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e2e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000e32:	f023 0302 	bic.w	r3, r3, #2
 8000e36:	f043 0202 	orr.w	r2, r3, #2
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8000e3e:	6878      	ldr	r0, [r7, #4]
 8000e40:	f000 fb72 	bl	8001528 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	2200      	movs	r2, #0
 8000e48:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e4e:	f023 0303 	bic.w	r3, r3, #3
 8000e52:	f043 0201 	orr.w	r2, r3, #1
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	641a      	str	r2, [r3, #64]	@ 0x40
 8000e5a:	e001      	b.n	8000e60 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	2200      	movs	r2, #0
 8000e64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000e68:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	3710      	adds	r7, #16
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}

08000e72 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8000e72:	b580      	push	{r7, lr}
 8000e74:	b086      	sub	sp, #24
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	617b      	str	r3, [r7, #20]
 8000e7e:	2300      	movs	r3, #0
 8000e80:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	f003 0302 	and.w	r3, r3, #2
 8000e98:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8000e9a:	68bb      	ldr	r3, [r7, #8]
 8000e9c:	f003 0320 	and.w	r3, r3, #32
 8000ea0:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d049      	beq.n	8000f3c <HAL_ADC_IRQHandler+0xca>
 8000ea8:	693b      	ldr	r3, [r7, #16]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d046      	beq.n	8000f3c <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eb2:	f003 0310 	and.w	r3, r3, #16
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d105      	bne.n	8000ec6 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ebe:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	689b      	ldr	r3, [r3, #8]
 8000ecc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d12b      	bne.n	8000f2c <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d127      	bne.n	8000f2c <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ee2:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d006      	beq.n	8000ef8 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	689b      	ldr	r3, [r3, #8]
 8000ef0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d119      	bne.n	8000f2c <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	685a      	ldr	r2, [r3, #4]
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f022 0220 	bic.w	r2, r2, #32
 8000f06:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f0c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f18:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d105      	bne.n	8000f2c <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f24:	f043 0201 	orr.w	r2, r3, #1
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8000f2c:	6878      	ldr	r0, [r7, #4]
 8000f2e:	f000 f9a1 	bl	8001274 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f06f 0212 	mvn.w	r2, #18
 8000f3a:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	f003 0304 	and.w	r3, r3, #4
 8000f42:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f4a:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d057      	beq.n	8001002 <HAL_ADC_IRQHandler+0x190>
 8000f52:	693b      	ldr	r3, [r7, #16]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d054      	beq.n	8001002 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f5c:	f003 0310 	and.w	r3, r3, #16
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d105      	bne.n	8000f70 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f68:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	689b      	ldr	r3, [r3, #8]
 8000f76:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d139      	bne.n	8000ff2 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000f84:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d006      	beq.n	8000f9a <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	689b      	ldr	r3, [r3, #8]
 8000f92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d12b      	bne.n	8000ff2 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d124      	bne.n	8000ff2 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	689b      	ldr	r3, [r3, #8]
 8000fae:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d11d      	bne.n	8000ff2 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d119      	bne.n	8000ff2 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	685a      	ldr	r2, [r3, #4]
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000fcc:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fd2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d105      	bne.n	8000ff2 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fea:	f043 0201 	orr.w	r2, r3, #1
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000ff2:	6878      	ldr	r0, [r7, #4]
 8000ff4:	f000 fc16 	bl	8001824 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f06f 020c 	mvn.w	r2, #12
 8001000:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	f003 0301 	and.w	r3, r3, #1
 8001008:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800100a:	68bb      	ldr	r3, [r7, #8]
 800100c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001010:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d017      	beq.n	8001048 <HAL_ADC_IRQHandler+0x1d6>
 8001018:	693b      	ldr	r3, [r7, #16]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d014      	beq.n	8001048 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f003 0301 	and.w	r3, r3, #1
 8001028:	2b01      	cmp	r3, #1
 800102a:	d10d      	bne.n	8001048 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001030:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001038:	6878      	ldr	r0, [r7, #4]
 800103a:	f000 f92f 	bl	800129c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f06f 0201 	mvn.w	r2, #1
 8001046:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	f003 0320 	and.w	r3, r3, #32
 800104e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001056:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d015      	beq.n	800108a <HAL_ADC_IRQHandler+0x218>
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d012      	beq.n	800108a <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001068:	f043 0202 	orr.w	r2, r3, #2
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f06f 0220 	mvn.w	r2, #32
 8001078:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 800107a:	6878      	ldr	r0, [r7, #4]
 800107c:	f000 f918 	bl	80012b0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f06f 0220 	mvn.w	r2, #32
 8001088:	601a      	str	r2, [r3, #0]
  }
}
 800108a:	bf00      	nop
 800108c:	3718      	adds	r7, #24
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
	...

08001094 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b086      	sub	sp, #24
 8001098:	af00      	add	r7, sp, #0
 800109a:	60f8      	str	r0, [r7, #12]
 800109c:	60b9      	str	r1, [r7, #8]
 800109e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80010a0:	2300      	movs	r3, #0
 80010a2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	d101      	bne.n	80010b2 <HAL_ADC_Start_DMA+0x1e>
 80010ae:	2302      	movs	r3, #2
 80010b0:	e0ce      	b.n	8001250 <HAL_ADC_Start_DMA+0x1bc>
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	2201      	movs	r2, #1
 80010b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	689b      	ldr	r3, [r3, #8]
 80010c0:	f003 0301 	and.w	r3, r3, #1
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	d018      	beq.n	80010fa <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	689a      	ldr	r2, [r3, #8]
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f042 0201 	orr.w	r2, r2, #1
 80010d6:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80010d8:	4b5f      	ldr	r3, [pc, #380]	@ (8001258 <HAL_ADC_Start_DMA+0x1c4>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a5f      	ldr	r2, [pc, #380]	@ (800125c <HAL_ADC_Start_DMA+0x1c8>)
 80010de:	fba2 2303 	umull	r2, r3, r2, r3
 80010e2:	0c9a      	lsrs	r2, r3, #18
 80010e4:	4613      	mov	r3, r2
 80010e6:	005b      	lsls	r3, r3, #1
 80010e8:	4413      	add	r3, r2
 80010ea:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80010ec:	e002      	b.n	80010f4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80010ee:	693b      	ldr	r3, [r7, #16]
 80010f0:	3b01      	subs	r3, #1
 80010f2:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d1f9      	bne.n	80010ee <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	689b      	ldr	r3, [r3, #8]
 8001100:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001104:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001108:	d107      	bne.n	800111a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	689a      	ldr	r2, [r3, #8]
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001118:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	689b      	ldr	r3, [r3, #8]
 8001120:	f003 0301 	and.w	r3, r3, #1
 8001124:	2b01      	cmp	r3, #1
 8001126:	f040 8086 	bne.w	8001236 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800112e:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001132:	f023 0301 	bic.w	r3, r3, #1
 8001136:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001148:	2b00      	cmp	r3, #0
 800114a:	d007      	beq.n	800115c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001150:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001154:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001160:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001164:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001168:	d106      	bne.n	8001178 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800116e:	f023 0206 	bic.w	r2, r3, #6
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	645a      	str	r2, [r3, #68]	@ 0x44
 8001176:	e002      	b.n	800117e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	2200      	movs	r2, #0
 800117c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	2200      	movs	r2, #0
 8001182:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001186:	4b36      	ldr	r3, [pc, #216]	@ (8001260 <HAL_ADC_Start_DMA+0x1cc>)
 8001188:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800118e:	4a35      	ldr	r2, [pc, #212]	@ (8001264 <HAL_ADC_Start_DMA+0x1d0>)
 8001190:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001196:	4a34      	ldr	r2, [pc, #208]	@ (8001268 <HAL_ADC_Start_DMA+0x1d4>)
 8001198:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800119e:	4a33      	ldr	r2, [pc, #204]	@ (800126c <HAL_ADC_Start_DMA+0x1d8>)
 80011a0:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80011aa:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	685a      	ldr	r2, [r3, #4]
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80011ba:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	689a      	ldr	r2, [r3, #8]
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80011ca:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	334c      	adds	r3, #76	@ 0x4c
 80011d6:	4619      	mov	r1, r3
 80011d8:	68ba      	ldr	r2, [r7, #8]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	f000 fcec 	bl	8001bb8 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	f003 031f 	and.w	r3, r3, #31
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d10f      	bne.n	800120c <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	689b      	ldr	r3, [r3, #8]
 80011f2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d129      	bne.n	800124e <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	689a      	ldr	r2, [r3, #8]
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001208:	609a      	str	r2, [r3, #8]
 800120a:	e020      	b.n	800124e <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a17      	ldr	r2, [pc, #92]	@ (8001270 <HAL_ADC_Start_DMA+0x1dc>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d11b      	bne.n	800124e <HAL_ADC_Start_DMA+0x1ba>
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	689b      	ldr	r3, [r3, #8]
 800121c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001220:	2b00      	cmp	r3, #0
 8001222:	d114      	bne.n	800124e <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	689a      	ldr	r2, [r3, #8]
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001232:	609a      	str	r2, [r3, #8]
 8001234:	e00b      	b.n	800124e <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800123a:	f043 0210 	orr.w	r2, r3, #16
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001246:	f043 0201 	orr.w	r2, r3, #1
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800124e:	2300      	movs	r3, #0
}
 8001250:	4618      	mov	r0, r3
 8001252:	3718      	adds	r7, #24
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	20000000 	.word	0x20000000
 800125c:	431bde83 	.word	0x431bde83
 8001260:	40012300 	.word	0x40012300
 8001264:	08001721 	.word	0x08001721
 8001268:	080017db 	.word	0x080017db
 800126c:	080017f7 	.word	0x080017f7
 8001270:	40012000 	.word	0x40012000

08001274 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800127c:	bf00      	nop
 800127e:	370c      	adds	r7, #12
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr

08001288 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001290:	bf00      	nop
 8001292:	370c      	adds	r7, #12
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr

0800129c <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80012a4:	bf00      	nop
 80012a6:	370c      	adds	r7, #12
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr

080012b0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80012b8:	bf00      	nop
 80012ba:	370c      	adds	r7, #12
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr

080012c4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b085      	sub	sp, #20
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
 80012cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80012ce:	2300      	movs	r3, #0
 80012d0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80012d8:	2b01      	cmp	r3, #1
 80012da:	d101      	bne.n	80012e0 <HAL_ADC_ConfigChannel+0x1c>
 80012dc:	2302      	movs	r3, #2
 80012de:	e113      	b.n	8001508 <HAL_ADC_ConfigChannel+0x244>
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2201      	movs	r2, #1
 80012e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	2b09      	cmp	r3, #9
 80012ee:	d925      	bls.n	800133c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	68d9      	ldr	r1, [r3, #12]
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	b29b      	uxth	r3, r3
 80012fc:	461a      	mov	r2, r3
 80012fe:	4613      	mov	r3, r2
 8001300:	005b      	lsls	r3, r3, #1
 8001302:	4413      	add	r3, r2
 8001304:	3b1e      	subs	r3, #30
 8001306:	2207      	movs	r2, #7
 8001308:	fa02 f303 	lsl.w	r3, r2, r3
 800130c:	43da      	mvns	r2, r3
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	400a      	ands	r2, r1
 8001314:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	68d9      	ldr	r1, [r3, #12]
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	689a      	ldr	r2, [r3, #8]
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	b29b      	uxth	r3, r3
 8001326:	4618      	mov	r0, r3
 8001328:	4603      	mov	r3, r0
 800132a:	005b      	lsls	r3, r3, #1
 800132c:	4403      	add	r3, r0
 800132e:	3b1e      	subs	r3, #30
 8001330:	409a      	lsls	r2, r3
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	430a      	orrs	r2, r1
 8001338:	60da      	str	r2, [r3, #12]
 800133a:	e022      	b.n	8001382 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	6919      	ldr	r1, [r3, #16]
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	b29b      	uxth	r3, r3
 8001348:	461a      	mov	r2, r3
 800134a:	4613      	mov	r3, r2
 800134c:	005b      	lsls	r3, r3, #1
 800134e:	4413      	add	r3, r2
 8001350:	2207      	movs	r2, #7
 8001352:	fa02 f303 	lsl.w	r3, r2, r3
 8001356:	43da      	mvns	r2, r3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	400a      	ands	r2, r1
 800135e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	6919      	ldr	r1, [r3, #16]
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	689a      	ldr	r2, [r3, #8]
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	b29b      	uxth	r3, r3
 8001370:	4618      	mov	r0, r3
 8001372:	4603      	mov	r3, r0
 8001374:	005b      	lsls	r3, r3, #1
 8001376:	4403      	add	r3, r0
 8001378:	409a      	lsls	r2, r3
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	430a      	orrs	r2, r1
 8001380:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	2b06      	cmp	r3, #6
 8001388:	d824      	bhi.n	80013d4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	685a      	ldr	r2, [r3, #4]
 8001394:	4613      	mov	r3, r2
 8001396:	009b      	lsls	r3, r3, #2
 8001398:	4413      	add	r3, r2
 800139a:	3b05      	subs	r3, #5
 800139c:	221f      	movs	r2, #31
 800139e:	fa02 f303 	lsl.w	r3, r2, r3
 80013a2:	43da      	mvns	r2, r3
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	400a      	ands	r2, r1
 80013aa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	b29b      	uxth	r3, r3
 80013b8:	4618      	mov	r0, r3
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	685a      	ldr	r2, [r3, #4]
 80013be:	4613      	mov	r3, r2
 80013c0:	009b      	lsls	r3, r3, #2
 80013c2:	4413      	add	r3, r2
 80013c4:	3b05      	subs	r3, #5
 80013c6:	fa00 f203 	lsl.w	r2, r0, r3
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	430a      	orrs	r2, r1
 80013d0:	635a      	str	r2, [r3, #52]	@ 0x34
 80013d2:	e04c      	b.n	800146e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	2b0c      	cmp	r3, #12
 80013da:	d824      	bhi.n	8001426 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	685a      	ldr	r2, [r3, #4]
 80013e6:	4613      	mov	r3, r2
 80013e8:	009b      	lsls	r3, r3, #2
 80013ea:	4413      	add	r3, r2
 80013ec:	3b23      	subs	r3, #35	@ 0x23
 80013ee:	221f      	movs	r2, #31
 80013f0:	fa02 f303 	lsl.w	r3, r2, r3
 80013f4:	43da      	mvns	r2, r3
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	400a      	ands	r2, r1
 80013fc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	b29b      	uxth	r3, r3
 800140a:	4618      	mov	r0, r3
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	685a      	ldr	r2, [r3, #4]
 8001410:	4613      	mov	r3, r2
 8001412:	009b      	lsls	r3, r3, #2
 8001414:	4413      	add	r3, r2
 8001416:	3b23      	subs	r3, #35	@ 0x23
 8001418:	fa00 f203 	lsl.w	r2, r0, r3
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	430a      	orrs	r2, r1
 8001422:	631a      	str	r2, [r3, #48]	@ 0x30
 8001424:	e023      	b.n	800146e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	685a      	ldr	r2, [r3, #4]
 8001430:	4613      	mov	r3, r2
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	4413      	add	r3, r2
 8001436:	3b41      	subs	r3, #65	@ 0x41
 8001438:	221f      	movs	r2, #31
 800143a:	fa02 f303 	lsl.w	r3, r2, r3
 800143e:	43da      	mvns	r2, r3
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	400a      	ands	r2, r1
 8001446:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	b29b      	uxth	r3, r3
 8001454:	4618      	mov	r0, r3
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	685a      	ldr	r2, [r3, #4]
 800145a:	4613      	mov	r3, r2
 800145c:	009b      	lsls	r3, r3, #2
 800145e:	4413      	add	r3, r2
 8001460:	3b41      	subs	r3, #65	@ 0x41
 8001462:	fa00 f203 	lsl.w	r2, r0, r3
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	430a      	orrs	r2, r1
 800146c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800146e:	4b29      	ldr	r3, [pc, #164]	@ (8001514 <HAL_ADC_ConfigChannel+0x250>)
 8001470:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a28      	ldr	r2, [pc, #160]	@ (8001518 <HAL_ADC_ConfigChannel+0x254>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d10f      	bne.n	800149c <HAL_ADC_ConfigChannel+0x1d8>
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	2b12      	cmp	r3, #18
 8001482:	d10b      	bne.n	800149c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a1d      	ldr	r2, [pc, #116]	@ (8001518 <HAL_ADC_ConfigChannel+0x254>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d12b      	bne.n	80014fe <HAL_ADC_ConfigChannel+0x23a>
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a1c      	ldr	r2, [pc, #112]	@ (800151c <HAL_ADC_ConfigChannel+0x258>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d003      	beq.n	80014b8 <HAL_ADC_ConfigChannel+0x1f4>
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	2b11      	cmp	r3, #17
 80014b6:	d122      	bne.n	80014fe <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a11      	ldr	r2, [pc, #68]	@ (800151c <HAL_ADC_ConfigChannel+0x258>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d111      	bne.n	80014fe <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80014da:	4b11      	ldr	r3, [pc, #68]	@ (8001520 <HAL_ADC_ConfigChannel+0x25c>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a11      	ldr	r2, [pc, #68]	@ (8001524 <HAL_ADC_ConfigChannel+0x260>)
 80014e0:	fba2 2303 	umull	r2, r3, r2, r3
 80014e4:	0c9a      	lsrs	r2, r3, #18
 80014e6:	4613      	mov	r3, r2
 80014e8:	009b      	lsls	r3, r3, #2
 80014ea:	4413      	add	r3, r2
 80014ec:	005b      	lsls	r3, r3, #1
 80014ee:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80014f0:	e002      	b.n	80014f8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80014f2:	68bb      	ldr	r3, [r7, #8]
 80014f4:	3b01      	subs	r3, #1
 80014f6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d1f9      	bne.n	80014f2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2200      	movs	r2, #0
 8001502:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001506:	2300      	movs	r3, #0
}
 8001508:	4618      	mov	r0, r3
 800150a:	3714      	adds	r7, #20
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr
 8001514:	40012300 	.word	0x40012300
 8001518:	40012000 	.word	0x40012000
 800151c:	10000012 	.word	0x10000012
 8001520:	20000000 	.word	0x20000000
 8001524:	431bde83 	.word	0x431bde83

08001528 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001528:	b480      	push	{r7}
 800152a:	b085      	sub	sp, #20
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001530:	4b79      	ldr	r3, [pc, #484]	@ (8001718 <ADC_Init+0x1f0>)
 8001532:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	685a      	ldr	r2, [r3, #4]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	431a      	orrs	r2, r3
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	685a      	ldr	r2, [r3, #4]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800155c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	6859      	ldr	r1, [r3, #4]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	691b      	ldr	r3, [r3, #16]
 8001568:	021a      	lsls	r2, r3, #8
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	430a      	orrs	r2, r1
 8001570:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	685a      	ldr	r2, [r3, #4]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001580:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	6859      	ldr	r1, [r3, #4]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	689a      	ldr	r2, [r3, #8]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	430a      	orrs	r2, r1
 8001592:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	689a      	ldr	r2, [r3, #8]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80015a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	6899      	ldr	r1, [r3, #8]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	68da      	ldr	r2, [r3, #12]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	430a      	orrs	r2, r1
 80015b4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015ba:	4a58      	ldr	r2, [pc, #352]	@ (800171c <ADC_Init+0x1f4>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d022      	beq.n	8001606 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	689a      	ldr	r2, [r3, #8]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80015ce:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	6899      	ldr	r1, [r3, #8]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	430a      	orrs	r2, r1
 80015e0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	689a      	ldr	r2, [r3, #8]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80015f0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	6899      	ldr	r1, [r3, #8]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	430a      	orrs	r2, r1
 8001602:	609a      	str	r2, [r3, #8]
 8001604:	e00f      	b.n	8001626 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	689a      	ldr	r2, [r3, #8]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001614:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	689a      	ldr	r2, [r3, #8]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001624:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	689a      	ldr	r2, [r3, #8]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f022 0202 	bic.w	r2, r2, #2
 8001634:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	6899      	ldr	r1, [r3, #8]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	7e1b      	ldrb	r3, [r3, #24]
 8001640:	005a      	lsls	r2, r3, #1
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	430a      	orrs	r2, r1
 8001648:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d01b      	beq.n	800168c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	685a      	ldr	r2, [r3, #4]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001662:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	685a      	ldr	r2, [r3, #4]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001672:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	6859      	ldr	r1, [r3, #4]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800167e:	3b01      	subs	r3, #1
 8001680:	035a      	lsls	r2, r3, #13
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	430a      	orrs	r2, r1
 8001688:	605a      	str	r2, [r3, #4]
 800168a:	e007      	b.n	800169c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	685a      	ldr	r2, [r3, #4]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800169a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80016aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	69db      	ldr	r3, [r3, #28]
 80016b6:	3b01      	subs	r3, #1
 80016b8:	051a      	lsls	r2, r3, #20
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	430a      	orrs	r2, r1
 80016c0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	689a      	ldr	r2, [r3, #8]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80016d0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	6899      	ldr	r1, [r3, #8]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80016de:	025a      	lsls	r2, r3, #9
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	430a      	orrs	r2, r1
 80016e6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	689a      	ldr	r2, [r3, #8]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80016f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	6899      	ldr	r1, [r3, #8]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	695b      	ldr	r3, [r3, #20]
 8001702:	029a      	lsls	r2, r3, #10
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	430a      	orrs	r2, r1
 800170a:	609a      	str	r2, [r3, #8]
}
 800170c:	bf00      	nop
 800170e:	3714      	adds	r7, #20
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr
 8001718:	40012300 	.word	0x40012300
 800171c:	0f000001 	.word	0x0f000001

08001720 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b084      	sub	sp, #16
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800172c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001732:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001736:	2b00      	cmp	r3, #0
 8001738:	d13c      	bne.n	80017b4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800173e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001750:	2b00      	cmp	r3, #0
 8001752:	d12b      	bne.n	80017ac <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001758:	2b00      	cmp	r3, #0
 800175a:	d127      	bne.n	80017ac <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001762:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001766:	2b00      	cmp	r3, #0
 8001768:	d006      	beq.n	8001778 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001774:	2b00      	cmp	r3, #0
 8001776:	d119      	bne.n	80017ac <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	685a      	ldr	r2, [r3, #4]
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f022 0220 	bic.w	r2, r2, #32
 8001786:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800178c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001798:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800179c:	2b00      	cmp	r3, #0
 800179e:	d105      	bne.n	80017ac <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017a4:	f043 0201 	orr.w	r2, r3, #1
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80017ac:	68f8      	ldr	r0, [r7, #12]
 80017ae:	f7ff fd61 	bl	8001274 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80017b2:	e00e      	b.n	80017d2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017b8:	f003 0310 	and.w	r3, r3, #16
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d003      	beq.n	80017c8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80017c0:	68f8      	ldr	r0, [r7, #12]
 80017c2:	f7ff fd75 	bl	80012b0 <HAL_ADC_ErrorCallback>
}
 80017c6:	e004      	b.n	80017d2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	4798      	blx	r3
}
 80017d2:	bf00      	nop
 80017d4:	3710      	adds	r7, #16
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}

080017da <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80017da:	b580      	push	{r7, lr}
 80017dc:	b084      	sub	sp, #16
 80017de:	af00      	add	r7, sp, #0
 80017e0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017e6:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80017e8:	68f8      	ldr	r0, [r7, #12]
 80017ea:	f7ff fd4d 	bl	8001288 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80017ee:	bf00      	nop
 80017f0:	3710      	adds	r7, #16
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}

080017f6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80017f6:	b580      	push	{r7, lr}
 80017f8:	b084      	sub	sp, #16
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001802:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	2240      	movs	r2, #64	@ 0x40
 8001808:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800180e:	f043 0204 	orr.w	r2, r3, #4
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001816:	68f8      	ldr	r0, [r7, #12]
 8001818:	f7ff fd4a 	bl	80012b0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800181c:	bf00      	nop
 800181e:	3710      	adds	r7, #16
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}

08001824 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800182c:	bf00      	nop
 800182e:	370c      	adds	r7, #12
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr

08001838 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001838:	b480      	push	{r7}
 800183a:	b085      	sub	sp, #20
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	f003 0307 	and.w	r3, r3, #7
 8001846:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001848:	4b0c      	ldr	r3, [pc, #48]	@ (800187c <__NVIC_SetPriorityGrouping+0x44>)
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800184e:	68ba      	ldr	r2, [r7, #8]
 8001850:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001854:	4013      	ands	r3, r2
 8001856:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001860:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001864:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001868:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800186a:	4a04      	ldr	r2, [pc, #16]	@ (800187c <__NVIC_SetPriorityGrouping+0x44>)
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	60d3      	str	r3, [r2, #12]
}
 8001870:	bf00      	nop
 8001872:	3714      	adds	r7, #20
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr
 800187c:	e000ed00 	.word	0xe000ed00

08001880 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001884:	4b04      	ldr	r3, [pc, #16]	@ (8001898 <__NVIC_GetPriorityGrouping+0x18>)
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	0a1b      	lsrs	r3, r3, #8
 800188a:	f003 0307 	and.w	r3, r3, #7
}
 800188e:	4618      	mov	r0, r3
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr
 8001898:	e000ed00 	.word	0xe000ed00

0800189c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	4603      	mov	r3, r0
 80018a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	db0b      	blt.n	80018c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018ae:	79fb      	ldrb	r3, [r7, #7]
 80018b0:	f003 021f 	and.w	r2, r3, #31
 80018b4:	4907      	ldr	r1, [pc, #28]	@ (80018d4 <__NVIC_EnableIRQ+0x38>)
 80018b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ba:	095b      	lsrs	r3, r3, #5
 80018bc:	2001      	movs	r0, #1
 80018be:	fa00 f202 	lsl.w	r2, r0, r2
 80018c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80018c6:	bf00      	nop
 80018c8:	370c      	adds	r7, #12
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	e000e100 	.word	0xe000e100

080018d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	4603      	mov	r3, r0
 80018e0:	6039      	str	r1, [r7, #0]
 80018e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	db0a      	blt.n	8001902 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	b2da      	uxtb	r2, r3
 80018f0:	490c      	ldr	r1, [pc, #48]	@ (8001924 <__NVIC_SetPriority+0x4c>)
 80018f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f6:	0112      	lsls	r2, r2, #4
 80018f8:	b2d2      	uxtb	r2, r2
 80018fa:	440b      	add	r3, r1
 80018fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001900:	e00a      	b.n	8001918 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	b2da      	uxtb	r2, r3
 8001906:	4908      	ldr	r1, [pc, #32]	@ (8001928 <__NVIC_SetPriority+0x50>)
 8001908:	79fb      	ldrb	r3, [r7, #7]
 800190a:	f003 030f 	and.w	r3, r3, #15
 800190e:	3b04      	subs	r3, #4
 8001910:	0112      	lsls	r2, r2, #4
 8001912:	b2d2      	uxtb	r2, r2
 8001914:	440b      	add	r3, r1
 8001916:	761a      	strb	r2, [r3, #24]
}
 8001918:	bf00      	nop
 800191a:	370c      	adds	r7, #12
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr
 8001924:	e000e100 	.word	0xe000e100
 8001928:	e000ed00 	.word	0xe000ed00

0800192c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800192c:	b480      	push	{r7}
 800192e:	b089      	sub	sp, #36	@ 0x24
 8001930:	af00      	add	r7, sp, #0
 8001932:	60f8      	str	r0, [r7, #12]
 8001934:	60b9      	str	r1, [r7, #8]
 8001936:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	f003 0307 	and.w	r3, r3, #7
 800193e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001940:	69fb      	ldr	r3, [r7, #28]
 8001942:	f1c3 0307 	rsb	r3, r3, #7
 8001946:	2b04      	cmp	r3, #4
 8001948:	bf28      	it	cs
 800194a:	2304      	movcs	r3, #4
 800194c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	3304      	adds	r3, #4
 8001952:	2b06      	cmp	r3, #6
 8001954:	d902      	bls.n	800195c <NVIC_EncodePriority+0x30>
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	3b03      	subs	r3, #3
 800195a:	e000      	b.n	800195e <NVIC_EncodePriority+0x32>
 800195c:	2300      	movs	r3, #0
 800195e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001960:	f04f 32ff 	mov.w	r2, #4294967295
 8001964:	69bb      	ldr	r3, [r7, #24]
 8001966:	fa02 f303 	lsl.w	r3, r2, r3
 800196a:	43da      	mvns	r2, r3
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	401a      	ands	r2, r3
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001974:	f04f 31ff 	mov.w	r1, #4294967295
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	fa01 f303 	lsl.w	r3, r1, r3
 800197e:	43d9      	mvns	r1, r3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001984:	4313      	orrs	r3, r2
         );
}
 8001986:	4618      	mov	r0, r3
 8001988:	3724      	adds	r7, #36	@ 0x24
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
	...

08001994 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	3b01      	subs	r3, #1
 80019a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80019a4:	d301      	bcc.n	80019aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019a6:	2301      	movs	r3, #1
 80019a8:	e00f      	b.n	80019ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019aa:	4a0a      	ldr	r2, [pc, #40]	@ (80019d4 <SysTick_Config+0x40>)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	3b01      	subs	r3, #1
 80019b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019b2:	210f      	movs	r1, #15
 80019b4:	f04f 30ff 	mov.w	r0, #4294967295
 80019b8:	f7ff ff8e 	bl	80018d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019bc:	4b05      	ldr	r3, [pc, #20]	@ (80019d4 <SysTick_Config+0x40>)
 80019be:	2200      	movs	r2, #0
 80019c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019c2:	4b04      	ldr	r3, [pc, #16]	@ (80019d4 <SysTick_Config+0x40>)
 80019c4:	2207      	movs	r2, #7
 80019c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019c8:	2300      	movs	r3, #0
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3708      	adds	r7, #8
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	e000e010 	.word	0xe000e010

080019d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	f7ff ff29 	bl	8001838 <__NVIC_SetPriorityGrouping>
}
 80019e6:	bf00      	nop
 80019e8:	3708      	adds	r7, #8
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}

080019ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019ee:	b580      	push	{r7, lr}
 80019f0:	b086      	sub	sp, #24
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	4603      	mov	r3, r0
 80019f6:	60b9      	str	r1, [r7, #8]
 80019f8:	607a      	str	r2, [r7, #4]
 80019fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019fc:	2300      	movs	r3, #0
 80019fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a00:	f7ff ff3e 	bl	8001880 <__NVIC_GetPriorityGrouping>
 8001a04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a06:	687a      	ldr	r2, [r7, #4]
 8001a08:	68b9      	ldr	r1, [r7, #8]
 8001a0a:	6978      	ldr	r0, [r7, #20]
 8001a0c:	f7ff ff8e 	bl	800192c <NVIC_EncodePriority>
 8001a10:	4602      	mov	r2, r0
 8001a12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a16:	4611      	mov	r1, r2
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f7ff ff5d 	bl	80018d8 <__NVIC_SetPriority>
}
 8001a1e:	bf00      	nop
 8001a20:	3718      	adds	r7, #24
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}

08001a26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a26:	b580      	push	{r7, lr}
 8001a28:	b082      	sub	sp, #8
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7ff ff31 	bl	800189c <__NVIC_EnableIRQ>
}
 8001a3a:	bf00      	nop
 8001a3c:	3708      	adds	r7, #8
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}

08001a42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a42:	b580      	push	{r7, lr}
 8001a44:	b082      	sub	sp, #8
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f7ff ffa2 	bl	8001994 <SysTick_Config>
 8001a50:	4603      	mov	r3, r0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3708      	adds	r7, #8
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
	...

08001a5c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b086      	sub	sp, #24
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001a64:	2300      	movs	r3, #0
 8001a66:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001a68:	f7ff f990 	bl	8000d8c <HAL_GetTick>
 8001a6c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d101      	bne.n	8001a78 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001a74:	2301      	movs	r3, #1
 8001a76:	e099      	b.n	8001bac <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2202      	movs	r2, #2
 8001a7c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2200      	movs	r2, #0
 8001a84:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f022 0201 	bic.w	r2, r2, #1
 8001a96:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a98:	e00f      	b.n	8001aba <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a9a:	f7ff f977 	bl	8000d8c <HAL_GetTick>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	1ad3      	subs	r3, r2, r3
 8001aa4:	2b05      	cmp	r3, #5
 8001aa6:	d908      	bls.n	8001aba <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2220      	movs	r2, #32
 8001aac:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2203      	movs	r2, #3
 8001ab2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e078      	b.n	8001bac <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 0301 	and.w	r3, r3, #1
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d1e8      	bne.n	8001a9a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001ad0:	697a      	ldr	r2, [r7, #20]
 8001ad2:	4b38      	ldr	r3, [pc, #224]	@ (8001bb4 <HAL_DMA_Init+0x158>)
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	685a      	ldr	r2, [r3, #4]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ae6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	691b      	ldr	r3, [r3, #16]
 8001aec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001af2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	699b      	ldr	r3, [r3, #24]
 8001af8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001afe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6a1b      	ldr	r3, [r3, #32]
 8001b04:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b06:	697a      	ldr	r2, [r7, #20]
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b10:	2b04      	cmp	r3, #4
 8001b12:	d107      	bne.n	8001b24 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	697a      	ldr	r2, [r7, #20]
 8001b20:	4313      	orrs	r3, r2
 8001b22:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	697a      	ldr	r2, [r7, #20]
 8001b2a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	695b      	ldr	r3, [r3, #20]
 8001b32:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	f023 0307 	bic.w	r3, r3, #7
 8001b3a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b40:	697a      	ldr	r2, [r7, #20]
 8001b42:	4313      	orrs	r3, r2
 8001b44:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b4a:	2b04      	cmp	r3, #4
 8001b4c:	d117      	bne.n	8001b7e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b52:	697a      	ldr	r2, [r7, #20]
 8001b54:	4313      	orrs	r3, r2
 8001b56:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d00e      	beq.n	8001b7e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001b60:	6878      	ldr	r0, [r7, #4]
 8001b62:	f000 fb01 	bl	8002168 <DMA_CheckFifoParam>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d008      	beq.n	8001b7e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2240      	movs	r2, #64	@ 0x40
 8001b70:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2201      	movs	r2, #1
 8001b76:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e016      	b.n	8001bac <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	697a      	ldr	r2, [r7, #20]
 8001b84:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f000 fab8 	bl	80020fc <DMA_CalcBaseAndBitshift>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b94:	223f      	movs	r2, #63	@ 0x3f
 8001b96:	409a      	lsls	r2, r3
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001baa:	2300      	movs	r3, #0
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	3718      	adds	r7, #24
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	f010803f 	.word	0xf010803f

08001bb8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b086      	sub	sp, #24
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	60f8      	str	r0, [r7, #12]
 8001bc0:	60b9      	str	r1, [r7, #8]
 8001bc2:	607a      	str	r2, [r7, #4]
 8001bc4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bce:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d101      	bne.n	8001bde <HAL_DMA_Start_IT+0x26>
 8001bda:	2302      	movs	r3, #2
 8001bdc:	e040      	b.n	8001c60 <HAL_DMA_Start_IT+0xa8>
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	2201      	movs	r2, #1
 8001be2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d12f      	bne.n	8001c52 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	2202      	movs	r2, #2
 8001bf6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	687a      	ldr	r2, [r7, #4]
 8001c04:	68b9      	ldr	r1, [r7, #8]
 8001c06:	68f8      	ldr	r0, [r7, #12]
 8001c08:	f000 fa4a 	bl	80020a0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c10:	223f      	movs	r2, #63	@ 0x3f
 8001c12:	409a      	lsls	r2, r3
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f042 0216 	orr.w	r2, r2, #22
 8001c26:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d007      	beq.n	8001c40 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f042 0208 	orr.w	r2, r2, #8
 8001c3e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f042 0201 	orr.w	r2, r2, #1
 8001c4e:	601a      	str	r2, [r3, #0]
 8001c50:	e005      	b.n	8001c5e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	2200      	movs	r2, #0
 8001c56:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001c5a:	2302      	movs	r3, #2
 8001c5c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001c5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3718      	adds	r7, #24
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}

08001c68 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b084      	sub	sp, #16
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c74:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001c76:	f7ff f889 	bl	8000d8c <HAL_GetTick>
 8001c7a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	2b02      	cmp	r3, #2
 8001c86:	d008      	beq.n	8001c9a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2280      	movs	r2, #128	@ 0x80
 8001c8c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2200      	movs	r2, #0
 8001c92:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e052      	b.n	8001d40 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f022 0216 	bic.w	r2, r2, #22
 8001ca8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	695a      	ldr	r2, [r3, #20]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001cb8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d103      	bne.n	8001cca <HAL_DMA_Abort+0x62>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d007      	beq.n	8001cda <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f022 0208 	bic.w	r2, r2, #8
 8001cd8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f022 0201 	bic.w	r2, r2, #1
 8001ce8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cea:	e013      	b.n	8001d14 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001cec:	f7ff f84e 	bl	8000d8c <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	2b05      	cmp	r3, #5
 8001cf8:	d90c      	bls.n	8001d14 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2220      	movs	r2, #32
 8001cfe:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2203      	movs	r2, #3
 8001d04:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001d10:	2303      	movs	r3, #3
 8001d12:	e015      	b.n	8001d40 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0301 	and.w	r3, r3, #1
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d1e4      	bne.n	8001cec <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d26:	223f      	movs	r2, #63	@ 0x3f
 8001d28:	409a      	lsls	r2, r3
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2201      	movs	r2, #1
 8001d32:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001d3e:	2300      	movs	r3, #0
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3710      	adds	r7, #16
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}

08001d48 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	2b02      	cmp	r3, #2
 8001d5a:	d004      	beq.n	8001d66 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2280      	movs	r2, #128	@ 0x80
 8001d60:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e00c      	b.n	8001d80 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2205      	movs	r2, #5
 8001d6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f022 0201 	bic.w	r2, r2, #1
 8001d7c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001d7e:	2300      	movs	r3, #0
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	370c      	adds	r7, #12
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr

08001d8c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b086      	sub	sp, #24
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001d94:	2300      	movs	r3, #0
 8001d96:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001d98:	4b8e      	ldr	r3, [pc, #568]	@ (8001fd4 <HAL_DMA_IRQHandler+0x248>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a8e      	ldr	r2, [pc, #568]	@ (8001fd8 <HAL_DMA_IRQHandler+0x24c>)
 8001d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8001da2:	0a9b      	lsrs	r3, r3, #10
 8001da4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001daa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001db6:	2208      	movs	r2, #8
 8001db8:	409a      	lsls	r2, r3
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d01a      	beq.n	8001df8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 0304 	and.w	r3, r3, #4
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d013      	beq.n	8001df8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f022 0204 	bic.w	r2, r2, #4
 8001dde:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001de4:	2208      	movs	r2, #8
 8001de6:	409a      	lsls	r2, r3
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001df0:	f043 0201 	orr.w	r2, r3, #1
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	409a      	lsls	r2, r3
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	4013      	ands	r3, r2
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d012      	beq.n	8001e2e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	695b      	ldr	r3, [r3, #20]
 8001e0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d00b      	beq.n	8001e2e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	409a      	lsls	r2, r3
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e26:	f043 0202 	orr.w	r2, r3, #2
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e32:	2204      	movs	r2, #4
 8001e34:	409a      	lsls	r2, r3
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	4013      	ands	r3, r2
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d012      	beq.n	8001e64 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 0302 	and.w	r3, r3, #2
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d00b      	beq.n	8001e64 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e50:	2204      	movs	r2, #4
 8001e52:	409a      	lsls	r2, r3
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e5c:	f043 0204 	orr.w	r2, r3, #4
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e68:	2210      	movs	r2, #16
 8001e6a:	409a      	lsls	r2, r3
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	4013      	ands	r3, r2
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d043      	beq.n	8001efc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0308 	and.w	r3, r3, #8
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d03c      	beq.n	8001efc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e86:	2210      	movs	r2, #16
 8001e88:	409a      	lsls	r2, r3
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d018      	beq.n	8001ece <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d108      	bne.n	8001ebc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d024      	beq.n	8001efc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	4798      	blx	r3
 8001eba:	e01f      	b.n	8001efc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d01b      	beq.n	8001efc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ec8:	6878      	ldr	r0, [r7, #4]
 8001eca:	4798      	blx	r3
 8001ecc:	e016      	b.n	8001efc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d107      	bne.n	8001eec <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f022 0208 	bic.w	r2, r2, #8
 8001eea:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d003      	beq.n	8001efc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f00:	2220      	movs	r2, #32
 8001f02:	409a      	lsls	r2, r3
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	4013      	ands	r3, r2
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	f000 808f 	beq.w	800202c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 0310 	and.w	r3, r3, #16
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	f000 8087 	beq.w	800202c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f22:	2220      	movs	r2, #32
 8001f24:	409a      	lsls	r2, r3
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	2b05      	cmp	r3, #5
 8001f34:	d136      	bne.n	8001fa4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f022 0216 	bic.w	r2, r2, #22
 8001f44:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	695a      	ldr	r2, [r3, #20]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001f54:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d103      	bne.n	8001f66 <HAL_DMA_IRQHandler+0x1da>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d007      	beq.n	8001f76 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f022 0208 	bic.w	r2, r2, #8
 8001f74:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f7a:	223f      	movs	r2, #63	@ 0x3f
 8001f7c:	409a      	lsls	r2, r3
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2201      	movs	r2, #1
 8001f86:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d07e      	beq.n	8002098 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	4798      	blx	r3
        }
        return;
 8001fa2:	e079      	b.n	8002098 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d01d      	beq.n	8001fee <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d10d      	bne.n	8001fdc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d031      	beq.n	800202c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	4798      	blx	r3
 8001fd0:	e02c      	b.n	800202c <HAL_DMA_IRQHandler+0x2a0>
 8001fd2:	bf00      	nop
 8001fd4:	20000000 	.word	0x20000000
 8001fd8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d023      	beq.n	800202c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fe8:	6878      	ldr	r0, [r7, #4]
 8001fea:	4798      	blx	r3
 8001fec:	e01e      	b.n	800202c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d10f      	bne.n	800201c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f022 0210 	bic.w	r2, r2, #16
 800200a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2201      	movs	r2, #1
 8002010:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2200      	movs	r2, #0
 8002018:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002020:	2b00      	cmp	r3, #0
 8002022:	d003      	beq.n	800202c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002030:	2b00      	cmp	r3, #0
 8002032:	d032      	beq.n	800209a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002038:	f003 0301 	and.w	r3, r3, #1
 800203c:	2b00      	cmp	r3, #0
 800203e:	d022      	beq.n	8002086 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2205      	movs	r2, #5
 8002044:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f022 0201 	bic.w	r2, r2, #1
 8002056:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	3301      	adds	r3, #1
 800205c:	60bb      	str	r3, [r7, #8]
 800205e:	697a      	ldr	r2, [r7, #20]
 8002060:	429a      	cmp	r2, r3
 8002062:	d307      	bcc.n	8002074 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0301 	and.w	r3, r3, #1
 800206e:	2b00      	cmp	r3, #0
 8002070:	d1f2      	bne.n	8002058 <HAL_DMA_IRQHandler+0x2cc>
 8002072:	e000      	b.n	8002076 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002074:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2201      	movs	r2, #1
 800207a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2200      	movs	r2, #0
 8002082:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800208a:	2b00      	cmp	r3, #0
 800208c:	d005      	beq.n	800209a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	4798      	blx	r3
 8002096:	e000      	b.n	800209a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002098:	bf00      	nop
    }
  }
}
 800209a:	3718      	adds	r7, #24
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}

080020a0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b085      	sub	sp, #20
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	60f8      	str	r0, [r7, #12]
 80020a8:	60b9      	str	r1, [r7, #8]
 80020aa:	607a      	str	r2, [r7, #4]
 80020ac:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80020bc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	683a      	ldr	r2, [r7, #0]
 80020c4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	2b40      	cmp	r3, #64	@ 0x40
 80020cc:	d108      	bne.n	80020e0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	687a      	ldr	r2, [r7, #4]
 80020d4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	68ba      	ldr	r2, [r7, #8]
 80020dc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80020de:	e007      	b.n	80020f0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	68ba      	ldr	r2, [r7, #8]
 80020e6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	687a      	ldr	r2, [r7, #4]
 80020ee:	60da      	str	r2, [r3, #12]
}
 80020f0:	bf00      	nop
 80020f2:	3714      	adds	r7, #20
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr

080020fc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b085      	sub	sp, #20
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	b2db      	uxtb	r3, r3
 800210a:	3b10      	subs	r3, #16
 800210c:	4a14      	ldr	r2, [pc, #80]	@ (8002160 <DMA_CalcBaseAndBitshift+0x64>)
 800210e:	fba2 2303 	umull	r2, r3, r2, r3
 8002112:	091b      	lsrs	r3, r3, #4
 8002114:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002116:	4a13      	ldr	r2, [pc, #76]	@ (8002164 <DMA_CalcBaseAndBitshift+0x68>)
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	4413      	add	r3, r2
 800211c:	781b      	ldrb	r3, [r3, #0]
 800211e:	461a      	mov	r2, r3
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	2b03      	cmp	r3, #3
 8002128:	d909      	bls.n	800213e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002132:	f023 0303 	bic.w	r3, r3, #3
 8002136:	1d1a      	adds	r2, r3, #4
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	659a      	str	r2, [r3, #88]	@ 0x58
 800213c:	e007      	b.n	800214e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002146:	f023 0303 	bic.w	r3, r3, #3
 800214a:	687a      	ldr	r2, [r7, #4]
 800214c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002152:	4618      	mov	r0, r3
 8002154:	3714      	adds	r7, #20
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr
 800215e:	bf00      	nop
 8002160:	aaaaaaab 	.word	0xaaaaaaab
 8002164:	08004d5c 	.word	0x08004d5c

08002168 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002168:	b480      	push	{r7}
 800216a:	b085      	sub	sp, #20
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002170:	2300      	movs	r3, #0
 8002172:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002178:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	699b      	ldr	r3, [r3, #24]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d11f      	bne.n	80021c2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	2b03      	cmp	r3, #3
 8002186:	d856      	bhi.n	8002236 <DMA_CheckFifoParam+0xce>
 8002188:	a201      	add	r2, pc, #4	@ (adr r2, 8002190 <DMA_CheckFifoParam+0x28>)
 800218a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800218e:	bf00      	nop
 8002190:	080021a1 	.word	0x080021a1
 8002194:	080021b3 	.word	0x080021b3
 8002198:	080021a1 	.word	0x080021a1
 800219c:	08002237 	.word	0x08002237
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021a4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d046      	beq.n	800223a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021b0:	e043      	b.n	800223a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021b6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80021ba:	d140      	bne.n	800223e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021c0:	e03d      	b.n	800223e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	699b      	ldr	r3, [r3, #24]
 80021c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80021ca:	d121      	bne.n	8002210 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	2b03      	cmp	r3, #3
 80021d0:	d837      	bhi.n	8002242 <DMA_CheckFifoParam+0xda>
 80021d2:	a201      	add	r2, pc, #4	@ (adr r2, 80021d8 <DMA_CheckFifoParam+0x70>)
 80021d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021d8:	080021e9 	.word	0x080021e9
 80021dc:	080021ef 	.word	0x080021ef
 80021e0:	080021e9 	.word	0x080021e9
 80021e4:	08002201 	.word	0x08002201
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	73fb      	strb	r3, [r7, #15]
      break;
 80021ec:	e030      	b.n	8002250 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021f2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d025      	beq.n	8002246 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021fe:	e022      	b.n	8002246 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002204:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002208:	d11f      	bne.n	800224a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800220e:	e01c      	b.n	800224a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	2b02      	cmp	r3, #2
 8002214:	d903      	bls.n	800221e <DMA_CheckFifoParam+0xb6>
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	2b03      	cmp	r3, #3
 800221a:	d003      	beq.n	8002224 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800221c:	e018      	b.n	8002250 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	73fb      	strb	r3, [r7, #15]
      break;
 8002222:	e015      	b.n	8002250 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002228:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800222c:	2b00      	cmp	r3, #0
 800222e:	d00e      	beq.n	800224e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	73fb      	strb	r3, [r7, #15]
      break;
 8002234:	e00b      	b.n	800224e <DMA_CheckFifoParam+0xe6>
      break;
 8002236:	bf00      	nop
 8002238:	e00a      	b.n	8002250 <DMA_CheckFifoParam+0xe8>
      break;
 800223a:	bf00      	nop
 800223c:	e008      	b.n	8002250 <DMA_CheckFifoParam+0xe8>
      break;
 800223e:	bf00      	nop
 8002240:	e006      	b.n	8002250 <DMA_CheckFifoParam+0xe8>
      break;
 8002242:	bf00      	nop
 8002244:	e004      	b.n	8002250 <DMA_CheckFifoParam+0xe8>
      break;
 8002246:	bf00      	nop
 8002248:	e002      	b.n	8002250 <DMA_CheckFifoParam+0xe8>
      break;   
 800224a:	bf00      	nop
 800224c:	e000      	b.n	8002250 <DMA_CheckFifoParam+0xe8>
      break;
 800224e:	bf00      	nop
    }
  } 
  
  return status; 
 8002250:	7bfb      	ldrb	r3, [r7, #15]
}
 8002252:	4618      	mov	r0, r3
 8002254:	3714      	adds	r7, #20
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr
 800225e:	bf00      	nop

08002260 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002260:	b480      	push	{r7}
 8002262:	b089      	sub	sp, #36	@ 0x24
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800226a:	2300      	movs	r3, #0
 800226c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800226e:	2300      	movs	r3, #0
 8002270:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002272:	2300      	movs	r3, #0
 8002274:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002276:	2300      	movs	r3, #0
 8002278:	61fb      	str	r3, [r7, #28]
 800227a:	e159      	b.n	8002530 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800227c:	2201      	movs	r2, #1
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	fa02 f303 	lsl.w	r3, r2, r3
 8002284:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	697a      	ldr	r2, [r7, #20]
 800228c:	4013      	ands	r3, r2
 800228e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002290:	693a      	ldr	r2, [r7, #16]
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	429a      	cmp	r2, r3
 8002296:	f040 8148 	bne.w	800252a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	f003 0303 	and.w	r3, r3, #3
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d005      	beq.n	80022b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	d130      	bne.n	8002314 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022b8:	69fb      	ldr	r3, [r7, #28]
 80022ba:	005b      	lsls	r3, r3, #1
 80022bc:	2203      	movs	r2, #3
 80022be:	fa02 f303 	lsl.w	r3, r2, r3
 80022c2:	43db      	mvns	r3, r3
 80022c4:	69ba      	ldr	r2, [r7, #24]
 80022c6:	4013      	ands	r3, r2
 80022c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	68da      	ldr	r2, [r3, #12]
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	005b      	lsls	r3, r3, #1
 80022d2:	fa02 f303 	lsl.w	r3, r2, r3
 80022d6:	69ba      	ldr	r2, [r7, #24]
 80022d8:	4313      	orrs	r3, r2
 80022da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	69ba      	ldr	r2, [r7, #24]
 80022e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022e8:	2201      	movs	r2, #1
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	fa02 f303 	lsl.w	r3, r2, r3
 80022f0:	43db      	mvns	r3, r3
 80022f2:	69ba      	ldr	r2, [r7, #24]
 80022f4:	4013      	ands	r3, r2
 80022f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	091b      	lsrs	r3, r3, #4
 80022fe:	f003 0201 	and.w	r2, r3, #1
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	fa02 f303 	lsl.w	r3, r2, r3
 8002308:	69ba      	ldr	r2, [r7, #24]
 800230a:	4313      	orrs	r3, r2
 800230c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	69ba      	ldr	r2, [r7, #24]
 8002312:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	f003 0303 	and.w	r3, r3, #3
 800231c:	2b03      	cmp	r3, #3
 800231e:	d017      	beq.n	8002350 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	005b      	lsls	r3, r3, #1
 800232a:	2203      	movs	r2, #3
 800232c:	fa02 f303 	lsl.w	r3, r2, r3
 8002330:	43db      	mvns	r3, r3
 8002332:	69ba      	ldr	r2, [r7, #24]
 8002334:	4013      	ands	r3, r2
 8002336:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	689a      	ldr	r2, [r3, #8]
 800233c:	69fb      	ldr	r3, [r7, #28]
 800233e:	005b      	lsls	r3, r3, #1
 8002340:	fa02 f303 	lsl.w	r3, r2, r3
 8002344:	69ba      	ldr	r2, [r7, #24]
 8002346:	4313      	orrs	r3, r2
 8002348:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	69ba      	ldr	r2, [r7, #24]
 800234e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f003 0303 	and.w	r3, r3, #3
 8002358:	2b02      	cmp	r3, #2
 800235a:	d123      	bne.n	80023a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800235c:	69fb      	ldr	r3, [r7, #28]
 800235e:	08da      	lsrs	r2, r3, #3
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	3208      	adds	r2, #8
 8002364:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002368:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	f003 0307 	and.w	r3, r3, #7
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	220f      	movs	r2, #15
 8002374:	fa02 f303 	lsl.w	r3, r2, r3
 8002378:	43db      	mvns	r3, r3
 800237a:	69ba      	ldr	r2, [r7, #24]
 800237c:	4013      	ands	r3, r2
 800237e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	691a      	ldr	r2, [r3, #16]
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	f003 0307 	and.w	r3, r3, #7
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	fa02 f303 	lsl.w	r3, r2, r3
 8002390:	69ba      	ldr	r2, [r7, #24]
 8002392:	4313      	orrs	r3, r2
 8002394:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	08da      	lsrs	r2, r3, #3
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	3208      	adds	r2, #8
 800239e:	69b9      	ldr	r1, [r7, #24]
 80023a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	005b      	lsls	r3, r3, #1
 80023ae:	2203      	movs	r2, #3
 80023b0:	fa02 f303 	lsl.w	r3, r2, r3
 80023b4:	43db      	mvns	r3, r3
 80023b6:	69ba      	ldr	r2, [r7, #24]
 80023b8:	4013      	ands	r3, r2
 80023ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f003 0203 	and.w	r2, r3, #3
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	005b      	lsls	r3, r3, #1
 80023c8:	fa02 f303 	lsl.w	r3, r2, r3
 80023cc:	69ba      	ldr	r2, [r7, #24]
 80023ce:	4313      	orrs	r3, r2
 80023d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	69ba      	ldr	r2, [r7, #24]
 80023d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	f000 80a2 	beq.w	800252a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023e6:	2300      	movs	r3, #0
 80023e8:	60fb      	str	r3, [r7, #12]
 80023ea:	4b57      	ldr	r3, [pc, #348]	@ (8002548 <HAL_GPIO_Init+0x2e8>)
 80023ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023ee:	4a56      	ldr	r2, [pc, #344]	@ (8002548 <HAL_GPIO_Init+0x2e8>)
 80023f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80023f6:	4b54      	ldr	r3, [pc, #336]	@ (8002548 <HAL_GPIO_Init+0x2e8>)
 80023f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023fe:	60fb      	str	r3, [r7, #12]
 8002400:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002402:	4a52      	ldr	r2, [pc, #328]	@ (800254c <HAL_GPIO_Init+0x2ec>)
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	089b      	lsrs	r3, r3, #2
 8002408:	3302      	adds	r3, #2
 800240a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800240e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	f003 0303 	and.w	r3, r3, #3
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	220f      	movs	r2, #15
 800241a:	fa02 f303 	lsl.w	r3, r2, r3
 800241e:	43db      	mvns	r3, r3
 8002420:	69ba      	ldr	r2, [r7, #24]
 8002422:	4013      	ands	r3, r2
 8002424:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4a49      	ldr	r2, [pc, #292]	@ (8002550 <HAL_GPIO_Init+0x2f0>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d019      	beq.n	8002462 <HAL_GPIO_Init+0x202>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4a48      	ldr	r2, [pc, #288]	@ (8002554 <HAL_GPIO_Init+0x2f4>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d013      	beq.n	800245e <HAL_GPIO_Init+0x1fe>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	4a47      	ldr	r2, [pc, #284]	@ (8002558 <HAL_GPIO_Init+0x2f8>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d00d      	beq.n	800245a <HAL_GPIO_Init+0x1fa>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	4a46      	ldr	r2, [pc, #280]	@ (800255c <HAL_GPIO_Init+0x2fc>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d007      	beq.n	8002456 <HAL_GPIO_Init+0x1f6>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	4a45      	ldr	r2, [pc, #276]	@ (8002560 <HAL_GPIO_Init+0x300>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d101      	bne.n	8002452 <HAL_GPIO_Init+0x1f2>
 800244e:	2304      	movs	r3, #4
 8002450:	e008      	b.n	8002464 <HAL_GPIO_Init+0x204>
 8002452:	2307      	movs	r3, #7
 8002454:	e006      	b.n	8002464 <HAL_GPIO_Init+0x204>
 8002456:	2303      	movs	r3, #3
 8002458:	e004      	b.n	8002464 <HAL_GPIO_Init+0x204>
 800245a:	2302      	movs	r3, #2
 800245c:	e002      	b.n	8002464 <HAL_GPIO_Init+0x204>
 800245e:	2301      	movs	r3, #1
 8002460:	e000      	b.n	8002464 <HAL_GPIO_Init+0x204>
 8002462:	2300      	movs	r3, #0
 8002464:	69fa      	ldr	r2, [r7, #28]
 8002466:	f002 0203 	and.w	r2, r2, #3
 800246a:	0092      	lsls	r2, r2, #2
 800246c:	4093      	lsls	r3, r2
 800246e:	69ba      	ldr	r2, [r7, #24]
 8002470:	4313      	orrs	r3, r2
 8002472:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002474:	4935      	ldr	r1, [pc, #212]	@ (800254c <HAL_GPIO_Init+0x2ec>)
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	089b      	lsrs	r3, r3, #2
 800247a:	3302      	adds	r3, #2
 800247c:	69ba      	ldr	r2, [r7, #24]
 800247e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002482:	4b38      	ldr	r3, [pc, #224]	@ (8002564 <HAL_GPIO_Init+0x304>)
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	43db      	mvns	r3, r3
 800248c:	69ba      	ldr	r2, [r7, #24]
 800248e:	4013      	ands	r3, r2
 8002490:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800249a:	2b00      	cmp	r3, #0
 800249c:	d003      	beq.n	80024a6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800249e:	69ba      	ldr	r2, [r7, #24]
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	4313      	orrs	r3, r2
 80024a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024a6:	4a2f      	ldr	r2, [pc, #188]	@ (8002564 <HAL_GPIO_Init+0x304>)
 80024a8:	69bb      	ldr	r3, [r7, #24]
 80024aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024ac:	4b2d      	ldr	r3, [pc, #180]	@ (8002564 <HAL_GPIO_Init+0x304>)
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	43db      	mvns	r3, r3
 80024b6:	69ba      	ldr	r2, [r7, #24]
 80024b8:	4013      	ands	r3, r2
 80024ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d003      	beq.n	80024d0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80024c8:	69ba      	ldr	r2, [r7, #24]
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	4313      	orrs	r3, r2
 80024ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024d0:	4a24      	ldr	r2, [pc, #144]	@ (8002564 <HAL_GPIO_Init+0x304>)
 80024d2:	69bb      	ldr	r3, [r7, #24]
 80024d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80024d6:	4b23      	ldr	r3, [pc, #140]	@ (8002564 <HAL_GPIO_Init+0x304>)
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	43db      	mvns	r3, r3
 80024e0:	69ba      	ldr	r2, [r7, #24]
 80024e2:	4013      	ands	r3, r2
 80024e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d003      	beq.n	80024fa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80024f2:	69ba      	ldr	r2, [r7, #24]
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024fa:	4a1a      	ldr	r2, [pc, #104]	@ (8002564 <HAL_GPIO_Init+0x304>)
 80024fc:	69bb      	ldr	r3, [r7, #24]
 80024fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002500:	4b18      	ldr	r3, [pc, #96]	@ (8002564 <HAL_GPIO_Init+0x304>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	43db      	mvns	r3, r3
 800250a:	69ba      	ldr	r2, [r7, #24]
 800250c:	4013      	ands	r3, r2
 800250e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002518:	2b00      	cmp	r3, #0
 800251a:	d003      	beq.n	8002524 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800251c:	69ba      	ldr	r2, [r7, #24]
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	4313      	orrs	r3, r2
 8002522:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002524:	4a0f      	ldr	r2, [pc, #60]	@ (8002564 <HAL_GPIO_Init+0x304>)
 8002526:	69bb      	ldr	r3, [r7, #24]
 8002528:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800252a:	69fb      	ldr	r3, [r7, #28]
 800252c:	3301      	adds	r3, #1
 800252e:	61fb      	str	r3, [r7, #28]
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	2b0f      	cmp	r3, #15
 8002534:	f67f aea2 	bls.w	800227c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002538:	bf00      	nop
 800253a:	bf00      	nop
 800253c:	3724      	adds	r7, #36	@ 0x24
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr
 8002546:	bf00      	nop
 8002548:	40023800 	.word	0x40023800
 800254c:	40013800 	.word	0x40013800
 8002550:	40020000 	.word	0x40020000
 8002554:	40020400 	.word	0x40020400
 8002558:	40020800 	.word	0x40020800
 800255c:	40020c00 	.word	0x40020c00
 8002560:	40021000 	.word	0x40021000
 8002564:	40013c00 	.word	0x40013c00

08002568 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b086      	sub	sp, #24
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d101      	bne.n	800257a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e267      	b.n	8002a4a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 0301 	and.w	r3, r3, #1
 8002582:	2b00      	cmp	r3, #0
 8002584:	d075      	beq.n	8002672 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002586:	4b88      	ldr	r3, [pc, #544]	@ (80027a8 <HAL_RCC_OscConfig+0x240>)
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	f003 030c 	and.w	r3, r3, #12
 800258e:	2b04      	cmp	r3, #4
 8002590:	d00c      	beq.n	80025ac <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002592:	4b85      	ldr	r3, [pc, #532]	@ (80027a8 <HAL_RCC_OscConfig+0x240>)
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800259a:	2b08      	cmp	r3, #8
 800259c:	d112      	bne.n	80025c4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800259e:	4b82      	ldr	r3, [pc, #520]	@ (80027a8 <HAL_RCC_OscConfig+0x240>)
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025a6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80025aa:	d10b      	bne.n	80025c4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025ac:	4b7e      	ldr	r3, [pc, #504]	@ (80027a8 <HAL_RCC_OscConfig+0x240>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d05b      	beq.n	8002670 <HAL_RCC_OscConfig+0x108>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d157      	bne.n	8002670 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	e242      	b.n	8002a4a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025cc:	d106      	bne.n	80025dc <HAL_RCC_OscConfig+0x74>
 80025ce:	4b76      	ldr	r3, [pc, #472]	@ (80027a8 <HAL_RCC_OscConfig+0x240>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a75      	ldr	r2, [pc, #468]	@ (80027a8 <HAL_RCC_OscConfig+0x240>)
 80025d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025d8:	6013      	str	r3, [r2, #0]
 80025da:	e01d      	b.n	8002618 <HAL_RCC_OscConfig+0xb0>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80025e4:	d10c      	bne.n	8002600 <HAL_RCC_OscConfig+0x98>
 80025e6:	4b70      	ldr	r3, [pc, #448]	@ (80027a8 <HAL_RCC_OscConfig+0x240>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a6f      	ldr	r2, [pc, #444]	@ (80027a8 <HAL_RCC_OscConfig+0x240>)
 80025ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80025f0:	6013      	str	r3, [r2, #0]
 80025f2:	4b6d      	ldr	r3, [pc, #436]	@ (80027a8 <HAL_RCC_OscConfig+0x240>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a6c      	ldr	r2, [pc, #432]	@ (80027a8 <HAL_RCC_OscConfig+0x240>)
 80025f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025fc:	6013      	str	r3, [r2, #0]
 80025fe:	e00b      	b.n	8002618 <HAL_RCC_OscConfig+0xb0>
 8002600:	4b69      	ldr	r3, [pc, #420]	@ (80027a8 <HAL_RCC_OscConfig+0x240>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a68      	ldr	r2, [pc, #416]	@ (80027a8 <HAL_RCC_OscConfig+0x240>)
 8002606:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800260a:	6013      	str	r3, [r2, #0]
 800260c:	4b66      	ldr	r3, [pc, #408]	@ (80027a8 <HAL_RCC_OscConfig+0x240>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a65      	ldr	r2, [pc, #404]	@ (80027a8 <HAL_RCC_OscConfig+0x240>)
 8002612:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002616:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d013      	beq.n	8002648 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002620:	f7fe fbb4 	bl	8000d8c <HAL_GetTick>
 8002624:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002626:	e008      	b.n	800263a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002628:	f7fe fbb0 	bl	8000d8c <HAL_GetTick>
 800262c:	4602      	mov	r2, r0
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	2b64      	cmp	r3, #100	@ 0x64
 8002634:	d901      	bls.n	800263a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002636:	2303      	movs	r3, #3
 8002638:	e207      	b.n	8002a4a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800263a:	4b5b      	ldr	r3, [pc, #364]	@ (80027a8 <HAL_RCC_OscConfig+0x240>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d0f0      	beq.n	8002628 <HAL_RCC_OscConfig+0xc0>
 8002646:	e014      	b.n	8002672 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002648:	f7fe fba0 	bl	8000d8c <HAL_GetTick>
 800264c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800264e:	e008      	b.n	8002662 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002650:	f7fe fb9c 	bl	8000d8c <HAL_GetTick>
 8002654:	4602      	mov	r2, r0
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	2b64      	cmp	r3, #100	@ 0x64
 800265c:	d901      	bls.n	8002662 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800265e:	2303      	movs	r3, #3
 8002660:	e1f3      	b.n	8002a4a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002662:	4b51      	ldr	r3, [pc, #324]	@ (80027a8 <HAL_RCC_OscConfig+0x240>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d1f0      	bne.n	8002650 <HAL_RCC_OscConfig+0xe8>
 800266e:	e000      	b.n	8002672 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002670:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0302 	and.w	r3, r3, #2
 800267a:	2b00      	cmp	r3, #0
 800267c:	d063      	beq.n	8002746 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800267e:	4b4a      	ldr	r3, [pc, #296]	@ (80027a8 <HAL_RCC_OscConfig+0x240>)
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	f003 030c 	and.w	r3, r3, #12
 8002686:	2b00      	cmp	r3, #0
 8002688:	d00b      	beq.n	80026a2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800268a:	4b47      	ldr	r3, [pc, #284]	@ (80027a8 <HAL_RCC_OscConfig+0x240>)
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002692:	2b08      	cmp	r3, #8
 8002694:	d11c      	bne.n	80026d0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002696:	4b44      	ldr	r3, [pc, #272]	@ (80027a8 <HAL_RCC_OscConfig+0x240>)
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d116      	bne.n	80026d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026a2:	4b41      	ldr	r3, [pc, #260]	@ (80027a8 <HAL_RCC_OscConfig+0x240>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 0302 	and.w	r3, r3, #2
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d005      	beq.n	80026ba <HAL_RCC_OscConfig+0x152>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	68db      	ldr	r3, [r3, #12]
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d001      	beq.n	80026ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e1c7      	b.n	8002a4a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026ba:	4b3b      	ldr	r3, [pc, #236]	@ (80027a8 <HAL_RCC_OscConfig+0x240>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	691b      	ldr	r3, [r3, #16]
 80026c6:	00db      	lsls	r3, r3, #3
 80026c8:	4937      	ldr	r1, [pc, #220]	@ (80027a8 <HAL_RCC_OscConfig+0x240>)
 80026ca:	4313      	orrs	r3, r2
 80026cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026ce:	e03a      	b.n	8002746 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d020      	beq.n	800271a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026d8:	4b34      	ldr	r3, [pc, #208]	@ (80027ac <HAL_RCC_OscConfig+0x244>)
 80026da:	2201      	movs	r2, #1
 80026dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026de:	f7fe fb55 	bl	8000d8c <HAL_GetTick>
 80026e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026e4:	e008      	b.n	80026f8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026e6:	f7fe fb51 	bl	8000d8c <HAL_GetTick>
 80026ea:	4602      	mov	r2, r0
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	1ad3      	subs	r3, r2, r3
 80026f0:	2b02      	cmp	r3, #2
 80026f2:	d901      	bls.n	80026f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80026f4:	2303      	movs	r3, #3
 80026f6:	e1a8      	b.n	8002a4a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026f8:	4b2b      	ldr	r3, [pc, #172]	@ (80027a8 <HAL_RCC_OscConfig+0x240>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 0302 	and.w	r3, r3, #2
 8002700:	2b00      	cmp	r3, #0
 8002702:	d0f0      	beq.n	80026e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002704:	4b28      	ldr	r3, [pc, #160]	@ (80027a8 <HAL_RCC_OscConfig+0x240>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	691b      	ldr	r3, [r3, #16]
 8002710:	00db      	lsls	r3, r3, #3
 8002712:	4925      	ldr	r1, [pc, #148]	@ (80027a8 <HAL_RCC_OscConfig+0x240>)
 8002714:	4313      	orrs	r3, r2
 8002716:	600b      	str	r3, [r1, #0]
 8002718:	e015      	b.n	8002746 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800271a:	4b24      	ldr	r3, [pc, #144]	@ (80027ac <HAL_RCC_OscConfig+0x244>)
 800271c:	2200      	movs	r2, #0
 800271e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002720:	f7fe fb34 	bl	8000d8c <HAL_GetTick>
 8002724:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002726:	e008      	b.n	800273a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002728:	f7fe fb30 	bl	8000d8c <HAL_GetTick>
 800272c:	4602      	mov	r2, r0
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	2b02      	cmp	r3, #2
 8002734:	d901      	bls.n	800273a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002736:	2303      	movs	r3, #3
 8002738:	e187      	b.n	8002a4a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800273a:	4b1b      	ldr	r3, [pc, #108]	@ (80027a8 <HAL_RCC_OscConfig+0x240>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0302 	and.w	r3, r3, #2
 8002742:	2b00      	cmp	r3, #0
 8002744:	d1f0      	bne.n	8002728 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0308 	and.w	r3, r3, #8
 800274e:	2b00      	cmp	r3, #0
 8002750:	d036      	beq.n	80027c0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	695b      	ldr	r3, [r3, #20]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d016      	beq.n	8002788 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800275a:	4b15      	ldr	r3, [pc, #84]	@ (80027b0 <HAL_RCC_OscConfig+0x248>)
 800275c:	2201      	movs	r2, #1
 800275e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002760:	f7fe fb14 	bl	8000d8c <HAL_GetTick>
 8002764:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002766:	e008      	b.n	800277a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002768:	f7fe fb10 	bl	8000d8c <HAL_GetTick>
 800276c:	4602      	mov	r2, r0
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	2b02      	cmp	r3, #2
 8002774:	d901      	bls.n	800277a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002776:	2303      	movs	r3, #3
 8002778:	e167      	b.n	8002a4a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800277a:	4b0b      	ldr	r3, [pc, #44]	@ (80027a8 <HAL_RCC_OscConfig+0x240>)
 800277c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800277e:	f003 0302 	and.w	r3, r3, #2
 8002782:	2b00      	cmp	r3, #0
 8002784:	d0f0      	beq.n	8002768 <HAL_RCC_OscConfig+0x200>
 8002786:	e01b      	b.n	80027c0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002788:	4b09      	ldr	r3, [pc, #36]	@ (80027b0 <HAL_RCC_OscConfig+0x248>)
 800278a:	2200      	movs	r2, #0
 800278c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800278e:	f7fe fafd 	bl	8000d8c <HAL_GetTick>
 8002792:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002794:	e00e      	b.n	80027b4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002796:	f7fe faf9 	bl	8000d8c <HAL_GetTick>
 800279a:	4602      	mov	r2, r0
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	1ad3      	subs	r3, r2, r3
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	d907      	bls.n	80027b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80027a4:	2303      	movs	r3, #3
 80027a6:	e150      	b.n	8002a4a <HAL_RCC_OscConfig+0x4e2>
 80027a8:	40023800 	.word	0x40023800
 80027ac:	42470000 	.word	0x42470000
 80027b0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027b4:	4b88      	ldr	r3, [pc, #544]	@ (80029d8 <HAL_RCC_OscConfig+0x470>)
 80027b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027b8:	f003 0302 	and.w	r3, r3, #2
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d1ea      	bne.n	8002796 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 0304 	and.w	r3, r3, #4
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	f000 8097 	beq.w	80028fc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027ce:	2300      	movs	r3, #0
 80027d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027d2:	4b81      	ldr	r3, [pc, #516]	@ (80029d8 <HAL_RCC_OscConfig+0x470>)
 80027d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d10f      	bne.n	80027fe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027de:	2300      	movs	r3, #0
 80027e0:	60bb      	str	r3, [r7, #8]
 80027e2:	4b7d      	ldr	r3, [pc, #500]	@ (80029d8 <HAL_RCC_OscConfig+0x470>)
 80027e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027e6:	4a7c      	ldr	r2, [pc, #496]	@ (80029d8 <HAL_RCC_OscConfig+0x470>)
 80027e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80027ee:	4b7a      	ldr	r3, [pc, #488]	@ (80029d8 <HAL_RCC_OscConfig+0x470>)
 80027f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027f6:	60bb      	str	r3, [r7, #8]
 80027f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027fa:	2301      	movs	r3, #1
 80027fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027fe:	4b77      	ldr	r3, [pc, #476]	@ (80029dc <HAL_RCC_OscConfig+0x474>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002806:	2b00      	cmp	r3, #0
 8002808:	d118      	bne.n	800283c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800280a:	4b74      	ldr	r3, [pc, #464]	@ (80029dc <HAL_RCC_OscConfig+0x474>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a73      	ldr	r2, [pc, #460]	@ (80029dc <HAL_RCC_OscConfig+0x474>)
 8002810:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002814:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002816:	f7fe fab9 	bl	8000d8c <HAL_GetTick>
 800281a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800281c:	e008      	b.n	8002830 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800281e:	f7fe fab5 	bl	8000d8c <HAL_GetTick>
 8002822:	4602      	mov	r2, r0
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	2b02      	cmp	r3, #2
 800282a:	d901      	bls.n	8002830 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800282c:	2303      	movs	r3, #3
 800282e:	e10c      	b.n	8002a4a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002830:	4b6a      	ldr	r3, [pc, #424]	@ (80029dc <HAL_RCC_OscConfig+0x474>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002838:	2b00      	cmp	r3, #0
 800283a:	d0f0      	beq.n	800281e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	2b01      	cmp	r3, #1
 8002842:	d106      	bne.n	8002852 <HAL_RCC_OscConfig+0x2ea>
 8002844:	4b64      	ldr	r3, [pc, #400]	@ (80029d8 <HAL_RCC_OscConfig+0x470>)
 8002846:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002848:	4a63      	ldr	r2, [pc, #396]	@ (80029d8 <HAL_RCC_OscConfig+0x470>)
 800284a:	f043 0301 	orr.w	r3, r3, #1
 800284e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002850:	e01c      	b.n	800288c <HAL_RCC_OscConfig+0x324>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	2b05      	cmp	r3, #5
 8002858:	d10c      	bne.n	8002874 <HAL_RCC_OscConfig+0x30c>
 800285a:	4b5f      	ldr	r3, [pc, #380]	@ (80029d8 <HAL_RCC_OscConfig+0x470>)
 800285c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800285e:	4a5e      	ldr	r2, [pc, #376]	@ (80029d8 <HAL_RCC_OscConfig+0x470>)
 8002860:	f043 0304 	orr.w	r3, r3, #4
 8002864:	6713      	str	r3, [r2, #112]	@ 0x70
 8002866:	4b5c      	ldr	r3, [pc, #368]	@ (80029d8 <HAL_RCC_OscConfig+0x470>)
 8002868:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800286a:	4a5b      	ldr	r2, [pc, #364]	@ (80029d8 <HAL_RCC_OscConfig+0x470>)
 800286c:	f043 0301 	orr.w	r3, r3, #1
 8002870:	6713      	str	r3, [r2, #112]	@ 0x70
 8002872:	e00b      	b.n	800288c <HAL_RCC_OscConfig+0x324>
 8002874:	4b58      	ldr	r3, [pc, #352]	@ (80029d8 <HAL_RCC_OscConfig+0x470>)
 8002876:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002878:	4a57      	ldr	r2, [pc, #348]	@ (80029d8 <HAL_RCC_OscConfig+0x470>)
 800287a:	f023 0301 	bic.w	r3, r3, #1
 800287e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002880:	4b55      	ldr	r3, [pc, #340]	@ (80029d8 <HAL_RCC_OscConfig+0x470>)
 8002882:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002884:	4a54      	ldr	r2, [pc, #336]	@ (80029d8 <HAL_RCC_OscConfig+0x470>)
 8002886:	f023 0304 	bic.w	r3, r3, #4
 800288a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d015      	beq.n	80028c0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002894:	f7fe fa7a 	bl	8000d8c <HAL_GetTick>
 8002898:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800289a:	e00a      	b.n	80028b2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800289c:	f7fe fa76 	bl	8000d8c <HAL_GetTick>
 80028a0:	4602      	mov	r2, r0
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d901      	bls.n	80028b2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80028ae:	2303      	movs	r3, #3
 80028b0:	e0cb      	b.n	8002a4a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028b2:	4b49      	ldr	r3, [pc, #292]	@ (80029d8 <HAL_RCC_OscConfig+0x470>)
 80028b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028b6:	f003 0302 	and.w	r3, r3, #2
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d0ee      	beq.n	800289c <HAL_RCC_OscConfig+0x334>
 80028be:	e014      	b.n	80028ea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028c0:	f7fe fa64 	bl	8000d8c <HAL_GetTick>
 80028c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028c6:	e00a      	b.n	80028de <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028c8:	f7fe fa60 	bl	8000d8c <HAL_GetTick>
 80028cc:	4602      	mov	r2, r0
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d901      	bls.n	80028de <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80028da:	2303      	movs	r3, #3
 80028dc:	e0b5      	b.n	8002a4a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028de:	4b3e      	ldr	r3, [pc, #248]	@ (80029d8 <HAL_RCC_OscConfig+0x470>)
 80028e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028e2:	f003 0302 	and.w	r3, r3, #2
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d1ee      	bne.n	80028c8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80028ea:	7dfb      	ldrb	r3, [r7, #23]
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d105      	bne.n	80028fc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028f0:	4b39      	ldr	r3, [pc, #228]	@ (80029d8 <HAL_RCC_OscConfig+0x470>)
 80028f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028f4:	4a38      	ldr	r2, [pc, #224]	@ (80029d8 <HAL_RCC_OscConfig+0x470>)
 80028f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80028fa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	699b      	ldr	r3, [r3, #24]
 8002900:	2b00      	cmp	r3, #0
 8002902:	f000 80a1 	beq.w	8002a48 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002906:	4b34      	ldr	r3, [pc, #208]	@ (80029d8 <HAL_RCC_OscConfig+0x470>)
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	f003 030c 	and.w	r3, r3, #12
 800290e:	2b08      	cmp	r3, #8
 8002910:	d05c      	beq.n	80029cc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	699b      	ldr	r3, [r3, #24]
 8002916:	2b02      	cmp	r3, #2
 8002918:	d141      	bne.n	800299e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800291a:	4b31      	ldr	r3, [pc, #196]	@ (80029e0 <HAL_RCC_OscConfig+0x478>)
 800291c:	2200      	movs	r2, #0
 800291e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002920:	f7fe fa34 	bl	8000d8c <HAL_GetTick>
 8002924:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002926:	e008      	b.n	800293a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002928:	f7fe fa30 	bl	8000d8c <HAL_GetTick>
 800292c:	4602      	mov	r2, r0
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	2b02      	cmp	r3, #2
 8002934:	d901      	bls.n	800293a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	e087      	b.n	8002a4a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800293a:	4b27      	ldr	r3, [pc, #156]	@ (80029d8 <HAL_RCC_OscConfig+0x470>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d1f0      	bne.n	8002928 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	69da      	ldr	r2, [r3, #28]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6a1b      	ldr	r3, [r3, #32]
 800294e:	431a      	orrs	r2, r3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002954:	019b      	lsls	r3, r3, #6
 8002956:	431a      	orrs	r2, r3
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800295c:	085b      	lsrs	r3, r3, #1
 800295e:	3b01      	subs	r3, #1
 8002960:	041b      	lsls	r3, r3, #16
 8002962:	431a      	orrs	r2, r3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002968:	061b      	lsls	r3, r3, #24
 800296a:	491b      	ldr	r1, [pc, #108]	@ (80029d8 <HAL_RCC_OscConfig+0x470>)
 800296c:	4313      	orrs	r3, r2
 800296e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002970:	4b1b      	ldr	r3, [pc, #108]	@ (80029e0 <HAL_RCC_OscConfig+0x478>)
 8002972:	2201      	movs	r2, #1
 8002974:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002976:	f7fe fa09 	bl	8000d8c <HAL_GetTick>
 800297a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800297c:	e008      	b.n	8002990 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800297e:	f7fe fa05 	bl	8000d8c <HAL_GetTick>
 8002982:	4602      	mov	r2, r0
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	1ad3      	subs	r3, r2, r3
 8002988:	2b02      	cmp	r3, #2
 800298a:	d901      	bls.n	8002990 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800298c:	2303      	movs	r3, #3
 800298e:	e05c      	b.n	8002a4a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002990:	4b11      	ldr	r3, [pc, #68]	@ (80029d8 <HAL_RCC_OscConfig+0x470>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002998:	2b00      	cmp	r3, #0
 800299a:	d0f0      	beq.n	800297e <HAL_RCC_OscConfig+0x416>
 800299c:	e054      	b.n	8002a48 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800299e:	4b10      	ldr	r3, [pc, #64]	@ (80029e0 <HAL_RCC_OscConfig+0x478>)
 80029a0:	2200      	movs	r2, #0
 80029a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029a4:	f7fe f9f2 	bl	8000d8c <HAL_GetTick>
 80029a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029aa:	e008      	b.n	80029be <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029ac:	f7fe f9ee 	bl	8000d8c <HAL_GetTick>
 80029b0:	4602      	mov	r2, r0
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	2b02      	cmp	r3, #2
 80029b8:	d901      	bls.n	80029be <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80029ba:	2303      	movs	r3, #3
 80029bc:	e045      	b.n	8002a4a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029be:	4b06      	ldr	r3, [pc, #24]	@ (80029d8 <HAL_RCC_OscConfig+0x470>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d1f0      	bne.n	80029ac <HAL_RCC_OscConfig+0x444>
 80029ca:	e03d      	b.n	8002a48 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	699b      	ldr	r3, [r3, #24]
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d107      	bne.n	80029e4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	e038      	b.n	8002a4a <HAL_RCC_OscConfig+0x4e2>
 80029d8:	40023800 	.word	0x40023800
 80029dc:	40007000 	.word	0x40007000
 80029e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80029e4:	4b1b      	ldr	r3, [pc, #108]	@ (8002a54 <HAL_RCC_OscConfig+0x4ec>)
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	699b      	ldr	r3, [r3, #24]
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d028      	beq.n	8002a44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d121      	bne.n	8002a44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d11a      	bne.n	8002a44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a0e:	68fa      	ldr	r2, [r7, #12]
 8002a10:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002a14:	4013      	ands	r3, r2
 8002a16:	687a      	ldr	r2, [r7, #4]
 8002a18:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002a1a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d111      	bne.n	8002a44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a2a:	085b      	lsrs	r3, r3, #1
 8002a2c:	3b01      	subs	r3, #1
 8002a2e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d107      	bne.n	8002a44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a3e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d001      	beq.n	8002a48 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	e000      	b.n	8002a4a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002a48:	2300      	movs	r3, #0
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3718      	adds	r7, #24
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	40023800 	.word	0x40023800

08002a58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b084      	sub	sp, #16
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
 8002a60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d101      	bne.n	8002a6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e0cc      	b.n	8002c06 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a6c:	4b68      	ldr	r3, [pc, #416]	@ (8002c10 <HAL_RCC_ClockConfig+0x1b8>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 0307 	and.w	r3, r3, #7
 8002a74:	683a      	ldr	r2, [r7, #0]
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d90c      	bls.n	8002a94 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a7a:	4b65      	ldr	r3, [pc, #404]	@ (8002c10 <HAL_RCC_ClockConfig+0x1b8>)
 8002a7c:	683a      	ldr	r2, [r7, #0]
 8002a7e:	b2d2      	uxtb	r2, r2
 8002a80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a82:	4b63      	ldr	r3, [pc, #396]	@ (8002c10 <HAL_RCC_ClockConfig+0x1b8>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 0307 	and.w	r3, r3, #7
 8002a8a:	683a      	ldr	r2, [r7, #0]
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d001      	beq.n	8002a94 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e0b8      	b.n	8002c06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 0302 	and.w	r3, r3, #2
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d020      	beq.n	8002ae2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 0304 	and.w	r3, r3, #4
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d005      	beq.n	8002ab8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002aac:	4b59      	ldr	r3, [pc, #356]	@ (8002c14 <HAL_RCC_ClockConfig+0x1bc>)
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	4a58      	ldr	r2, [pc, #352]	@ (8002c14 <HAL_RCC_ClockConfig+0x1bc>)
 8002ab2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002ab6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 0308 	and.w	r3, r3, #8
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d005      	beq.n	8002ad0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ac4:	4b53      	ldr	r3, [pc, #332]	@ (8002c14 <HAL_RCC_ClockConfig+0x1bc>)
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	4a52      	ldr	r2, [pc, #328]	@ (8002c14 <HAL_RCC_ClockConfig+0x1bc>)
 8002aca:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002ace:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ad0:	4b50      	ldr	r3, [pc, #320]	@ (8002c14 <HAL_RCC_ClockConfig+0x1bc>)
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	494d      	ldr	r1, [pc, #308]	@ (8002c14 <HAL_RCC_ClockConfig+0x1bc>)
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0301 	and.w	r3, r3, #1
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d044      	beq.n	8002b78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d107      	bne.n	8002b06 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002af6:	4b47      	ldr	r3, [pc, #284]	@ (8002c14 <HAL_RCC_ClockConfig+0x1bc>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d119      	bne.n	8002b36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e07f      	b.n	8002c06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d003      	beq.n	8002b16 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b12:	2b03      	cmp	r3, #3
 8002b14:	d107      	bne.n	8002b26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b16:	4b3f      	ldr	r3, [pc, #252]	@ (8002c14 <HAL_RCC_ClockConfig+0x1bc>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d109      	bne.n	8002b36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e06f      	b.n	8002c06 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b26:	4b3b      	ldr	r3, [pc, #236]	@ (8002c14 <HAL_RCC_ClockConfig+0x1bc>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0302 	and.w	r3, r3, #2
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d101      	bne.n	8002b36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e067      	b.n	8002c06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b36:	4b37      	ldr	r3, [pc, #220]	@ (8002c14 <HAL_RCC_ClockConfig+0x1bc>)
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	f023 0203 	bic.w	r2, r3, #3
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	4934      	ldr	r1, [pc, #208]	@ (8002c14 <HAL_RCC_ClockConfig+0x1bc>)
 8002b44:	4313      	orrs	r3, r2
 8002b46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b48:	f7fe f920 	bl	8000d8c <HAL_GetTick>
 8002b4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b4e:	e00a      	b.n	8002b66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b50:	f7fe f91c 	bl	8000d8c <HAL_GetTick>
 8002b54:	4602      	mov	r2, r0
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d901      	bls.n	8002b66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b62:	2303      	movs	r3, #3
 8002b64:	e04f      	b.n	8002c06 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b66:	4b2b      	ldr	r3, [pc, #172]	@ (8002c14 <HAL_RCC_ClockConfig+0x1bc>)
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	f003 020c 	and.w	r2, r3, #12
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d1eb      	bne.n	8002b50 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b78:	4b25      	ldr	r3, [pc, #148]	@ (8002c10 <HAL_RCC_ClockConfig+0x1b8>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 0307 	and.w	r3, r3, #7
 8002b80:	683a      	ldr	r2, [r7, #0]
 8002b82:	429a      	cmp	r2, r3
 8002b84:	d20c      	bcs.n	8002ba0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b86:	4b22      	ldr	r3, [pc, #136]	@ (8002c10 <HAL_RCC_ClockConfig+0x1b8>)
 8002b88:	683a      	ldr	r2, [r7, #0]
 8002b8a:	b2d2      	uxtb	r2, r2
 8002b8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b8e:	4b20      	ldr	r3, [pc, #128]	@ (8002c10 <HAL_RCC_ClockConfig+0x1b8>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 0307 	and.w	r3, r3, #7
 8002b96:	683a      	ldr	r2, [r7, #0]
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d001      	beq.n	8002ba0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e032      	b.n	8002c06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 0304 	and.w	r3, r3, #4
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d008      	beq.n	8002bbe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bac:	4b19      	ldr	r3, [pc, #100]	@ (8002c14 <HAL_RCC_ClockConfig+0x1bc>)
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	4916      	ldr	r1, [pc, #88]	@ (8002c14 <HAL_RCC_ClockConfig+0x1bc>)
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0308 	and.w	r3, r3, #8
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d009      	beq.n	8002bde <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bca:	4b12      	ldr	r3, [pc, #72]	@ (8002c14 <HAL_RCC_ClockConfig+0x1bc>)
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	691b      	ldr	r3, [r3, #16]
 8002bd6:	00db      	lsls	r3, r3, #3
 8002bd8:	490e      	ldr	r1, [pc, #56]	@ (8002c14 <HAL_RCC_ClockConfig+0x1bc>)
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002bde:	f000 f821 	bl	8002c24 <HAL_RCC_GetSysClockFreq>
 8002be2:	4602      	mov	r2, r0
 8002be4:	4b0b      	ldr	r3, [pc, #44]	@ (8002c14 <HAL_RCC_ClockConfig+0x1bc>)
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	091b      	lsrs	r3, r3, #4
 8002bea:	f003 030f 	and.w	r3, r3, #15
 8002bee:	490a      	ldr	r1, [pc, #40]	@ (8002c18 <HAL_RCC_ClockConfig+0x1c0>)
 8002bf0:	5ccb      	ldrb	r3, [r1, r3]
 8002bf2:	fa22 f303 	lsr.w	r3, r2, r3
 8002bf6:	4a09      	ldr	r2, [pc, #36]	@ (8002c1c <HAL_RCC_ClockConfig+0x1c4>)
 8002bf8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002bfa:	4b09      	ldr	r3, [pc, #36]	@ (8002c20 <HAL_RCC_ClockConfig+0x1c8>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f7fe f880 	bl	8000d04 <HAL_InitTick>

  return HAL_OK;
 8002c04:	2300      	movs	r3, #0
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3710      	adds	r7, #16
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	40023c00 	.word	0x40023c00
 8002c14:	40023800 	.word	0x40023800
 8002c18:	08004d44 	.word	0x08004d44
 8002c1c:	20000000 	.word	0x20000000
 8002c20:	20000004 	.word	0x20000004

08002c24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c28:	b094      	sub	sp, #80	@ 0x50
 8002c2a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002c30:	2300      	movs	r3, #0
 8002c32:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002c34:	2300      	movs	r3, #0
 8002c36:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c3c:	4b79      	ldr	r3, [pc, #484]	@ (8002e24 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	f003 030c 	and.w	r3, r3, #12
 8002c44:	2b08      	cmp	r3, #8
 8002c46:	d00d      	beq.n	8002c64 <HAL_RCC_GetSysClockFreq+0x40>
 8002c48:	2b08      	cmp	r3, #8
 8002c4a:	f200 80e1 	bhi.w	8002e10 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d002      	beq.n	8002c58 <HAL_RCC_GetSysClockFreq+0x34>
 8002c52:	2b04      	cmp	r3, #4
 8002c54:	d003      	beq.n	8002c5e <HAL_RCC_GetSysClockFreq+0x3a>
 8002c56:	e0db      	b.n	8002e10 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c58:	4b73      	ldr	r3, [pc, #460]	@ (8002e28 <HAL_RCC_GetSysClockFreq+0x204>)
 8002c5a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002c5c:	e0db      	b.n	8002e16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c5e:	4b73      	ldr	r3, [pc, #460]	@ (8002e2c <HAL_RCC_GetSysClockFreq+0x208>)
 8002c60:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002c62:	e0d8      	b.n	8002e16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c64:	4b6f      	ldr	r3, [pc, #444]	@ (8002e24 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002c6c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c6e:	4b6d      	ldr	r3, [pc, #436]	@ (8002e24 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d063      	beq.n	8002d42 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c7a:	4b6a      	ldr	r3, [pc, #424]	@ (8002e24 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	099b      	lsrs	r3, r3, #6
 8002c80:	2200      	movs	r2, #0
 8002c82:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002c84:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002c86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c8c:	633b      	str	r3, [r7, #48]	@ 0x30
 8002c8e:	2300      	movs	r3, #0
 8002c90:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c92:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002c96:	4622      	mov	r2, r4
 8002c98:	462b      	mov	r3, r5
 8002c9a:	f04f 0000 	mov.w	r0, #0
 8002c9e:	f04f 0100 	mov.w	r1, #0
 8002ca2:	0159      	lsls	r1, r3, #5
 8002ca4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ca8:	0150      	lsls	r0, r2, #5
 8002caa:	4602      	mov	r2, r0
 8002cac:	460b      	mov	r3, r1
 8002cae:	4621      	mov	r1, r4
 8002cb0:	1a51      	subs	r1, r2, r1
 8002cb2:	6139      	str	r1, [r7, #16]
 8002cb4:	4629      	mov	r1, r5
 8002cb6:	eb63 0301 	sbc.w	r3, r3, r1
 8002cba:	617b      	str	r3, [r7, #20]
 8002cbc:	f04f 0200 	mov.w	r2, #0
 8002cc0:	f04f 0300 	mov.w	r3, #0
 8002cc4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002cc8:	4659      	mov	r1, fp
 8002cca:	018b      	lsls	r3, r1, #6
 8002ccc:	4651      	mov	r1, sl
 8002cce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002cd2:	4651      	mov	r1, sl
 8002cd4:	018a      	lsls	r2, r1, #6
 8002cd6:	4651      	mov	r1, sl
 8002cd8:	ebb2 0801 	subs.w	r8, r2, r1
 8002cdc:	4659      	mov	r1, fp
 8002cde:	eb63 0901 	sbc.w	r9, r3, r1
 8002ce2:	f04f 0200 	mov.w	r2, #0
 8002ce6:	f04f 0300 	mov.w	r3, #0
 8002cea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002cee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002cf2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002cf6:	4690      	mov	r8, r2
 8002cf8:	4699      	mov	r9, r3
 8002cfa:	4623      	mov	r3, r4
 8002cfc:	eb18 0303 	adds.w	r3, r8, r3
 8002d00:	60bb      	str	r3, [r7, #8]
 8002d02:	462b      	mov	r3, r5
 8002d04:	eb49 0303 	adc.w	r3, r9, r3
 8002d08:	60fb      	str	r3, [r7, #12]
 8002d0a:	f04f 0200 	mov.w	r2, #0
 8002d0e:	f04f 0300 	mov.w	r3, #0
 8002d12:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002d16:	4629      	mov	r1, r5
 8002d18:	024b      	lsls	r3, r1, #9
 8002d1a:	4621      	mov	r1, r4
 8002d1c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002d20:	4621      	mov	r1, r4
 8002d22:	024a      	lsls	r2, r1, #9
 8002d24:	4610      	mov	r0, r2
 8002d26:	4619      	mov	r1, r3
 8002d28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002d2e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002d30:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002d34:	f7fd faa4 	bl	8000280 <__aeabi_uldivmod>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	460b      	mov	r3, r1
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002d40:	e058      	b.n	8002df4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d42:	4b38      	ldr	r3, [pc, #224]	@ (8002e24 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	099b      	lsrs	r3, r3, #6
 8002d48:	2200      	movs	r2, #0
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	4611      	mov	r1, r2
 8002d4e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002d52:	623b      	str	r3, [r7, #32]
 8002d54:	2300      	movs	r3, #0
 8002d56:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d58:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002d5c:	4642      	mov	r2, r8
 8002d5e:	464b      	mov	r3, r9
 8002d60:	f04f 0000 	mov.w	r0, #0
 8002d64:	f04f 0100 	mov.w	r1, #0
 8002d68:	0159      	lsls	r1, r3, #5
 8002d6a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d6e:	0150      	lsls	r0, r2, #5
 8002d70:	4602      	mov	r2, r0
 8002d72:	460b      	mov	r3, r1
 8002d74:	4641      	mov	r1, r8
 8002d76:	ebb2 0a01 	subs.w	sl, r2, r1
 8002d7a:	4649      	mov	r1, r9
 8002d7c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002d80:	f04f 0200 	mov.w	r2, #0
 8002d84:	f04f 0300 	mov.w	r3, #0
 8002d88:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002d8c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002d90:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002d94:	ebb2 040a 	subs.w	r4, r2, sl
 8002d98:	eb63 050b 	sbc.w	r5, r3, fp
 8002d9c:	f04f 0200 	mov.w	r2, #0
 8002da0:	f04f 0300 	mov.w	r3, #0
 8002da4:	00eb      	lsls	r3, r5, #3
 8002da6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002daa:	00e2      	lsls	r2, r4, #3
 8002dac:	4614      	mov	r4, r2
 8002dae:	461d      	mov	r5, r3
 8002db0:	4643      	mov	r3, r8
 8002db2:	18e3      	adds	r3, r4, r3
 8002db4:	603b      	str	r3, [r7, #0]
 8002db6:	464b      	mov	r3, r9
 8002db8:	eb45 0303 	adc.w	r3, r5, r3
 8002dbc:	607b      	str	r3, [r7, #4]
 8002dbe:	f04f 0200 	mov.w	r2, #0
 8002dc2:	f04f 0300 	mov.w	r3, #0
 8002dc6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002dca:	4629      	mov	r1, r5
 8002dcc:	028b      	lsls	r3, r1, #10
 8002dce:	4621      	mov	r1, r4
 8002dd0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002dd4:	4621      	mov	r1, r4
 8002dd6:	028a      	lsls	r2, r1, #10
 8002dd8:	4610      	mov	r0, r2
 8002dda:	4619      	mov	r1, r3
 8002ddc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002dde:	2200      	movs	r2, #0
 8002de0:	61bb      	str	r3, [r7, #24]
 8002de2:	61fa      	str	r2, [r7, #28]
 8002de4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002de8:	f7fd fa4a 	bl	8000280 <__aeabi_uldivmod>
 8002dec:	4602      	mov	r2, r0
 8002dee:	460b      	mov	r3, r1
 8002df0:	4613      	mov	r3, r2
 8002df2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002df4:	4b0b      	ldr	r3, [pc, #44]	@ (8002e24 <HAL_RCC_GetSysClockFreq+0x200>)
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	0c1b      	lsrs	r3, r3, #16
 8002dfa:	f003 0303 	and.w	r3, r3, #3
 8002dfe:	3301      	adds	r3, #1
 8002e00:	005b      	lsls	r3, r3, #1
 8002e02:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002e04:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002e06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e08:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e0c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002e0e:	e002      	b.n	8002e16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e10:	4b05      	ldr	r3, [pc, #20]	@ (8002e28 <HAL_RCC_GetSysClockFreq+0x204>)
 8002e12:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002e14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3750      	adds	r7, #80	@ 0x50
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e22:	bf00      	nop
 8002e24:	40023800 	.word	0x40023800
 8002e28:	00f42400 	.word	0x00f42400
 8002e2c:	007a1200 	.word	0x007a1200

08002e30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e30:	b480      	push	{r7}
 8002e32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e34:	4b03      	ldr	r3, [pc, #12]	@ (8002e44 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e36:	681b      	ldr	r3, [r3, #0]
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr
 8002e42:	bf00      	nop
 8002e44:	20000000 	.word	0x20000000

08002e48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002e4c:	f7ff fff0 	bl	8002e30 <HAL_RCC_GetHCLKFreq>
 8002e50:	4602      	mov	r2, r0
 8002e52:	4b05      	ldr	r3, [pc, #20]	@ (8002e68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	0a9b      	lsrs	r3, r3, #10
 8002e58:	f003 0307 	and.w	r3, r3, #7
 8002e5c:	4903      	ldr	r1, [pc, #12]	@ (8002e6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e5e:	5ccb      	ldrb	r3, [r1, r3]
 8002e60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	40023800 	.word	0x40023800
 8002e6c:	08004d54 	.word	0x08004d54

08002e70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002e74:	f7ff ffdc 	bl	8002e30 <HAL_RCC_GetHCLKFreq>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	4b05      	ldr	r3, [pc, #20]	@ (8002e90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	0b5b      	lsrs	r3, r3, #13
 8002e80:	f003 0307 	and.w	r3, r3, #7
 8002e84:	4903      	ldr	r1, [pc, #12]	@ (8002e94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e86:	5ccb      	ldrb	r3, [r1, r3]
 8002e88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	40023800 	.word	0x40023800
 8002e94:	08004d54 	.word	0x08004d54

08002e98 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b082      	sub	sp, #8
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d101      	bne.n	8002eaa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e042      	b.n	8002f30 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d106      	bne.n	8002ec4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f7fd fe84 	bl	8000bcc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2224      	movs	r2, #36	@ 0x24
 8002ec8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	68da      	ldr	r2, [r3, #12]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002eda:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002edc:	6878      	ldr	r0, [r7, #4]
 8002ede:	f000 fd69 	bl	80039b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	691a      	ldr	r2, [r3, #16]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002ef0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	695a      	ldr	r2, [r3, #20]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002f00:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	68da      	ldr	r2, [r3, #12]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002f10:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2200      	movs	r2, #0
 8002f16:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2220      	movs	r2, #32
 8002f1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2220      	movs	r2, #32
 8002f24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002f2e:	2300      	movs	r3, #0
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3708      	adds	r7, #8
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}

08002f38 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b08a      	sub	sp, #40	@ 0x28
 8002f3c:	af02      	add	r7, sp, #8
 8002f3e:	60f8      	str	r0, [r7, #12]
 8002f40:	60b9      	str	r1, [r7, #8]
 8002f42:	603b      	str	r3, [r7, #0]
 8002f44:	4613      	mov	r3, r2
 8002f46:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	2b20      	cmp	r3, #32
 8002f56:	d175      	bne.n	8003044 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d002      	beq.n	8002f64 <HAL_UART_Transmit+0x2c>
 8002f5e:	88fb      	ldrh	r3, [r7, #6]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d101      	bne.n	8002f68 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e06e      	b.n	8003046 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2221      	movs	r2, #33	@ 0x21
 8002f72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f76:	f7fd ff09 	bl	8000d8c <HAL_GetTick>
 8002f7a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	88fa      	ldrh	r2, [r7, #6]
 8002f80:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	88fa      	ldrh	r2, [r7, #6]
 8002f86:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f90:	d108      	bne.n	8002fa4 <HAL_UART_Transmit+0x6c>
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	691b      	ldr	r3, [r3, #16]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d104      	bne.n	8002fa4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	61bb      	str	r3, [r7, #24]
 8002fa2:	e003      	b.n	8002fac <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002fac:	e02e      	b.n	800300c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	9300      	str	r3, [sp, #0]
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	2180      	movs	r1, #128	@ 0x80
 8002fb8:	68f8      	ldr	r0, [r7, #12]
 8002fba:	f000 fb05 	bl	80035c8 <UART_WaitOnFlagUntilTimeout>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d005      	beq.n	8002fd0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2220      	movs	r2, #32
 8002fc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002fcc:	2303      	movs	r3, #3
 8002fce:	e03a      	b.n	8003046 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002fd0:	69fb      	ldr	r3, [r7, #28]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d10b      	bne.n	8002fee <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002fd6:	69bb      	ldr	r3, [r7, #24]
 8002fd8:	881b      	ldrh	r3, [r3, #0]
 8002fda:	461a      	mov	r2, r3
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002fe4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002fe6:	69bb      	ldr	r3, [r7, #24]
 8002fe8:	3302      	adds	r3, #2
 8002fea:	61bb      	str	r3, [r7, #24]
 8002fec:	e007      	b.n	8002ffe <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	781a      	ldrb	r2, [r3, #0]
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002ff8:	69fb      	ldr	r3, [r7, #28]
 8002ffa:	3301      	adds	r3, #1
 8002ffc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003002:	b29b      	uxth	r3, r3
 8003004:	3b01      	subs	r3, #1
 8003006:	b29a      	uxth	r2, r3
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003010:	b29b      	uxth	r3, r3
 8003012:	2b00      	cmp	r3, #0
 8003014:	d1cb      	bne.n	8002fae <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	9300      	str	r3, [sp, #0]
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	2200      	movs	r2, #0
 800301e:	2140      	movs	r1, #64	@ 0x40
 8003020:	68f8      	ldr	r0, [r7, #12]
 8003022:	f000 fad1 	bl	80035c8 <UART_WaitOnFlagUntilTimeout>
 8003026:	4603      	mov	r3, r0
 8003028:	2b00      	cmp	r3, #0
 800302a:	d005      	beq.n	8003038 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2220      	movs	r2, #32
 8003030:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003034:	2303      	movs	r3, #3
 8003036:	e006      	b.n	8003046 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2220      	movs	r2, #32
 800303c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003040:	2300      	movs	r3, #0
 8003042:	e000      	b.n	8003046 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003044:	2302      	movs	r3, #2
  }
}
 8003046:	4618      	mov	r0, r3
 8003048:	3720      	adds	r7, #32
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
	...

08003050 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b0ba      	sub	sp, #232	@ 0xe8
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	695b      	ldr	r3, [r3, #20]
 8003072:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003076:	2300      	movs	r3, #0
 8003078:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800307c:	2300      	movs	r3, #0
 800307e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003082:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003086:	f003 030f 	and.w	r3, r3, #15
 800308a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800308e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003092:	2b00      	cmp	r3, #0
 8003094:	d10f      	bne.n	80030b6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003096:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800309a:	f003 0320 	and.w	r3, r3, #32
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d009      	beq.n	80030b6 <HAL_UART_IRQHandler+0x66>
 80030a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80030a6:	f003 0320 	and.w	r3, r3, #32
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d003      	beq.n	80030b6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f000 fbc2 	bl	8003838 <UART_Receive_IT>
      return;
 80030b4:	e25b      	b.n	800356e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80030b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	f000 80de 	beq.w	800327c <HAL_UART_IRQHandler+0x22c>
 80030c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80030c4:	f003 0301 	and.w	r3, r3, #1
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d106      	bne.n	80030da <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80030cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80030d0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	f000 80d1 	beq.w	800327c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80030da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030de:	f003 0301 	and.w	r3, r3, #1
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d00b      	beq.n	80030fe <HAL_UART_IRQHandler+0xae>
 80030e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80030ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d005      	beq.n	80030fe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030f6:	f043 0201 	orr.w	r2, r3, #1
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80030fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003102:	f003 0304 	and.w	r3, r3, #4
 8003106:	2b00      	cmp	r3, #0
 8003108:	d00b      	beq.n	8003122 <HAL_UART_IRQHandler+0xd2>
 800310a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800310e:	f003 0301 	and.w	r3, r3, #1
 8003112:	2b00      	cmp	r3, #0
 8003114:	d005      	beq.n	8003122 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800311a:	f043 0202 	orr.w	r2, r3, #2
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003122:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003126:	f003 0302 	and.w	r3, r3, #2
 800312a:	2b00      	cmp	r3, #0
 800312c:	d00b      	beq.n	8003146 <HAL_UART_IRQHandler+0xf6>
 800312e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003132:	f003 0301 	and.w	r3, r3, #1
 8003136:	2b00      	cmp	r3, #0
 8003138:	d005      	beq.n	8003146 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800313e:	f043 0204 	orr.w	r2, r3, #4
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003146:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800314a:	f003 0308 	and.w	r3, r3, #8
 800314e:	2b00      	cmp	r3, #0
 8003150:	d011      	beq.n	8003176 <HAL_UART_IRQHandler+0x126>
 8003152:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003156:	f003 0320 	and.w	r3, r3, #32
 800315a:	2b00      	cmp	r3, #0
 800315c:	d105      	bne.n	800316a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800315e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003162:	f003 0301 	and.w	r3, r3, #1
 8003166:	2b00      	cmp	r3, #0
 8003168:	d005      	beq.n	8003176 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800316e:	f043 0208 	orr.w	r2, r3, #8
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800317a:	2b00      	cmp	r3, #0
 800317c:	f000 81f2 	beq.w	8003564 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003180:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003184:	f003 0320 	and.w	r3, r3, #32
 8003188:	2b00      	cmp	r3, #0
 800318a:	d008      	beq.n	800319e <HAL_UART_IRQHandler+0x14e>
 800318c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003190:	f003 0320 	and.w	r3, r3, #32
 8003194:	2b00      	cmp	r3, #0
 8003196:	d002      	beq.n	800319e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	f000 fb4d 	bl	8003838 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	695b      	ldr	r3, [r3, #20]
 80031a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031a8:	2b40      	cmp	r3, #64	@ 0x40
 80031aa:	bf0c      	ite	eq
 80031ac:	2301      	moveq	r3, #1
 80031ae:	2300      	movne	r3, #0
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031ba:	f003 0308 	and.w	r3, r3, #8
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d103      	bne.n	80031ca <HAL_UART_IRQHandler+0x17a>
 80031c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d04f      	beq.n	800326a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f000 fa55 	bl	800367a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	695b      	ldr	r3, [r3, #20]
 80031d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031da:	2b40      	cmp	r3, #64	@ 0x40
 80031dc:	d141      	bne.n	8003262 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	3314      	adds	r3, #20
 80031e4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80031ec:	e853 3f00 	ldrex	r3, [r3]
 80031f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80031f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80031f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80031fc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	3314      	adds	r3, #20
 8003206:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800320a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800320e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003212:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003216:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800321a:	e841 2300 	strex	r3, r2, [r1]
 800321e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003222:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003226:	2b00      	cmp	r3, #0
 8003228:	d1d9      	bne.n	80031de <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800322e:	2b00      	cmp	r3, #0
 8003230:	d013      	beq.n	800325a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003236:	4a7e      	ldr	r2, [pc, #504]	@ (8003430 <HAL_UART_IRQHandler+0x3e0>)
 8003238:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800323e:	4618      	mov	r0, r3
 8003240:	f7fe fd82 	bl	8001d48 <HAL_DMA_Abort_IT>
 8003244:	4603      	mov	r3, r0
 8003246:	2b00      	cmp	r3, #0
 8003248:	d016      	beq.n	8003278 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800324e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003250:	687a      	ldr	r2, [r7, #4]
 8003252:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003254:	4610      	mov	r0, r2
 8003256:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003258:	e00e      	b.n	8003278 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f000 f99e 	bl	800359c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003260:	e00a      	b.n	8003278 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f000 f99a 	bl	800359c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003268:	e006      	b.n	8003278 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f000 f996 	bl	800359c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2200      	movs	r2, #0
 8003274:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003276:	e175      	b.n	8003564 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003278:	bf00      	nop
    return;
 800327a:	e173      	b.n	8003564 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003280:	2b01      	cmp	r3, #1
 8003282:	f040 814f 	bne.w	8003524 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003286:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800328a:	f003 0310 	and.w	r3, r3, #16
 800328e:	2b00      	cmp	r3, #0
 8003290:	f000 8148 	beq.w	8003524 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003294:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003298:	f003 0310 	and.w	r3, r3, #16
 800329c:	2b00      	cmp	r3, #0
 800329e:	f000 8141 	beq.w	8003524 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80032a2:	2300      	movs	r3, #0
 80032a4:	60bb      	str	r3, [r7, #8]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	60bb      	str	r3, [r7, #8]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	60bb      	str	r3, [r7, #8]
 80032b6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	695b      	ldr	r3, [r3, #20]
 80032be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032c2:	2b40      	cmp	r3, #64	@ 0x40
 80032c4:	f040 80b6 	bne.w	8003434 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80032d4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80032d8:	2b00      	cmp	r3, #0
 80032da:	f000 8145 	beq.w	8003568 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80032e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80032e6:	429a      	cmp	r2, r3
 80032e8:	f080 813e 	bcs.w	8003568 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80032f2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032f8:	69db      	ldr	r3, [r3, #28]
 80032fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80032fe:	f000 8088 	beq.w	8003412 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	330c      	adds	r3, #12
 8003308:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800330c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003310:	e853 3f00 	ldrex	r3, [r3]
 8003314:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003318:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800331c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003320:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	330c      	adds	r3, #12
 800332a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800332e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003332:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003336:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800333a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800333e:	e841 2300 	strex	r3, r2, [r1]
 8003342:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003346:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800334a:	2b00      	cmp	r3, #0
 800334c:	d1d9      	bne.n	8003302 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	3314      	adds	r3, #20
 8003354:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003356:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003358:	e853 3f00 	ldrex	r3, [r3]
 800335c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800335e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003360:	f023 0301 	bic.w	r3, r3, #1
 8003364:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	3314      	adds	r3, #20
 800336e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003372:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003376:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003378:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800337a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800337e:	e841 2300 	strex	r3, r2, [r1]
 8003382:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003384:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003386:	2b00      	cmp	r3, #0
 8003388:	d1e1      	bne.n	800334e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	3314      	adds	r3, #20
 8003390:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003392:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003394:	e853 3f00 	ldrex	r3, [r3]
 8003398:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800339a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800339c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80033a0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	3314      	adds	r3, #20
 80033aa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80033ae:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80033b0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033b2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80033b4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80033b6:	e841 2300 	strex	r3, r2, [r1]
 80033ba:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80033bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d1e3      	bne.n	800338a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2220      	movs	r2, #32
 80033c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2200      	movs	r2, #0
 80033ce:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	330c      	adds	r3, #12
 80033d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80033da:	e853 3f00 	ldrex	r3, [r3]
 80033de:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80033e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80033e2:	f023 0310 	bic.w	r3, r3, #16
 80033e6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	330c      	adds	r3, #12
 80033f0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80033f4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80033f6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033f8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80033fa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80033fc:	e841 2300 	strex	r3, r2, [r1]
 8003400:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003402:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003404:	2b00      	cmp	r3, #0
 8003406:	d1e3      	bne.n	80033d0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800340c:	4618      	mov	r0, r3
 800340e:	f7fe fc2b 	bl	8001c68 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2202      	movs	r2, #2
 8003416:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003420:	b29b      	uxth	r3, r3
 8003422:	1ad3      	subs	r3, r2, r3
 8003424:	b29b      	uxth	r3, r3
 8003426:	4619      	mov	r1, r3
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	f000 f8c1 	bl	80035b0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800342e:	e09b      	b.n	8003568 <HAL_UART_IRQHandler+0x518>
 8003430:	08003741 	.word	0x08003741
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800343c:	b29b      	uxth	r3, r3
 800343e:	1ad3      	subs	r3, r2, r3
 8003440:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003448:	b29b      	uxth	r3, r3
 800344a:	2b00      	cmp	r3, #0
 800344c:	f000 808e 	beq.w	800356c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003450:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003454:	2b00      	cmp	r3, #0
 8003456:	f000 8089 	beq.w	800356c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	330c      	adds	r3, #12
 8003460:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003462:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003464:	e853 3f00 	ldrex	r3, [r3]
 8003468:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800346a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800346c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003470:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	330c      	adds	r3, #12
 800347a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800347e:	647a      	str	r2, [r7, #68]	@ 0x44
 8003480:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003482:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003484:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003486:	e841 2300 	strex	r3, r2, [r1]
 800348a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800348c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800348e:	2b00      	cmp	r3, #0
 8003490:	d1e3      	bne.n	800345a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	3314      	adds	r3, #20
 8003498:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800349a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800349c:	e853 3f00 	ldrex	r3, [r3]
 80034a0:	623b      	str	r3, [r7, #32]
   return(result);
 80034a2:	6a3b      	ldr	r3, [r7, #32]
 80034a4:	f023 0301 	bic.w	r3, r3, #1
 80034a8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	3314      	adds	r3, #20
 80034b2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80034b6:	633a      	str	r2, [r7, #48]	@ 0x30
 80034b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80034bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80034be:	e841 2300 	strex	r3, r2, [r1]
 80034c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80034c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d1e3      	bne.n	8003492 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2220      	movs	r2, #32
 80034ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2200      	movs	r2, #0
 80034d6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	330c      	adds	r3, #12
 80034de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	e853 3f00 	ldrex	r3, [r3]
 80034e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	f023 0310 	bic.w	r3, r3, #16
 80034ee:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	330c      	adds	r3, #12
 80034f8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80034fc:	61fa      	str	r2, [r7, #28]
 80034fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003500:	69b9      	ldr	r1, [r7, #24]
 8003502:	69fa      	ldr	r2, [r7, #28]
 8003504:	e841 2300 	strex	r3, r2, [r1]
 8003508:	617b      	str	r3, [r7, #20]
   return(result);
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d1e3      	bne.n	80034d8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2202      	movs	r2, #2
 8003514:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003516:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800351a:	4619      	mov	r1, r3
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	f000 f847 	bl	80035b0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003522:	e023      	b.n	800356c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003524:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003528:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800352c:	2b00      	cmp	r3, #0
 800352e:	d009      	beq.n	8003544 <HAL_UART_IRQHandler+0x4f4>
 8003530:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003534:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003538:	2b00      	cmp	r3, #0
 800353a:	d003      	beq.n	8003544 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f000 f913 	bl	8003768 <UART_Transmit_IT>
    return;
 8003542:	e014      	b.n	800356e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003544:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003548:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800354c:	2b00      	cmp	r3, #0
 800354e:	d00e      	beq.n	800356e <HAL_UART_IRQHandler+0x51e>
 8003550:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003554:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003558:	2b00      	cmp	r3, #0
 800355a:	d008      	beq.n	800356e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800355c:	6878      	ldr	r0, [r7, #4]
 800355e:	f000 f953 	bl	8003808 <UART_EndTransmit_IT>
    return;
 8003562:	e004      	b.n	800356e <HAL_UART_IRQHandler+0x51e>
    return;
 8003564:	bf00      	nop
 8003566:	e002      	b.n	800356e <HAL_UART_IRQHandler+0x51e>
      return;
 8003568:	bf00      	nop
 800356a:	e000      	b.n	800356e <HAL_UART_IRQHandler+0x51e>
      return;
 800356c:	bf00      	nop
  }
}
 800356e:	37e8      	adds	r7, #232	@ 0xe8
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}

08003574 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003574:	b480      	push	{r7}
 8003576:	b083      	sub	sp, #12
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800357c:	bf00      	nop
 800357e:	370c      	adds	r7, #12
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr

08003588 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003588:	b480      	push	{r7}
 800358a:	b083      	sub	sp, #12
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003590:	bf00      	nop
 8003592:	370c      	adds	r7, #12
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr

0800359c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800359c:	b480      	push	{r7}
 800359e:	b083      	sub	sp, #12
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80035a4:	bf00      	nop
 80035a6:	370c      	adds	r7, #12
 80035a8:	46bd      	mov	sp, r7
 80035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ae:	4770      	bx	lr

080035b0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b083      	sub	sp, #12
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
 80035b8:	460b      	mov	r3, r1
 80035ba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80035bc:	bf00      	nop
 80035be:	370c      	adds	r7, #12
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr

080035c8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b086      	sub	sp, #24
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	60f8      	str	r0, [r7, #12]
 80035d0:	60b9      	str	r1, [r7, #8]
 80035d2:	603b      	str	r3, [r7, #0]
 80035d4:	4613      	mov	r3, r2
 80035d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035d8:	e03b      	b.n	8003652 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035da:	6a3b      	ldr	r3, [r7, #32]
 80035dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035e0:	d037      	beq.n	8003652 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035e2:	f7fd fbd3 	bl	8000d8c <HAL_GetTick>
 80035e6:	4602      	mov	r2, r0
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	1ad3      	subs	r3, r2, r3
 80035ec:	6a3a      	ldr	r2, [r7, #32]
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d302      	bcc.n	80035f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80035f2:	6a3b      	ldr	r3, [r7, #32]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d101      	bne.n	80035fc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80035f8:	2303      	movs	r3, #3
 80035fa:	e03a      	b.n	8003672 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	68db      	ldr	r3, [r3, #12]
 8003602:	f003 0304 	and.w	r3, r3, #4
 8003606:	2b00      	cmp	r3, #0
 8003608:	d023      	beq.n	8003652 <UART_WaitOnFlagUntilTimeout+0x8a>
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	2b80      	cmp	r3, #128	@ 0x80
 800360e:	d020      	beq.n	8003652 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	2b40      	cmp	r3, #64	@ 0x40
 8003614:	d01d      	beq.n	8003652 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 0308 	and.w	r3, r3, #8
 8003620:	2b08      	cmp	r3, #8
 8003622:	d116      	bne.n	8003652 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003624:	2300      	movs	r3, #0
 8003626:	617b      	str	r3, [r7, #20]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	617b      	str	r3, [r7, #20]
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	617b      	str	r3, [r7, #20]
 8003638:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800363a:	68f8      	ldr	r0, [r7, #12]
 800363c:	f000 f81d 	bl	800367a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2208      	movs	r2, #8
 8003644:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2200      	movs	r2, #0
 800364a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e00f      	b.n	8003672 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	4013      	ands	r3, r2
 800365c:	68ba      	ldr	r2, [r7, #8]
 800365e:	429a      	cmp	r2, r3
 8003660:	bf0c      	ite	eq
 8003662:	2301      	moveq	r3, #1
 8003664:	2300      	movne	r3, #0
 8003666:	b2db      	uxtb	r3, r3
 8003668:	461a      	mov	r2, r3
 800366a:	79fb      	ldrb	r3, [r7, #7]
 800366c:	429a      	cmp	r2, r3
 800366e:	d0b4      	beq.n	80035da <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003670:	2300      	movs	r3, #0
}
 8003672:	4618      	mov	r0, r3
 8003674:	3718      	adds	r7, #24
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}

0800367a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800367a:	b480      	push	{r7}
 800367c:	b095      	sub	sp, #84	@ 0x54
 800367e:	af00      	add	r7, sp, #0
 8003680:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	330c      	adds	r3, #12
 8003688:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800368a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800368c:	e853 3f00 	ldrex	r3, [r3]
 8003690:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003694:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003698:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	330c      	adds	r3, #12
 80036a0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80036a2:	643a      	str	r2, [r7, #64]	@ 0x40
 80036a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036a6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80036a8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80036aa:	e841 2300 	strex	r3, r2, [r1]
 80036ae:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80036b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d1e5      	bne.n	8003682 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	3314      	adds	r3, #20
 80036bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036be:	6a3b      	ldr	r3, [r7, #32]
 80036c0:	e853 3f00 	ldrex	r3, [r3]
 80036c4:	61fb      	str	r3, [r7, #28]
   return(result);
 80036c6:	69fb      	ldr	r3, [r7, #28]
 80036c8:	f023 0301 	bic.w	r3, r3, #1
 80036cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	3314      	adds	r3, #20
 80036d4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80036d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80036d8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036da:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80036dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80036de:	e841 2300 	strex	r3, r2, [r1]
 80036e2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80036e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d1e5      	bne.n	80036b6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d119      	bne.n	8003726 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	330c      	adds	r3, #12
 80036f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	e853 3f00 	ldrex	r3, [r3]
 8003700:	60bb      	str	r3, [r7, #8]
   return(result);
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	f023 0310 	bic.w	r3, r3, #16
 8003708:	647b      	str	r3, [r7, #68]	@ 0x44
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	330c      	adds	r3, #12
 8003710:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003712:	61ba      	str	r2, [r7, #24]
 8003714:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003716:	6979      	ldr	r1, [r7, #20]
 8003718:	69ba      	ldr	r2, [r7, #24]
 800371a:	e841 2300 	strex	r3, r2, [r1]
 800371e:	613b      	str	r3, [r7, #16]
   return(result);
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d1e5      	bne.n	80036f2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2220      	movs	r2, #32
 800372a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2200      	movs	r2, #0
 8003732:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003734:	bf00      	nop
 8003736:	3754      	adds	r7, #84	@ 0x54
 8003738:	46bd      	mov	sp, r7
 800373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373e:	4770      	bx	lr

08003740 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b084      	sub	sp, #16
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800374c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2200      	movs	r2, #0
 8003752:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2200      	movs	r2, #0
 8003758:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800375a:	68f8      	ldr	r0, [r7, #12]
 800375c:	f7ff ff1e 	bl	800359c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003760:	bf00      	nop
 8003762:	3710      	adds	r7, #16
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}

08003768 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003768:	b480      	push	{r7}
 800376a:	b085      	sub	sp, #20
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003776:	b2db      	uxtb	r3, r3
 8003778:	2b21      	cmp	r3, #33	@ 0x21
 800377a:	d13e      	bne.n	80037fa <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003784:	d114      	bne.n	80037b0 <UART_Transmit_IT+0x48>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	691b      	ldr	r3, [r3, #16]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d110      	bne.n	80037b0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6a1b      	ldr	r3, [r3, #32]
 8003792:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	881b      	ldrh	r3, [r3, #0]
 8003798:	461a      	mov	r2, r3
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80037a2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6a1b      	ldr	r3, [r3, #32]
 80037a8:	1c9a      	adds	r2, r3, #2
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	621a      	str	r2, [r3, #32]
 80037ae:	e008      	b.n	80037c2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6a1b      	ldr	r3, [r3, #32]
 80037b4:	1c59      	adds	r1, r3, #1
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	6211      	str	r1, [r2, #32]
 80037ba:	781a      	ldrb	r2, [r3, #0]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80037c6:	b29b      	uxth	r3, r3
 80037c8:	3b01      	subs	r3, #1
 80037ca:	b29b      	uxth	r3, r3
 80037cc:	687a      	ldr	r2, [r7, #4]
 80037ce:	4619      	mov	r1, r3
 80037d0:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d10f      	bne.n	80037f6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	68da      	ldr	r2, [r3, #12]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80037e4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	68da      	ldr	r2, [r3, #12]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80037f4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80037f6:	2300      	movs	r3, #0
 80037f8:	e000      	b.n	80037fc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80037fa:	2302      	movs	r3, #2
  }
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	3714      	adds	r7, #20
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr

08003808 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b082      	sub	sp, #8
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	68da      	ldr	r2, [r3, #12]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800381e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2220      	movs	r2, #32
 8003824:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	f7ff fea3 	bl	8003574 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800382e:	2300      	movs	r3, #0
}
 8003830:	4618      	mov	r0, r3
 8003832:	3708      	adds	r7, #8
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}

08003838 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b08c      	sub	sp, #48	@ 0x30
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003846:	b2db      	uxtb	r3, r3
 8003848:	2b22      	cmp	r3, #34	@ 0x22
 800384a:	f040 80ae 	bne.w	80039aa <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003856:	d117      	bne.n	8003888 <UART_Receive_IT+0x50>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	691b      	ldr	r3, [r3, #16]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d113      	bne.n	8003888 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003860:	2300      	movs	r3, #0
 8003862:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003868:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	b29b      	uxth	r3, r3
 8003872:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003876:	b29a      	uxth	r2, r3
 8003878:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800387a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003880:	1c9a      	adds	r2, r3, #2
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	629a      	str	r2, [r3, #40]	@ 0x28
 8003886:	e026      	b.n	80038d6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800388c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800388e:	2300      	movs	r3, #0
 8003890:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800389a:	d007      	beq.n	80038ac <UART_Receive_IT+0x74>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d10a      	bne.n	80038ba <UART_Receive_IT+0x82>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	691b      	ldr	r3, [r3, #16]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d106      	bne.n	80038ba <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	b2da      	uxtb	r2, r3
 80038b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038b6:	701a      	strb	r2, [r3, #0]
 80038b8:	e008      	b.n	80038cc <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80038c6:	b2da      	uxtb	r2, r3
 80038c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038ca:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038d0:	1c5a      	adds	r2, r3, #1
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80038da:	b29b      	uxth	r3, r3
 80038dc:	3b01      	subs	r3, #1
 80038de:	b29b      	uxth	r3, r3
 80038e0:	687a      	ldr	r2, [r7, #4]
 80038e2:	4619      	mov	r1, r3
 80038e4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d15d      	bne.n	80039a6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	68da      	ldr	r2, [r3, #12]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f022 0220 	bic.w	r2, r2, #32
 80038f8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	68da      	ldr	r2, [r3, #12]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003908:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	695a      	ldr	r2, [r3, #20]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f022 0201 	bic.w	r2, r2, #1
 8003918:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2220      	movs	r2, #32
 800391e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2200      	movs	r2, #0
 8003926:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800392c:	2b01      	cmp	r3, #1
 800392e:	d135      	bne.n	800399c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2200      	movs	r2, #0
 8003934:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	330c      	adds	r3, #12
 800393c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	e853 3f00 	ldrex	r3, [r3]
 8003944:	613b      	str	r3, [r7, #16]
   return(result);
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	f023 0310 	bic.w	r3, r3, #16
 800394c:	627b      	str	r3, [r7, #36]	@ 0x24
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	330c      	adds	r3, #12
 8003954:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003956:	623a      	str	r2, [r7, #32]
 8003958:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800395a:	69f9      	ldr	r1, [r7, #28]
 800395c:	6a3a      	ldr	r2, [r7, #32]
 800395e:	e841 2300 	strex	r3, r2, [r1]
 8003962:	61bb      	str	r3, [r7, #24]
   return(result);
 8003964:	69bb      	ldr	r3, [r7, #24]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d1e5      	bne.n	8003936 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 0310 	and.w	r3, r3, #16
 8003974:	2b10      	cmp	r3, #16
 8003976:	d10a      	bne.n	800398e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003978:	2300      	movs	r3, #0
 800397a:	60fb      	str	r3, [r7, #12]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	60fb      	str	r3, [r7, #12]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	60fb      	str	r3, [r7, #12]
 800398c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003992:	4619      	mov	r1, r3
 8003994:	6878      	ldr	r0, [r7, #4]
 8003996:	f7ff fe0b 	bl	80035b0 <HAL_UARTEx_RxEventCallback>
 800399a:	e002      	b.n	80039a2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	f7ff fdf3 	bl	8003588 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80039a2:	2300      	movs	r3, #0
 80039a4:	e002      	b.n	80039ac <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80039a6:	2300      	movs	r3, #0
 80039a8:	e000      	b.n	80039ac <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80039aa:	2302      	movs	r3, #2
  }
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	3730      	adds	r7, #48	@ 0x30
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}

080039b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039b8:	b0c0      	sub	sp, #256	@ 0x100
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	691b      	ldr	r3, [r3, #16]
 80039c8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80039cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039d0:	68d9      	ldr	r1, [r3, #12]
 80039d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039d6:	681a      	ldr	r2, [r3, #0]
 80039d8:	ea40 0301 	orr.w	r3, r0, r1
 80039dc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80039de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039e2:	689a      	ldr	r2, [r3, #8]
 80039e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039e8:	691b      	ldr	r3, [r3, #16]
 80039ea:	431a      	orrs	r2, r3
 80039ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039f0:	695b      	ldr	r3, [r3, #20]
 80039f2:	431a      	orrs	r2, r3
 80039f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039f8:	69db      	ldr	r3, [r3, #28]
 80039fa:	4313      	orrs	r3, r2
 80039fc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003a00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003a0c:	f021 010c 	bic.w	r1, r1, #12
 8003a10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003a1a:	430b      	orrs	r3, r1
 8003a1c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003a1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	695b      	ldr	r3, [r3, #20]
 8003a26:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003a2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a2e:	6999      	ldr	r1, [r3, #24]
 8003a30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	ea40 0301 	orr.w	r3, r0, r1
 8003a3a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	4b8f      	ldr	r3, [pc, #572]	@ (8003c80 <UART_SetConfig+0x2cc>)
 8003a44:	429a      	cmp	r2, r3
 8003a46:	d005      	beq.n	8003a54 <UART_SetConfig+0xa0>
 8003a48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	4b8d      	ldr	r3, [pc, #564]	@ (8003c84 <UART_SetConfig+0x2d0>)
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d104      	bne.n	8003a5e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003a54:	f7ff fa0c 	bl	8002e70 <HAL_RCC_GetPCLK2Freq>
 8003a58:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003a5c:	e003      	b.n	8003a66 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003a5e:	f7ff f9f3 	bl	8002e48 <HAL_RCC_GetPCLK1Freq>
 8003a62:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a6a:	69db      	ldr	r3, [r3, #28]
 8003a6c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a70:	f040 810c 	bne.w	8003c8c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003a74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003a7e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003a82:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003a86:	4622      	mov	r2, r4
 8003a88:	462b      	mov	r3, r5
 8003a8a:	1891      	adds	r1, r2, r2
 8003a8c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003a8e:	415b      	adcs	r3, r3
 8003a90:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003a92:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003a96:	4621      	mov	r1, r4
 8003a98:	eb12 0801 	adds.w	r8, r2, r1
 8003a9c:	4629      	mov	r1, r5
 8003a9e:	eb43 0901 	adc.w	r9, r3, r1
 8003aa2:	f04f 0200 	mov.w	r2, #0
 8003aa6:	f04f 0300 	mov.w	r3, #0
 8003aaa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003aae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ab2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ab6:	4690      	mov	r8, r2
 8003ab8:	4699      	mov	r9, r3
 8003aba:	4623      	mov	r3, r4
 8003abc:	eb18 0303 	adds.w	r3, r8, r3
 8003ac0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003ac4:	462b      	mov	r3, r5
 8003ac6:	eb49 0303 	adc.w	r3, r9, r3
 8003aca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003ace:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003ada:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003ade:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003ae2:	460b      	mov	r3, r1
 8003ae4:	18db      	adds	r3, r3, r3
 8003ae6:	653b      	str	r3, [r7, #80]	@ 0x50
 8003ae8:	4613      	mov	r3, r2
 8003aea:	eb42 0303 	adc.w	r3, r2, r3
 8003aee:	657b      	str	r3, [r7, #84]	@ 0x54
 8003af0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003af4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003af8:	f7fc fbc2 	bl	8000280 <__aeabi_uldivmod>
 8003afc:	4602      	mov	r2, r0
 8003afe:	460b      	mov	r3, r1
 8003b00:	4b61      	ldr	r3, [pc, #388]	@ (8003c88 <UART_SetConfig+0x2d4>)
 8003b02:	fba3 2302 	umull	r2, r3, r3, r2
 8003b06:	095b      	lsrs	r3, r3, #5
 8003b08:	011c      	lsls	r4, r3, #4
 8003b0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b0e:	2200      	movs	r2, #0
 8003b10:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003b14:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003b18:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003b1c:	4642      	mov	r2, r8
 8003b1e:	464b      	mov	r3, r9
 8003b20:	1891      	adds	r1, r2, r2
 8003b22:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003b24:	415b      	adcs	r3, r3
 8003b26:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b28:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003b2c:	4641      	mov	r1, r8
 8003b2e:	eb12 0a01 	adds.w	sl, r2, r1
 8003b32:	4649      	mov	r1, r9
 8003b34:	eb43 0b01 	adc.w	fp, r3, r1
 8003b38:	f04f 0200 	mov.w	r2, #0
 8003b3c:	f04f 0300 	mov.w	r3, #0
 8003b40:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003b44:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003b48:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b4c:	4692      	mov	sl, r2
 8003b4e:	469b      	mov	fp, r3
 8003b50:	4643      	mov	r3, r8
 8003b52:	eb1a 0303 	adds.w	r3, sl, r3
 8003b56:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003b5a:	464b      	mov	r3, r9
 8003b5c:	eb4b 0303 	adc.w	r3, fp, r3
 8003b60:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003b64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003b70:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003b74:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003b78:	460b      	mov	r3, r1
 8003b7a:	18db      	adds	r3, r3, r3
 8003b7c:	643b      	str	r3, [r7, #64]	@ 0x40
 8003b7e:	4613      	mov	r3, r2
 8003b80:	eb42 0303 	adc.w	r3, r2, r3
 8003b84:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b86:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003b8a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003b8e:	f7fc fb77 	bl	8000280 <__aeabi_uldivmod>
 8003b92:	4602      	mov	r2, r0
 8003b94:	460b      	mov	r3, r1
 8003b96:	4611      	mov	r1, r2
 8003b98:	4b3b      	ldr	r3, [pc, #236]	@ (8003c88 <UART_SetConfig+0x2d4>)
 8003b9a:	fba3 2301 	umull	r2, r3, r3, r1
 8003b9e:	095b      	lsrs	r3, r3, #5
 8003ba0:	2264      	movs	r2, #100	@ 0x64
 8003ba2:	fb02 f303 	mul.w	r3, r2, r3
 8003ba6:	1acb      	subs	r3, r1, r3
 8003ba8:	00db      	lsls	r3, r3, #3
 8003baa:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003bae:	4b36      	ldr	r3, [pc, #216]	@ (8003c88 <UART_SetConfig+0x2d4>)
 8003bb0:	fba3 2302 	umull	r2, r3, r3, r2
 8003bb4:	095b      	lsrs	r3, r3, #5
 8003bb6:	005b      	lsls	r3, r3, #1
 8003bb8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003bbc:	441c      	add	r4, r3
 8003bbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003bc8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003bcc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003bd0:	4642      	mov	r2, r8
 8003bd2:	464b      	mov	r3, r9
 8003bd4:	1891      	adds	r1, r2, r2
 8003bd6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003bd8:	415b      	adcs	r3, r3
 8003bda:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003bdc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003be0:	4641      	mov	r1, r8
 8003be2:	1851      	adds	r1, r2, r1
 8003be4:	6339      	str	r1, [r7, #48]	@ 0x30
 8003be6:	4649      	mov	r1, r9
 8003be8:	414b      	adcs	r3, r1
 8003bea:	637b      	str	r3, [r7, #52]	@ 0x34
 8003bec:	f04f 0200 	mov.w	r2, #0
 8003bf0:	f04f 0300 	mov.w	r3, #0
 8003bf4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003bf8:	4659      	mov	r1, fp
 8003bfa:	00cb      	lsls	r3, r1, #3
 8003bfc:	4651      	mov	r1, sl
 8003bfe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c02:	4651      	mov	r1, sl
 8003c04:	00ca      	lsls	r2, r1, #3
 8003c06:	4610      	mov	r0, r2
 8003c08:	4619      	mov	r1, r3
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	4642      	mov	r2, r8
 8003c0e:	189b      	adds	r3, r3, r2
 8003c10:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003c14:	464b      	mov	r3, r9
 8003c16:	460a      	mov	r2, r1
 8003c18:	eb42 0303 	adc.w	r3, r2, r3
 8003c1c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003c20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	2200      	movs	r2, #0
 8003c28:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003c2c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003c30:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003c34:	460b      	mov	r3, r1
 8003c36:	18db      	adds	r3, r3, r3
 8003c38:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003c3a:	4613      	mov	r3, r2
 8003c3c:	eb42 0303 	adc.w	r3, r2, r3
 8003c40:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c42:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003c46:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003c4a:	f7fc fb19 	bl	8000280 <__aeabi_uldivmod>
 8003c4e:	4602      	mov	r2, r0
 8003c50:	460b      	mov	r3, r1
 8003c52:	4b0d      	ldr	r3, [pc, #52]	@ (8003c88 <UART_SetConfig+0x2d4>)
 8003c54:	fba3 1302 	umull	r1, r3, r3, r2
 8003c58:	095b      	lsrs	r3, r3, #5
 8003c5a:	2164      	movs	r1, #100	@ 0x64
 8003c5c:	fb01 f303 	mul.w	r3, r1, r3
 8003c60:	1ad3      	subs	r3, r2, r3
 8003c62:	00db      	lsls	r3, r3, #3
 8003c64:	3332      	adds	r3, #50	@ 0x32
 8003c66:	4a08      	ldr	r2, [pc, #32]	@ (8003c88 <UART_SetConfig+0x2d4>)
 8003c68:	fba2 2303 	umull	r2, r3, r2, r3
 8003c6c:	095b      	lsrs	r3, r3, #5
 8003c6e:	f003 0207 	and.w	r2, r3, #7
 8003c72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4422      	add	r2, r4
 8003c7a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003c7c:	e106      	b.n	8003e8c <UART_SetConfig+0x4d8>
 8003c7e:	bf00      	nop
 8003c80:	40011000 	.word	0x40011000
 8003c84:	40011400 	.word	0x40011400
 8003c88:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c90:	2200      	movs	r2, #0
 8003c92:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003c96:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003c9a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003c9e:	4642      	mov	r2, r8
 8003ca0:	464b      	mov	r3, r9
 8003ca2:	1891      	adds	r1, r2, r2
 8003ca4:	6239      	str	r1, [r7, #32]
 8003ca6:	415b      	adcs	r3, r3
 8003ca8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003caa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003cae:	4641      	mov	r1, r8
 8003cb0:	1854      	adds	r4, r2, r1
 8003cb2:	4649      	mov	r1, r9
 8003cb4:	eb43 0501 	adc.w	r5, r3, r1
 8003cb8:	f04f 0200 	mov.w	r2, #0
 8003cbc:	f04f 0300 	mov.w	r3, #0
 8003cc0:	00eb      	lsls	r3, r5, #3
 8003cc2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003cc6:	00e2      	lsls	r2, r4, #3
 8003cc8:	4614      	mov	r4, r2
 8003cca:	461d      	mov	r5, r3
 8003ccc:	4643      	mov	r3, r8
 8003cce:	18e3      	adds	r3, r4, r3
 8003cd0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003cd4:	464b      	mov	r3, r9
 8003cd6:	eb45 0303 	adc.w	r3, r5, r3
 8003cda:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003cde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003cea:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003cee:	f04f 0200 	mov.w	r2, #0
 8003cf2:	f04f 0300 	mov.w	r3, #0
 8003cf6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003cfa:	4629      	mov	r1, r5
 8003cfc:	008b      	lsls	r3, r1, #2
 8003cfe:	4621      	mov	r1, r4
 8003d00:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d04:	4621      	mov	r1, r4
 8003d06:	008a      	lsls	r2, r1, #2
 8003d08:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003d0c:	f7fc fab8 	bl	8000280 <__aeabi_uldivmod>
 8003d10:	4602      	mov	r2, r0
 8003d12:	460b      	mov	r3, r1
 8003d14:	4b60      	ldr	r3, [pc, #384]	@ (8003e98 <UART_SetConfig+0x4e4>)
 8003d16:	fba3 2302 	umull	r2, r3, r3, r2
 8003d1a:	095b      	lsrs	r3, r3, #5
 8003d1c:	011c      	lsls	r4, r3, #4
 8003d1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d22:	2200      	movs	r2, #0
 8003d24:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003d28:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003d2c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003d30:	4642      	mov	r2, r8
 8003d32:	464b      	mov	r3, r9
 8003d34:	1891      	adds	r1, r2, r2
 8003d36:	61b9      	str	r1, [r7, #24]
 8003d38:	415b      	adcs	r3, r3
 8003d3a:	61fb      	str	r3, [r7, #28]
 8003d3c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d40:	4641      	mov	r1, r8
 8003d42:	1851      	adds	r1, r2, r1
 8003d44:	6139      	str	r1, [r7, #16]
 8003d46:	4649      	mov	r1, r9
 8003d48:	414b      	adcs	r3, r1
 8003d4a:	617b      	str	r3, [r7, #20]
 8003d4c:	f04f 0200 	mov.w	r2, #0
 8003d50:	f04f 0300 	mov.w	r3, #0
 8003d54:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003d58:	4659      	mov	r1, fp
 8003d5a:	00cb      	lsls	r3, r1, #3
 8003d5c:	4651      	mov	r1, sl
 8003d5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d62:	4651      	mov	r1, sl
 8003d64:	00ca      	lsls	r2, r1, #3
 8003d66:	4610      	mov	r0, r2
 8003d68:	4619      	mov	r1, r3
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	4642      	mov	r2, r8
 8003d6e:	189b      	adds	r3, r3, r2
 8003d70:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003d74:	464b      	mov	r3, r9
 8003d76:	460a      	mov	r2, r1
 8003d78:	eb42 0303 	adc.w	r3, r2, r3
 8003d7c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003d80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	2200      	movs	r2, #0
 8003d88:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003d8a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003d8c:	f04f 0200 	mov.w	r2, #0
 8003d90:	f04f 0300 	mov.w	r3, #0
 8003d94:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003d98:	4649      	mov	r1, r9
 8003d9a:	008b      	lsls	r3, r1, #2
 8003d9c:	4641      	mov	r1, r8
 8003d9e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003da2:	4641      	mov	r1, r8
 8003da4:	008a      	lsls	r2, r1, #2
 8003da6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003daa:	f7fc fa69 	bl	8000280 <__aeabi_uldivmod>
 8003dae:	4602      	mov	r2, r0
 8003db0:	460b      	mov	r3, r1
 8003db2:	4611      	mov	r1, r2
 8003db4:	4b38      	ldr	r3, [pc, #224]	@ (8003e98 <UART_SetConfig+0x4e4>)
 8003db6:	fba3 2301 	umull	r2, r3, r3, r1
 8003dba:	095b      	lsrs	r3, r3, #5
 8003dbc:	2264      	movs	r2, #100	@ 0x64
 8003dbe:	fb02 f303 	mul.w	r3, r2, r3
 8003dc2:	1acb      	subs	r3, r1, r3
 8003dc4:	011b      	lsls	r3, r3, #4
 8003dc6:	3332      	adds	r3, #50	@ 0x32
 8003dc8:	4a33      	ldr	r2, [pc, #204]	@ (8003e98 <UART_SetConfig+0x4e4>)
 8003dca:	fba2 2303 	umull	r2, r3, r2, r3
 8003dce:	095b      	lsrs	r3, r3, #5
 8003dd0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003dd4:	441c      	add	r4, r3
 8003dd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003dda:	2200      	movs	r2, #0
 8003ddc:	673b      	str	r3, [r7, #112]	@ 0x70
 8003dde:	677a      	str	r2, [r7, #116]	@ 0x74
 8003de0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003de4:	4642      	mov	r2, r8
 8003de6:	464b      	mov	r3, r9
 8003de8:	1891      	adds	r1, r2, r2
 8003dea:	60b9      	str	r1, [r7, #8]
 8003dec:	415b      	adcs	r3, r3
 8003dee:	60fb      	str	r3, [r7, #12]
 8003df0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003df4:	4641      	mov	r1, r8
 8003df6:	1851      	adds	r1, r2, r1
 8003df8:	6039      	str	r1, [r7, #0]
 8003dfa:	4649      	mov	r1, r9
 8003dfc:	414b      	adcs	r3, r1
 8003dfe:	607b      	str	r3, [r7, #4]
 8003e00:	f04f 0200 	mov.w	r2, #0
 8003e04:	f04f 0300 	mov.w	r3, #0
 8003e08:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003e0c:	4659      	mov	r1, fp
 8003e0e:	00cb      	lsls	r3, r1, #3
 8003e10:	4651      	mov	r1, sl
 8003e12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e16:	4651      	mov	r1, sl
 8003e18:	00ca      	lsls	r2, r1, #3
 8003e1a:	4610      	mov	r0, r2
 8003e1c:	4619      	mov	r1, r3
 8003e1e:	4603      	mov	r3, r0
 8003e20:	4642      	mov	r2, r8
 8003e22:	189b      	adds	r3, r3, r2
 8003e24:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003e26:	464b      	mov	r3, r9
 8003e28:	460a      	mov	r2, r1
 8003e2a:	eb42 0303 	adc.w	r3, r2, r3
 8003e2e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003e30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	2200      	movs	r2, #0
 8003e38:	663b      	str	r3, [r7, #96]	@ 0x60
 8003e3a:	667a      	str	r2, [r7, #100]	@ 0x64
 8003e3c:	f04f 0200 	mov.w	r2, #0
 8003e40:	f04f 0300 	mov.w	r3, #0
 8003e44:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003e48:	4649      	mov	r1, r9
 8003e4a:	008b      	lsls	r3, r1, #2
 8003e4c:	4641      	mov	r1, r8
 8003e4e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e52:	4641      	mov	r1, r8
 8003e54:	008a      	lsls	r2, r1, #2
 8003e56:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003e5a:	f7fc fa11 	bl	8000280 <__aeabi_uldivmod>
 8003e5e:	4602      	mov	r2, r0
 8003e60:	460b      	mov	r3, r1
 8003e62:	4b0d      	ldr	r3, [pc, #52]	@ (8003e98 <UART_SetConfig+0x4e4>)
 8003e64:	fba3 1302 	umull	r1, r3, r3, r2
 8003e68:	095b      	lsrs	r3, r3, #5
 8003e6a:	2164      	movs	r1, #100	@ 0x64
 8003e6c:	fb01 f303 	mul.w	r3, r1, r3
 8003e70:	1ad3      	subs	r3, r2, r3
 8003e72:	011b      	lsls	r3, r3, #4
 8003e74:	3332      	adds	r3, #50	@ 0x32
 8003e76:	4a08      	ldr	r2, [pc, #32]	@ (8003e98 <UART_SetConfig+0x4e4>)
 8003e78:	fba2 2303 	umull	r2, r3, r2, r3
 8003e7c:	095b      	lsrs	r3, r3, #5
 8003e7e:	f003 020f 	and.w	r2, r3, #15
 8003e82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4422      	add	r2, r4
 8003e8a:	609a      	str	r2, [r3, #8]
}
 8003e8c:	bf00      	nop
 8003e8e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003e92:	46bd      	mov	sp, r7
 8003e94:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e98:	51eb851f 	.word	0x51eb851f

08003e9c <std>:
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	b510      	push	{r4, lr}
 8003ea0:	4604      	mov	r4, r0
 8003ea2:	e9c0 3300 	strd	r3, r3, [r0]
 8003ea6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003eaa:	6083      	str	r3, [r0, #8]
 8003eac:	8181      	strh	r1, [r0, #12]
 8003eae:	6643      	str	r3, [r0, #100]	@ 0x64
 8003eb0:	81c2      	strh	r2, [r0, #14]
 8003eb2:	6183      	str	r3, [r0, #24]
 8003eb4:	4619      	mov	r1, r3
 8003eb6:	2208      	movs	r2, #8
 8003eb8:	305c      	adds	r0, #92	@ 0x5c
 8003eba:	f000 f906 	bl	80040ca <memset>
 8003ebe:	4b0d      	ldr	r3, [pc, #52]	@ (8003ef4 <std+0x58>)
 8003ec0:	6263      	str	r3, [r4, #36]	@ 0x24
 8003ec2:	4b0d      	ldr	r3, [pc, #52]	@ (8003ef8 <std+0x5c>)
 8003ec4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003ec6:	4b0d      	ldr	r3, [pc, #52]	@ (8003efc <std+0x60>)
 8003ec8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003eca:	4b0d      	ldr	r3, [pc, #52]	@ (8003f00 <std+0x64>)
 8003ecc:	6323      	str	r3, [r4, #48]	@ 0x30
 8003ece:	4b0d      	ldr	r3, [pc, #52]	@ (8003f04 <std+0x68>)
 8003ed0:	6224      	str	r4, [r4, #32]
 8003ed2:	429c      	cmp	r4, r3
 8003ed4:	d006      	beq.n	8003ee4 <std+0x48>
 8003ed6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003eda:	4294      	cmp	r4, r2
 8003edc:	d002      	beq.n	8003ee4 <std+0x48>
 8003ede:	33d0      	adds	r3, #208	@ 0xd0
 8003ee0:	429c      	cmp	r4, r3
 8003ee2:	d105      	bne.n	8003ef0 <std+0x54>
 8003ee4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003ee8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003eec:	f000 b966 	b.w	80041bc <__retarget_lock_init_recursive>
 8003ef0:	bd10      	pop	{r4, pc}
 8003ef2:	bf00      	nop
 8003ef4:	08004045 	.word	0x08004045
 8003ef8:	08004067 	.word	0x08004067
 8003efc:	0800409f 	.word	0x0800409f
 8003f00:	080040c3 	.word	0x080040c3
 8003f04:	20000180 	.word	0x20000180

08003f08 <stdio_exit_handler>:
 8003f08:	4a02      	ldr	r2, [pc, #8]	@ (8003f14 <stdio_exit_handler+0xc>)
 8003f0a:	4903      	ldr	r1, [pc, #12]	@ (8003f18 <stdio_exit_handler+0x10>)
 8003f0c:	4803      	ldr	r0, [pc, #12]	@ (8003f1c <stdio_exit_handler+0x14>)
 8003f0e:	f000 b869 	b.w	8003fe4 <_fwalk_sglue>
 8003f12:	bf00      	nop
 8003f14:	2000000c 	.word	0x2000000c
 8003f18:	08004a5d 	.word	0x08004a5d
 8003f1c:	2000001c 	.word	0x2000001c

08003f20 <cleanup_stdio>:
 8003f20:	6841      	ldr	r1, [r0, #4]
 8003f22:	4b0c      	ldr	r3, [pc, #48]	@ (8003f54 <cleanup_stdio+0x34>)
 8003f24:	4299      	cmp	r1, r3
 8003f26:	b510      	push	{r4, lr}
 8003f28:	4604      	mov	r4, r0
 8003f2a:	d001      	beq.n	8003f30 <cleanup_stdio+0x10>
 8003f2c:	f000 fd96 	bl	8004a5c <_fflush_r>
 8003f30:	68a1      	ldr	r1, [r4, #8]
 8003f32:	4b09      	ldr	r3, [pc, #36]	@ (8003f58 <cleanup_stdio+0x38>)
 8003f34:	4299      	cmp	r1, r3
 8003f36:	d002      	beq.n	8003f3e <cleanup_stdio+0x1e>
 8003f38:	4620      	mov	r0, r4
 8003f3a:	f000 fd8f 	bl	8004a5c <_fflush_r>
 8003f3e:	68e1      	ldr	r1, [r4, #12]
 8003f40:	4b06      	ldr	r3, [pc, #24]	@ (8003f5c <cleanup_stdio+0x3c>)
 8003f42:	4299      	cmp	r1, r3
 8003f44:	d004      	beq.n	8003f50 <cleanup_stdio+0x30>
 8003f46:	4620      	mov	r0, r4
 8003f48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f4c:	f000 bd86 	b.w	8004a5c <_fflush_r>
 8003f50:	bd10      	pop	{r4, pc}
 8003f52:	bf00      	nop
 8003f54:	20000180 	.word	0x20000180
 8003f58:	200001e8 	.word	0x200001e8
 8003f5c:	20000250 	.word	0x20000250

08003f60 <global_stdio_init.part.0>:
 8003f60:	b510      	push	{r4, lr}
 8003f62:	4b0b      	ldr	r3, [pc, #44]	@ (8003f90 <global_stdio_init.part.0+0x30>)
 8003f64:	4c0b      	ldr	r4, [pc, #44]	@ (8003f94 <global_stdio_init.part.0+0x34>)
 8003f66:	4a0c      	ldr	r2, [pc, #48]	@ (8003f98 <global_stdio_init.part.0+0x38>)
 8003f68:	601a      	str	r2, [r3, #0]
 8003f6a:	4620      	mov	r0, r4
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	2104      	movs	r1, #4
 8003f70:	f7ff ff94 	bl	8003e9c <std>
 8003f74:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003f78:	2201      	movs	r2, #1
 8003f7a:	2109      	movs	r1, #9
 8003f7c:	f7ff ff8e 	bl	8003e9c <std>
 8003f80:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003f84:	2202      	movs	r2, #2
 8003f86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f8a:	2112      	movs	r1, #18
 8003f8c:	f7ff bf86 	b.w	8003e9c <std>
 8003f90:	200002b8 	.word	0x200002b8
 8003f94:	20000180 	.word	0x20000180
 8003f98:	08003f09 	.word	0x08003f09

08003f9c <__sfp_lock_acquire>:
 8003f9c:	4801      	ldr	r0, [pc, #4]	@ (8003fa4 <__sfp_lock_acquire+0x8>)
 8003f9e:	f000 b90e 	b.w	80041be <__retarget_lock_acquire_recursive>
 8003fa2:	bf00      	nop
 8003fa4:	200002c1 	.word	0x200002c1

08003fa8 <__sfp_lock_release>:
 8003fa8:	4801      	ldr	r0, [pc, #4]	@ (8003fb0 <__sfp_lock_release+0x8>)
 8003faa:	f000 b909 	b.w	80041c0 <__retarget_lock_release_recursive>
 8003fae:	bf00      	nop
 8003fb0:	200002c1 	.word	0x200002c1

08003fb4 <__sinit>:
 8003fb4:	b510      	push	{r4, lr}
 8003fb6:	4604      	mov	r4, r0
 8003fb8:	f7ff fff0 	bl	8003f9c <__sfp_lock_acquire>
 8003fbc:	6a23      	ldr	r3, [r4, #32]
 8003fbe:	b11b      	cbz	r3, 8003fc8 <__sinit+0x14>
 8003fc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003fc4:	f7ff bff0 	b.w	8003fa8 <__sfp_lock_release>
 8003fc8:	4b04      	ldr	r3, [pc, #16]	@ (8003fdc <__sinit+0x28>)
 8003fca:	6223      	str	r3, [r4, #32]
 8003fcc:	4b04      	ldr	r3, [pc, #16]	@ (8003fe0 <__sinit+0x2c>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d1f5      	bne.n	8003fc0 <__sinit+0xc>
 8003fd4:	f7ff ffc4 	bl	8003f60 <global_stdio_init.part.0>
 8003fd8:	e7f2      	b.n	8003fc0 <__sinit+0xc>
 8003fda:	bf00      	nop
 8003fdc:	08003f21 	.word	0x08003f21
 8003fe0:	200002b8 	.word	0x200002b8

08003fe4 <_fwalk_sglue>:
 8003fe4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003fe8:	4607      	mov	r7, r0
 8003fea:	4688      	mov	r8, r1
 8003fec:	4614      	mov	r4, r2
 8003fee:	2600      	movs	r6, #0
 8003ff0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003ff4:	f1b9 0901 	subs.w	r9, r9, #1
 8003ff8:	d505      	bpl.n	8004006 <_fwalk_sglue+0x22>
 8003ffa:	6824      	ldr	r4, [r4, #0]
 8003ffc:	2c00      	cmp	r4, #0
 8003ffe:	d1f7      	bne.n	8003ff0 <_fwalk_sglue+0xc>
 8004000:	4630      	mov	r0, r6
 8004002:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004006:	89ab      	ldrh	r3, [r5, #12]
 8004008:	2b01      	cmp	r3, #1
 800400a:	d907      	bls.n	800401c <_fwalk_sglue+0x38>
 800400c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004010:	3301      	adds	r3, #1
 8004012:	d003      	beq.n	800401c <_fwalk_sglue+0x38>
 8004014:	4629      	mov	r1, r5
 8004016:	4638      	mov	r0, r7
 8004018:	47c0      	blx	r8
 800401a:	4306      	orrs	r6, r0
 800401c:	3568      	adds	r5, #104	@ 0x68
 800401e:	e7e9      	b.n	8003ff4 <_fwalk_sglue+0x10>

08004020 <iprintf>:
 8004020:	b40f      	push	{r0, r1, r2, r3}
 8004022:	b507      	push	{r0, r1, r2, lr}
 8004024:	4906      	ldr	r1, [pc, #24]	@ (8004040 <iprintf+0x20>)
 8004026:	ab04      	add	r3, sp, #16
 8004028:	6808      	ldr	r0, [r1, #0]
 800402a:	f853 2b04 	ldr.w	r2, [r3], #4
 800402e:	6881      	ldr	r1, [r0, #8]
 8004030:	9301      	str	r3, [sp, #4]
 8004032:	f000 f9e9 	bl	8004408 <_vfiprintf_r>
 8004036:	b003      	add	sp, #12
 8004038:	f85d eb04 	ldr.w	lr, [sp], #4
 800403c:	b004      	add	sp, #16
 800403e:	4770      	bx	lr
 8004040:	20000018 	.word	0x20000018

08004044 <__sread>:
 8004044:	b510      	push	{r4, lr}
 8004046:	460c      	mov	r4, r1
 8004048:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800404c:	f000 f868 	bl	8004120 <_read_r>
 8004050:	2800      	cmp	r0, #0
 8004052:	bfab      	itete	ge
 8004054:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004056:	89a3      	ldrhlt	r3, [r4, #12]
 8004058:	181b      	addge	r3, r3, r0
 800405a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800405e:	bfac      	ite	ge
 8004060:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004062:	81a3      	strhlt	r3, [r4, #12]
 8004064:	bd10      	pop	{r4, pc}

08004066 <__swrite>:
 8004066:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800406a:	461f      	mov	r7, r3
 800406c:	898b      	ldrh	r3, [r1, #12]
 800406e:	05db      	lsls	r3, r3, #23
 8004070:	4605      	mov	r5, r0
 8004072:	460c      	mov	r4, r1
 8004074:	4616      	mov	r6, r2
 8004076:	d505      	bpl.n	8004084 <__swrite+0x1e>
 8004078:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800407c:	2302      	movs	r3, #2
 800407e:	2200      	movs	r2, #0
 8004080:	f000 f83c 	bl	80040fc <_lseek_r>
 8004084:	89a3      	ldrh	r3, [r4, #12]
 8004086:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800408a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800408e:	81a3      	strh	r3, [r4, #12]
 8004090:	4632      	mov	r2, r6
 8004092:	463b      	mov	r3, r7
 8004094:	4628      	mov	r0, r5
 8004096:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800409a:	f000 b853 	b.w	8004144 <_write_r>

0800409e <__sseek>:
 800409e:	b510      	push	{r4, lr}
 80040a0:	460c      	mov	r4, r1
 80040a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80040a6:	f000 f829 	bl	80040fc <_lseek_r>
 80040aa:	1c43      	adds	r3, r0, #1
 80040ac:	89a3      	ldrh	r3, [r4, #12]
 80040ae:	bf15      	itete	ne
 80040b0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80040b2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80040b6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80040ba:	81a3      	strheq	r3, [r4, #12]
 80040bc:	bf18      	it	ne
 80040be:	81a3      	strhne	r3, [r4, #12]
 80040c0:	bd10      	pop	{r4, pc}

080040c2 <__sclose>:
 80040c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80040c6:	f000 b809 	b.w	80040dc <_close_r>

080040ca <memset>:
 80040ca:	4402      	add	r2, r0
 80040cc:	4603      	mov	r3, r0
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d100      	bne.n	80040d4 <memset+0xa>
 80040d2:	4770      	bx	lr
 80040d4:	f803 1b01 	strb.w	r1, [r3], #1
 80040d8:	e7f9      	b.n	80040ce <memset+0x4>
	...

080040dc <_close_r>:
 80040dc:	b538      	push	{r3, r4, r5, lr}
 80040de:	4d06      	ldr	r5, [pc, #24]	@ (80040f8 <_close_r+0x1c>)
 80040e0:	2300      	movs	r3, #0
 80040e2:	4604      	mov	r4, r0
 80040e4:	4608      	mov	r0, r1
 80040e6:	602b      	str	r3, [r5, #0]
 80040e8:	f7fc fcc9 	bl	8000a7e <_close>
 80040ec:	1c43      	adds	r3, r0, #1
 80040ee:	d102      	bne.n	80040f6 <_close_r+0x1a>
 80040f0:	682b      	ldr	r3, [r5, #0]
 80040f2:	b103      	cbz	r3, 80040f6 <_close_r+0x1a>
 80040f4:	6023      	str	r3, [r4, #0]
 80040f6:	bd38      	pop	{r3, r4, r5, pc}
 80040f8:	200002bc 	.word	0x200002bc

080040fc <_lseek_r>:
 80040fc:	b538      	push	{r3, r4, r5, lr}
 80040fe:	4d07      	ldr	r5, [pc, #28]	@ (800411c <_lseek_r+0x20>)
 8004100:	4604      	mov	r4, r0
 8004102:	4608      	mov	r0, r1
 8004104:	4611      	mov	r1, r2
 8004106:	2200      	movs	r2, #0
 8004108:	602a      	str	r2, [r5, #0]
 800410a:	461a      	mov	r2, r3
 800410c:	f7fc fcde 	bl	8000acc <_lseek>
 8004110:	1c43      	adds	r3, r0, #1
 8004112:	d102      	bne.n	800411a <_lseek_r+0x1e>
 8004114:	682b      	ldr	r3, [r5, #0]
 8004116:	b103      	cbz	r3, 800411a <_lseek_r+0x1e>
 8004118:	6023      	str	r3, [r4, #0]
 800411a:	bd38      	pop	{r3, r4, r5, pc}
 800411c:	200002bc 	.word	0x200002bc

08004120 <_read_r>:
 8004120:	b538      	push	{r3, r4, r5, lr}
 8004122:	4d07      	ldr	r5, [pc, #28]	@ (8004140 <_read_r+0x20>)
 8004124:	4604      	mov	r4, r0
 8004126:	4608      	mov	r0, r1
 8004128:	4611      	mov	r1, r2
 800412a:	2200      	movs	r2, #0
 800412c:	602a      	str	r2, [r5, #0]
 800412e:	461a      	mov	r2, r3
 8004130:	f7fc fc6c 	bl	8000a0c <_read>
 8004134:	1c43      	adds	r3, r0, #1
 8004136:	d102      	bne.n	800413e <_read_r+0x1e>
 8004138:	682b      	ldr	r3, [r5, #0]
 800413a:	b103      	cbz	r3, 800413e <_read_r+0x1e>
 800413c:	6023      	str	r3, [r4, #0]
 800413e:	bd38      	pop	{r3, r4, r5, pc}
 8004140:	200002bc 	.word	0x200002bc

08004144 <_write_r>:
 8004144:	b538      	push	{r3, r4, r5, lr}
 8004146:	4d07      	ldr	r5, [pc, #28]	@ (8004164 <_write_r+0x20>)
 8004148:	4604      	mov	r4, r0
 800414a:	4608      	mov	r0, r1
 800414c:	4611      	mov	r1, r2
 800414e:	2200      	movs	r2, #0
 8004150:	602a      	str	r2, [r5, #0]
 8004152:	461a      	mov	r2, r3
 8004154:	f7fc fc77 	bl	8000a46 <_write>
 8004158:	1c43      	adds	r3, r0, #1
 800415a:	d102      	bne.n	8004162 <_write_r+0x1e>
 800415c:	682b      	ldr	r3, [r5, #0]
 800415e:	b103      	cbz	r3, 8004162 <_write_r+0x1e>
 8004160:	6023      	str	r3, [r4, #0]
 8004162:	bd38      	pop	{r3, r4, r5, pc}
 8004164:	200002bc 	.word	0x200002bc

08004168 <__errno>:
 8004168:	4b01      	ldr	r3, [pc, #4]	@ (8004170 <__errno+0x8>)
 800416a:	6818      	ldr	r0, [r3, #0]
 800416c:	4770      	bx	lr
 800416e:	bf00      	nop
 8004170:	20000018 	.word	0x20000018

08004174 <__libc_init_array>:
 8004174:	b570      	push	{r4, r5, r6, lr}
 8004176:	4d0d      	ldr	r5, [pc, #52]	@ (80041ac <__libc_init_array+0x38>)
 8004178:	4c0d      	ldr	r4, [pc, #52]	@ (80041b0 <__libc_init_array+0x3c>)
 800417a:	1b64      	subs	r4, r4, r5
 800417c:	10a4      	asrs	r4, r4, #2
 800417e:	2600      	movs	r6, #0
 8004180:	42a6      	cmp	r6, r4
 8004182:	d109      	bne.n	8004198 <__libc_init_array+0x24>
 8004184:	4d0b      	ldr	r5, [pc, #44]	@ (80041b4 <__libc_init_array+0x40>)
 8004186:	4c0c      	ldr	r4, [pc, #48]	@ (80041b8 <__libc_init_array+0x44>)
 8004188:	f000 fdb8 	bl	8004cfc <_init>
 800418c:	1b64      	subs	r4, r4, r5
 800418e:	10a4      	asrs	r4, r4, #2
 8004190:	2600      	movs	r6, #0
 8004192:	42a6      	cmp	r6, r4
 8004194:	d105      	bne.n	80041a2 <__libc_init_array+0x2e>
 8004196:	bd70      	pop	{r4, r5, r6, pc}
 8004198:	f855 3b04 	ldr.w	r3, [r5], #4
 800419c:	4798      	blx	r3
 800419e:	3601      	adds	r6, #1
 80041a0:	e7ee      	b.n	8004180 <__libc_init_array+0xc>
 80041a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80041a6:	4798      	blx	r3
 80041a8:	3601      	adds	r6, #1
 80041aa:	e7f2      	b.n	8004192 <__libc_init_array+0x1e>
 80041ac:	08004da0 	.word	0x08004da0
 80041b0:	08004da0 	.word	0x08004da0
 80041b4:	08004da0 	.word	0x08004da0
 80041b8:	08004da4 	.word	0x08004da4

080041bc <__retarget_lock_init_recursive>:
 80041bc:	4770      	bx	lr

080041be <__retarget_lock_acquire_recursive>:
 80041be:	4770      	bx	lr

080041c0 <__retarget_lock_release_recursive>:
 80041c0:	4770      	bx	lr
	...

080041c4 <_free_r>:
 80041c4:	b538      	push	{r3, r4, r5, lr}
 80041c6:	4605      	mov	r5, r0
 80041c8:	2900      	cmp	r1, #0
 80041ca:	d041      	beq.n	8004250 <_free_r+0x8c>
 80041cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80041d0:	1f0c      	subs	r4, r1, #4
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	bfb8      	it	lt
 80041d6:	18e4      	addlt	r4, r4, r3
 80041d8:	f000 f8e0 	bl	800439c <__malloc_lock>
 80041dc:	4a1d      	ldr	r2, [pc, #116]	@ (8004254 <_free_r+0x90>)
 80041de:	6813      	ldr	r3, [r2, #0]
 80041e0:	b933      	cbnz	r3, 80041f0 <_free_r+0x2c>
 80041e2:	6063      	str	r3, [r4, #4]
 80041e4:	6014      	str	r4, [r2, #0]
 80041e6:	4628      	mov	r0, r5
 80041e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80041ec:	f000 b8dc 	b.w	80043a8 <__malloc_unlock>
 80041f0:	42a3      	cmp	r3, r4
 80041f2:	d908      	bls.n	8004206 <_free_r+0x42>
 80041f4:	6820      	ldr	r0, [r4, #0]
 80041f6:	1821      	adds	r1, r4, r0
 80041f8:	428b      	cmp	r3, r1
 80041fa:	bf01      	itttt	eq
 80041fc:	6819      	ldreq	r1, [r3, #0]
 80041fe:	685b      	ldreq	r3, [r3, #4]
 8004200:	1809      	addeq	r1, r1, r0
 8004202:	6021      	streq	r1, [r4, #0]
 8004204:	e7ed      	b.n	80041e2 <_free_r+0x1e>
 8004206:	461a      	mov	r2, r3
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	b10b      	cbz	r3, 8004210 <_free_r+0x4c>
 800420c:	42a3      	cmp	r3, r4
 800420e:	d9fa      	bls.n	8004206 <_free_r+0x42>
 8004210:	6811      	ldr	r1, [r2, #0]
 8004212:	1850      	adds	r0, r2, r1
 8004214:	42a0      	cmp	r0, r4
 8004216:	d10b      	bne.n	8004230 <_free_r+0x6c>
 8004218:	6820      	ldr	r0, [r4, #0]
 800421a:	4401      	add	r1, r0
 800421c:	1850      	adds	r0, r2, r1
 800421e:	4283      	cmp	r3, r0
 8004220:	6011      	str	r1, [r2, #0]
 8004222:	d1e0      	bne.n	80041e6 <_free_r+0x22>
 8004224:	6818      	ldr	r0, [r3, #0]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	6053      	str	r3, [r2, #4]
 800422a:	4408      	add	r0, r1
 800422c:	6010      	str	r0, [r2, #0]
 800422e:	e7da      	b.n	80041e6 <_free_r+0x22>
 8004230:	d902      	bls.n	8004238 <_free_r+0x74>
 8004232:	230c      	movs	r3, #12
 8004234:	602b      	str	r3, [r5, #0]
 8004236:	e7d6      	b.n	80041e6 <_free_r+0x22>
 8004238:	6820      	ldr	r0, [r4, #0]
 800423a:	1821      	adds	r1, r4, r0
 800423c:	428b      	cmp	r3, r1
 800423e:	bf04      	itt	eq
 8004240:	6819      	ldreq	r1, [r3, #0]
 8004242:	685b      	ldreq	r3, [r3, #4]
 8004244:	6063      	str	r3, [r4, #4]
 8004246:	bf04      	itt	eq
 8004248:	1809      	addeq	r1, r1, r0
 800424a:	6021      	streq	r1, [r4, #0]
 800424c:	6054      	str	r4, [r2, #4]
 800424e:	e7ca      	b.n	80041e6 <_free_r+0x22>
 8004250:	bd38      	pop	{r3, r4, r5, pc}
 8004252:	bf00      	nop
 8004254:	200002c8 	.word	0x200002c8

08004258 <sbrk_aligned>:
 8004258:	b570      	push	{r4, r5, r6, lr}
 800425a:	4e0f      	ldr	r6, [pc, #60]	@ (8004298 <sbrk_aligned+0x40>)
 800425c:	460c      	mov	r4, r1
 800425e:	6831      	ldr	r1, [r6, #0]
 8004260:	4605      	mov	r5, r0
 8004262:	b911      	cbnz	r1, 800426a <sbrk_aligned+0x12>
 8004264:	f000 fcb6 	bl	8004bd4 <_sbrk_r>
 8004268:	6030      	str	r0, [r6, #0]
 800426a:	4621      	mov	r1, r4
 800426c:	4628      	mov	r0, r5
 800426e:	f000 fcb1 	bl	8004bd4 <_sbrk_r>
 8004272:	1c43      	adds	r3, r0, #1
 8004274:	d103      	bne.n	800427e <sbrk_aligned+0x26>
 8004276:	f04f 34ff 	mov.w	r4, #4294967295
 800427a:	4620      	mov	r0, r4
 800427c:	bd70      	pop	{r4, r5, r6, pc}
 800427e:	1cc4      	adds	r4, r0, #3
 8004280:	f024 0403 	bic.w	r4, r4, #3
 8004284:	42a0      	cmp	r0, r4
 8004286:	d0f8      	beq.n	800427a <sbrk_aligned+0x22>
 8004288:	1a21      	subs	r1, r4, r0
 800428a:	4628      	mov	r0, r5
 800428c:	f000 fca2 	bl	8004bd4 <_sbrk_r>
 8004290:	3001      	adds	r0, #1
 8004292:	d1f2      	bne.n	800427a <sbrk_aligned+0x22>
 8004294:	e7ef      	b.n	8004276 <sbrk_aligned+0x1e>
 8004296:	bf00      	nop
 8004298:	200002c4 	.word	0x200002c4

0800429c <_malloc_r>:
 800429c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80042a0:	1ccd      	adds	r5, r1, #3
 80042a2:	f025 0503 	bic.w	r5, r5, #3
 80042a6:	3508      	adds	r5, #8
 80042a8:	2d0c      	cmp	r5, #12
 80042aa:	bf38      	it	cc
 80042ac:	250c      	movcc	r5, #12
 80042ae:	2d00      	cmp	r5, #0
 80042b0:	4606      	mov	r6, r0
 80042b2:	db01      	blt.n	80042b8 <_malloc_r+0x1c>
 80042b4:	42a9      	cmp	r1, r5
 80042b6:	d904      	bls.n	80042c2 <_malloc_r+0x26>
 80042b8:	230c      	movs	r3, #12
 80042ba:	6033      	str	r3, [r6, #0]
 80042bc:	2000      	movs	r0, #0
 80042be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80042c2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004398 <_malloc_r+0xfc>
 80042c6:	f000 f869 	bl	800439c <__malloc_lock>
 80042ca:	f8d8 3000 	ldr.w	r3, [r8]
 80042ce:	461c      	mov	r4, r3
 80042d0:	bb44      	cbnz	r4, 8004324 <_malloc_r+0x88>
 80042d2:	4629      	mov	r1, r5
 80042d4:	4630      	mov	r0, r6
 80042d6:	f7ff ffbf 	bl	8004258 <sbrk_aligned>
 80042da:	1c43      	adds	r3, r0, #1
 80042dc:	4604      	mov	r4, r0
 80042de:	d158      	bne.n	8004392 <_malloc_r+0xf6>
 80042e0:	f8d8 4000 	ldr.w	r4, [r8]
 80042e4:	4627      	mov	r7, r4
 80042e6:	2f00      	cmp	r7, #0
 80042e8:	d143      	bne.n	8004372 <_malloc_r+0xd6>
 80042ea:	2c00      	cmp	r4, #0
 80042ec:	d04b      	beq.n	8004386 <_malloc_r+0xea>
 80042ee:	6823      	ldr	r3, [r4, #0]
 80042f0:	4639      	mov	r1, r7
 80042f2:	4630      	mov	r0, r6
 80042f4:	eb04 0903 	add.w	r9, r4, r3
 80042f8:	f000 fc6c 	bl	8004bd4 <_sbrk_r>
 80042fc:	4581      	cmp	r9, r0
 80042fe:	d142      	bne.n	8004386 <_malloc_r+0xea>
 8004300:	6821      	ldr	r1, [r4, #0]
 8004302:	1a6d      	subs	r5, r5, r1
 8004304:	4629      	mov	r1, r5
 8004306:	4630      	mov	r0, r6
 8004308:	f7ff ffa6 	bl	8004258 <sbrk_aligned>
 800430c:	3001      	adds	r0, #1
 800430e:	d03a      	beq.n	8004386 <_malloc_r+0xea>
 8004310:	6823      	ldr	r3, [r4, #0]
 8004312:	442b      	add	r3, r5
 8004314:	6023      	str	r3, [r4, #0]
 8004316:	f8d8 3000 	ldr.w	r3, [r8]
 800431a:	685a      	ldr	r2, [r3, #4]
 800431c:	bb62      	cbnz	r2, 8004378 <_malloc_r+0xdc>
 800431e:	f8c8 7000 	str.w	r7, [r8]
 8004322:	e00f      	b.n	8004344 <_malloc_r+0xa8>
 8004324:	6822      	ldr	r2, [r4, #0]
 8004326:	1b52      	subs	r2, r2, r5
 8004328:	d420      	bmi.n	800436c <_malloc_r+0xd0>
 800432a:	2a0b      	cmp	r2, #11
 800432c:	d917      	bls.n	800435e <_malloc_r+0xc2>
 800432e:	1961      	adds	r1, r4, r5
 8004330:	42a3      	cmp	r3, r4
 8004332:	6025      	str	r5, [r4, #0]
 8004334:	bf18      	it	ne
 8004336:	6059      	strne	r1, [r3, #4]
 8004338:	6863      	ldr	r3, [r4, #4]
 800433a:	bf08      	it	eq
 800433c:	f8c8 1000 	streq.w	r1, [r8]
 8004340:	5162      	str	r2, [r4, r5]
 8004342:	604b      	str	r3, [r1, #4]
 8004344:	4630      	mov	r0, r6
 8004346:	f000 f82f 	bl	80043a8 <__malloc_unlock>
 800434a:	f104 000b 	add.w	r0, r4, #11
 800434e:	1d23      	adds	r3, r4, #4
 8004350:	f020 0007 	bic.w	r0, r0, #7
 8004354:	1ac2      	subs	r2, r0, r3
 8004356:	bf1c      	itt	ne
 8004358:	1a1b      	subne	r3, r3, r0
 800435a:	50a3      	strne	r3, [r4, r2]
 800435c:	e7af      	b.n	80042be <_malloc_r+0x22>
 800435e:	6862      	ldr	r2, [r4, #4]
 8004360:	42a3      	cmp	r3, r4
 8004362:	bf0c      	ite	eq
 8004364:	f8c8 2000 	streq.w	r2, [r8]
 8004368:	605a      	strne	r2, [r3, #4]
 800436a:	e7eb      	b.n	8004344 <_malloc_r+0xa8>
 800436c:	4623      	mov	r3, r4
 800436e:	6864      	ldr	r4, [r4, #4]
 8004370:	e7ae      	b.n	80042d0 <_malloc_r+0x34>
 8004372:	463c      	mov	r4, r7
 8004374:	687f      	ldr	r7, [r7, #4]
 8004376:	e7b6      	b.n	80042e6 <_malloc_r+0x4a>
 8004378:	461a      	mov	r2, r3
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	42a3      	cmp	r3, r4
 800437e:	d1fb      	bne.n	8004378 <_malloc_r+0xdc>
 8004380:	2300      	movs	r3, #0
 8004382:	6053      	str	r3, [r2, #4]
 8004384:	e7de      	b.n	8004344 <_malloc_r+0xa8>
 8004386:	230c      	movs	r3, #12
 8004388:	6033      	str	r3, [r6, #0]
 800438a:	4630      	mov	r0, r6
 800438c:	f000 f80c 	bl	80043a8 <__malloc_unlock>
 8004390:	e794      	b.n	80042bc <_malloc_r+0x20>
 8004392:	6005      	str	r5, [r0, #0]
 8004394:	e7d6      	b.n	8004344 <_malloc_r+0xa8>
 8004396:	bf00      	nop
 8004398:	200002c8 	.word	0x200002c8

0800439c <__malloc_lock>:
 800439c:	4801      	ldr	r0, [pc, #4]	@ (80043a4 <__malloc_lock+0x8>)
 800439e:	f7ff bf0e 	b.w	80041be <__retarget_lock_acquire_recursive>
 80043a2:	bf00      	nop
 80043a4:	200002c0 	.word	0x200002c0

080043a8 <__malloc_unlock>:
 80043a8:	4801      	ldr	r0, [pc, #4]	@ (80043b0 <__malloc_unlock+0x8>)
 80043aa:	f7ff bf09 	b.w	80041c0 <__retarget_lock_release_recursive>
 80043ae:	bf00      	nop
 80043b0:	200002c0 	.word	0x200002c0

080043b4 <__sfputc_r>:
 80043b4:	6893      	ldr	r3, [r2, #8]
 80043b6:	3b01      	subs	r3, #1
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	b410      	push	{r4}
 80043bc:	6093      	str	r3, [r2, #8]
 80043be:	da08      	bge.n	80043d2 <__sfputc_r+0x1e>
 80043c0:	6994      	ldr	r4, [r2, #24]
 80043c2:	42a3      	cmp	r3, r4
 80043c4:	db01      	blt.n	80043ca <__sfputc_r+0x16>
 80043c6:	290a      	cmp	r1, #10
 80043c8:	d103      	bne.n	80043d2 <__sfputc_r+0x1e>
 80043ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80043ce:	f000 bb6d 	b.w	8004aac <__swbuf_r>
 80043d2:	6813      	ldr	r3, [r2, #0]
 80043d4:	1c58      	adds	r0, r3, #1
 80043d6:	6010      	str	r0, [r2, #0]
 80043d8:	7019      	strb	r1, [r3, #0]
 80043da:	4608      	mov	r0, r1
 80043dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80043e0:	4770      	bx	lr

080043e2 <__sfputs_r>:
 80043e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043e4:	4606      	mov	r6, r0
 80043e6:	460f      	mov	r7, r1
 80043e8:	4614      	mov	r4, r2
 80043ea:	18d5      	adds	r5, r2, r3
 80043ec:	42ac      	cmp	r4, r5
 80043ee:	d101      	bne.n	80043f4 <__sfputs_r+0x12>
 80043f0:	2000      	movs	r0, #0
 80043f2:	e007      	b.n	8004404 <__sfputs_r+0x22>
 80043f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043f8:	463a      	mov	r2, r7
 80043fa:	4630      	mov	r0, r6
 80043fc:	f7ff ffda 	bl	80043b4 <__sfputc_r>
 8004400:	1c43      	adds	r3, r0, #1
 8004402:	d1f3      	bne.n	80043ec <__sfputs_r+0xa>
 8004404:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004408 <_vfiprintf_r>:
 8004408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800440c:	460d      	mov	r5, r1
 800440e:	b09d      	sub	sp, #116	@ 0x74
 8004410:	4614      	mov	r4, r2
 8004412:	4698      	mov	r8, r3
 8004414:	4606      	mov	r6, r0
 8004416:	b118      	cbz	r0, 8004420 <_vfiprintf_r+0x18>
 8004418:	6a03      	ldr	r3, [r0, #32]
 800441a:	b90b      	cbnz	r3, 8004420 <_vfiprintf_r+0x18>
 800441c:	f7ff fdca 	bl	8003fb4 <__sinit>
 8004420:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004422:	07d9      	lsls	r1, r3, #31
 8004424:	d405      	bmi.n	8004432 <_vfiprintf_r+0x2a>
 8004426:	89ab      	ldrh	r3, [r5, #12]
 8004428:	059a      	lsls	r2, r3, #22
 800442a:	d402      	bmi.n	8004432 <_vfiprintf_r+0x2a>
 800442c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800442e:	f7ff fec6 	bl	80041be <__retarget_lock_acquire_recursive>
 8004432:	89ab      	ldrh	r3, [r5, #12]
 8004434:	071b      	lsls	r3, r3, #28
 8004436:	d501      	bpl.n	800443c <_vfiprintf_r+0x34>
 8004438:	692b      	ldr	r3, [r5, #16]
 800443a:	b99b      	cbnz	r3, 8004464 <_vfiprintf_r+0x5c>
 800443c:	4629      	mov	r1, r5
 800443e:	4630      	mov	r0, r6
 8004440:	f000 fb72 	bl	8004b28 <__swsetup_r>
 8004444:	b170      	cbz	r0, 8004464 <_vfiprintf_r+0x5c>
 8004446:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004448:	07dc      	lsls	r4, r3, #31
 800444a:	d504      	bpl.n	8004456 <_vfiprintf_r+0x4e>
 800444c:	f04f 30ff 	mov.w	r0, #4294967295
 8004450:	b01d      	add	sp, #116	@ 0x74
 8004452:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004456:	89ab      	ldrh	r3, [r5, #12]
 8004458:	0598      	lsls	r0, r3, #22
 800445a:	d4f7      	bmi.n	800444c <_vfiprintf_r+0x44>
 800445c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800445e:	f7ff feaf 	bl	80041c0 <__retarget_lock_release_recursive>
 8004462:	e7f3      	b.n	800444c <_vfiprintf_r+0x44>
 8004464:	2300      	movs	r3, #0
 8004466:	9309      	str	r3, [sp, #36]	@ 0x24
 8004468:	2320      	movs	r3, #32
 800446a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800446e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004472:	2330      	movs	r3, #48	@ 0x30
 8004474:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004624 <_vfiprintf_r+0x21c>
 8004478:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800447c:	f04f 0901 	mov.w	r9, #1
 8004480:	4623      	mov	r3, r4
 8004482:	469a      	mov	sl, r3
 8004484:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004488:	b10a      	cbz	r2, 800448e <_vfiprintf_r+0x86>
 800448a:	2a25      	cmp	r2, #37	@ 0x25
 800448c:	d1f9      	bne.n	8004482 <_vfiprintf_r+0x7a>
 800448e:	ebba 0b04 	subs.w	fp, sl, r4
 8004492:	d00b      	beq.n	80044ac <_vfiprintf_r+0xa4>
 8004494:	465b      	mov	r3, fp
 8004496:	4622      	mov	r2, r4
 8004498:	4629      	mov	r1, r5
 800449a:	4630      	mov	r0, r6
 800449c:	f7ff ffa1 	bl	80043e2 <__sfputs_r>
 80044a0:	3001      	adds	r0, #1
 80044a2:	f000 80a7 	beq.w	80045f4 <_vfiprintf_r+0x1ec>
 80044a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80044a8:	445a      	add	r2, fp
 80044aa:	9209      	str	r2, [sp, #36]	@ 0x24
 80044ac:	f89a 3000 	ldrb.w	r3, [sl]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	f000 809f 	beq.w	80045f4 <_vfiprintf_r+0x1ec>
 80044b6:	2300      	movs	r3, #0
 80044b8:	f04f 32ff 	mov.w	r2, #4294967295
 80044bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80044c0:	f10a 0a01 	add.w	sl, sl, #1
 80044c4:	9304      	str	r3, [sp, #16]
 80044c6:	9307      	str	r3, [sp, #28]
 80044c8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80044cc:	931a      	str	r3, [sp, #104]	@ 0x68
 80044ce:	4654      	mov	r4, sl
 80044d0:	2205      	movs	r2, #5
 80044d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044d6:	4853      	ldr	r0, [pc, #332]	@ (8004624 <_vfiprintf_r+0x21c>)
 80044d8:	f7fb fe82 	bl	80001e0 <memchr>
 80044dc:	9a04      	ldr	r2, [sp, #16]
 80044de:	b9d8      	cbnz	r0, 8004518 <_vfiprintf_r+0x110>
 80044e0:	06d1      	lsls	r1, r2, #27
 80044e2:	bf44      	itt	mi
 80044e4:	2320      	movmi	r3, #32
 80044e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80044ea:	0713      	lsls	r3, r2, #28
 80044ec:	bf44      	itt	mi
 80044ee:	232b      	movmi	r3, #43	@ 0x2b
 80044f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80044f4:	f89a 3000 	ldrb.w	r3, [sl]
 80044f8:	2b2a      	cmp	r3, #42	@ 0x2a
 80044fa:	d015      	beq.n	8004528 <_vfiprintf_r+0x120>
 80044fc:	9a07      	ldr	r2, [sp, #28]
 80044fe:	4654      	mov	r4, sl
 8004500:	2000      	movs	r0, #0
 8004502:	f04f 0c0a 	mov.w	ip, #10
 8004506:	4621      	mov	r1, r4
 8004508:	f811 3b01 	ldrb.w	r3, [r1], #1
 800450c:	3b30      	subs	r3, #48	@ 0x30
 800450e:	2b09      	cmp	r3, #9
 8004510:	d94b      	bls.n	80045aa <_vfiprintf_r+0x1a2>
 8004512:	b1b0      	cbz	r0, 8004542 <_vfiprintf_r+0x13a>
 8004514:	9207      	str	r2, [sp, #28]
 8004516:	e014      	b.n	8004542 <_vfiprintf_r+0x13a>
 8004518:	eba0 0308 	sub.w	r3, r0, r8
 800451c:	fa09 f303 	lsl.w	r3, r9, r3
 8004520:	4313      	orrs	r3, r2
 8004522:	9304      	str	r3, [sp, #16]
 8004524:	46a2      	mov	sl, r4
 8004526:	e7d2      	b.n	80044ce <_vfiprintf_r+0xc6>
 8004528:	9b03      	ldr	r3, [sp, #12]
 800452a:	1d19      	adds	r1, r3, #4
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	9103      	str	r1, [sp, #12]
 8004530:	2b00      	cmp	r3, #0
 8004532:	bfbb      	ittet	lt
 8004534:	425b      	neglt	r3, r3
 8004536:	f042 0202 	orrlt.w	r2, r2, #2
 800453a:	9307      	strge	r3, [sp, #28]
 800453c:	9307      	strlt	r3, [sp, #28]
 800453e:	bfb8      	it	lt
 8004540:	9204      	strlt	r2, [sp, #16]
 8004542:	7823      	ldrb	r3, [r4, #0]
 8004544:	2b2e      	cmp	r3, #46	@ 0x2e
 8004546:	d10a      	bne.n	800455e <_vfiprintf_r+0x156>
 8004548:	7863      	ldrb	r3, [r4, #1]
 800454a:	2b2a      	cmp	r3, #42	@ 0x2a
 800454c:	d132      	bne.n	80045b4 <_vfiprintf_r+0x1ac>
 800454e:	9b03      	ldr	r3, [sp, #12]
 8004550:	1d1a      	adds	r2, r3, #4
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	9203      	str	r2, [sp, #12]
 8004556:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800455a:	3402      	adds	r4, #2
 800455c:	9305      	str	r3, [sp, #20]
 800455e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004634 <_vfiprintf_r+0x22c>
 8004562:	7821      	ldrb	r1, [r4, #0]
 8004564:	2203      	movs	r2, #3
 8004566:	4650      	mov	r0, sl
 8004568:	f7fb fe3a 	bl	80001e0 <memchr>
 800456c:	b138      	cbz	r0, 800457e <_vfiprintf_r+0x176>
 800456e:	9b04      	ldr	r3, [sp, #16]
 8004570:	eba0 000a 	sub.w	r0, r0, sl
 8004574:	2240      	movs	r2, #64	@ 0x40
 8004576:	4082      	lsls	r2, r0
 8004578:	4313      	orrs	r3, r2
 800457a:	3401      	adds	r4, #1
 800457c:	9304      	str	r3, [sp, #16]
 800457e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004582:	4829      	ldr	r0, [pc, #164]	@ (8004628 <_vfiprintf_r+0x220>)
 8004584:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004588:	2206      	movs	r2, #6
 800458a:	f7fb fe29 	bl	80001e0 <memchr>
 800458e:	2800      	cmp	r0, #0
 8004590:	d03f      	beq.n	8004612 <_vfiprintf_r+0x20a>
 8004592:	4b26      	ldr	r3, [pc, #152]	@ (800462c <_vfiprintf_r+0x224>)
 8004594:	bb1b      	cbnz	r3, 80045de <_vfiprintf_r+0x1d6>
 8004596:	9b03      	ldr	r3, [sp, #12]
 8004598:	3307      	adds	r3, #7
 800459a:	f023 0307 	bic.w	r3, r3, #7
 800459e:	3308      	adds	r3, #8
 80045a0:	9303      	str	r3, [sp, #12]
 80045a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80045a4:	443b      	add	r3, r7
 80045a6:	9309      	str	r3, [sp, #36]	@ 0x24
 80045a8:	e76a      	b.n	8004480 <_vfiprintf_r+0x78>
 80045aa:	fb0c 3202 	mla	r2, ip, r2, r3
 80045ae:	460c      	mov	r4, r1
 80045b0:	2001      	movs	r0, #1
 80045b2:	e7a8      	b.n	8004506 <_vfiprintf_r+0xfe>
 80045b4:	2300      	movs	r3, #0
 80045b6:	3401      	adds	r4, #1
 80045b8:	9305      	str	r3, [sp, #20]
 80045ba:	4619      	mov	r1, r3
 80045bc:	f04f 0c0a 	mov.w	ip, #10
 80045c0:	4620      	mov	r0, r4
 80045c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80045c6:	3a30      	subs	r2, #48	@ 0x30
 80045c8:	2a09      	cmp	r2, #9
 80045ca:	d903      	bls.n	80045d4 <_vfiprintf_r+0x1cc>
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d0c6      	beq.n	800455e <_vfiprintf_r+0x156>
 80045d0:	9105      	str	r1, [sp, #20]
 80045d2:	e7c4      	b.n	800455e <_vfiprintf_r+0x156>
 80045d4:	fb0c 2101 	mla	r1, ip, r1, r2
 80045d8:	4604      	mov	r4, r0
 80045da:	2301      	movs	r3, #1
 80045dc:	e7f0      	b.n	80045c0 <_vfiprintf_r+0x1b8>
 80045de:	ab03      	add	r3, sp, #12
 80045e0:	9300      	str	r3, [sp, #0]
 80045e2:	462a      	mov	r2, r5
 80045e4:	4b12      	ldr	r3, [pc, #72]	@ (8004630 <_vfiprintf_r+0x228>)
 80045e6:	a904      	add	r1, sp, #16
 80045e8:	4630      	mov	r0, r6
 80045ea:	f3af 8000 	nop.w
 80045ee:	4607      	mov	r7, r0
 80045f0:	1c78      	adds	r0, r7, #1
 80045f2:	d1d6      	bne.n	80045a2 <_vfiprintf_r+0x19a>
 80045f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80045f6:	07d9      	lsls	r1, r3, #31
 80045f8:	d405      	bmi.n	8004606 <_vfiprintf_r+0x1fe>
 80045fa:	89ab      	ldrh	r3, [r5, #12]
 80045fc:	059a      	lsls	r2, r3, #22
 80045fe:	d402      	bmi.n	8004606 <_vfiprintf_r+0x1fe>
 8004600:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004602:	f7ff fddd 	bl	80041c0 <__retarget_lock_release_recursive>
 8004606:	89ab      	ldrh	r3, [r5, #12]
 8004608:	065b      	lsls	r3, r3, #25
 800460a:	f53f af1f 	bmi.w	800444c <_vfiprintf_r+0x44>
 800460e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004610:	e71e      	b.n	8004450 <_vfiprintf_r+0x48>
 8004612:	ab03      	add	r3, sp, #12
 8004614:	9300      	str	r3, [sp, #0]
 8004616:	462a      	mov	r2, r5
 8004618:	4b05      	ldr	r3, [pc, #20]	@ (8004630 <_vfiprintf_r+0x228>)
 800461a:	a904      	add	r1, sp, #16
 800461c:	4630      	mov	r0, r6
 800461e:	f000 f879 	bl	8004714 <_printf_i>
 8004622:	e7e4      	b.n	80045ee <_vfiprintf_r+0x1e6>
 8004624:	08004d64 	.word	0x08004d64
 8004628:	08004d6e 	.word	0x08004d6e
 800462c:	00000000 	.word	0x00000000
 8004630:	080043e3 	.word	0x080043e3
 8004634:	08004d6a 	.word	0x08004d6a

08004638 <_printf_common>:
 8004638:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800463c:	4616      	mov	r6, r2
 800463e:	4698      	mov	r8, r3
 8004640:	688a      	ldr	r2, [r1, #8]
 8004642:	690b      	ldr	r3, [r1, #16]
 8004644:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004648:	4293      	cmp	r3, r2
 800464a:	bfb8      	it	lt
 800464c:	4613      	movlt	r3, r2
 800464e:	6033      	str	r3, [r6, #0]
 8004650:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004654:	4607      	mov	r7, r0
 8004656:	460c      	mov	r4, r1
 8004658:	b10a      	cbz	r2, 800465e <_printf_common+0x26>
 800465a:	3301      	adds	r3, #1
 800465c:	6033      	str	r3, [r6, #0]
 800465e:	6823      	ldr	r3, [r4, #0]
 8004660:	0699      	lsls	r1, r3, #26
 8004662:	bf42      	ittt	mi
 8004664:	6833      	ldrmi	r3, [r6, #0]
 8004666:	3302      	addmi	r3, #2
 8004668:	6033      	strmi	r3, [r6, #0]
 800466a:	6825      	ldr	r5, [r4, #0]
 800466c:	f015 0506 	ands.w	r5, r5, #6
 8004670:	d106      	bne.n	8004680 <_printf_common+0x48>
 8004672:	f104 0a19 	add.w	sl, r4, #25
 8004676:	68e3      	ldr	r3, [r4, #12]
 8004678:	6832      	ldr	r2, [r6, #0]
 800467a:	1a9b      	subs	r3, r3, r2
 800467c:	42ab      	cmp	r3, r5
 800467e:	dc26      	bgt.n	80046ce <_printf_common+0x96>
 8004680:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004684:	6822      	ldr	r2, [r4, #0]
 8004686:	3b00      	subs	r3, #0
 8004688:	bf18      	it	ne
 800468a:	2301      	movne	r3, #1
 800468c:	0692      	lsls	r2, r2, #26
 800468e:	d42b      	bmi.n	80046e8 <_printf_common+0xb0>
 8004690:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004694:	4641      	mov	r1, r8
 8004696:	4638      	mov	r0, r7
 8004698:	47c8      	blx	r9
 800469a:	3001      	adds	r0, #1
 800469c:	d01e      	beq.n	80046dc <_printf_common+0xa4>
 800469e:	6823      	ldr	r3, [r4, #0]
 80046a0:	6922      	ldr	r2, [r4, #16]
 80046a2:	f003 0306 	and.w	r3, r3, #6
 80046a6:	2b04      	cmp	r3, #4
 80046a8:	bf02      	ittt	eq
 80046aa:	68e5      	ldreq	r5, [r4, #12]
 80046ac:	6833      	ldreq	r3, [r6, #0]
 80046ae:	1aed      	subeq	r5, r5, r3
 80046b0:	68a3      	ldr	r3, [r4, #8]
 80046b2:	bf0c      	ite	eq
 80046b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80046b8:	2500      	movne	r5, #0
 80046ba:	4293      	cmp	r3, r2
 80046bc:	bfc4      	itt	gt
 80046be:	1a9b      	subgt	r3, r3, r2
 80046c0:	18ed      	addgt	r5, r5, r3
 80046c2:	2600      	movs	r6, #0
 80046c4:	341a      	adds	r4, #26
 80046c6:	42b5      	cmp	r5, r6
 80046c8:	d11a      	bne.n	8004700 <_printf_common+0xc8>
 80046ca:	2000      	movs	r0, #0
 80046cc:	e008      	b.n	80046e0 <_printf_common+0xa8>
 80046ce:	2301      	movs	r3, #1
 80046d0:	4652      	mov	r2, sl
 80046d2:	4641      	mov	r1, r8
 80046d4:	4638      	mov	r0, r7
 80046d6:	47c8      	blx	r9
 80046d8:	3001      	adds	r0, #1
 80046da:	d103      	bne.n	80046e4 <_printf_common+0xac>
 80046dc:	f04f 30ff 	mov.w	r0, #4294967295
 80046e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046e4:	3501      	adds	r5, #1
 80046e6:	e7c6      	b.n	8004676 <_printf_common+0x3e>
 80046e8:	18e1      	adds	r1, r4, r3
 80046ea:	1c5a      	adds	r2, r3, #1
 80046ec:	2030      	movs	r0, #48	@ 0x30
 80046ee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80046f2:	4422      	add	r2, r4
 80046f4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80046f8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80046fc:	3302      	adds	r3, #2
 80046fe:	e7c7      	b.n	8004690 <_printf_common+0x58>
 8004700:	2301      	movs	r3, #1
 8004702:	4622      	mov	r2, r4
 8004704:	4641      	mov	r1, r8
 8004706:	4638      	mov	r0, r7
 8004708:	47c8      	blx	r9
 800470a:	3001      	adds	r0, #1
 800470c:	d0e6      	beq.n	80046dc <_printf_common+0xa4>
 800470e:	3601      	adds	r6, #1
 8004710:	e7d9      	b.n	80046c6 <_printf_common+0x8e>
	...

08004714 <_printf_i>:
 8004714:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004718:	7e0f      	ldrb	r7, [r1, #24]
 800471a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800471c:	2f78      	cmp	r7, #120	@ 0x78
 800471e:	4691      	mov	r9, r2
 8004720:	4680      	mov	r8, r0
 8004722:	460c      	mov	r4, r1
 8004724:	469a      	mov	sl, r3
 8004726:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800472a:	d807      	bhi.n	800473c <_printf_i+0x28>
 800472c:	2f62      	cmp	r7, #98	@ 0x62
 800472e:	d80a      	bhi.n	8004746 <_printf_i+0x32>
 8004730:	2f00      	cmp	r7, #0
 8004732:	f000 80d2 	beq.w	80048da <_printf_i+0x1c6>
 8004736:	2f58      	cmp	r7, #88	@ 0x58
 8004738:	f000 80b9 	beq.w	80048ae <_printf_i+0x19a>
 800473c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004740:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004744:	e03a      	b.n	80047bc <_printf_i+0xa8>
 8004746:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800474a:	2b15      	cmp	r3, #21
 800474c:	d8f6      	bhi.n	800473c <_printf_i+0x28>
 800474e:	a101      	add	r1, pc, #4	@ (adr r1, 8004754 <_printf_i+0x40>)
 8004750:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004754:	080047ad 	.word	0x080047ad
 8004758:	080047c1 	.word	0x080047c1
 800475c:	0800473d 	.word	0x0800473d
 8004760:	0800473d 	.word	0x0800473d
 8004764:	0800473d 	.word	0x0800473d
 8004768:	0800473d 	.word	0x0800473d
 800476c:	080047c1 	.word	0x080047c1
 8004770:	0800473d 	.word	0x0800473d
 8004774:	0800473d 	.word	0x0800473d
 8004778:	0800473d 	.word	0x0800473d
 800477c:	0800473d 	.word	0x0800473d
 8004780:	080048c1 	.word	0x080048c1
 8004784:	080047eb 	.word	0x080047eb
 8004788:	0800487b 	.word	0x0800487b
 800478c:	0800473d 	.word	0x0800473d
 8004790:	0800473d 	.word	0x0800473d
 8004794:	080048e3 	.word	0x080048e3
 8004798:	0800473d 	.word	0x0800473d
 800479c:	080047eb 	.word	0x080047eb
 80047a0:	0800473d 	.word	0x0800473d
 80047a4:	0800473d 	.word	0x0800473d
 80047a8:	08004883 	.word	0x08004883
 80047ac:	6833      	ldr	r3, [r6, #0]
 80047ae:	1d1a      	adds	r2, r3, #4
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	6032      	str	r2, [r6, #0]
 80047b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80047b8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80047bc:	2301      	movs	r3, #1
 80047be:	e09d      	b.n	80048fc <_printf_i+0x1e8>
 80047c0:	6833      	ldr	r3, [r6, #0]
 80047c2:	6820      	ldr	r0, [r4, #0]
 80047c4:	1d19      	adds	r1, r3, #4
 80047c6:	6031      	str	r1, [r6, #0]
 80047c8:	0606      	lsls	r6, r0, #24
 80047ca:	d501      	bpl.n	80047d0 <_printf_i+0xbc>
 80047cc:	681d      	ldr	r5, [r3, #0]
 80047ce:	e003      	b.n	80047d8 <_printf_i+0xc4>
 80047d0:	0645      	lsls	r5, r0, #25
 80047d2:	d5fb      	bpl.n	80047cc <_printf_i+0xb8>
 80047d4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80047d8:	2d00      	cmp	r5, #0
 80047da:	da03      	bge.n	80047e4 <_printf_i+0xd0>
 80047dc:	232d      	movs	r3, #45	@ 0x2d
 80047de:	426d      	negs	r5, r5
 80047e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80047e4:	4859      	ldr	r0, [pc, #356]	@ (800494c <_printf_i+0x238>)
 80047e6:	230a      	movs	r3, #10
 80047e8:	e011      	b.n	800480e <_printf_i+0xfa>
 80047ea:	6821      	ldr	r1, [r4, #0]
 80047ec:	6833      	ldr	r3, [r6, #0]
 80047ee:	0608      	lsls	r0, r1, #24
 80047f0:	f853 5b04 	ldr.w	r5, [r3], #4
 80047f4:	d402      	bmi.n	80047fc <_printf_i+0xe8>
 80047f6:	0649      	lsls	r1, r1, #25
 80047f8:	bf48      	it	mi
 80047fa:	b2ad      	uxthmi	r5, r5
 80047fc:	2f6f      	cmp	r7, #111	@ 0x6f
 80047fe:	4853      	ldr	r0, [pc, #332]	@ (800494c <_printf_i+0x238>)
 8004800:	6033      	str	r3, [r6, #0]
 8004802:	bf14      	ite	ne
 8004804:	230a      	movne	r3, #10
 8004806:	2308      	moveq	r3, #8
 8004808:	2100      	movs	r1, #0
 800480a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800480e:	6866      	ldr	r6, [r4, #4]
 8004810:	60a6      	str	r6, [r4, #8]
 8004812:	2e00      	cmp	r6, #0
 8004814:	bfa2      	ittt	ge
 8004816:	6821      	ldrge	r1, [r4, #0]
 8004818:	f021 0104 	bicge.w	r1, r1, #4
 800481c:	6021      	strge	r1, [r4, #0]
 800481e:	b90d      	cbnz	r5, 8004824 <_printf_i+0x110>
 8004820:	2e00      	cmp	r6, #0
 8004822:	d04b      	beq.n	80048bc <_printf_i+0x1a8>
 8004824:	4616      	mov	r6, r2
 8004826:	fbb5 f1f3 	udiv	r1, r5, r3
 800482a:	fb03 5711 	mls	r7, r3, r1, r5
 800482e:	5dc7      	ldrb	r7, [r0, r7]
 8004830:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004834:	462f      	mov	r7, r5
 8004836:	42bb      	cmp	r3, r7
 8004838:	460d      	mov	r5, r1
 800483a:	d9f4      	bls.n	8004826 <_printf_i+0x112>
 800483c:	2b08      	cmp	r3, #8
 800483e:	d10b      	bne.n	8004858 <_printf_i+0x144>
 8004840:	6823      	ldr	r3, [r4, #0]
 8004842:	07df      	lsls	r7, r3, #31
 8004844:	d508      	bpl.n	8004858 <_printf_i+0x144>
 8004846:	6923      	ldr	r3, [r4, #16]
 8004848:	6861      	ldr	r1, [r4, #4]
 800484a:	4299      	cmp	r1, r3
 800484c:	bfde      	ittt	le
 800484e:	2330      	movle	r3, #48	@ 0x30
 8004850:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004854:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004858:	1b92      	subs	r2, r2, r6
 800485a:	6122      	str	r2, [r4, #16]
 800485c:	f8cd a000 	str.w	sl, [sp]
 8004860:	464b      	mov	r3, r9
 8004862:	aa03      	add	r2, sp, #12
 8004864:	4621      	mov	r1, r4
 8004866:	4640      	mov	r0, r8
 8004868:	f7ff fee6 	bl	8004638 <_printf_common>
 800486c:	3001      	adds	r0, #1
 800486e:	d14a      	bne.n	8004906 <_printf_i+0x1f2>
 8004870:	f04f 30ff 	mov.w	r0, #4294967295
 8004874:	b004      	add	sp, #16
 8004876:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800487a:	6823      	ldr	r3, [r4, #0]
 800487c:	f043 0320 	orr.w	r3, r3, #32
 8004880:	6023      	str	r3, [r4, #0]
 8004882:	4833      	ldr	r0, [pc, #204]	@ (8004950 <_printf_i+0x23c>)
 8004884:	2778      	movs	r7, #120	@ 0x78
 8004886:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800488a:	6823      	ldr	r3, [r4, #0]
 800488c:	6831      	ldr	r1, [r6, #0]
 800488e:	061f      	lsls	r7, r3, #24
 8004890:	f851 5b04 	ldr.w	r5, [r1], #4
 8004894:	d402      	bmi.n	800489c <_printf_i+0x188>
 8004896:	065f      	lsls	r7, r3, #25
 8004898:	bf48      	it	mi
 800489a:	b2ad      	uxthmi	r5, r5
 800489c:	6031      	str	r1, [r6, #0]
 800489e:	07d9      	lsls	r1, r3, #31
 80048a0:	bf44      	itt	mi
 80048a2:	f043 0320 	orrmi.w	r3, r3, #32
 80048a6:	6023      	strmi	r3, [r4, #0]
 80048a8:	b11d      	cbz	r5, 80048b2 <_printf_i+0x19e>
 80048aa:	2310      	movs	r3, #16
 80048ac:	e7ac      	b.n	8004808 <_printf_i+0xf4>
 80048ae:	4827      	ldr	r0, [pc, #156]	@ (800494c <_printf_i+0x238>)
 80048b0:	e7e9      	b.n	8004886 <_printf_i+0x172>
 80048b2:	6823      	ldr	r3, [r4, #0]
 80048b4:	f023 0320 	bic.w	r3, r3, #32
 80048b8:	6023      	str	r3, [r4, #0]
 80048ba:	e7f6      	b.n	80048aa <_printf_i+0x196>
 80048bc:	4616      	mov	r6, r2
 80048be:	e7bd      	b.n	800483c <_printf_i+0x128>
 80048c0:	6833      	ldr	r3, [r6, #0]
 80048c2:	6825      	ldr	r5, [r4, #0]
 80048c4:	6961      	ldr	r1, [r4, #20]
 80048c6:	1d18      	adds	r0, r3, #4
 80048c8:	6030      	str	r0, [r6, #0]
 80048ca:	062e      	lsls	r6, r5, #24
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	d501      	bpl.n	80048d4 <_printf_i+0x1c0>
 80048d0:	6019      	str	r1, [r3, #0]
 80048d2:	e002      	b.n	80048da <_printf_i+0x1c6>
 80048d4:	0668      	lsls	r0, r5, #25
 80048d6:	d5fb      	bpl.n	80048d0 <_printf_i+0x1bc>
 80048d8:	8019      	strh	r1, [r3, #0]
 80048da:	2300      	movs	r3, #0
 80048dc:	6123      	str	r3, [r4, #16]
 80048de:	4616      	mov	r6, r2
 80048e0:	e7bc      	b.n	800485c <_printf_i+0x148>
 80048e2:	6833      	ldr	r3, [r6, #0]
 80048e4:	1d1a      	adds	r2, r3, #4
 80048e6:	6032      	str	r2, [r6, #0]
 80048e8:	681e      	ldr	r6, [r3, #0]
 80048ea:	6862      	ldr	r2, [r4, #4]
 80048ec:	2100      	movs	r1, #0
 80048ee:	4630      	mov	r0, r6
 80048f0:	f7fb fc76 	bl	80001e0 <memchr>
 80048f4:	b108      	cbz	r0, 80048fa <_printf_i+0x1e6>
 80048f6:	1b80      	subs	r0, r0, r6
 80048f8:	6060      	str	r0, [r4, #4]
 80048fa:	6863      	ldr	r3, [r4, #4]
 80048fc:	6123      	str	r3, [r4, #16]
 80048fe:	2300      	movs	r3, #0
 8004900:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004904:	e7aa      	b.n	800485c <_printf_i+0x148>
 8004906:	6923      	ldr	r3, [r4, #16]
 8004908:	4632      	mov	r2, r6
 800490a:	4649      	mov	r1, r9
 800490c:	4640      	mov	r0, r8
 800490e:	47d0      	blx	sl
 8004910:	3001      	adds	r0, #1
 8004912:	d0ad      	beq.n	8004870 <_printf_i+0x15c>
 8004914:	6823      	ldr	r3, [r4, #0]
 8004916:	079b      	lsls	r3, r3, #30
 8004918:	d413      	bmi.n	8004942 <_printf_i+0x22e>
 800491a:	68e0      	ldr	r0, [r4, #12]
 800491c:	9b03      	ldr	r3, [sp, #12]
 800491e:	4298      	cmp	r0, r3
 8004920:	bfb8      	it	lt
 8004922:	4618      	movlt	r0, r3
 8004924:	e7a6      	b.n	8004874 <_printf_i+0x160>
 8004926:	2301      	movs	r3, #1
 8004928:	4632      	mov	r2, r6
 800492a:	4649      	mov	r1, r9
 800492c:	4640      	mov	r0, r8
 800492e:	47d0      	blx	sl
 8004930:	3001      	adds	r0, #1
 8004932:	d09d      	beq.n	8004870 <_printf_i+0x15c>
 8004934:	3501      	adds	r5, #1
 8004936:	68e3      	ldr	r3, [r4, #12]
 8004938:	9903      	ldr	r1, [sp, #12]
 800493a:	1a5b      	subs	r3, r3, r1
 800493c:	42ab      	cmp	r3, r5
 800493e:	dcf2      	bgt.n	8004926 <_printf_i+0x212>
 8004940:	e7eb      	b.n	800491a <_printf_i+0x206>
 8004942:	2500      	movs	r5, #0
 8004944:	f104 0619 	add.w	r6, r4, #25
 8004948:	e7f5      	b.n	8004936 <_printf_i+0x222>
 800494a:	bf00      	nop
 800494c:	08004d75 	.word	0x08004d75
 8004950:	08004d86 	.word	0x08004d86

08004954 <__sflush_r>:
 8004954:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004958:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800495c:	0716      	lsls	r6, r2, #28
 800495e:	4605      	mov	r5, r0
 8004960:	460c      	mov	r4, r1
 8004962:	d454      	bmi.n	8004a0e <__sflush_r+0xba>
 8004964:	684b      	ldr	r3, [r1, #4]
 8004966:	2b00      	cmp	r3, #0
 8004968:	dc02      	bgt.n	8004970 <__sflush_r+0x1c>
 800496a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800496c:	2b00      	cmp	r3, #0
 800496e:	dd48      	ble.n	8004a02 <__sflush_r+0xae>
 8004970:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004972:	2e00      	cmp	r6, #0
 8004974:	d045      	beq.n	8004a02 <__sflush_r+0xae>
 8004976:	2300      	movs	r3, #0
 8004978:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800497c:	682f      	ldr	r7, [r5, #0]
 800497e:	6a21      	ldr	r1, [r4, #32]
 8004980:	602b      	str	r3, [r5, #0]
 8004982:	d030      	beq.n	80049e6 <__sflush_r+0x92>
 8004984:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004986:	89a3      	ldrh	r3, [r4, #12]
 8004988:	0759      	lsls	r1, r3, #29
 800498a:	d505      	bpl.n	8004998 <__sflush_r+0x44>
 800498c:	6863      	ldr	r3, [r4, #4]
 800498e:	1ad2      	subs	r2, r2, r3
 8004990:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004992:	b10b      	cbz	r3, 8004998 <__sflush_r+0x44>
 8004994:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004996:	1ad2      	subs	r2, r2, r3
 8004998:	2300      	movs	r3, #0
 800499a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800499c:	6a21      	ldr	r1, [r4, #32]
 800499e:	4628      	mov	r0, r5
 80049a0:	47b0      	blx	r6
 80049a2:	1c43      	adds	r3, r0, #1
 80049a4:	89a3      	ldrh	r3, [r4, #12]
 80049a6:	d106      	bne.n	80049b6 <__sflush_r+0x62>
 80049a8:	6829      	ldr	r1, [r5, #0]
 80049aa:	291d      	cmp	r1, #29
 80049ac:	d82b      	bhi.n	8004a06 <__sflush_r+0xb2>
 80049ae:	4a2a      	ldr	r2, [pc, #168]	@ (8004a58 <__sflush_r+0x104>)
 80049b0:	410a      	asrs	r2, r1
 80049b2:	07d6      	lsls	r6, r2, #31
 80049b4:	d427      	bmi.n	8004a06 <__sflush_r+0xb2>
 80049b6:	2200      	movs	r2, #0
 80049b8:	6062      	str	r2, [r4, #4]
 80049ba:	04d9      	lsls	r1, r3, #19
 80049bc:	6922      	ldr	r2, [r4, #16]
 80049be:	6022      	str	r2, [r4, #0]
 80049c0:	d504      	bpl.n	80049cc <__sflush_r+0x78>
 80049c2:	1c42      	adds	r2, r0, #1
 80049c4:	d101      	bne.n	80049ca <__sflush_r+0x76>
 80049c6:	682b      	ldr	r3, [r5, #0]
 80049c8:	b903      	cbnz	r3, 80049cc <__sflush_r+0x78>
 80049ca:	6560      	str	r0, [r4, #84]	@ 0x54
 80049cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80049ce:	602f      	str	r7, [r5, #0]
 80049d0:	b1b9      	cbz	r1, 8004a02 <__sflush_r+0xae>
 80049d2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80049d6:	4299      	cmp	r1, r3
 80049d8:	d002      	beq.n	80049e0 <__sflush_r+0x8c>
 80049da:	4628      	mov	r0, r5
 80049dc:	f7ff fbf2 	bl	80041c4 <_free_r>
 80049e0:	2300      	movs	r3, #0
 80049e2:	6363      	str	r3, [r4, #52]	@ 0x34
 80049e4:	e00d      	b.n	8004a02 <__sflush_r+0xae>
 80049e6:	2301      	movs	r3, #1
 80049e8:	4628      	mov	r0, r5
 80049ea:	47b0      	blx	r6
 80049ec:	4602      	mov	r2, r0
 80049ee:	1c50      	adds	r0, r2, #1
 80049f0:	d1c9      	bne.n	8004986 <__sflush_r+0x32>
 80049f2:	682b      	ldr	r3, [r5, #0]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d0c6      	beq.n	8004986 <__sflush_r+0x32>
 80049f8:	2b1d      	cmp	r3, #29
 80049fa:	d001      	beq.n	8004a00 <__sflush_r+0xac>
 80049fc:	2b16      	cmp	r3, #22
 80049fe:	d11e      	bne.n	8004a3e <__sflush_r+0xea>
 8004a00:	602f      	str	r7, [r5, #0]
 8004a02:	2000      	movs	r0, #0
 8004a04:	e022      	b.n	8004a4c <__sflush_r+0xf8>
 8004a06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004a0a:	b21b      	sxth	r3, r3
 8004a0c:	e01b      	b.n	8004a46 <__sflush_r+0xf2>
 8004a0e:	690f      	ldr	r7, [r1, #16]
 8004a10:	2f00      	cmp	r7, #0
 8004a12:	d0f6      	beq.n	8004a02 <__sflush_r+0xae>
 8004a14:	0793      	lsls	r3, r2, #30
 8004a16:	680e      	ldr	r6, [r1, #0]
 8004a18:	bf08      	it	eq
 8004a1a:	694b      	ldreq	r3, [r1, #20]
 8004a1c:	600f      	str	r7, [r1, #0]
 8004a1e:	bf18      	it	ne
 8004a20:	2300      	movne	r3, #0
 8004a22:	eba6 0807 	sub.w	r8, r6, r7
 8004a26:	608b      	str	r3, [r1, #8]
 8004a28:	f1b8 0f00 	cmp.w	r8, #0
 8004a2c:	dde9      	ble.n	8004a02 <__sflush_r+0xae>
 8004a2e:	6a21      	ldr	r1, [r4, #32]
 8004a30:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004a32:	4643      	mov	r3, r8
 8004a34:	463a      	mov	r2, r7
 8004a36:	4628      	mov	r0, r5
 8004a38:	47b0      	blx	r6
 8004a3a:	2800      	cmp	r0, #0
 8004a3c:	dc08      	bgt.n	8004a50 <__sflush_r+0xfc>
 8004a3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004a46:	81a3      	strh	r3, [r4, #12]
 8004a48:	f04f 30ff 	mov.w	r0, #4294967295
 8004a4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a50:	4407      	add	r7, r0
 8004a52:	eba8 0800 	sub.w	r8, r8, r0
 8004a56:	e7e7      	b.n	8004a28 <__sflush_r+0xd4>
 8004a58:	dfbffffe 	.word	0xdfbffffe

08004a5c <_fflush_r>:
 8004a5c:	b538      	push	{r3, r4, r5, lr}
 8004a5e:	690b      	ldr	r3, [r1, #16]
 8004a60:	4605      	mov	r5, r0
 8004a62:	460c      	mov	r4, r1
 8004a64:	b913      	cbnz	r3, 8004a6c <_fflush_r+0x10>
 8004a66:	2500      	movs	r5, #0
 8004a68:	4628      	mov	r0, r5
 8004a6a:	bd38      	pop	{r3, r4, r5, pc}
 8004a6c:	b118      	cbz	r0, 8004a76 <_fflush_r+0x1a>
 8004a6e:	6a03      	ldr	r3, [r0, #32]
 8004a70:	b90b      	cbnz	r3, 8004a76 <_fflush_r+0x1a>
 8004a72:	f7ff fa9f 	bl	8003fb4 <__sinit>
 8004a76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d0f3      	beq.n	8004a66 <_fflush_r+0xa>
 8004a7e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004a80:	07d0      	lsls	r0, r2, #31
 8004a82:	d404      	bmi.n	8004a8e <_fflush_r+0x32>
 8004a84:	0599      	lsls	r1, r3, #22
 8004a86:	d402      	bmi.n	8004a8e <_fflush_r+0x32>
 8004a88:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004a8a:	f7ff fb98 	bl	80041be <__retarget_lock_acquire_recursive>
 8004a8e:	4628      	mov	r0, r5
 8004a90:	4621      	mov	r1, r4
 8004a92:	f7ff ff5f 	bl	8004954 <__sflush_r>
 8004a96:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004a98:	07da      	lsls	r2, r3, #31
 8004a9a:	4605      	mov	r5, r0
 8004a9c:	d4e4      	bmi.n	8004a68 <_fflush_r+0xc>
 8004a9e:	89a3      	ldrh	r3, [r4, #12]
 8004aa0:	059b      	lsls	r3, r3, #22
 8004aa2:	d4e1      	bmi.n	8004a68 <_fflush_r+0xc>
 8004aa4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004aa6:	f7ff fb8b 	bl	80041c0 <__retarget_lock_release_recursive>
 8004aaa:	e7dd      	b.n	8004a68 <_fflush_r+0xc>

08004aac <__swbuf_r>:
 8004aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aae:	460e      	mov	r6, r1
 8004ab0:	4614      	mov	r4, r2
 8004ab2:	4605      	mov	r5, r0
 8004ab4:	b118      	cbz	r0, 8004abe <__swbuf_r+0x12>
 8004ab6:	6a03      	ldr	r3, [r0, #32]
 8004ab8:	b90b      	cbnz	r3, 8004abe <__swbuf_r+0x12>
 8004aba:	f7ff fa7b 	bl	8003fb4 <__sinit>
 8004abe:	69a3      	ldr	r3, [r4, #24]
 8004ac0:	60a3      	str	r3, [r4, #8]
 8004ac2:	89a3      	ldrh	r3, [r4, #12]
 8004ac4:	071a      	lsls	r2, r3, #28
 8004ac6:	d501      	bpl.n	8004acc <__swbuf_r+0x20>
 8004ac8:	6923      	ldr	r3, [r4, #16]
 8004aca:	b943      	cbnz	r3, 8004ade <__swbuf_r+0x32>
 8004acc:	4621      	mov	r1, r4
 8004ace:	4628      	mov	r0, r5
 8004ad0:	f000 f82a 	bl	8004b28 <__swsetup_r>
 8004ad4:	b118      	cbz	r0, 8004ade <__swbuf_r+0x32>
 8004ad6:	f04f 37ff 	mov.w	r7, #4294967295
 8004ada:	4638      	mov	r0, r7
 8004adc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ade:	6823      	ldr	r3, [r4, #0]
 8004ae0:	6922      	ldr	r2, [r4, #16]
 8004ae2:	1a98      	subs	r0, r3, r2
 8004ae4:	6963      	ldr	r3, [r4, #20]
 8004ae6:	b2f6      	uxtb	r6, r6
 8004ae8:	4283      	cmp	r3, r0
 8004aea:	4637      	mov	r7, r6
 8004aec:	dc05      	bgt.n	8004afa <__swbuf_r+0x4e>
 8004aee:	4621      	mov	r1, r4
 8004af0:	4628      	mov	r0, r5
 8004af2:	f7ff ffb3 	bl	8004a5c <_fflush_r>
 8004af6:	2800      	cmp	r0, #0
 8004af8:	d1ed      	bne.n	8004ad6 <__swbuf_r+0x2a>
 8004afa:	68a3      	ldr	r3, [r4, #8]
 8004afc:	3b01      	subs	r3, #1
 8004afe:	60a3      	str	r3, [r4, #8]
 8004b00:	6823      	ldr	r3, [r4, #0]
 8004b02:	1c5a      	adds	r2, r3, #1
 8004b04:	6022      	str	r2, [r4, #0]
 8004b06:	701e      	strb	r6, [r3, #0]
 8004b08:	6962      	ldr	r2, [r4, #20]
 8004b0a:	1c43      	adds	r3, r0, #1
 8004b0c:	429a      	cmp	r2, r3
 8004b0e:	d004      	beq.n	8004b1a <__swbuf_r+0x6e>
 8004b10:	89a3      	ldrh	r3, [r4, #12]
 8004b12:	07db      	lsls	r3, r3, #31
 8004b14:	d5e1      	bpl.n	8004ada <__swbuf_r+0x2e>
 8004b16:	2e0a      	cmp	r6, #10
 8004b18:	d1df      	bne.n	8004ada <__swbuf_r+0x2e>
 8004b1a:	4621      	mov	r1, r4
 8004b1c:	4628      	mov	r0, r5
 8004b1e:	f7ff ff9d 	bl	8004a5c <_fflush_r>
 8004b22:	2800      	cmp	r0, #0
 8004b24:	d0d9      	beq.n	8004ada <__swbuf_r+0x2e>
 8004b26:	e7d6      	b.n	8004ad6 <__swbuf_r+0x2a>

08004b28 <__swsetup_r>:
 8004b28:	b538      	push	{r3, r4, r5, lr}
 8004b2a:	4b29      	ldr	r3, [pc, #164]	@ (8004bd0 <__swsetup_r+0xa8>)
 8004b2c:	4605      	mov	r5, r0
 8004b2e:	6818      	ldr	r0, [r3, #0]
 8004b30:	460c      	mov	r4, r1
 8004b32:	b118      	cbz	r0, 8004b3c <__swsetup_r+0x14>
 8004b34:	6a03      	ldr	r3, [r0, #32]
 8004b36:	b90b      	cbnz	r3, 8004b3c <__swsetup_r+0x14>
 8004b38:	f7ff fa3c 	bl	8003fb4 <__sinit>
 8004b3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b40:	0719      	lsls	r1, r3, #28
 8004b42:	d422      	bmi.n	8004b8a <__swsetup_r+0x62>
 8004b44:	06da      	lsls	r2, r3, #27
 8004b46:	d407      	bmi.n	8004b58 <__swsetup_r+0x30>
 8004b48:	2209      	movs	r2, #9
 8004b4a:	602a      	str	r2, [r5, #0]
 8004b4c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004b50:	81a3      	strh	r3, [r4, #12]
 8004b52:	f04f 30ff 	mov.w	r0, #4294967295
 8004b56:	e033      	b.n	8004bc0 <__swsetup_r+0x98>
 8004b58:	0758      	lsls	r0, r3, #29
 8004b5a:	d512      	bpl.n	8004b82 <__swsetup_r+0x5a>
 8004b5c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004b5e:	b141      	cbz	r1, 8004b72 <__swsetup_r+0x4a>
 8004b60:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004b64:	4299      	cmp	r1, r3
 8004b66:	d002      	beq.n	8004b6e <__swsetup_r+0x46>
 8004b68:	4628      	mov	r0, r5
 8004b6a:	f7ff fb2b 	bl	80041c4 <_free_r>
 8004b6e:	2300      	movs	r3, #0
 8004b70:	6363      	str	r3, [r4, #52]	@ 0x34
 8004b72:	89a3      	ldrh	r3, [r4, #12]
 8004b74:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004b78:	81a3      	strh	r3, [r4, #12]
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	6063      	str	r3, [r4, #4]
 8004b7e:	6923      	ldr	r3, [r4, #16]
 8004b80:	6023      	str	r3, [r4, #0]
 8004b82:	89a3      	ldrh	r3, [r4, #12]
 8004b84:	f043 0308 	orr.w	r3, r3, #8
 8004b88:	81a3      	strh	r3, [r4, #12]
 8004b8a:	6923      	ldr	r3, [r4, #16]
 8004b8c:	b94b      	cbnz	r3, 8004ba2 <__swsetup_r+0x7a>
 8004b8e:	89a3      	ldrh	r3, [r4, #12]
 8004b90:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004b94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b98:	d003      	beq.n	8004ba2 <__swsetup_r+0x7a>
 8004b9a:	4621      	mov	r1, r4
 8004b9c:	4628      	mov	r0, r5
 8004b9e:	f000 f84f 	bl	8004c40 <__smakebuf_r>
 8004ba2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ba6:	f013 0201 	ands.w	r2, r3, #1
 8004baa:	d00a      	beq.n	8004bc2 <__swsetup_r+0x9a>
 8004bac:	2200      	movs	r2, #0
 8004bae:	60a2      	str	r2, [r4, #8]
 8004bb0:	6962      	ldr	r2, [r4, #20]
 8004bb2:	4252      	negs	r2, r2
 8004bb4:	61a2      	str	r2, [r4, #24]
 8004bb6:	6922      	ldr	r2, [r4, #16]
 8004bb8:	b942      	cbnz	r2, 8004bcc <__swsetup_r+0xa4>
 8004bba:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004bbe:	d1c5      	bne.n	8004b4c <__swsetup_r+0x24>
 8004bc0:	bd38      	pop	{r3, r4, r5, pc}
 8004bc2:	0799      	lsls	r1, r3, #30
 8004bc4:	bf58      	it	pl
 8004bc6:	6962      	ldrpl	r2, [r4, #20]
 8004bc8:	60a2      	str	r2, [r4, #8]
 8004bca:	e7f4      	b.n	8004bb6 <__swsetup_r+0x8e>
 8004bcc:	2000      	movs	r0, #0
 8004bce:	e7f7      	b.n	8004bc0 <__swsetup_r+0x98>
 8004bd0:	20000018 	.word	0x20000018

08004bd4 <_sbrk_r>:
 8004bd4:	b538      	push	{r3, r4, r5, lr}
 8004bd6:	4d06      	ldr	r5, [pc, #24]	@ (8004bf0 <_sbrk_r+0x1c>)
 8004bd8:	2300      	movs	r3, #0
 8004bda:	4604      	mov	r4, r0
 8004bdc:	4608      	mov	r0, r1
 8004bde:	602b      	str	r3, [r5, #0]
 8004be0:	f7fb ff82 	bl	8000ae8 <_sbrk>
 8004be4:	1c43      	adds	r3, r0, #1
 8004be6:	d102      	bne.n	8004bee <_sbrk_r+0x1a>
 8004be8:	682b      	ldr	r3, [r5, #0]
 8004bea:	b103      	cbz	r3, 8004bee <_sbrk_r+0x1a>
 8004bec:	6023      	str	r3, [r4, #0]
 8004bee:	bd38      	pop	{r3, r4, r5, pc}
 8004bf0:	200002bc 	.word	0x200002bc

08004bf4 <__swhatbuf_r>:
 8004bf4:	b570      	push	{r4, r5, r6, lr}
 8004bf6:	460c      	mov	r4, r1
 8004bf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bfc:	2900      	cmp	r1, #0
 8004bfe:	b096      	sub	sp, #88	@ 0x58
 8004c00:	4615      	mov	r5, r2
 8004c02:	461e      	mov	r6, r3
 8004c04:	da0d      	bge.n	8004c22 <__swhatbuf_r+0x2e>
 8004c06:	89a3      	ldrh	r3, [r4, #12]
 8004c08:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004c0c:	f04f 0100 	mov.w	r1, #0
 8004c10:	bf14      	ite	ne
 8004c12:	2340      	movne	r3, #64	@ 0x40
 8004c14:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004c18:	2000      	movs	r0, #0
 8004c1a:	6031      	str	r1, [r6, #0]
 8004c1c:	602b      	str	r3, [r5, #0]
 8004c1e:	b016      	add	sp, #88	@ 0x58
 8004c20:	bd70      	pop	{r4, r5, r6, pc}
 8004c22:	466a      	mov	r2, sp
 8004c24:	f000 f848 	bl	8004cb8 <_fstat_r>
 8004c28:	2800      	cmp	r0, #0
 8004c2a:	dbec      	blt.n	8004c06 <__swhatbuf_r+0x12>
 8004c2c:	9901      	ldr	r1, [sp, #4]
 8004c2e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004c32:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004c36:	4259      	negs	r1, r3
 8004c38:	4159      	adcs	r1, r3
 8004c3a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004c3e:	e7eb      	b.n	8004c18 <__swhatbuf_r+0x24>

08004c40 <__smakebuf_r>:
 8004c40:	898b      	ldrh	r3, [r1, #12]
 8004c42:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004c44:	079d      	lsls	r5, r3, #30
 8004c46:	4606      	mov	r6, r0
 8004c48:	460c      	mov	r4, r1
 8004c4a:	d507      	bpl.n	8004c5c <__smakebuf_r+0x1c>
 8004c4c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004c50:	6023      	str	r3, [r4, #0]
 8004c52:	6123      	str	r3, [r4, #16]
 8004c54:	2301      	movs	r3, #1
 8004c56:	6163      	str	r3, [r4, #20]
 8004c58:	b003      	add	sp, #12
 8004c5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c5c:	ab01      	add	r3, sp, #4
 8004c5e:	466a      	mov	r2, sp
 8004c60:	f7ff ffc8 	bl	8004bf4 <__swhatbuf_r>
 8004c64:	9f00      	ldr	r7, [sp, #0]
 8004c66:	4605      	mov	r5, r0
 8004c68:	4639      	mov	r1, r7
 8004c6a:	4630      	mov	r0, r6
 8004c6c:	f7ff fb16 	bl	800429c <_malloc_r>
 8004c70:	b948      	cbnz	r0, 8004c86 <__smakebuf_r+0x46>
 8004c72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c76:	059a      	lsls	r2, r3, #22
 8004c78:	d4ee      	bmi.n	8004c58 <__smakebuf_r+0x18>
 8004c7a:	f023 0303 	bic.w	r3, r3, #3
 8004c7e:	f043 0302 	orr.w	r3, r3, #2
 8004c82:	81a3      	strh	r3, [r4, #12]
 8004c84:	e7e2      	b.n	8004c4c <__smakebuf_r+0xc>
 8004c86:	89a3      	ldrh	r3, [r4, #12]
 8004c88:	6020      	str	r0, [r4, #0]
 8004c8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c8e:	81a3      	strh	r3, [r4, #12]
 8004c90:	9b01      	ldr	r3, [sp, #4]
 8004c92:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004c96:	b15b      	cbz	r3, 8004cb0 <__smakebuf_r+0x70>
 8004c98:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004c9c:	4630      	mov	r0, r6
 8004c9e:	f000 f81d 	bl	8004cdc <_isatty_r>
 8004ca2:	b128      	cbz	r0, 8004cb0 <__smakebuf_r+0x70>
 8004ca4:	89a3      	ldrh	r3, [r4, #12]
 8004ca6:	f023 0303 	bic.w	r3, r3, #3
 8004caa:	f043 0301 	orr.w	r3, r3, #1
 8004cae:	81a3      	strh	r3, [r4, #12]
 8004cb0:	89a3      	ldrh	r3, [r4, #12]
 8004cb2:	431d      	orrs	r5, r3
 8004cb4:	81a5      	strh	r5, [r4, #12]
 8004cb6:	e7cf      	b.n	8004c58 <__smakebuf_r+0x18>

08004cb8 <_fstat_r>:
 8004cb8:	b538      	push	{r3, r4, r5, lr}
 8004cba:	4d07      	ldr	r5, [pc, #28]	@ (8004cd8 <_fstat_r+0x20>)
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	4604      	mov	r4, r0
 8004cc0:	4608      	mov	r0, r1
 8004cc2:	4611      	mov	r1, r2
 8004cc4:	602b      	str	r3, [r5, #0]
 8004cc6:	f7fb fee6 	bl	8000a96 <_fstat>
 8004cca:	1c43      	adds	r3, r0, #1
 8004ccc:	d102      	bne.n	8004cd4 <_fstat_r+0x1c>
 8004cce:	682b      	ldr	r3, [r5, #0]
 8004cd0:	b103      	cbz	r3, 8004cd4 <_fstat_r+0x1c>
 8004cd2:	6023      	str	r3, [r4, #0]
 8004cd4:	bd38      	pop	{r3, r4, r5, pc}
 8004cd6:	bf00      	nop
 8004cd8:	200002bc 	.word	0x200002bc

08004cdc <_isatty_r>:
 8004cdc:	b538      	push	{r3, r4, r5, lr}
 8004cde:	4d06      	ldr	r5, [pc, #24]	@ (8004cf8 <_isatty_r+0x1c>)
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	4604      	mov	r4, r0
 8004ce4:	4608      	mov	r0, r1
 8004ce6:	602b      	str	r3, [r5, #0]
 8004ce8:	f7fb fee5 	bl	8000ab6 <_isatty>
 8004cec:	1c43      	adds	r3, r0, #1
 8004cee:	d102      	bne.n	8004cf6 <_isatty_r+0x1a>
 8004cf0:	682b      	ldr	r3, [r5, #0]
 8004cf2:	b103      	cbz	r3, 8004cf6 <_isatty_r+0x1a>
 8004cf4:	6023      	str	r3, [r4, #0]
 8004cf6:	bd38      	pop	{r3, r4, r5, pc}
 8004cf8:	200002bc 	.word	0x200002bc

08004cfc <_init>:
 8004cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cfe:	bf00      	nop
 8004d00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d02:	bc08      	pop	{r3}
 8004d04:	469e      	mov	lr, r3
 8004d06:	4770      	bx	lr

08004d08 <_fini>:
 8004d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d0a:	bf00      	nop
 8004d0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d0e:	bc08      	pop	{r3}
 8004d10:	469e      	mov	lr, r3
 8004d12:	4770      	bx	lr
