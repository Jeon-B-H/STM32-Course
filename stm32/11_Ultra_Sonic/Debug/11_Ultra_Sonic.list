
11_Ultra_Sonic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004bb4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08004d54  08004d54  00005d54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004db8  08004db8  00006068  2**0
                  CONTENTS
  4 .ARM          00000008  08004db8  08004db8  00005db8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004dc0  08004dc0  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004dc0  08004dc0  00005dc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004dc4  08004dc4  00005dc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004dc8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000250  20000068  08004e30  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002b8  08004e30  000062b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e8fe  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000246b  00000000  00000000  00014996  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d68  00000000  00000000  00016e08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a61  00000000  00000000  00017b70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017979  00000000  00000000  000185d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000107b7  00000000  00000000  0002ff4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ffee  00000000  00000000  00040701  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d06ef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e74  00000000  00000000  000d0734  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  000d45a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004d3c 	.word	0x08004d3c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08004d3c 	.word	0x08004d3c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <delay_us>:
#include "delay.h"

void delay_us(uint16_t us) {
 8000570:	b480      	push	{r7}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0
 8000576:	4603      	mov	r3, r0
 8000578:	80fb      	strh	r3, [r7, #6]
	// First Argument : Hander Counter
	// Second Argument : Initialization 0
	__HAL_TIM_SET_COUNTER(&htim11, 0);
 800057a:	4b09      	ldr	r3, [pc, #36]	@ (80005a0 <delay_us+0x30>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	2200      	movs	r2, #0
 8000580:	625a      	str	r2, [r3, #36]	@ 0x24

	// Wait for us [usecond]
	while((__HAL_TIM_GET_COUNTER(&htim11)) < us);
 8000582:	bf00      	nop
 8000584:	4b06      	ldr	r3, [pc, #24]	@ (80005a0 <delay_us+0x30>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800058a:	88fb      	ldrh	r3, [r7, #6]
 800058c:	429a      	cmp	r2, r3
 800058e:	d3f9      	bcc.n	8000584 <delay_us+0x14>
}
 8000590:	bf00      	nop
 8000592:	bf00      	nop
 8000594:	370c      	adds	r7, #12
 8000596:	46bd      	mov	sp, r7
 8000598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop
 80005a0:	200000d8 	.word	0x200000d8

080005a4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b088      	sub	sp, #32
 80005a8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005aa:	f107 030c 	add.w	r3, r7, #12
 80005ae:	2200      	movs	r2, #0
 80005b0:	601a      	str	r2, [r3, #0]
 80005b2:	605a      	str	r2, [r3, #4]
 80005b4:	609a      	str	r2, [r3, #8]
 80005b6:	60da      	str	r2, [r3, #12]
 80005b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005ba:	2300      	movs	r3, #0
 80005bc:	60bb      	str	r3, [r7, #8]
 80005be:	4b18      	ldr	r3, [pc, #96]	@ (8000620 <MX_GPIO_Init+0x7c>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005c2:	4a17      	ldr	r2, [pc, #92]	@ (8000620 <MX_GPIO_Init+0x7c>)
 80005c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80005c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80005ca:	4b15      	ldr	r3, [pc, #84]	@ (8000620 <MX_GPIO_Init+0x7c>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005d2:	60bb      	str	r3, [r7, #8]
 80005d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005d6:	2300      	movs	r3, #0
 80005d8:	607b      	str	r3, [r7, #4]
 80005da:	4b11      	ldr	r3, [pc, #68]	@ (8000620 <MX_GPIO_Init+0x7c>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005de:	4a10      	ldr	r2, [pc, #64]	@ (8000620 <MX_GPIO_Init+0x7c>)
 80005e0:	f043 0301 	orr.w	r3, r3, #1
 80005e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80005e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000620 <MX_GPIO_Init+0x7c>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ea:	f003 0301 	and.w	r3, r3, #1
 80005ee:	607b      	str	r3, [r7, #4]
 80005f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 80005f2:	2200      	movs	r2, #0
 80005f4:	2180      	movs	r1, #128	@ 0x80
 80005f6:	480b      	ldr	r0, [pc, #44]	@ (8000624 <MX_GPIO_Init+0x80>)
 80005f8:	f000 fff2 	bl	80015e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80005fc:	2380      	movs	r3, #128	@ 0x80
 80005fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000600:	2301      	movs	r3, #1
 8000602:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000604:	2300      	movs	r3, #0
 8000606:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000608:	2303      	movs	r3, #3
 800060a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800060c:	f107 030c 	add.w	r3, r7, #12
 8000610:	4619      	mov	r1, r3
 8000612:	4804      	ldr	r0, [pc, #16]	@ (8000624 <MX_GPIO_Init+0x80>)
 8000614:	f000 fe60 	bl	80012d8 <HAL_GPIO_Init>

}
 8000618:	bf00      	nop
 800061a:	3720      	adds	r7, #32
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	40023800 	.word	0x40023800
 8000624:	40020000 	.word	0x40020000

08000628 <__io_putchar>:
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */

PUTCHAR_PROTOTYPE
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000630:	1d39      	adds	r1, r7, #4
 8000632:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000636:	2201      	movs	r2, #1
 8000638:	4803      	ldr	r0, [pc, #12]	@ (8000648 <__io_putchar+0x20>)
 800063a:	f002 fc9d 	bl	8002f78 <HAL_UART_Transmit>

  return ch;
 800063e:	687b      	ldr	r3, [r7, #4]
}
 8000640:	4618      	mov	r0, r3
 8000642:	3708      	adds	r7, #8
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	20000120 	.word	0x20000120

0800064c <HAL_TIM_IC_CaptureCallback>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	7f1b      	ldrb	r3, [r3, #28]
 8000658:	2b01      	cmp	r3, #1
 800065a:	d171      	bne.n	8000740 <HAL_TIM_IC_CaptureCallback+0xf4>
  {
    if(captureFlag  == 0)
 800065c:	4b3a      	ldr	r3, [pc, #232]	@ (8000748 <HAL_TIM_IC_CaptureCallback+0xfc>)
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	2b00      	cmp	r3, #0
 8000662:	d11b      	bne.n	800069c <HAL_TIM_IC_CaptureCallback+0x50>
    {
      IC_Value1 = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_1);
 8000664:	2100      	movs	r1, #0
 8000666:	4839      	ldr	r0, [pc, #228]	@ (800074c <HAL_TIM_IC_CaptureCallback+0x100>)
 8000668:	f002 f8de 	bl	8002828 <HAL_TIM_ReadCapturedValue>
 800066c:	4603      	mov	r3, r0
 800066e:	b29a      	uxth	r2, r3
 8000670:	4b37      	ldr	r3, [pc, #220]	@ (8000750 <HAL_TIM_IC_CaptureCallback+0x104>)
 8000672:	801a      	strh	r2, [r3, #0]
      captureFlag = 1;
 8000674:	4b34      	ldr	r3, [pc, #208]	@ (8000748 <HAL_TIM_IC_CaptureCallback+0xfc>)
 8000676:	2201      	movs	r2, #1
 8000678:	701a      	strb	r2, [r3, #0]
      __HAL_TIM_SET_CAPTUREPOLARITY(&htim3, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 800067a:	4b34      	ldr	r3, [pc, #208]	@ (800074c <HAL_TIM_IC_CaptureCallback+0x100>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	6a1a      	ldr	r2, [r3, #32]
 8000680:	4b32      	ldr	r3, [pc, #200]	@ (800074c <HAL_TIM_IC_CaptureCallback+0x100>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	f022 020a 	bic.w	r2, r2, #10
 8000688:	621a      	str	r2, [r3, #32]
 800068a:	4b30      	ldr	r3, [pc, #192]	@ (800074c <HAL_TIM_IC_CaptureCallback+0x100>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	6a1a      	ldr	r2, [r3, #32]
 8000690:	4b2e      	ldr	r3, [pc, #184]	@ (800074c <HAL_TIM_IC_CaptureCallback+0x100>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	f042 0202 	orr.w	r2, r2, #2
 8000698:	621a      	str	r2, [r3, #32]
      captureFlag = 0;
      __HAL_TIM_SET_CAPTUREPOLARITY(&htim3, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
      __HAL_TIM_DISABLE_IT(&htim3, TIM_IT_CC1);
    }
  }
}
 800069a:	e051      	b.n	8000740 <HAL_TIM_IC_CaptureCallback+0xf4>
    else if(captureFlag == 1)
 800069c:	4b2a      	ldr	r3, [pc, #168]	@ (8000748 <HAL_TIM_IC_CaptureCallback+0xfc>)
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	2b01      	cmp	r3, #1
 80006a2:	d14d      	bne.n	8000740 <HAL_TIM_IC_CaptureCallback+0xf4>
      IC_Value2 = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_1);
 80006a4:	2100      	movs	r1, #0
 80006a6:	4829      	ldr	r0, [pc, #164]	@ (800074c <HAL_TIM_IC_CaptureCallback+0x100>)
 80006a8:	f002 f8be 	bl	8002828 <HAL_TIM_ReadCapturedValue>
 80006ac:	4603      	mov	r3, r0
 80006ae:	b29a      	uxth	r2, r3
 80006b0:	4b28      	ldr	r3, [pc, #160]	@ (8000754 <HAL_TIM_IC_CaptureCallback+0x108>)
 80006b2:	801a      	strh	r2, [r3, #0]
      __HAL_TIM_SET_COUNTER(&htim3, 0);
 80006b4:	4b25      	ldr	r3, [pc, #148]	@ (800074c <HAL_TIM_IC_CaptureCallback+0x100>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	2200      	movs	r2, #0
 80006ba:	625a      	str	r2, [r3, #36]	@ 0x24
      if(IC_Value2 > IC_Value1)
 80006bc:	4b25      	ldr	r3, [pc, #148]	@ (8000754 <HAL_TIM_IC_CaptureCallback+0x108>)
 80006be:	881a      	ldrh	r2, [r3, #0]
 80006c0:	4b23      	ldr	r3, [pc, #140]	@ (8000750 <HAL_TIM_IC_CaptureCallback+0x104>)
 80006c2:	881b      	ldrh	r3, [r3, #0]
 80006c4:	429a      	cmp	r2, r3
 80006c6:	d908      	bls.n	80006da <HAL_TIM_IC_CaptureCallback+0x8e>
        echoTime = IC_Value2 - IC_Value1;
 80006c8:	4b22      	ldr	r3, [pc, #136]	@ (8000754 <HAL_TIM_IC_CaptureCallback+0x108>)
 80006ca:	881a      	ldrh	r2, [r3, #0]
 80006cc:	4b20      	ldr	r3, [pc, #128]	@ (8000750 <HAL_TIM_IC_CaptureCallback+0x104>)
 80006ce:	881b      	ldrh	r3, [r3, #0]
 80006d0:	1ad3      	subs	r3, r2, r3
 80006d2:	b29a      	uxth	r2, r3
 80006d4:	4b20      	ldr	r3, [pc, #128]	@ (8000758 <HAL_TIM_IC_CaptureCallback+0x10c>)
 80006d6:	801a      	strh	r2, [r3, #0]
 80006d8:	e00f      	b.n	80006fa <HAL_TIM_IC_CaptureCallback+0xae>
      else if(IC_Value1 > IC_Value2)
 80006da:	4b1d      	ldr	r3, [pc, #116]	@ (8000750 <HAL_TIM_IC_CaptureCallback+0x104>)
 80006dc:	881a      	ldrh	r2, [r3, #0]
 80006de:	4b1d      	ldr	r3, [pc, #116]	@ (8000754 <HAL_TIM_IC_CaptureCallback+0x108>)
 80006e0:	881b      	ldrh	r3, [r3, #0]
 80006e2:	429a      	cmp	r2, r3
 80006e4:	d909      	bls.n	80006fa <HAL_TIM_IC_CaptureCallback+0xae>
        echoTime = (0xFFFF - IC_Value1) + IC_Value2;
 80006e6:	4b1b      	ldr	r3, [pc, #108]	@ (8000754 <HAL_TIM_IC_CaptureCallback+0x108>)
 80006e8:	881a      	ldrh	r2, [r3, #0]
 80006ea:	4b19      	ldr	r3, [pc, #100]	@ (8000750 <HAL_TIM_IC_CaptureCallback+0x104>)
 80006ec:	881b      	ldrh	r3, [r3, #0]
 80006ee:	1ad3      	subs	r3, r2, r3
 80006f0:	b29b      	uxth	r3, r3
 80006f2:	3b01      	subs	r3, #1
 80006f4:	b29a      	uxth	r2, r3
 80006f6:	4b18      	ldr	r3, [pc, #96]	@ (8000758 <HAL_TIM_IC_CaptureCallback+0x10c>)
 80006f8:	801a      	strh	r2, [r3, #0]
      distance = echoTime / 58;
 80006fa:	4b17      	ldr	r3, [pc, #92]	@ (8000758 <HAL_TIM_IC_CaptureCallback+0x10c>)
 80006fc:	881b      	ldrh	r3, [r3, #0]
 80006fe:	4a17      	ldr	r2, [pc, #92]	@ (800075c <HAL_TIM_IC_CaptureCallback+0x110>)
 8000700:	fba2 2303 	umull	r2, r3, r2, r3
 8000704:	095b      	lsrs	r3, r3, #5
 8000706:	b29b      	uxth	r3, r3
 8000708:	b2da      	uxtb	r2, r3
 800070a:	4b15      	ldr	r3, [pc, #84]	@ (8000760 <HAL_TIM_IC_CaptureCallback+0x114>)
 800070c:	701a      	strb	r2, [r3, #0]
      captureFlag = 0;
 800070e:	4b0e      	ldr	r3, [pc, #56]	@ (8000748 <HAL_TIM_IC_CaptureCallback+0xfc>)
 8000710:	2200      	movs	r2, #0
 8000712:	701a      	strb	r2, [r3, #0]
      __HAL_TIM_SET_CAPTUREPOLARITY(&htim3, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8000714:	4b0d      	ldr	r3, [pc, #52]	@ (800074c <HAL_TIM_IC_CaptureCallback+0x100>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	6a1a      	ldr	r2, [r3, #32]
 800071a:	4b0c      	ldr	r3, [pc, #48]	@ (800074c <HAL_TIM_IC_CaptureCallback+0x100>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	f022 020a 	bic.w	r2, r2, #10
 8000722:	621a      	str	r2, [r3, #32]
 8000724:	4b09      	ldr	r3, [pc, #36]	@ (800074c <HAL_TIM_IC_CaptureCallback+0x100>)
 8000726:	681a      	ldr	r2, [r3, #0]
 8000728:	4b08      	ldr	r3, [pc, #32]	@ (800074c <HAL_TIM_IC_CaptureCallback+0x100>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	6a12      	ldr	r2, [r2, #32]
 800072e:	621a      	str	r2, [r3, #32]
      __HAL_TIM_DISABLE_IT(&htim3, TIM_IT_CC1);
 8000730:	4b06      	ldr	r3, [pc, #24]	@ (800074c <HAL_TIM_IC_CaptureCallback+0x100>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	68da      	ldr	r2, [r3, #12]
 8000736:	4b05      	ldr	r3, [pc, #20]	@ (800074c <HAL_TIM_IC_CaptureCallback+0x100>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	f022 0202 	bic.w	r2, r2, #2
 800073e:	60da      	str	r2, [r3, #12]
}
 8000740:	bf00      	nop
 8000742:	3708      	adds	r7, #8
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	2000008a 	.word	0x2000008a
 800074c:	20000090 	.word	0x20000090
 8000750:	20000084 	.word	0x20000084
 8000754:	20000086 	.word	0x20000086
 8000758:	20000088 	.word	0x20000088
 800075c:	8d3dcb09 	.word	0x8d3dcb09
 8000760:	2000008b 	.word	0x2000008b

08000764 <HCSR04>:

void HCSR04 (void) {
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, 0);
 8000768:	2200      	movs	r2, #0
 800076a:	2180      	movs	r1, #128	@ 0x80
 800076c:	480e      	ldr	r0, [pc, #56]	@ (80007a8 <HCSR04+0x44>)
 800076e:	f000 ff37 	bl	80015e0 <HAL_GPIO_WritePin>
	delay_us(1);
 8000772:	2001      	movs	r0, #1
 8000774:	f7ff fefc 	bl	8000570 <delay_us>
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, 1);
 8000778:	2201      	movs	r2, #1
 800077a:	2180      	movs	r1, #128	@ 0x80
 800077c:	480a      	ldr	r0, [pc, #40]	@ (80007a8 <HCSR04+0x44>)
 800077e:	f000 ff2f 	bl	80015e0 <HAL_GPIO_WritePin>
	delay_us(10);
 8000782:	200a      	movs	r0, #10
 8000784:	f7ff fef4 	bl	8000570 <delay_us>
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, 0);
 8000788:	2200      	movs	r2, #0
 800078a:	2180      	movs	r1, #128	@ 0x80
 800078c:	4806      	ldr	r0, [pc, #24]	@ (80007a8 <HCSR04+0x44>)
 800078e:	f000 ff27 	bl	80015e0 <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim3, TIM_IT_CC1);
 8000792:	4b06      	ldr	r3, [pc, #24]	@ (80007ac <HCSR04+0x48>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	68da      	ldr	r2, [r3, #12]
 8000798:	4b04      	ldr	r3, [pc, #16]	@ (80007ac <HCSR04+0x48>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	f042 0202 	orr.w	r2, r2, #2
 80007a0:	60da      	str	r2, [r3, #12]
}
 80007a2:	bf00      	nop
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	40020000 	.word	0x40020000
 80007ac:	20000090 	.word	0x20000090

080007b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007b4:	f000 fb56 	bl	8000e64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007b8:	f000 f826 	bl	8000808 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007bc:	f7ff fef2 	bl	80005a4 <MX_GPIO_Init>
  MX_TIM3_Init();
 80007c0:	f000 f9b2 	bl	8000b28 <MX_TIM3_Init>
  MX_TIM11_Init();
 80007c4:	f000 fa20 	bl	8000c08 <MX_TIM11_Init>
  MX_USART2_UART_Init();
 80007c8:	f000 faa8 	bl	8000d1c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim11);    // For Delay function
 80007cc:	480a      	ldr	r0, [pc, #40]	@ (80007f8 <main+0x48>)
 80007ce:	f001 fc09 	bl	8001fe4 <HAL_TIM_Base_Start>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);   // for ultrasonic timer
 80007d2:	2100      	movs	r1, #0
 80007d4:	4809      	ldr	r0, [pc, #36]	@ (80007fc <main+0x4c>)
 80007d6:	f001 fcb9 	bl	800214c <HAL_TIM_IC_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HCSR04();
 80007da:	f7ff ffc3 	bl	8000764 <HCSR04>
	printf("Distance = %3d [cm] \n\r", distance);
 80007de:	4b08      	ldr	r3, [pc, #32]	@ (8000800 <main+0x50>)
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	4619      	mov	r1, r3
 80007e4:	4807      	ldr	r0, [pc, #28]	@ (8000804 <main+0x54>)
 80007e6:	f003 fc3b 	bl	8004060 <iprintf>
	HAL_Delay(1000);
 80007ea:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007ee:	f000 fbab 	bl	8000f48 <HAL_Delay>
	HCSR04();
 80007f2:	bf00      	nop
 80007f4:	e7f1      	b.n	80007da <main+0x2a>
 80007f6:	bf00      	nop
 80007f8:	200000d8 	.word	0x200000d8
 80007fc:	20000090 	.word	0x20000090
 8000800:	2000008b 	.word	0x2000008b
 8000804:	08004d54 	.word	0x08004d54

08000808 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b094      	sub	sp, #80	@ 0x50
 800080c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800080e:	f107 0320 	add.w	r3, r7, #32
 8000812:	2230      	movs	r2, #48	@ 0x30
 8000814:	2100      	movs	r1, #0
 8000816:	4618      	mov	r0, r3
 8000818:	f003 fc77 	bl	800410a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800081c:	f107 030c 	add.w	r3, r7, #12
 8000820:	2200      	movs	r2, #0
 8000822:	601a      	str	r2, [r3, #0]
 8000824:	605a      	str	r2, [r3, #4]
 8000826:	609a      	str	r2, [r3, #8]
 8000828:	60da      	str	r2, [r3, #12]
 800082a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800082c:	2300      	movs	r3, #0
 800082e:	60bb      	str	r3, [r7, #8]
 8000830:	4b27      	ldr	r3, [pc, #156]	@ (80008d0 <SystemClock_Config+0xc8>)
 8000832:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000834:	4a26      	ldr	r2, [pc, #152]	@ (80008d0 <SystemClock_Config+0xc8>)
 8000836:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800083a:	6413      	str	r3, [r2, #64]	@ 0x40
 800083c:	4b24      	ldr	r3, [pc, #144]	@ (80008d0 <SystemClock_Config+0xc8>)
 800083e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000840:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000844:	60bb      	str	r3, [r7, #8]
 8000846:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000848:	2300      	movs	r3, #0
 800084a:	607b      	str	r3, [r7, #4]
 800084c:	4b21      	ldr	r3, [pc, #132]	@ (80008d4 <SystemClock_Config+0xcc>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a20      	ldr	r2, [pc, #128]	@ (80008d4 <SystemClock_Config+0xcc>)
 8000852:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000856:	6013      	str	r3, [r2, #0]
 8000858:	4b1e      	ldr	r3, [pc, #120]	@ (80008d4 <SystemClock_Config+0xcc>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000860:	607b      	str	r3, [r7, #4]
 8000862:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000864:	2301      	movs	r3, #1
 8000866:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000868:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800086c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800086e:	2302      	movs	r3, #2
 8000870:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000872:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000876:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000878:	2304      	movs	r3, #4
 800087a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 800087c:	2364      	movs	r3, #100	@ 0x64
 800087e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000880:	2302      	movs	r3, #2
 8000882:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000884:	2304      	movs	r3, #4
 8000886:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000888:	f107 0320 	add.w	r3, r7, #32
 800088c:	4618      	mov	r0, r3
 800088e:	f000 fec1 	bl	8001614 <HAL_RCC_OscConfig>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000898:	f000 f81e 	bl	80008d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800089c:	230f      	movs	r3, #15
 800089e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008a0:	2302      	movs	r3, #2
 80008a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008a4:	2300      	movs	r3, #0
 80008a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008ae:	2300      	movs	r3, #0
 80008b0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80008b2:	f107 030c 	add.w	r3, r7, #12
 80008b6:	2103      	movs	r1, #3
 80008b8:	4618      	mov	r0, r3
 80008ba:	f001 f923 	bl	8001b04 <HAL_RCC_ClockConfig>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80008c4:	f000 f808 	bl	80008d8 <Error_Handler>
  }
}
 80008c8:	bf00      	nop
 80008ca:	3750      	adds	r7, #80	@ 0x50
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	40023800 	.word	0x40023800
 80008d4:	40007000 	.word	0x40007000

080008d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008dc:	b672      	cpsid	i
}
 80008de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008e0:	bf00      	nop
 80008e2:	e7fd      	b.n	80008e0 <Error_Handler+0x8>

080008e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	607b      	str	r3, [r7, #4]
 80008ee:	4b10      	ldr	r3, [pc, #64]	@ (8000930 <HAL_MspInit+0x4c>)
 80008f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008f2:	4a0f      	ldr	r2, [pc, #60]	@ (8000930 <HAL_MspInit+0x4c>)
 80008f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80008fa:	4b0d      	ldr	r3, [pc, #52]	@ (8000930 <HAL_MspInit+0x4c>)
 80008fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000902:	607b      	str	r3, [r7, #4]
 8000904:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	603b      	str	r3, [r7, #0]
 800090a:	4b09      	ldr	r3, [pc, #36]	@ (8000930 <HAL_MspInit+0x4c>)
 800090c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800090e:	4a08      	ldr	r2, [pc, #32]	@ (8000930 <HAL_MspInit+0x4c>)
 8000910:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000914:	6413      	str	r3, [r2, #64]	@ 0x40
 8000916:	4b06      	ldr	r3, [pc, #24]	@ (8000930 <HAL_MspInit+0x4c>)
 8000918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800091a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800091e:	603b      	str	r3, [r7, #0]
 8000920:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000922:	bf00      	nop
 8000924:	370c      	adds	r7, #12
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop
 8000930:	40023800 	.word	0x40023800

08000934 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000938:	bf00      	nop
 800093a:	e7fd      	b.n	8000938 <NMI_Handler+0x4>

0800093c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000940:	bf00      	nop
 8000942:	e7fd      	b.n	8000940 <HardFault_Handler+0x4>

08000944 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000948:	bf00      	nop
 800094a:	e7fd      	b.n	8000948 <MemManage_Handler+0x4>

0800094c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000950:	bf00      	nop
 8000952:	e7fd      	b.n	8000950 <BusFault_Handler+0x4>

08000954 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000958:	bf00      	nop
 800095a:	e7fd      	b.n	8000958 <UsageFault_Handler+0x4>

0800095c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000960:	bf00      	nop
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr

0800096a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800096a:	b480      	push	{r7}
 800096c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800096e:	bf00      	nop
 8000970:	46bd      	mov	sp, r7
 8000972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000976:	4770      	bx	lr

08000978 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800097c:	bf00      	nop
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr

08000986 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000986:	b580      	push	{r7, lr}
 8000988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800098a:	f000 fabd 	bl	8000f08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800098e:	bf00      	nop
 8000990:	bd80      	pop	{r7, pc}
	...

08000994 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000998:	4802      	ldr	r0, [pc, #8]	@ (80009a4 <TIM3_IRQHandler+0x10>)
 800099a:	f001 fcf1 	bl	8002380 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800099e:	bf00      	nop
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	20000090 	.word	0x20000090

080009a8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80009ac:	4802      	ldr	r0, [pc, #8]	@ (80009b8 <USART2_IRQHandler+0x10>)
 80009ae:	f002 fb6f 	bl	8003090 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80009b2:	bf00      	nop
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	20000120 	.word	0x20000120

080009bc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b086      	sub	sp, #24
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	60f8      	str	r0, [r7, #12]
 80009c4:	60b9      	str	r1, [r7, #8]
 80009c6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009c8:	2300      	movs	r3, #0
 80009ca:	617b      	str	r3, [r7, #20]
 80009cc:	e00a      	b.n	80009e4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80009ce:	f3af 8000 	nop.w
 80009d2:	4601      	mov	r1, r0
 80009d4:	68bb      	ldr	r3, [r7, #8]
 80009d6:	1c5a      	adds	r2, r3, #1
 80009d8:	60ba      	str	r2, [r7, #8]
 80009da:	b2ca      	uxtb	r2, r1
 80009dc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009de:	697b      	ldr	r3, [r7, #20]
 80009e0:	3301      	adds	r3, #1
 80009e2:	617b      	str	r3, [r7, #20]
 80009e4:	697a      	ldr	r2, [r7, #20]
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	429a      	cmp	r2, r3
 80009ea:	dbf0      	blt.n	80009ce <_read+0x12>
  }

  return len;
 80009ec:	687b      	ldr	r3, [r7, #4]
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	3718      	adds	r7, #24
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}

080009f6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80009f6:	b580      	push	{r7, lr}
 80009f8:	b086      	sub	sp, #24
 80009fa:	af00      	add	r7, sp, #0
 80009fc:	60f8      	str	r0, [r7, #12]
 80009fe:	60b9      	str	r1, [r7, #8]
 8000a00:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a02:	2300      	movs	r3, #0
 8000a04:	617b      	str	r3, [r7, #20]
 8000a06:	e009      	b.n	8000a1c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000a08:	68bb      	ldr	r3, [r7, #8]
 8000a0a:	1c5a      	adds	r2, r3, #1
 8000a0c:	60ba      	str	r2, [r7, #8]
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	4618      	mov	r0, r3
 8000a12:	f7ff fe09 	bl	8000628 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a16:	697b      	ldr	r3, [r7, #20]
 8000a18:	3301      	adds	r3, #1
 8000a1a:	617b      	str	r3, [r7, #20]
 8000a1c:	697a      	ldr	r2, [r7, #20]
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	429a      	cmp	r2, r3
 8000a22:	dbf1      	blt.n	8000a08 <_write+0x12>
  }
  return len;
 8000a24:	687b      	ldr	r3, [r7, #4]
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	3718      	adds	r7, #24
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}

08000a2e <_close>:

int _close(int file)
{
 8000a2e:	b480      	push	{r7}
 8000a30:	b083      	sub	sp, #12
 8000a32:	af00      	add	r7, sp, #0
 8000a34:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a36:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	370c      	adds	r7, #12
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr

08000a46 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a46:	b480      	push	{r7}
 8000a48:	b083      	sub	sp, #12
 8000a4a:	af00      	add	r7, sp, #0
 8000a4c:	6078      	str	r0, [r7, #4]
 8000a4e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000a56:	605a      	str	r2, [r3, #4]
  return 0;
 8000a58:	2300      	movs	r3, #0
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	370c      	adds	r7, #12
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr

08000a66 <_isatty>:

int _isatty(int file)
{
 8000a66:	b480      	push	{r7}
 8000a68:	b083      	sub	sp, #12
 8000a6a:	af00      	add	r7, sp, #0
 8000a6c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a6e:	2301      	movs	r3, #1
}
 8000a70:	4618      	mov	r0, r3
 8000a72:	370c      	adds	r7, #12
 8000a74:	46bd      	mov	sp, r7
 8000a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7a:	4770      	bx	lr

08000a7c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b085      	sub	sp, #20
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	60f8      	str	r0, [r7, #12]
 8000a84:	60b9      	str	r1, [r7, #8]
 8000a86:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a88:	2300      	movs	r3, #0
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	3714      	adds	r7, #20
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr
	...

08000a98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b086      	sub	sp, #24
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000aa0:	4a14      	ldr	r2, [pc, #80]	@ (8000af4 <_sbrk+0x5c>)
 8000aa2:	4b15      	ldr	r3, [pc, #84]	@ (8000af8 <_sbrk+0x60>)
 8000aa4:	1ad3      	subs	r3, r2, r3
 8000aa6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000aa8:	697b      	ldr	r3, [r7, #20]
 8000aaa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000aac:	4b13      	ldr	r3, [pc, #76]	@ (8000afc <_sbrk+0x64>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d102      	bne.n	8000aba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ab4:	4b11      	ldr	r3, [pc, #68]	@ (8000afc <_sbrk+0x64>)
 8000ab6:	4a12      	ldr	r2, [pc, #72]	@ (8000b00 <_sbrk+0x68>)
 8000ab8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000aba:	4b10      	ldr	r3, [pc, #64]	@ (8000afc <_sbrk+0x64>)
 8000abc:	681a      	ldr	r2, [r3, #0]
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	4413      	add	r3, r2
 8000ac2:	693a      	ldr	r2, [r7, #16]
 8000ac4:	429a      	cmp	r2, r3
 8000ac6:	d207      	bcs.n	8000ad8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ac8:	f003 fb6e 	bl	80041a8 <__errno>
 8000acc:	4603      	mov	r3, r0
 8000ace:	220c      	movs	r2, #12
 8000ad0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ad2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ad6:	e009      	b.n	8000aec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ad8:	4b08      	ldr	r3, [pc, #32]	@ (8000afc <_sbrk+0x64>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ade:	4b07      	ldr	r3, [pc, #28]	@ (8000afc <_sbrk+0x64>)
 8000ae0:	681a      	ldr	r2, [r3, #0]
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	4413      	add	r3, r2
 8000ae6:	4a05      	ldr	r2, [pc, #20]	@ (8000afc <_sbrk+0x64>)
 8000ae8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000aea:	68fb      	ldr	r3, [r7, #12]
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	3718      	adds	r7, #24
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	20020000 	.word	0x20020000
 8000af8:	00000400 	.word	0x00000400
 8000afc:	2000008c 	.word	0x2000008c
 8000b00:	200002b8 	.word	0x200002b8

08000b04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b08:	4b06      	ldr	r3, [pc, #24]	@ (8000b24 <SystemInit+0x20>)
 8000b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b0e:	4a05      	ldr	r2, [pc, #20]	@ (8000b24 <SystemInit+0x20>)
 8000b10:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b14:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b18:	bf00      	nop
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	e000ed00 	.word	0xe000ed00

08000b28 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim11;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b08a      	sub	sp, #40	@ 0x28
 8000b2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b2e:	f107 0318 	add.w	r3, r7, #24
 8000b32:	2200      	movs	r2, #0
 8000b34:	601a      	str	r2, [r3, #0]
 8000b36:	605a      	str	r2, [r3, #4]
 8000b38:	609a      	str	r2, [r3, #8]
 8000b3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b3c:	f107 0310 	add.w	r3, r7, #16
 8000b40:	2200      	movs	r2, #0
 8000b42:	601a      	str	r2, [r3, #0]
 8000b44:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000b46:	463b      	mov	r3, r7
 8000b48:	2200      	movs	r2, #0
 8000b4a:	601a      	str	r2, [r3, #0]
 8000b4c:	605a      	str	r2, [r3, #4]
 8000b4e:	609a      	str	r2, [r3, #8]
 8000b50:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b52:	4b2b      	ldr	r3, [pc, #172]	@ (8000c00 <MX_TIM3_Init+0xd8>)
 8000b54:	4a2b      	ldr	r2, [pc, #172]	@ (8000c04 <MX_TIM3_Init+0xdc>)
 8000b56:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100-1;
 8000b58:	4b29      	ldr	r3, [pc, #164]	@ (8000c00 <MX_TIM3_Init+0xd8>)
 8000b5a:	2263      	movs	r2, #99	@ 0x63
 8000b5c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b5e:	4b28      	ldr	r3, [pc, #160]	@ (8000c00 <MX_TIM3_Init+0xd8>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000b64:	4b26      	ldr	r3, [pc, #152]	@ (8000c00 <MX_TIM3_Init+0xd8>)
 8000b66:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b6a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b6c:	4b24      	ldr	r3, [pc, #144]	@ (8000c00 <MX_TIM3_Init+0xd8>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b72:	4b23      	ldr	r3, [pc, #140]	@ (8000c00 <MX_TIM3_Init+0xd8>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000b78:	4821      	ldr	r0, [pc, #132]	@ (8000c00 <MX_TIM3_Init+0xd8>)
 8000b7a:	f001 f9e3 	bl	8001f44 <HAL_TIM_Base_Init>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8000b84:	f7ff fea8 	bl	80008d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b88:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b8c:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000b8e:	f107 0318 	add.w	r3, r7, #24
 8000b92:	4619      	mov	r1, r3
 8000b94:	481a      	ldr	r0, [pc, #104]	@ (8000c00 <MX_TIM3_Init+0xd8>)
 8000b96:	f001 fd7f 	bl	8002698 <HAL_TIM_ConfigClockSource>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000ba0:	f7ff fe9a 	bl	80008d8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8000ba4:	4816      	ldr	r0, [pc, #88]	@ (8000c00 <MX_TIM3_Init+0xd8>)
 8000ba6:	f001 fa77 	bl	8002098 <HAL_TIM_IC_Init>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000bb0:	f7ff fe92 	bl	80008d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000bbc:	f107 0310 	add.w	r3, r7, #16
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	480f      	ldr	r0, [pc, #60]	@ (8000c00 <MX_TIM3_Init+0xd8>)
 8000bc4:	f002 f906 	bl	8002dd4 <HAL_TIMEx_MasterConfigSynchronization>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 8000bce:	f7ff fe83 	bl	80008d8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000bde:	2300      	movs	r3, #0
 8000be0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000be2:	463b      	mov	r3, r7
 8000be4:	2200      	movs	r2, #0
 8000be6:	4619      	mov	r1, r3
 8000be8:	4805      	ldr	r0, [pc, #20]	@ (8000c00 <MX_TIM3_Init+0xd8>)
 8000bea:	f001 fcb9 	bl	8002560 <HAL_TIM_IC_ConfigChannel>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8000bf4:	f7ff fe70 	bl	80008d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000bf8:	bf00      	nop
 8000bfa:	3728      	adds	r7, #40	@ 0x28
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	20000090 	.word	0x20000090
 8000c04:	40000400 	.word	0x40000400

08000c08 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8000c0c:	4b0e      	ldr	r3, [pc, #56]	@ (8000c48 <MX_TIM11_Init+0x40>)
 8000c0e:	4a0f      	ldr	r2, [pc, #60]	@ (8000c4c <MX_TIM11_Init+0x44>)
 8000c10:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 100-1;
 8000c12:	4b0d      	ldr	r3, [pc, #52]	@ (8000c48 <MX_TIM11_Init+0x40>)
 8000c14:	2263      	movs	r2, #99	@ 0x63
 8000c16:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c18:	4b0b      	ldr	r3, [pc, #44]	@ (8000c48 <MX_TIM11_Init+0x40>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8000c1e:	4b0a      	ldr	r3, [pc, #40]	@ (8000c48 <MX_TIM11_Init+0x40>)
 8000c20:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c24:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c26:	4b08      	ldr	r3, [pc, #32]	@ (8000c48 <MX_TIM11_Init+0x40>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c2c:	4b06      	ldr	r3, [pc, #24]	@ (8000c48 <MX_TIM11_Init+0x40>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8000c32:	4805      	ldr	r0, [pc, #20]	@ (8000c48 <MX_TIM11_Init+0x40>)
 8000c34:	f001 f986 	bl	8001f44 <HAL_TIM_Base_Init>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8000c3e:	f7ff fe4b 	bl	80008d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8000c42:	bf00      	nop
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	200000d8 	.word	0x200000d8
 8000c4c:	40014800 	.word	0x40014800

08000c50 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b08a      	sub	sp, #40	@ 0x28
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c58:	f107 0314 	add.w	r3, r7, #20
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
 8000c60:	605a      	str	r2, [r3, #4]
 8000c62:	609a      	str	r2, [r3, #8]
 8000c64:	60da      	str	r2, [r3, #12]
 8000c66:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM3)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a27      	ldr	r2, [pc, #156]	@ (8000d0c <HAL_TIM_Base_MspInit+0xbc>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d134      	bne.n	8000cdc <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000c72:	2300      	movs	r3, #0
 8000c74:	613b      	str	r3, [r7, #16]
 8000c76:	4b26      	ldr	r3, [pc, #152]	@ (8000d10 <HAL_TIM_Base_MspInit+0xc0>)
 8000c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c7a:	4a25      	ldr	r2, [pc, #148]	@ (8000d10 <HAL_TIM_Base_MspInit+0xc0>)
 8000c7c:	f043 0302 	orr.w	r3, r3, #2
 8000c80:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c82:	4b23      	ldr	r3, [pc, #140]	@ (8000d10 <HAL_TIM_Base_MspInit+0xc0>)
 8000c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c86:	f003 0302 	and.w	r3, r3, #2
 8000c8a:	613b      	str	r3, [r7, #16]
 8000c8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c8e:	2300      	movs	r3, #0
 8000c90:	60fb      	str	r3, [r7, #12]
 8000c92:	4b1f      	ldr	r3, [pc, #124]	@ (8000d10 <HAL_TIM_Base_MspInit+0xc0>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c96:	4a1e      	ldr	r2, [pc, #120]	@ (8000d10 <HAL_TIM_Base_MspInit+0xc0>)
 8000c98:	f043 0301 	orr.w	r3, r3, #1
 8000c9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c9e:	4b1c      	ldr	r3, [pc, #112]	@ (8000d10 <HAL_TIM_Base_MspInit+0xc0>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ca2:	f003 0301 	and.w	r3, r3, #1
 8000ca6:	60fb      	str	r3, [r7, #12]
 8000ca8:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000caa:	2340      	movs	r3, #64	@ 0x40
 8000cac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cae:	2302      	movs	r3, #2
 8000cb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000cba:	2302      	movs	r3, #2
 8000cbc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cbe:	f107 0314 	add.w	r3, r7, #20
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	4813      	ldr	r0, [pc, #76]	@ (8000d14 <HAL_TIM_Base_MspInit+0xc4>)
 8000cc6:	f000 fb07 	bl	80012d8 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2100      	movs	r1, #0
 8000cce:	201d      	movs	r0, #29
 8000cd0:	f000 fa39 	bl	8001146 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000cd4:	201d      	movs	r0, #29
 8000cd6:	f000 fa52 	bl	800117e <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM11_CLK_ENABLE();
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8000cda:	e012      	b.n	8000d02 <HAL_TIM_Base_MspInit+0xb2>
  else if(tim_baseHandle->Instance==TIM11)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a0d      	ldr	r2, [pc, #52]	@ (8000d18 <HAL_TIM_Base_MspInit+0xc8>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d10d      	bne.n	8000d02 <HAL_TIM_Base_MspInit+0xb2>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	60bb      	str	r3, [r7, #8]
 8000cea:	4b09      	ldr	r3, [pc, #36]	@ (8000d10 <HAL_TIM_Base_MspInit+0xc0>)
 8000cec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cee:	4a08      	ldr	r2, [pc, #32]	@ (8000d10 <HAL_TIM_Base_MspInit+0xc0>)
 8000cf0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000cf4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cf6:	4b06      	ldr	r3, [pc, #24]	@ (8000d10 <HAL_TIM_Base_MspInit+0xc0>)
 8000cf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cfa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000cfe:	60bb      	str	r3, [r7, #8]
 8000d00:	68bb      	ldr	r3, [r7, #8]
}
 8000d02:	bf00      	nop
 8000d04:	3728      	adds	r7, #40	@ 0x28
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	40000400 	.word	0x40000400
 8000d10:	40023800 	.word	0x40023800
 8000d14:	40020000 	.word	0x40020000
 8000d18:	40014800 	.word	0x40014800

08000d1c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d20:	4b11      	ldr	r3, [pc, #68]	@ (8000d68 <MX_USART2_UART_Init+0x4c>)
 8000d22:	4a12      	ldr	r2, [pc, #72]	@ (8000d6c <MX_USART2_UART_Init+0x50>)
 8000d24:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d26:	4b10      	ldr	r3, [pc, #64]	@ (8000d68 <MX_USART2_UART_Init+0x4c>)
 8000d28:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d2c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d2e:	4b0e      	ldr	r3, [pc, #56]	@ (8000d68 <MX_USART2_UART_Init+0x4c>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d34:	4b0c      	ldr	r3, [pc, #48]	@ (8000d68 <MX_USART2_UART_Init+0x4c>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d3a:	4b0b      	ldr	r3, [pc, #44]	@ (8000d68 <MX_USART2_UART_Init+0x4c>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d40:	4b09      	ldr	r3, [pc, #36]	@ (8000d68 <MX_USART2_UART_Init+0x4c>)
 8000d42:	220c      	movs	r2, #12
 8000d44:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d46:	4b08      	ldr	r3, [pc, #32]	@ (8000d68 <MX_USART2_UART_Init+0x4c>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d4c:	4b06      	ldr	r3, [pc, #24]	@ (8000d68 <MX_USART2_UART_Init+0x4c>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d52:	4805      	ldr	r0, [pc, #20]	@ (8000d68 <MX_USART2_UART_Init+0x4c>)
 8000d54:	f002 f8c0 	bl	8002ed8 <HAL_UART_Init>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000d5e:	f7ff fdbb 	bl	80008d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d62:	bf00      	nop
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	20000120 	.word	0x20000120
 8000d6c:	40004400 	.word	0x40004400

08000d70 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b08a      	sub	sp, #40	@ 0x28
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d78:	f107 0314 	add.w	r3, r7, #20
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	601a      	str	r2, [r3, #0]
 8000d80:	605a      	str	r2, [r3, #4]
 8000d82:	609a      	str	r2, [r3, #8]
 8000d84:	60da      	str	r2, [r3, #12]
 8000d86:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a1d      	ldr	r2, [pc, #116]	@ (8000e04 <HAL_UART_MspInit+0x94>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d133      	bne.n	8000dfa <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d92:	2300      	movs	r3, #0
 8000d94:	613b      	str	r3, [r7, #16]
 8000d96:	4b1c      	ldr	r3, [pc, #112]	@ (8000e08 <HAL_UART_MspInit+0x98>)
 8000d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d9a:	4a1b      	ldr	r2, [pc, #108]	@ (8000e08 <HAL_UART_MspInit+0x98>)
 8000d9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000da0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000da2:	4b19      	ldr	r3, [pc, #100]	@ (8000e08 <HAL_UART_MspInit+0x98>)
 8000da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000da6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000daa:	613b      	str	r3, [r7, #16]
 8000dac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dae:	2300      	movs	r3, #0
 8000db0:	60fb      	str	r3, [r7, #12]
 8000db2:	4b15      	ldr	r3, [pc, #84]	@ (8000e08 <HAL_UART_MspInit+0x98>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000db6:	4a14      	ldr	r2, [pc, #80]	@ (8000e08 <HAL_UART_MspInit+0x98>)
 8000db8:	f043 0301 	orr.w	r3, r3, #1
 8000dbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dbe:	4b12      	ldr	r3, [pc, #72]	@ (8000e08 <HAL_UART_MspInit+0x98>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc2:	f003 0301 	and.w	r3, r3, #1
 8000dc6:	60fb      	str	r3, [r7, #12]
 8000dc8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000dca:	230c      	movs	r3, #12
 8000dcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dce:	2302      	movs	r3, #2
 8000dd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd6:	2303      	movs	r3, #3
 8000dd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000dda:	2307      	movs	r3, #7
 8000ddc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dde:	f107 0314 	add.w	r3, r7, #20
 8000de2:	4619      	mov	r1, r3
 8000de4:	4809      	ldr	r0, [pc, #36]	@ (8000e0c <HAL_UART_MspInit+0x9c>)
 8000de6:	f000 fa77 	bl	80012d8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000dea:	2200      	movs	r2, #0
 8000dec:	2100      	movs	r1, #0
 8000dee:	2026      	movs	r0, #38	@ 0x26
 8000df0:	f000 f9a9 	bl	8001146 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000df4:	2026      	movs	r0, #38	@ 0x26
 8000df6:	f000 f9c2 	bl	800117e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000dfa:	bf00      	nop
 8000dfc:	3728      	adds	r7, #40	@ 0x28
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	40004400 	.word	0x40004400
 8000e08:	40023800 	.word	0x40023800
 8000e0c:	40020000 	.word	0x40020000

08000e10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e10:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e48 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e14:	f7ff fe76 	bl	8000b04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e18:	480c      	ldr	r0, [pc, #48]	@ (8000e4c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e1a:	490d      	ldr	r1, [pc, #52]	@ (8000e50 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e1c:	4a0d      	ldr	r2, [pc, #52]	@ (8000e54 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e20:	e002      	b.n	8000e28 <LoopCopyDataInit>

08000e22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e26:	3304      	adds	r3, #4

08000e28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e2c:	d3f9      	bcc.n	8000e22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e2e:	4a0a      	ldr	r2, [pc, #40]	@ (8000e58 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e30:	4c0a      	ldr	r4, [pc, #40]	@ (8000e5c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e34:	e001      	b.n	8000e3a <LoopFillZerobss>

08000e36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e38:	3204      	adds	r2, #4

08000e3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e3c:	d3fb      	bcc.n	8000e36 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e3e:	f003 f9b9 	bl	80041b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e42:	f7ff fcb5 	bl	80007b0 <main>
  bx  lr    
 8000e46:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e48:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e50:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000e54:	08004dc8 	.word	0x08004dc8
  ldr r2, =_sbss
 8000e58:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000e5c:	200002b8 	.word	0x200002b8

08000e60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e60:	e7fe      	b.n	8000e60 <ADC_IRQHandler>
	...

08000e64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e68:	4b0e      	ldr	r3, [pc, #56]	@ (8000ea4 <HAL_Init+0x40>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a0d      	ldr	r2, [pc, #52]	@ (8000ea4 <HAL_Init+0x40>)
 8000e6e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e72:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e74:	4b0b      	ldr	r3, [pc, #44]	@ (8000ea4 <HAL_Init+0x40>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a0a      	ldr	r2, [pc, #40]	@ (8000ea4 <HAL_Init+0x40>)
 8000e7a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e7e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e80:	4b08      	ldr	r3, [pc, #32]	@ (8000ea4 <HAL_Init+0x40>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a07      	ldr	r2, [pc, #28]	@ (8000ea4 <HAL_Init+0x40>)
 8000e86:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e8a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e8c:	2003      	movs	r0, #3
 8000e8e:	f000 f94f 	bl	8001130 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e92:	200f      	movs	r0, #15
 8000e94:	f000 f808 	bl	8000ea8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e98:	f7ff fd24 	bl	80008e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e9c:	2300      	movs	r3, #0
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	40023c00 	.word	0x40023c00

08000ea8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000eb0:	4b12      	ldr	r3, [pc, #72]	@ (8000efc <HAL_InitTick+0x54>)
 8000eb2:	681a      	ldr	r2, [r3, #0]
 8000eb4:	4b12      	ldr	r3, [pc, #72]	@ (8000f00 <HAL_InitTick+0x58>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	4619      	mov	r1, r3
 8000eba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ebe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ec2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f000 f967 	bl	800119a <HAL_SYSTICK_Config>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	e00e      	b.n	8000ef4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	2b0f      	cmp	r3, #15
 8000eda:	d80a      	bhi.n	8000ef2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000edc:	2200      	movs	r2, #0
 8000ede:	6879      	ldr	r1, [r7, #4]
 8000ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ee4:	f000 f92f 	bl	8001146 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ee8:	4a06      	ldr	r2, [pc, #24]	@ (8000f04 <HAL_InitTick+0x5c>)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	e000      	b.n	8000ef4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ef2:	2301      	movs	r3, #1
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	3708      	adds	r7, #8
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	20000000 	.word	0x20000000
 8000f00:	20000008 	.word	0x20000008
 8000f04:	20000004 	.word	0x20000004

08000f08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f0c:	4b06      	ldr	r3, [pc, #24]	@ (8000f28 <HAL_IncTick+0x20>)
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	461a      	mov	r2, r3
 8000f12:	4b06      	ldr	r3, [pc, #24]	@ (8000f2c <HAL_IncTick+0x24>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4413      	add	r3, r2
 8000f18:	4a04      	ldr	r2, [pc, #16]	@ (8000f2c <HAL_IncTick+0x24>)
 8000f1a:	6013      	str	r3, [r2, #0]
}
 8000f1c:	bf00      	nop
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	20000008 	.word	0x20000008
 8000f2c:	20000168 	.word	0x20000168

08000f30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  return uwTick;
 8000f34:	4b03      	ldr	r3, [pc, #12]	@ (8000f44 <HAL_GetTick+0x14>)
 8000f36:	681b      	ldr	r3, [r3, #0]
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	20000168 	.word	0x20000168

08000f48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f50:	f7ff ffee 	bl	8000f30 <HAL_GetTick>
 8000f54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f60:	d005      	beq.n	8000f6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f62:	4b0a      	ldr	r3, [pc, #40]	@ (8000f8c <HAL_Delay+0x44>)
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	461a      	mov	r2, r3
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	4413      	add	r3, r2
 8000f6c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f6e:	bf00      	nop
 8000f70:	f7ff ffde 	bl	8000f30 <HAL_GetTick>
 8000f74:	4602      	mov	r2, r0
 8000f76:	68bb      	ldr	r3, [r7, #8]
 8000f78:	1ad3      	subs	r3, r2, r3
 8000f7a:	68fa      	ldr	r2, [r7, #12]
 8000f7c:	429a      	cmp	r2, r3
 8000f7e:	d8f7      	bhi.n	8000f70 <HAL_Delay+0x28>
  {
  }
}
 8000f80:	bf00      	nop
 8000f82:	bf00      	nop
 8000f84:	3710      	adds	r7, #16
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	20000008 	.word	0x20000008

08000f90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b085      	sub	sp, #20
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	f003 0307 	and.w	r3, r3, #7
 8000f9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fa0:	4b0c      	ldr	r3, [pc, #48]	@ (8000fd4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fa2:	68db      	ldr	r3, [r3, #12]
 8000fa4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fa6:	68ba      	ldr	r2, [r7, #8]
 8000fa8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000fac:	4013      	ands	r3, r2
 8000fae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fb8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000fbc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fc2:	4a04      	ldr	r2, [pc, #16]	@ (8000fd4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	60d3      	str	r3, [r2, #12]
}
 8000fc8:	bf00      	nop
 8000fca:	3714      	adds	r7, #20
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr
 8000fd4:	e000ed00 	.word	0xe000ed00

08000fd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fdc:	4b04      	ldr	r3, [pc, #16]	@ (8000ff0 <__NVIC_GetPriorityGrouping+0x18>)
 8000fde:	68db      	ldr	r3, [r3, #12]
 8000fe0:	0a1b      	lsrs	r3, r3, #8
 8000fe2:	f003 0307 	and.w	r3, r3, #7
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr
 8000ff0:	e000ed00 	.word	0xe000ed00

08000ff4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001002:	2b00      	cmp	r3, #0
 8001004:	db0b      	blt.n	800101e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001006:	79fb      	ldrb	r3, [r7, #7]
 8001008:	f003 021f 	and.w	r2, r3, #31
 800100c:	4907      	ldr	r1, [pc, #28]	@ (800102c <__NVIC_EnableIRQ+0x38>)
 800100e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001012:	095b      	lsrs	r3, r3, #5
 8001014:	2001      	movs	r0, #1
 8001016:	fa00 f202 	lsl.w	r2, r0, r2
 800101a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800101e:	bf00      	nop
 8001020:	370c      	adds	r7, #12
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	e000e100 	.word	0xe000e100

08001030 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	4603      	mov	r3, r0
 8001038:	6039      	str	r1, [r7, #0]
 800103a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800103c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001040:	2b00      	cmp	r3, #0
 8001042:	db0a      	blt.n	800105a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	b2da      	uxtb	r2, r3
 8001048:	490c      	ldr	r1, [pc, #48]	@ (800107c <__NVIC_SetPriority+0x4c>)
 800104a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104e:	0112      	lsls	r2, r2, #4
 8001050:	b2d2      	uxtb	r2, r2
 8001052:	440b      	add	r3, r1
 8001054:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001058:	e00a      	b.n	8001070 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	b2da      	uxtb	r2, r3
 800105e:	4908      	ldr	r1, [pc, #32]	@ (8001080 <__NVIC_SetPriority+0x50>)
 8001060:	79fb      	ldrb	r3, [r7, #7]
 8001062:	f003 030f 	and.w	r3, r3, #15
 8001066:	3b04      	subs	r3, #4
 8001068:	0112      	lsls	r2, r2, #4
 800106a:	b2d2      	uxtb	r2, r2
 800106c:	440b      	add	r3, r1
 800106e:	761a      	strb	r2, [r3, #24]
}
 8001070:	bf00      	nop
 8001072:	370c      	adds	r7, #12
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr
 800107c:	e000e100 	.word	0xe000e100
 8001080:	e000ed00 	.word	0xe000ed00

08001084 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001084:	b480      	push	{r7}
 8001086:	b089      	sub	sp, #36	@ 0x24
 8001088:	af00      	add	r7, sp, #0
 800108a:	60f8      	str	r0, [r7, #12]
 800108c:	60b9      	str	r1, [r7, #8]
 800108e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	f003 0307 	and.w	r3, r3, #7
 8001096:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001098:	69fb      	ldr	r3, [r7, #28]
 800109a:	f1c3 0307 	rsb	r3, r3, #7
 800109e:	2b04      	cmp	r3, #4
 80010a0:	bf28      	it	cs
 80010a2:	2304      	movcs	r3, #4
 80010a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	3304      	adds	r3, #4
 80010aa:	2b06      	cmp	r3, #6
 80010ac:	d902      	bls.n	80010b4 <NVIC_EncodePriority+0x30>
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	3b03      	subs	r3, #3
 80010b2:	e000      	b.n	80010b6 <NVIC_EncodePriority+0x32>
 80010b4:	2300      	movs	r3, #0
 80010b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010b8:	f04f 32ff 	mov.w	r2, #4294967295
 80010bc:	69bb      	ldr	r3, [r7, #24]
 80010be:	fa02 f303 	lsl.w	r3, r2, r3
 80010c2:	43da      	mvns	r2, r3
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	401a      	ands	r2, r3
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010cc:	f04f 31ff 	mov.w	r1, #4294967295
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	fa01 f303 	lsl.w	r3, r1, r3
 80010d6:	43d9      	mvns	r1, r3
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010dc:	4313      	orrs	r3, r2
         );
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3724      	adds	r7, #36	@ 0x24
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
	...

080010ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	3b01      	subs	r3, #1
 80010f8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80010fc:	d301      	bcc.n	8001102 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010fe:	2301      	movs	r3, #1
 8001100:	e00f      	b.n	8001122 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001102:	4a0a      	ldr	r2, [pc, #40]	@ (800112c <SysTick_Config+0x40>)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	3b01      	subs	r3, #1
 8001108:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800110a:	210f      	movs	r1, #15
 800110c:	f04f 30ff 	mov.w	r0, #4294967295
 8001110:	f7ff ff8e 	bl	8001030 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001114:	4b05      	ldr	r3, [pc, #20]	@ (800112c <SysTick_Config+0x40>)
 8001116:	2200      	movs	r2, #0
 8001118:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800111a:	4b04      	ldr	r3, [pc, #16]	@ (800112c <SysTick_Config+0x40>)
 800111c:	2207      	movs	r2, #7
 800111e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001120:	2300      	movs	r3, #0
}
 8001122:	4618      	mov	r0, r3
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	e000e010 	.word	0xe000e010

08001130 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001138:	6878      	ldr	r0, [r7, #4]
 800113a:	f7ff ff29 	bl	8000f90 <__NVIC_SetPriorityGrouping>
}
 800113e:	bf00      	nop
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}

08001146 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001146:	b580      	push	{r7, lr}
 8001148:	b086      	sub	sp, #24
 800114a:	af00      	add	r7, sp, #0
 800114c:	4603      	mov	r3, r0
 800114e:	60b9      	str	r1, [r7, #8]
 8001150:	607a      	str	r2, [r7, #4]
 8001152:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001154:	2300      	movs	r3, #0
 8001156:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001158:	f7ff ff3e 	bl	8000fd8 <__NVIC_GetPriorityGrouping>
 800115c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800115e:	687a      	ldr	r2, [r7, #4]
 8001160:	68b9      	ldr	r1, [r7, #8]
 8001162:	6978      	ldr	r0, [r7, #20]
 8001164:	f7ff ff8e 	bl	8001084 <NVIC_EncodePriority>
 8001168:	4602      	mov	r2, r0
 800116a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800116e:	4611      	mov	r1, r2
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff ff5d 	bl	8001030 <__NVIC_SetPriority>
}
 8001176:	bf00      	nop
 8001178:	3718      	adds	r7, #24
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}

0800117e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800117e:	b580      	push	{r7, lr}
 8001180:	b082      	sub	sp, #8
 8001182:	af00      	add	r7, sp, #0
 8001184:	4603      	mov	r3, r0
 8001186:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001188:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118c:	4618      	mov	r0, r3
 800118e:	f7ff ff31 	bl	8000ff4 <__NVIC_EnableIRQ>
}
 8001192:	bf00      	nop
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}

0800119a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800119a:	b580      	push	{r7, lr}
 800119c:	b082      	sub	sp, #8
 800119e:	af00      	add	r7, sp, #0
 80011a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011a2:	6878      	ldr	r0, [r7, #4]
 80011a4:	f7ff ffa2 	bl	80010ec <SysTick_Config>
 80011a8:	4603      	mov	r3, r0
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}

080011b2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80011b2:	b580      	push	{r7, lr}
 80011b4:	b084      	sub	sp, #16
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011be:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80011c0:	f7ff feb6 	bl	8000f30 <HAL_GetTick>
 80011c4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	2b02      	cmp	r3, #2
 80011d0:	d008      	beq.n	80011e4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2280      	movs	r2, #128	@ 0x80
 80011d6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2200      	movs	r2, #0
 80011dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80011e0:	2301      	movs	r3, #1
 80011e2:	e052      	b.n	800128a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f022 0216 	bic.w	r2, r2, #22
 80011f2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	695a      	ldr	r2, [r3, #20]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001202:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001208:	2b00      	cmp	r3, #0
 800120a:	d103      	bne.n	8001214 <HAL_DMA_Abort+0x62>
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001210:	2b00      	cmp	r3, #0
 8001212:	d007      	beq.n	8001224 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	681a      	ldr	r2, [r3, #0]
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f022 0208 	bic.w	r2, r2, #8
 8001222:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f022 0201 	bic.w	r2, r2, #1
 8001232:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001234:	e013      	b.n	800125e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001236:	f7ff fe7b 	bl	8000f30 <HAL_GetTick>
 800123a:	4602      	mov	r2, r0
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	1ad3      	subs	r3, r2, r3
 8001240:	2b05      	cmp	r3, #5
 8001242:	d90c      	bls.n	800125e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2220      	movs	r2, #32
 8001248:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2203      	movs	r2, #3
 800124e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2200      	movs	r2, #0
 8001256:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800125a:	2303      	movs	r3, #3
 800125c:	e015      	b.n	800128a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f003 0301 	and.w	r3, r3, #1
 8001268:	2b00      	cmp	r3, #0
 800126a:	d1e4      	bne.n	8001236 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001270:	223f      	movs	r2, #63	@ 0x3f
 8001272:	409a      	lsls	r2, r3
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2201      	movs	r2, #1
 800127c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2200      	movs	r2, #0
 8001284:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001288:	2300      	movs	r3, #0
}
 800128a:	4618      	mov	r0, r3
 800128c:	3710      	adds	r7, #16
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}

08001292 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001292:	b480      	push	{r7}
 8001294:	b083      	sub	sp, #12
 8001296:	af00      	add	r7, sp, #0
 8001298:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	2b02      	cmp	r3, #2
 80012a4:	d004      	beq.n	80012b0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2280      	movs	r2, #128	@ 0x80
 80012aa:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80012ac:	2301      	movs	r3, #1
 80012ae:	e00c      	b.n	80012ca <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2205      	movs	r2, #5
 80012b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f022 0201 	bic.w	r2, r2, #1
 80012c6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80012c8:	2300      	movs	r3, #0
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	370c      	adds	r7, #12
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
	...

080012d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012d8:	b480      	push	{r7}
 80012da:	b089      	sub	sp, #36	@ 0x24
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012e2:	2300      	movs	r3, #0
 80012e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012e6:	2300      	movs	r3, #0
 80012e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012ea:	2300      	movs	r3, #0
 80012ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012ee:	2300      	movs	r3, #0
 80012f0:	61fb      	str	r3, [r7, #28]
 80012f2:	e159      	b.n	80015a8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80012f4:	2201      	movs	r2, #1
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	fa02 f303 	lsl.w	r3, r2, r3
 80012fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	697a      	ldr	r2, [r7, #20]
 8001304:	4013      	ands	r3, r2
 8001306:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001308:	693a      	ldr	r2, [r7, #16]
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	429a      	cmp	r2, r3
 800130e:	f040 8148 	bne.w	80015a2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	f003 0303 	and.w	r3, r3, #3
 800131a:	2b01      	cmp	r3, #1
 800131c:	d005      	beq.n	800132a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001326:	2b02      	cmp	r3, #2
 8001328:	d130      	bne.n	800138c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	689b      	ldr	r3, [r3, #8]
 800132e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	005b      	lsls	r3, r3, #1
 8001334:	2203      	movs	r2, #3
 8001336:	fa02 f303 	lsl.w	r3, r2, r3
 800133a:	43db      	mvns	r3, r3
 800133c:	69ba      	ldr	r2, [r7, #24]
 800133e:	4013      	ands	r3, r2
 8001340:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	68da      	ldr	r2, [r3, #12]
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	005b      	lsls	r3, r3, #1
 800134a:	fa02 f303 	lsl.w	r3, r2, r3
 800134e:	69ba      	ldr	r2, [r7, #24]
 8001350:	4313      	orrs	r3, r2
 8001352:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	69ba      	ldr	r2, [r7, #24]
 8001358:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001360:	2201      	movs	r2, #1
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	fa02 f303 	lsl.w	r3, r2, r3
 8001368:	43db      	mvns	r3, r3
 800136a:	69ba      	ldr	r2, [r7, #24]
 800136c:	4013      	ands	r3, r2
 800136e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	091b      	lsrs	r3, r3, #4
 8001376:	f003 0201 	and.w	r2, r3, #1
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	fa02 f303 	lsl.w	r3, r2, r3
 8001380:	69ba      	ldr	r2, [r7, #24]
 8001382:	4313      	orrs	r3, r2
 8001384:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	69ba      	ldr	r2, [r7, #24]
 800138a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f003 0303 	and.w	r3, r3, #3
 8001394:	2b03      	cmp	r3, #3
 8001396:	d017      	beq.n	80013c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	005b      	lsls	r3, r3, #1
 80013a2:	2203      	movs	r2, #3
 80013a4:	fa02 f303 	lsl.w	r3, r2, r3
 80013a8:	43db      	mvns	r3, r3
 80013aa:	69ba      	ldr	r2, [r7, #24]
 80013ac:	4013      	ands	r3, r2
 80013ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	689a      	ldr	r2, [r3, #8]
 80013b4:	69fb      	ldr	r3, [r7, #28]
 80013b6:	005b      	lsls	r3, r3, #1
 80013b8:	fa02 f303 	lsl.w	r3, r2, r3
 80013bc:	69ba      	ldr	r2, [r7, #24]
 80013be:	4313      	orrs	r3, r2
 80013c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	69ba      	ldr	r2, [r7, #24]
 80013c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f003 0303 	and.w	r3, r3, #3
 80013d0:	2b02      	cmp	r3, #2
 80013d2:	d123      	bne.n	800141c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013d4:	69fb      	ldr	r3, [r7, #28]
 80013d6:	08da      	lsrs	r2, r3, #3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	3208      	adds	r2, #8
 80013dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	f003 0307 	and.w	r3, r3, #7
 80013e8:	009b      	lsls	r3, r3, #2
 80013ea:	220f      	movs	r2, #15
 80013ec:	fa02 f303 	lsl.w	r3, r2, r3
 80013f0:	43db      	mvns	r3, r3
 80013f2:	69ba      	ldr	r2, [r7, #24]
 80013f4:	4013      	ands	r3, r2
 80013f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	691a      	ldr	r2, [r3, #16]
 80013fc:	69fb      	ldr	r3, [r7, #28]
 80013fe:	f003 0307 	and.w	r3, r3, #7
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	fa02 f303 	lsl.w	r3, r2, r3
 8001408:	69ba      	ldr	r2, [r7, #24]
 800140a:	4313      	orrs	r3, r2
 800140c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	08da      	lsrs	r2, r3, #3
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	3208      	adds	r2, #8
 8001416:	69b9      	ldr	r1, [r7, #24]
 8001418:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	005b      	lsls	r3, r3, #1
 8001426:	2203      	movs	r2, #3
 8001428:	fa02 f303 	lsl.w	r3, r2, r3
 800142c:	43db      	mvns	r3, r3
 800142e:	69ba      	ldr	r2, [r7, #24]
 8001430:	4013      	ands	r3, r2
 8001432:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f003 0203 	and.w	r2, r3, #3
 800143c:	69fb      	ldr	r3, [r7, #28]
 800143e:	005b      	lsls	r3, r3, #1
 8001440:	fa02 f303 	lsl.w	r3, r2, r3
 8001444:	69ba      	ldr	r2, [r7, #24]
 8001446:	4313      	orrs	r3, r2
 8001448:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	69ba      	ldr	r2, [r7, #24]
 800144e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001458:	2b00      	cmp	r3, #0
 800145a:	f000 80a2 	beq.w	80015a2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800145e:	2300      	movs	r3, #0
 8001460:	60fb      	str	r3, [r7, #12]
 8001462:	4b57      	ldr	r3, [pc, #348]	@ (80015c0 <HAL_GPIO_Init+0x2e8>)
 8001464:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001466:	4a56      	ldr	r2, [pc, #344]	@ (80015c0 <HAL_GPIO_Init+0x2e8>)
 8001468:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800146c:	6453      	str	r3, [r2, #68]	@ 0x44
 800146e:	4b54      	ldr	r3, [pc, #336]	@ (80015c0 <HAL_GPIO_Init+0x2e8>)
 8001470:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001472:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001476:	60fb      	str	r3, [r7, #12]
 8001478:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800147a:	4a52      	ldr	r2, [pc, #328]	@ (80015c4 <HAL_GPIO_Init+0x2ec>)
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	089b      	lsrs	r3, r3, #2
 8001480:	3302      	adds	r3, #2
 8001482:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001486:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001488:	69fb      	ldr	r3, [r7, #28]
 800148a:	f003 0303 	and.w	r3, r3, #3
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	220f      	movs	r2, #15
 8001492:	fa02 f303 	lsl.w	r3, r2, r3
 8001496:	43db      	mvns	r3, r3
 8001498:	69ba      	ldr	r2, [r7, #24]
 800149a:	4013      	ands	r3, r2
 800149c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4a49      	ldr	r2, [pc, #292]	@ (80015c8 <HAL_GPIO_Init+0x2f0>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d019      	beq.n	80014da <HAL_GPIO_Init+0x202>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4a48      	ldr	r2, [pc, #288]	@ (80015cc <HAL_GPIO_Init+0x2f4>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d013      	beq.n	80014d6 <HAL_GPIO_Init+0x1fe>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4a47      	ldr	r2, [pc, #284]	@ (80015d0 <HAL_GPIO_Init+0x2f8>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d00d      	beq.n	80014d2 <HAL_GPIO_Init+0x1fa>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4a46      	ldr	r2, [pc, #280]	@ (80015d4 <HAL_GPIO_Init+0x2fc>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d007      	beq.n	80014ce <HAL_GPIO_Init+0x1f6>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4a45      	ldr	r2, [pc, #276]	@ (80015d8 <HAL_GPIO_Init+0x300>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d101      	bne.n	80014ca <HAL_GPIO_Init+0x1f2>
 80014c6:	2304      	movs	r3, #4
 80014c8:	e008      	b.n	80014dc <HAL_GPIO_Init+0x204>
 80014ca:	2307      	movs	r3, #7
 80014cc:	e006      	b.n	80014dc <HAL_GPIO_Init+0x204>
 80014ce:	2303      	movs	r3, #3
 80014d0:	e004      	b.n	80014dc <HAL_GPIO_Init+0x204>
 80014d2:	2302      	movs	r3, #2
 80014d4:	e002      	b.n	80014dc <HAL_GPIO_Init+0x204>
 80014d6:	2301      	movs	r3, #1
 80014d8:	e000      	b.n	80014dc <HAL_GPIO_Init+0x204>
 80014da:	2300      	movs	r3, #0
 80014dc:	69fa      	ldr	r2, [r7, #28]
 80014de:	f002 0203 	and.w	r2, r2, #3
 80014e2:	0092      	lsls	r2, r2, #2
 80014e4:	4093      	lsls	r3, r2
 80014e6:	69ba      	ldr	r2, [r7, #24]
 80014e8:	4313      	orrs	r3, r2
 80014ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014ec:	4935      	ldr	r1, [pc, #212]	@ (80015c4 <HAL_GPIO_Init+0x2ec>)
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	089b      	lsrs	r3, r3, #2
 80014f2:	3302      	adds	r3, #2
 80014f4:	69ba      	ldr	r2, [r7, #24]
 80014f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014fa:	4b38      	ldr	r3, [pc, #224]	@ (80015dc <HAL_GPIO_Init+0x304>)
 80014fc:	689b      	ldr	r3, [r3, #8]
 80014fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	43db      	mvns	r3, r3
 8001504:	69ba      	ldr	r2, [r7, #24]
 8001506:	4013      	ands	r3, r2
 8001508:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001512:	2b00      	cmp	r3, #0
 8001514:	d003      	beq.n	800151e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001516:	69ba      	ldr	r2, [r7, #24]
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	4313      	orrs	r3, r2
 800151c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800151e:	4a2f      	ldr	r2, [pc, #188]	@ (80015dc <HAL_GPIO_Init+0x304>)
 8001520:	69bb      	ldr	r3, [r7, #24]
 8001522:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001524:	4b2d      	ldr	r3, [pc, #180]	@ (80015dc <HAL_GPIO_Init+0x304>)
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	43db      	mvns	r3, r3
 800152e:	69ba      	ldr	r2, [r7, #24]
 8001530:	4013      	ands	r3, r2
 8001532:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800153c:	2b00      	cmp	r3, #0
 800153e:	d003      	beq.n	8001548 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001540:	69ba      	ldr	r2, [r7, #24]
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	4313      	orrs	r3, r2
 8001546:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001548:	4a24      	ldr	r2, [pc, #144]	@ (80015dc <HAL_GPIO_Init+0x304>)
 800154a:	69bb      	ldr	r3, [r7, #24]
 800154c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800154e:	4b23      	ldr	r3, [pc, #140]	@ (80015dc <HAL_GPIO_Init+0x304>)
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	43db      	mvns	r3, r3
 8001558:	69ba      	ldr	r2, [r7, #24]
 800155a:	4013      	ands	r3, r2
 800155c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001566:	2b00      	cmp	r3, #0
 8001568:	d003      	beq.n	8001572 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800156a:	69ba      	ldr	r2, [r7, #24]
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	4313      	orrs	r3, r2
 8001570:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001572:	4a1a      	ldr	r2, [pc, #104]	@ (80015dc <HAL_GPIO_Init+0x304>)
 8001574:	69bb      	ldr	r3, [r7, #24]
 8001576:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001578:	4b18      	ldr	r3, [pc, #96]	@ (80015dc <HAL_GPIO_Init+0x304>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	43db      	mvns	r3, r3
 8001582:	69ba      	ldr	r2, [r7, #24]
 8001584:	4013      	ands	r3, r2
 8001586:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001590:	2b00      	cmp	r3, #0
 8001592:	d003      	beq.n	800159c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001594:	69ba      	ldr	r2, [r7, #24]
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	4313      	orrs	r3, r2
 800159a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800159c:	4a0f      	ldr	r2, [pc, #60]	@ (80015dc <HAL_GPIO_Init+0x304>)
 800159e:	69bb      	ldr	r3, [r7, #24]
 80015a0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	3301      	adds	r3, #1
 80015a6:	61fb      	str	r3, [r7, #28]
 80015a8:	69fb      	ldr	r3, [r7, #28]
 80015aa:	2b0f      	cmp	r3, #15
 80015ac:	f67f aea2 	bls.w	80012f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80015b0:	bf00      	nop
 80015b2:	bf00      	nop
 80015b4:	3724      	adds	r7, #36	@ 0x24
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	40023800 	.word	0x40023800
 80015c4:	40013800 	.word	0x40013800
 80015c8:	40020000 	.word	0x40020000
 80015cc:	40020400 	.word	0x40020400
 80015d0:	40020800 	.word	0x40020800
 80015d4:	40020c00 	.word	0x40020c00
 80015d8:	40021000 	.word	0x40021000
 80015dc:	40013c00 	.word	0x40013c00

080015e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	460b      	mov	r3, r1
 80015ea:	807b      	strh	r3, [r7, #2]
 80015ec:	4613      	mov	r3, r2
 80015ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015f0:	787b      	ldrb	r3, [r7, #1]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d003      	beq.n	80015fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015f6:	887a      	ldrh	r2, [r7, #2]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80015fc:	e003      	b.n	8001606 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80015fe:	887b      	ldrh	r3, [r7, #2]
 8001600:	041a      	lsls	r2, r3, #16
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	619a      	str	r2, [r3, #24]
}
 8001606:	bf00      	nop
 8001608:	370c      	adds	r7, #12
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr
	...

08001614 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b086      	sub	sp, #24
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d101      	bne.n	8001626 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
 8001624:	e267      	b.n	8001af6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f003 0301 	and.w	r3, r3, #1
 800162e:	2b00      	cmp	r3, #0
 8001630:	d075      	beq.n	800171e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001632:	4b88      	ldr	r3, [pc, #544]	@ (8001854 <HAL_RCC_OscConfig+0x240>)
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	f003 030c 	and.w	r3, r3, #12
 800163a:	2b04      	cmp	r3, #4
 800163c:	d00c      	beq.n	8001658 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800163e:	4b85      	ldr	r3, [pc, #532]	@ (8001854 <HAL_RCC_OscConfig+0x240>)
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001646:	2b08      	cmp	r3, #8
 8001648:	d112      	bne.n	8001670 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800164a:	4b82      	ldr	r3, [pc, #520]	@ (8001854 <HAL_RCC_OscConfig+0x240>)
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001652:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001656:	d10b      	bne.n	8001670 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001658:	4b7e      	ldr	r3, [pc, #504]	@ (8001854 <HAL_RCC_OscConfig+0x240>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001660:	2b00      	cmp	r3, #0
 8001662:	d05b      	beq.n	800171c <HAL_RCC_OscConfig+0x108>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d157      	bne.n	800171c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800166c:	2301      	movs	r3, #1
 800166e:	e242      	b.n	8001af6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001678:	d106      	bne.n	8001688 <HAL_RCC_OscConfig+0x74>
 800167a:	4b76      	ldr	r3, [pc, #472]	@ (8001854 <HAL_RCC_OscConfig+0x240>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a75      	ldr	r2, [pc, #468]	@ (8001854 <HAL_RCC_OscConfig+0x240>)
 8001680:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001684:	6013      	str	r3, [r2, #0]
 8001686:	e01d      	b.n	80016c4 <HAL_RCC_OscConfig+0xb0>
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001690:	d10c      	bne.n	80016ac <HAL_RCC_OscConfig+0x98>
 8001692:	4b70      	ldr	r3, [pc, #448]	@ (8001854 <HAL_RCC_OscConfig+0x240>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a6f      	ldr	r2, [pc, #444]	@ (8001854 <HAL_RCC_OscConfig+0x240>)
 8001698:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800169c:	6013      	str	r3, [r2, #0]
 800169e:	4b6d      	ldr	r3, [pc, #436]	@ (8001854 <HAL_RCC_OscConfig+0x240>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a6c      	ldr	r2, [pc, #432]	@ (8001854 <HAL_RCC_OscConfig+0x240>)
 80016a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016a8:	6013      	str	r3, [r2, #0]
 80016aa:	e00b      	b.n	80016c4 <HAL_RCC_OscConfig+0xb0>
 80016ac:	4b69      	ldr	r3, [pc, #420]	@ (8001854 <HAL_RCC_OscConfig+0x240>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a68      	ldr	r2, [pc, #416]	@ (8001854 <HAL_RCC_OscConfig+0x240>)
 80016b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80016b6:	6013      	str	r3, [r2, #0]
 80016b8:	4b66      	ldr	r3, [pc, #408]	@ (8001854 <HAL_RCC_OscConfig+0x240>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a65      	ldr	r2, [pc, #404]	@ (8001854 <HAL_RCC_OscConfig+0x240>)
 80016be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80016c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d013      	beq.n	80016f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016cc:	f7ff fc30 	bl	8000f30 <HAL_GetTick>
 80016d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016d2:	e008      	b.n	80016e6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016d4:	f7ff fc2c 	bl	8000f30 <HAL_GetTick>
 80016d8:	4602      	mov	r2, r0
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	2b64      	cmp	r3, #100	@ 0x64
 80016e0:	d901      	bls.n	80016e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	e207      	b.n	8001af6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016e6:	4b5b      	ldr	r3, [pc, #364]	@ (8001854 <HAL_RCC_OscConfig+0x240>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d0f0      	beq.n	80016d4 <HAL_RCC_OscConfig+0xc0>
 80016f2:	e014      	b.n	800171e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016f4:	f7ff fc1c 	bl	8000f30 <HAL_GetTick>
 80016f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016fa:	e008      	b.n	800170e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016fc:	f7ff fc18 	bl	8000f30 <HAL_GetTick>
 8001700:	4602      	mov	r2, r0
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	2b64      	cmp	r3, #100	@ 0x64
 8001708:	d901      	bls.n	800170e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800170a:	2303      	movs	r3, #3
 800170c:	e1f3      	b.n	8001af6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800170e:	4b51      	ldr	r3, [pc, #324]	@ (8001854 <HAL_RCC_OscConfig+0x240>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001716:	2b00      	cmp	r3, #0
 8001718:	d1f0      	bne.n	80016fc <HAL_RCC_OscConfig+0xe8>
 800171a:	e000      	b.n	800171e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800171c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 0302 	and.w	r3, r3, #2
 8001726:	2b00      	cmp	r3, #0
 8001728:	d063      	beq.n	80017f2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800172a:	4b4a      	ldr	r3, [pc, #296]	@ (8001854 <HAL_RCC_OscConfig+0x240>)
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	f003 030c 	and.w	r3, r3, #12
 8001732:	2b00      	cmp	r3, #0
 8001734:	d00b      	beq.n	800174e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001736:	4b47      	ldr	r3, [pc, #284]	@ (8001854 <HAL_RCC_OscConfig+0x240>)
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800173e:	2b08      	cmp	r3, #8
 8001740:	d11c      	bne.n	800177c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001742:	4b44      	ldr	r3, [pc, #272]	@ (8001854 <HAL_RCC_OscConfig+0x240>)
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800174a:	2b00      	cmp	r3, #0
 800174c:	d116      	bne.n	800177c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800174e:	4b41      	ldr	r3, [pc, #260]	@ (8001854 <HAL_RCC_OscConfig+0x240>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 0302 	and.w	r3, r3, #2
 8001756:	2b00      	cmp	r3, #0
 8001758:	d005      	beq.n	8001766 <HAL_RCC_OscConfig+0x152>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	68db      	ldr	r3, [r3, #12]
 800175e:	2b01      	cmp	r3, #1
 8001760:	d001      	beq.n	8001766 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	e1c7      	b.n	8001af6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001766:	4b3b      	ldr	r3, [pc, #236]	@ (8001854 <HAL_RCC_OscConfig+0x240>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	691b      	ldr	r3, [r3, #16]
 8001772:	00db      	lsls	r3, r3, #3
 8001774:	4937      	ldr	r1, [pc, #220]	@ (8001854 <HAL_RCC_OscConfig+0x240>)
 8001776:	4313      	orrs	r3, r2
 8001778:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800177a:	e03a      	b.n	80017f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d020      	beq.n	80017c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001784:	4b34      	ldr	r3, [pc, #208]	@ (8001858 <HAL_RCC_OscConfig+0x244>)
 8001786:	2201      	movs	r2, #1
 8001788:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800178a:	f7ff fbd1 	bl	8000f30 <HAL_GetTick>
 800178e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001790:	e008      	b.n	80017a4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001792:	f7ff fbcd 	bl	8000f30 <HAL_GetTick>
 8001796:	4602      	mov	r2, r0
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	1ad3      	subs	r3, r2, r3
 800179c:	2b02      	cmp	r3, #2
 800179e:	d901      	bls.n	80017a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80017a0:	2303      	movs	r3, #3
 80017a2:	e1a8      	b.n	8001af6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017a4:	4b2b      	ldr	r3, [pc, #172]	@ (8001854 <HAL_RCC_OscConfig+0x240>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 0302 	and.w	r3, r3, #2
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d0f0      	beq.n	8001792 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017b0:	4b28      	ldr	r3, [pc, #160]	@ (8001854 <HAL_RCC_OscConfig+0x240>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	691b      	ldr	r3, [r3, #16]
 80017bc:	00db      	lsls	r3, r3, #3
 80017be:	4925      	ldr	r1, [pc, #148]	@ (8001854 <HAL_RCC_OscConfig+0x240>)
 80017c0:	4313      	orrs	r3, r2
 80017c2:	600b      	str	r3, [r1, #0]
 80017c4:	e015      	b.n	80017f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017c6:	4b24      	ldr	r3, [pc, #144]	@ (8001858 <HAL_RCC_OscConfig+0x244>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017cc:	f7ff fbb0 	bl	8000f30 <HAL_GetTick>
 80017d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017d2:	e008      	b.n	80017e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017d4:	f7ff fbac 	bl	8000f30 <HAL_GetTick>
 80017d8:	4602      	mov	r2, r0
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	2b02      	cmp	r3, #2
 80017e0:	d901      	bls.n	80017e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80017e2:	2303      	movs	r3, #3
 80017e4:	e187      	b.n	8001af6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017e6:	4b1b      	ldr	r3, [pc, #108]	@ (8001854 <HAL_RCC_OscConfig+0x240>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 0302 	and.w	r3, r3, #2
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d1f0      	bne.n	80017d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 0308 	and.w	r3, r3, #8
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d036      	beq.n	800186c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	695b      	ldr	r3, [r3, #20]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d016      	beq.n	8001834 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001806:	4b15      	ldr	r3, [pc, #84]	@ (800185c <HAL_RCC_OscConfig+0x248>)
 8001808:	2201      	movs	r2, #1
 800180a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800180c:	f7ff fb90 	bl	8000f30 <HAL_GetTick>
 8001810:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001812:	e008      	b.n	8001826 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001814:	f7ff fb8c 	bl	8000f30 <HAL_GetTick>
 8001818:	4602      	mov	r2, r0
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	2b02      	cmp	r3, #2
 8001820:	d901      	bls.n	8001826 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001822:	2303      	movs	r3, #3
 8001824:	e167      	b.n	8001af6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001826:	4b0b      	ldr	r3, [pc, #44]	@ (8001854 <HAL_RCC_OscConfig+0x240>)
 8001828:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800182a:	f003 0302 	and.w	r3, r3, #2
 800182e:	2b00      	cmp	r3, #0
 8001830:	d0f0      	beq.n	8001814 <HAL_RCC_OscConfig+0x200>
 8001832:	e01b      	b.n	800186c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001834:	4b09      	ldr	r3, [pc, #36]	@ (800185c <HAL_RCC_OscConfig+0x248>)
 8001836:	2200      	movs	r2, #0
 8001838:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800183a:	f7ff fb79 	bl	8000f30 <HAL_GetTick>
 800183e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001840:	e00e      	b.n	8001860 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001842:	f7ff fb75 	bl	8000f30 <HAL_GetTick>
 8001846:	4602      	mov	r2, r0
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	1ad3      	subs	r3, r2, r3
 800184c:	2b02      	cmp	r3, #2
 800184e:	d907      	bls.n	8001860 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001850:	2303      	movs	r3, #3
 8001852:	e150      	b.n	8001af6 <HAL_RCC_OscConfig+0x4e2>
 8001854:	40023800 	.word	0x40023800
 8001858:	42470000 	.word	0x42470000
 800185c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001860:	4b88      	ldr	r3, [pc, #544]	@ (8001a84 <HAL_RCC_OscConfig+0x470>)
 8001862:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001864:	f003 0302 	and.w	r3, r3, #2
 8001868:	2b00      	cmp	r3, #0
 800186a:	d1ea      	bne.n	8001842 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 0304 	and.w	r3, r3, #4
 8001874:	2b00      	cmp	r3, #0
 8001876:	f000 8097 	beq.w	80019a8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800187a:	2300      	movs	r3, #0
 800187c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800187e:	4b81      	ldr	r3, [pc, #516]	@ (8001a84 <HAL_RCC_OscConfig+0x470>)
 8001880:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001882:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001886:	2b00      	cmp	r3, #0
 8001888:	d10f      	bne.n	80018aa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800188a:	2300      	movs	r3, #0
 800188c:	60bb      	str	r3, [r7, #8]
 800188e:	4b7d      	ldr	r3, [pc, #500]	@ (8001a84 <HAL_RCC_OscConfig+0x470>)
 8001890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001892:	4a7c      	ldr	r2, [pc, #496]	@ (8001a84 <HAL_RCC_OscConfig+0x470>)
 8001894:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001898:	6413      	str	r3, [r2, #64]	@ 0x40
 800189a:	4b7a      	ldr	r3, [pc, #488]	@ (8001a84 <HAL_RCC_OscConfig+0x470>)
 800189c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800189e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018a2:	60bb      	str	r3, [r7, #8]
 80018a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018a6:	2301      	movs	r3, #1
 80018a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018aa:	4b77      	ldr	r3, [pc, #476]	@ (8001a88 <HAL_RCC_OscConfig+0x474>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d118      	bne.n	80018e8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018b6:	4b74      	ldr	r3, [pc, #464]	@ (8001a88 <HAL_RCC_OscConfig+0x474>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a73      	ldr	r2, [pc, #460]	@ (8001a88 <HAL_RCC_OscConfig+0x474>)
 80018bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018c2:	f7ff fb35 	bl	8000f30 <HAL_GetTick>
 80018c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018c8:	e008      	b.n	80018dc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018ca:	f7ff fb31 	bl	8000f30 <HAL_GetTick>
 80018ce:	4602      	mov	r2, r0
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	1ad3      	subs	r3, r2, r3
 80018d4:	2b02      	cmp	r3, #2
 80018d6:	d901      	bls.n	80018dc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80018d8:	2303      	movs	r3, #3
 80018da:	e10c      	b.n	8001af6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018dc:	4b6a      	ldr	r3, [pc, #424]	@ (8001a88 <HAL_RCC_OscConfig+0x474>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d0f0      	beq.n	80018ca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d106      	bne.n	80018fe <HAL_RCC_OscConfig+0x2ea>
 80018f0:	4b64      	ldr	r3, [pc, #400]	@ (8001a84 <HAL_RCC_OscConfig+0x470>)
 80018f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018f4:	4a63      	ldr	r2, [pc, #396]	@ (8001a84 <HAL_RCC_OscConfig+0x470>)
 80018f6:	f043 0301 	orr.w	r3, r3, #1
 80018fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80018fc:	e01c      	b.n	8001938 <HAL_RCC_OscConfig+0x324>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	2b05      	cmp	r3, #5
 8001904:	d10c      	bne.n	8001920 <HAL_RCC_OscConfig+0x30c>
 8001906:	4b5f      	ldr	r3, [pc, #380]	@ (8001a84 <HAL_RCC_OscConfig+0x470>)
 8001908:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800190a:	4a5e      	ldr	r2, [pc, #376]	@ (8001a84 <HAL_RCC_OscConfig+0x470>)
 800190c:	f043 0304 	orr.w	r3, r3, #4
 8001910:	6713      	str	r3, [r2, #112]	@ 0x70
 8001912:	4b5c      	ldr	r3, [pc, #368]	@ (8001a84 <HAL_RCC_OscConfig+0x470>)
 8001914:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001916:	4a5b      	ldr	r2, [pc, #364]	@ (8001a84 <HAL_RCC_OscConfig+0x470>)
 8001918:	f043 0301 	orr.w	r3, r3, #1
 800191c:	6713      	str	r3, [r2, #112]	@ 0x70
 800191e:	e00b      	b.n	8001938 <HAL_RCC_OscConfig+0x324>
 8001920:	4b58      	ldr	r3, [pc, #352]	@ (8001a84 <HAL_RCC_OscConfig+0x470>)
 8001922:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001924:	4a57      	ldr	r2, [pc, #348]	@ (8001a84 <HAL_RCC_OscConfig+0x470>)
 8001926:	f023 0301 	bic.w	r3, r3, #1
 800192a:	6713      	str	r3, [r2, #112]	@ 0x70
 800192c:	4b55      	ldr	r3, [pc, #340]	@ (8001a84 <HAL_RCC_OscConfig+0x470>)
 800192e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001930:	4a54      	ldr	r2, [pc, #336]	@ (8001a84 <HAL_RCC_OscConfig+0x470>)
 8001932:	f023 0304 	bic.w	r3, r3, #4
 8001936:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d015      	beq.n	800196c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001940:	f7ff faf6 	bl	8000f30 <HAL_GetTick>
 8001944:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001946:	e00a      	b.n	800195e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001948:	f7ff faf2 	bl	8000f30 <HAL_GetTick>
 800194c:	4602      	mov	r2, r0
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001956:	4293      	cmp	r3, r2
 8001958:	d901      	bls.n	800195e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e0cb      	b.n	8001af6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800195e:	4b49      	ldr	r3, [pc, #292]	@ (8001a84 <HAL_RCC_OscConfig+0x470>)
 8001960:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001962:	f003 0302 	and.w	r3, r3, #2
 8001966:	2b00      	cmp	r3, #0
 8001968:	d0ee      	beq.n	8001948 <HAL_RCC_OscConfig+0x334>
 800196a:	e014      	b.n	8001996 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800196c:	f7ff fae0 	bl	8000f30 <HAL_GetTick>
 8001970:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001972:	e00a      	b.n	800198a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001974:	f7ff fadc 	bl	8000f30 <HAL_GetTick>
 8001978:	4602      	mov	r2, r0
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001982:	4293      	cmp	r3, r2
 8001984:	d901      	bls.n	800198a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001986:	2303      	movs	r3, #3
 8001988:	e0b5      	b.n	8001af6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800198a:	4b3e      	ldr	r3, [pc, #248]	@ (8001a84 <HAL_RCC_OscConfig+0x470>)
 800198c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800198e:	f003 0302 	and.w	r3, r3, #2
 8001992:	2b00      	cmp	r3, #0
 8001994:	d1ee      	bne.n	8001974 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001996:	7dfb      	ldrb	r3, [r7, #23]
 8001998:	2b01      	cmp	r3, #1
 800199a:	d105      	bne.n	80019a8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800199c:	4b39      	ldr	r3, [pc, #228]	@ (8001a84 <HAL_RCC_OscConfig+0x470>)
 800199e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019a0:	4a38      	ldr	r2, [pc, #224]	@ (8001a84 <HAL_RCC_OscConfig+0x470>)
 80019a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80019a6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	699b      	ldr	r3, [r3, #24]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	f000 80a1 	beq.w	8001af4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80019b2:	4b34      	ldr	r3, [pc, #208]	@ (8001a84 <HAL_RCC_OscConfig+0x470>)
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	f003 030c 	and.w	r3, r3, #12
 80019ba:	2b08      	cmp	r3, #8
 80019bc:	d05c      	beq.n	8001a78 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	699b      	ldr	r3, [r3, #24]
 80019c2:	2b02      	cmp	r3, #2
 80019c4:	d141      	bne.n	8001a4a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019c6:	4b31      	ldr	r3, [pc, #196]	@ (8001a8c <HAL_RCC_OscConfig+0x478>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019cc:	f7ff fab0 	bl	8000f30 <HAL_GetTick>
 80019d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019d2:	e008      	b.n	80019e6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019d4:	f7ff faac 	bl	8000f30 <HAL_GetTick>
 80019d8:	4602      	mov	r2, r0
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d901      	bls.n	80019e6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80019e2:	2303      	movs	r3, #3
 80019e4:	e087      	b.n	8001af6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019e6:	4b27      	ldr	r3, [pc, #156]	@ (8001a84 <HAL_RCC_OscConfig+0x470>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d1f0      	bne.n	80019d4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	69da      	ldr	r2, [r3, #28]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6a1b      	ldr	r3, [r3, #32]
 80019fa:	431a      	orrs	r2, r3
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a00:	019b      	lsls	r3, r3, #6
 8001a02:	431a      	orrs	r2, r3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a08:	085b      	lsrs	r3, r3, #1
 8001a0a:	3b01      	subs	r3, #1
 8001a0c:	041b      	lsls	r3, r3, #16
 8001a0e:	431a      	orrs	r2, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a14:	061b      	lsls	r3, r3, #24
 8001a16:	491b      	ldr	r1, [pc, #108]	@ (8001a84 <HAL_RCC_OscConfig+0x470>)
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a1c:	4b1b      	ldr	r3, [pc, #108]	@ (8001a8c <HAL_RCC_OscConfig+0x478>)
 8001a1e:	2201      	movs	r2, #1
 8001a20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a22:	f7ff fa85 	bl	8000f30 <HAL_GetTick>
 8001a26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a28:	e008      	b.n	8001a3c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a2a:	f7ff fa81 	bl	8000f30 <HAL_GetTick>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	1ad3      	subs	r3, r2, r3
 8001a34:	2b02      	cmp	r3, #2
 8001a36:	d901      	bls.n	8001a3c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001a38:	2303      	movs	r3, #3
 8001a3a:	e05c      	b.n	8001af6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a3c:	4b11      	ldr	r3, [pc, #68]	@ (8001a84 <HAL_RCC_OscConfig+0x470>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d0f0      	beq.n	8001a2a <HAL_RCC_OscConfig+0x416>
 8001a48:	e054      	b.n	8001af4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a4a:	4b10      	ldr	r3, [pc, #64]	@ (8001a8c <HAL_RCC_OscConfig+0x478>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a50:	f7ff fa6e 	bl	8000f30 <HAL_GetTick>
 8001a54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a56:	e008      	b.n	8001a6a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a58:	f7ff fa6a 	bl	8000f30 <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	2b02      	cmp	r3, #2
 8001a64:	d901      	bls.n	8001a6a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001a66:	2303      	movs	r3, #3
 8001a68:	e045      	b.n	8001af6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a6a:	4b06      	ldr	r3, [pc, #24]	@ (8001a84 <HAL_RCC_OscConfig+0x470>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d1f0      	bne.n	8001a58 <HAL_RCC_OscConfig+0x444>
 8001a76:	e03d      	b.n	8001af4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	699b      	ldr	r3, [r3, #24]
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d107      	bne.n	8001a90 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e038      	b.n	8001af6 <HAL_RCC_OscConfig+0x4e2>
 8001a84:	40023800 	.word	0x40023800
 8001a88:	40007000 	.word	0x40007000
 8001a8c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001a90:	4b1b      	ldr	r3, [pc, #108]	@ (8001b00 <HAL_RCC_OscConfig+0x4ec>)
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	699b      	ldr	r3, [r3, #24]
 8001a9a:	2b01      	cmp	r3, #1
 8001a9c:	d028      	beq.n	8001af0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d121      	bne.n	8001af0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	d11a      	bne.n	8001af0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001aba:	68fa      	ldr	r2, [r7, #12]
 8001abc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	687a      	ldr	r2, [r7, #4]
 8001ac4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001ac6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d111      	bne.n	8001af0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ad6:	085b      	lsrs	r3, r3, #1
 8001ad8:	3b01      	subs	r3, #1
 8001ada:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d107      	bne.n	8001af0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001aea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d001      	beq.n	8001af4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	e000      	b.n	8001af6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001af4:	2300      	movs	r3, #0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3718      	adds	r7, #24
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	40023800 	.word	0x40023800

08001b04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d101      	bne.n	8001b18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	e0cc      	b.n	8001cb2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b18:	4b68      	ldr	r3, [pc, #416]	@ (8001cbc <HAL_RCC_ClockConfig+0x1b8>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f003 0307 	and.w	r3, r3, #7
 8001b20:	683a      	ldr	r2, [r7, #0]
 8001b22:	429a      	cmp	r2, r3
 8001b24:	d90c      	bls.n	8001b40 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b26:	4b65      	ldr	r3, [pc, #404]	@ (8001cbc <HAL_RCC_ClockConfig+0x1b8>)
 8001b28:	683a      	ldr	r2, [r7, #0]
 8001b2a:	b2d2      	uxtb	r2, r2
 8001b2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b2e:	4b63      	ldr	r3, [pc, #396]	@ (8001cbc <HAL_RCC_ClockConfig+0x1b8>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 0307 	and.w	r3, r3, #7
 8001b36:	683a      	ldr	r2, [r7, #0]
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d001      	beq.n	8001b40 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e0b8      	b.n	8001cb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 0302 	and.w	r3, r3, #2
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d020      	beq.n	8001b8e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f003 0304 	and.w	r3, r3, #4
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d005      	beq.n	8001b64 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b58:	4b59      	ldr	r3, [pc, #356]	@ (8001cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	4a58      	ldr	r2, [pc, #352]	@ (8001cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b5e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001b62:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f003 0308 	and.w	r3, r3, #8
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d005      	beq.n	8001b7c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b70:	4b53      	ldr	r3, [pc, #332]	@ (8001cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	4a52      	ldr	r2, [pc, #328]	@ (8001cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b76:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001b7a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b7c:	4b50      	ldr	r3, [pc, #320]	@ (8001cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	494d      	ldr	r1, [pc, #308]	@ (8001cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 0301 	and.w	r3, r3, #1
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d044      	beq.n	8001c24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d107      	bne.n	8001bb2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ba2:	4b47      	ldr	r3, [pc, #284]	@ (8001cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d119      	bne.n	8001be2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e07f      	b.n	8001cb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	2b02      	cmp	r3, #2
 8001bb8:	d003      	beq.n	8001bc2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001bbe:	2b03      	cmp	r3, #3
 8001bc0:	d107      	bne.n	8001bd2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bc2:	4b3f      	ldr	r3, [pc, #252]	@ (8001cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d109      	bne.n	8001be2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e06f      	b.n	8001cb2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bd2:	4b3b      	ldr	r3, [pc, #236]	@ (8001cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0302 	and.w	r3, r3, #2
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d101      	bne.n	8001be2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e067      	b.n	8001cb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001be2:	4b37      	ldr	r3, [pc, #220]	@ (8001cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	f023 0203 	bic.w	r2, r3, #3
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	4934      	ldr	r1, [pc, #208]	@ (8001cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bf4:	f7ff f99c 	bl	8000f30 <HAL_GetTick>
 8001bf8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bfa:	e00a      	b.n	8001c12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bfc:	f7ff f998 	bl	8000f30 <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d901      	bls.n	8001c12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	e04f      	b.n	8001cb2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c12:	4b2b      	ldr	r3, [pc, #172]	@ (8001cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	f003 020c 	and.w	r2, r3, #12
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d1eb      	bne.n	8001bfc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c24:	4b25      	ldr	r3, [pc, #148]	@ (8001cbc <HAL_RCC_ClockConfig+0x1b8>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 0307 	and.w	r3, r3, #7
 8001c2c:	683a      	ldr	r2, [r7, #0]
 8001c2e:	429a      	cmp	r2, r3
 8001c30:	d20c      	bcs.n	8001c4c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c32:	4b22      	ldr	r3, [pc, #136]	@ (8001cbc <HAL_RCC_ClockConfig+0x1b8>)
 8001c34:	683a      	ldr	r2, [r7, #0]
 8001c36:	b2d2      	uxtb	r2, r2
 8001c38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c3a:	4b20      	ldr	r3, [pc, #128]	@ (8001cbc <HAL_RCC_ClockConfig+0x1b8>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 0307 	and.w	r3, r3, #7
 8001c42:	683a      	ldr	r2, [r7, #0]
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d001      	beq.n	8001c4c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e032      	b.n	8001cb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 0304 	and.w	r3, r3, #4
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d008      	beq.n	8001c6a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c58:	4b19      	ldr	r3, [pc, #100]	@ (8001cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	4916      	ldr	r1, [pc, #88]	@ (8001cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c66:	4313      	orrs	r3, r2
 8001c68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 0308 	and.w	r3, r3, #8
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d009      	beq.n	8001c8a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c76:	4b12      	ldr	r3, [pc, #72]	@ (8001cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	691b      	ldr	r3, [r3, #16]
 8001c82:	00db      	lsls	r3, r3, #3
 8001c84:	490e      	ldr	r1, [pc, #56]	@ (8001cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c86:	4313      	orrs	r3, r2
 8001c88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c8a:	f000 f821 	bl	8001cd0 <HAL_RCC_GetSysClockFreq>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	4b0b      	ldr	r3, [pc, #44]	@ (8001cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	091b      	lsrs	r3, r3, #4
 8001c96:	f003 030f 	and.w	r3, r3, #15
 8001c9a:	490a      	ldr	r1, [pc, #40]	@ (8001cc4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c9c:	5ccb      	ldrb	r3, [r1, r3]
 8001c9e:	fa22 f303 	lsr.w	r3, r2, r3
 8001ca2:	4a09      	ldr	r2, [pc, #36]	@ (8001cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ca4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001ca6:	4b09      	ldr	r3, [pc, #36]	@ (8001ccc <HAL_RCC_ClockConfig+0x1c8>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4618      	mov	r0, r3
 8001cac:	f7ff f8fc 	bl	8000ea8 <HAL_InitTick>

  return HAL_OK;
 8001cb0:	2300      	movs	r3, #0
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3710      	adds	r7, #16
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	40023c00 	.word	0x40023c00
 8001cc0:	40023800 	.word	0x40023800
 8001cc4:	08004d6c 	.word	0x08004d6c
 8001cc8:	20000000 	.word	0x20000000
 8001ccc:	20000004 	.word	0x20000004

08001cd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001cd4:	b094      	sub	sp, #80	@ 0x50
 8001cd6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ce8:	4b79      	ldr	r3, [pc, #484]	@ (8001ed0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	f003 030c 	and.w	r3, r3, #12
 8001cf0:	2b08      	cmp	r3, #8
 8001cf2:	d00d      	beq.n	8001d10 <HAL_RCC_GetSysClockFreq+0x40>
 8001cf4:	2b08      	cmp	r3, #8
 8001cf6:	f200 80e1 	bhi.w	8001ebc <HAL_RCC_GetSysClockFreq+0x1ec>
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d002      	beq.n	8001d04 <HAL_RCC_GetSysClockFreq+0x34>
 8001cfe:	2b04      	cmp	r3, #4
 8001d00:	d003      	beq.n	8001d0a <HAL_RCC_GetSysClockFreq+0x3a>
 8001d02:	e0db      	b.n	8001ebc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d04:	4b73      	ldr	r3, [pc, #460]	@ (8001ed4 <HAL_RCC_GetSysClockFreq+0x204>)
 8001d06:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001d08:	e0db      	b.n	8001ec2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d0a:	4b73      	ldr	r3, [pc, #460]	@ (8001ed8 <HAL_RCC_GetSysClockFreq+0x208>)
 8001d0c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001d0e:	e0d8      	b.n	8001ec2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d10:	4b6f      	ldr	r3, [pc, #444]	@ (8001ed0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001d18:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d1a:	4b6d      	ldr	r3, [pc, #436]	@ (8001ed0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d063      	beq.n	8001dee <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d26:	4b6a      	ldr	r3, [pc, #424]	@ (8001ed0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	099b      	lsrs	r3, r3, #6
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001d30:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001d32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d38:	633b      	str	r3, [r7, #48]	@ 0x30
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8001d3e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001d42:	4622      	mov	r2, r4
 8001d44:	462b      	mov	r3, r5
 8001d46:	f04f 0000 	mov.w	r0, #0
 8001d4a:	f04f 0100 	mov.w	r1, #0
 8001d4e:	0159      	lsls	r1, r3, #5
 8001d50:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d54:	0150      	lsls	r0, r2, #5
 8001d56:	4602      	mov	r2, r0
 8001d58:	460b      	mov	r3, r1
 8001d5a:	4621      	mov	r1, r4
 8001d5c:	1a51      	subs	r1, r2, r1
 8001d5e:	6139      	str	r1, [r7, #16]
 8001d60:	4629      	mov	r1, r5
 8001d62:	eb63 0301 	sbc.w	r3, r3, r1
 8001d66:	617b      	str	r3, [r7, #20]
 8001d68:	f04f 0200 	mov.w	r2, #0
 8001d6c:	f04f 0300 	mov.w	r3, #0
 8001d70:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001d74:	4659      	mov	r1, fp
 8001d76:	018b      	lsls	r3, r1, #6
 8001d78:	4651      	mov	r1, sl
 8001d7a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d7e:	4651      	mov	r1, sl
 8001d80:	018a      	lsls	r2, r1, #6
 8001d82:	4651      	mov	r1, sl
 8001d84:	ebb2 0801 	subs.w	r8, r2, r1
 8001d88:	4659      	mov	r1, fp
 8001d8a:	eb63 0901 	sbc.w	r9, r3, r1
 8001d8e:	f04f 0200 	mov.w	r2, #0
 8001d92:	f04f 0300 	mov.w	r3, #0
 8001d96:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001d9a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001d9e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001da2:	4690      	mov	r8, r2
 8001da4:	4699      	mov	r9, r3
 8001da6:	4623      	mov	r3, r4
 8001da8:	eb18 0303 	adds.w	r3, r8, r3
 8001dac:	60bb      	str	r3, [r7, #8]
 8001dae:	462b      	mov	r3, r5
 8001db0:	eb49 0303 	adc.w	r3, r9, r3
 8001db4:	60fb      	str	r3, [r7, #12]
 8001db6:	f04f 0200 	mov.w	r2, #0
 8001dba:	f04f 0300 	mov.w	r3, #0
 8001dbe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001dc2:	4629      	mov	r1, r5
 8001dc4:	024b      	lsls	r3, r1, #9
 8001dc6:	4621      	mov	r1, r4
 8001dc8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001dcc:	4621      	mov	r1, r4
 8001dce:	024a      	lsls	r2, r1, #9
 8001dd0:	4610      	mov	r0, r2
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001dda:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001ddc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001de0:	f7fe fa4e 	bl	8000280 <__aeabi_uldivmod>
 8001de4:	4602      	mov	r2, r0
 8001de6:	460b      	mov	r3, r1
 8001de8:	4613      	mov	r3, r2
 8001dea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001dec:	e058      	b.n	8001ea0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dee:	4b38      	ldr	r3, [pc, #224]	@ (8001ed0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	099b      	lsrs	r3, r3, #6
 8001df4:	2200      	movs	r2, #0
 8001df6:	4618      	mov	r0, r3
 8001df8:	4611      	mov	r1, r2
 8001dfa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001dfe:	623b      	str	r3, [r7, #32]
 8001e00:	2300      	movs	r3, #0
 8001e02:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e04:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001e08:	4642      	mov	r2, r8
 8001e0a:	464b      	mov	r3, r9
 8001e0c:	f04f 0000 	mov.w	r0, #0
 8001e10:	f04f 0100 	mov.w	r1, #0
 8001e14:	0159      	lsls	r1, r3, #5
 8001e16:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e1a:	0150      	lsls	r0, r2, #5
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	460b      	mov	r3, r1
 8001e20:	4641      	mov	r1, r8
 8001e22:	ebb2 0a01 	subs.w	sl, r2, r1
 8001e26:	4649      	mov	r1, r9
 8001e28:	eb63 0b01 	sbc.w	fp, r3, r1
 8001e2c:	f04f 0200 	mov.w	r2, #0
 8001e30:	f04f 0300 	mov.w	r3, #0
 8001e34:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001e38:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001e3c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001e40:	ebb2 040a 	subs.w	r4, r2, sl
 8001e44:	eb63 050b 	sbc.w	r5, r3, fp
 8001e48:	f04f 0200 	mov.w	r2, #0
 8001e4c:	f04f 0300 	mov.w	r3, #0
 8001e50:	00eb      	lsls	r3, r5, #3
 8001e52:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001e56:	00e2      	lsls	r2, r4, #3
 8001e58:	4614      	mov	r4, r2
 8001e5a:	461d      	mov	r5, r3
 8001e5c:	4643      	mov	r3, r8
 8001e5e:	18e3      	adds	r3, r4, r3
 8001e60:	603b      	str	r3, [r7, #0]
 8001e62:	464b      	mov	r3, r9
 8001e64:	eb45 0303 	adc.w	r3, r5, r3
 8001e68:	607b      	str	r3, [r7, #4]
 8001e6a:	f04f 0200 	mov.w	r2, #0
 8001e6e:	f04f 0300 	mov.w	r3, #0
 8001e72:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001e76:	4629      	mov	r1, r5
 8001e78:	028b      	lsls	r3, r1, #10
 8001e7a:	4621      	mov	r1, r4
 8001e7c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001e80:	4621      	mov	r1, r4
 8001e82:	028a      	lsls	r2, r1, #10
 8001e84:	4610      	mov	r0, r2
 8001e86:	4619      	mov	r1, r3
 8001e88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	61bb      	str	r3, [r7, #24]
 8001e8e:	61fa      	str	r2, [r7, #28]
 8001e90:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e94:	f7fe f9f4 	bl	8000280 <__aeabi_uldivmod>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	460b      	mov	r3, r1
 8001e9c:	4613      	mov	r3, r2
 8001e9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001ea0:	4b0b      	ldr	r3, [pc, #44]	@ (8001ed0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	0c1b      	lsrs	r3, r3, #16
 8001ea6:	f003 0303 	and.w	r3, r3, #3
 8001eaa:	3301      	adds	r3, #1
 8001eac:	005b      	lsls	r3, r3, #1
 8001eae:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001eb0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001eb2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001eb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eb8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001eba:	e002      	b.n	8001ec2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ebc:	4b05      	ldr	r3, [pc, #20]	@ (8001ed4 <HAL_RCC_GetSysClockFreq+0x204>)
 8001ebe:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001ec0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ec2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3750      	adds	r7, #80	@ 0x50
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ece:	bf00      	nop
 8001ed0:	40023800 	.word	0x40023800
 8001ed4:	00f42400 	.word	0x00f42400
 8001ed8:	007a1200 	.word	0x007a1200

08001edc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ee0:	4b03      	ldr	r3, [pc, #12]	@ (8001ef0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop
 8001ef0:	20000000 	.word	0x20000000

08001ef4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ef8:	f7ff fff0 	bl	8001edc <HAL_RCC_GetHCLKFreq>
 8001efc:	4602      	mov	r2, r0
 8001efe:	4b05      	ldr	r3, [pc, #20]	@ (8001f14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	0a9b      	lsrs	r3, r3, #10
 8001f04:	f003 0307 	and.w	r3, r3, #7
 8001f08:	4903      	ldr	r1, [pc, #12]	@ (8001f18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f0a:	5ccb      	ldrb	r3, [r1, r3]
 8001f0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	40023800 	.word	0x40023800
 8001f18:	08004d7c 	.word	0x08004d7c

08001f1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001f20:	f7ff ffdc 	bl	8001edc <HAL_RCC_GetHCLKFreq>
 8001f24:	4602      	mov	r2, r0
 8001f26:	4b05      	ldr	r3, [pc, #20]	@ (8001f3c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	0b5b      	lsrs	r3, r3, #13
 8001f2c:	f003 0307 	and.w	r3, r3, #7
 8001f30:	4903      	ldr	r1, [pc, #12]	@ (8001f40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f32:	5ccb      	ldrb	r3, [r1, r3]
 8001f34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	40023800 	.word	0x40023800
 8001f40:	08004d7c 	.word	0x08004d7c

08001f44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d101      	bne.n	8001f56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e041      	b.n	8001fda <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d106      	bne.n	8001f70 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2200      	movs	r2, #0
 8001f66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f7fe fe70 	bl	8000c50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2202      	movs	r2, #2
 8001f74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	3304      	adds	r3, #4
 8001f80:	4619      	mov	r1, r3
 8001f82:	4610      	mov	r0, r2
 8001f84:	f000 fcbc 	bl	8002900 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2201      	movs	r2, #1
 8001f94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2201      	movs	r2, #1
 8001fac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2201      	movs	r2, #1
 8001fbc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2201      	movs	r2, #1
 8001fcc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001fd8:	2300      	movs	r3, #0
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3708      	adds	r7, #8
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
	...

08001fe4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b085      	sub	sp, #20
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d001      	beq.n	8001ffc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e03c      	b.n	8002076 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2202      	movs	r2, #2
 8002000:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a1e      	ldr	r2, [pc, #120]	@ (8002084 <HAL_TIM_Base_Start+0xa0>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d018      	beq.n	8002040 <HAL_TIM_Base_Start+0x5c>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002016:	d013      	beq.n	8002040 <HAL_TIM_Base_Start+0x5c>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a1a      	ldr	r2, [pc, #104]	@ (8002088 <HAL_TIM_Base_Start+0xa4>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d00e      	beq.n	8002040 <HAL_TIM_Base_Start+0x5c>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a19      	ldr	r2, [pc, #100]	@ (800208c <HAL_TIM_Base_Start+0xa8>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d009      	beq.n	8002040 <HAL_TIM_Base_Start+0x5c>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a17      	ldr	r2, [pc, #92]	@ (8002090 <HAL_TIM_Base_Start+0xac>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d004      	beq.n	8002040 <HAL_TIM_Base_Start+0x5c>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a16      	ldr	r2, [pc, #88]	@ (8002094 <HAL_TIM_Base_Start+0xb0>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d111      	bne.n	8002064 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	f003 0307 	and.w	r3, r3, #7
 800204a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	2b06      	cmp	r3, #6
 8002050:	d010      	beq.n	8002074 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f042 0201 	orr.w	r2, r2, #1
 8002060:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002062:	e007      	b.n	8002074 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f042 0201 	orr.w	r2, r2, #1
 8002072:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002074:	2300      	movs	r3, #0
}
 8002076:	4618      	mov	r0, r3
 8002078:	3714      	adds	r7, #20
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr
 8002082:	bf00      	nop
 8002084:	40010000 	.word	0x40010000
 8002088:	40000400 	.word	0x40000400
 800208c:	40000800 	.word	0x40000800
 8002090:	40000c00 	.word	0x40000c00
 8002094:	40014000 	.word	0x40014000

08002098 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d101      	bne.n	80020aa <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e041      	b.n	800212e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d106      	bne.n	80020c4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2200      	movs	r2, #0
 80020ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f000 f839 	bl	8002136 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2202      	movs	r2, #2
 80020c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	3304      	adds	r3, #4
 80020d4:	4619      	mov	r1, r3
 80020d6:	4610      	mov	r0, r2
 80020d8:	f000 fc12 	bl	8002900 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2201      	movs	r2, #1
 80020e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2201      	movs	r2, #1
 80020e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2201      	movs	r2, #1
 80020f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2201      	movs	r2, #1
 80020f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2201      	movs	r2, #1
 8002100:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2201      	movs	r2, #1
 8002108:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2201      	movs	r2, #1
 8002110:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2201      	movs	r2, #1
 8002118:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2201      	movs	r2, #1
 8002120:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2201      	movs	r2, #1
 8002128:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800212c:	2300      	movs	r3, #0
}
 800212e:	4618      	mov	r0, r3
 8002130:	3708      	adds	r7, #8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}

08002136 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002136:	b480      	push	{r7}
 8002138:	b083      	sub	sp, #12
 800213a:	af00      	add	r7, sp, #0
 800213c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800213e:	bf00      	nop
 8002140:	370c      	adds	r7, #12
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
	...

0800214c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b084      	sub	sp, #16
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002156:	2300      	movs	r3, #0
 8002158:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d104      	bne.n	800216a <HAL_TIM_IC_Start_IT+0x1e>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002166:	b2db      	uxtb	r3, r3
 8002168:	e013      	b.n	8002192 <HAL_TIM_IC_Start_IT+0x46>
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	2b04      	cmp	r3, #4
 800216e:	d104      	bne.n	800217a <HAL_TIM_IC_Start_IT+0x2e>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002176:	b2db      	uxtb	r3, r3
 8002178:	e00b      	b.n	8002192 <HAL_TIM_IC_Start_IT+0x46>
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	2b08      	cmp	r3, #8
 800217e:	d104      	bne.n	800218a <HAL_TIM_IC_Start_IT+0x3e>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002186:	b2db      	uxtb	r3, r3
 8002188:	e003      	b.n	8002192 <HAL_TIM_IC_Start_IT+0x46>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002190:	b2db      	uxtb	r3, r3
 8002192:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d104      	bne.n	80021a4 <HAL_TIM_IC_Start_IT+0x58>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	e013      	b.n	80021cc <HAL_TIM_IC_Start_IT+0x80>
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	2b04      	cmp	r3, #4
 80021a8:	d104      	bne.n	80021b4 <HAL_TIM_IC_Start_IT+0x68>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	e00b      	b.n	80021cc <HAL_TIM_IC_Start_IT+0x80>
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	2b08      	cmp	r3, #8
 80021b8:	d104      	bne.n	80021c4 <HAL_TIM_IC_Start_IT+0x78>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	e003      	b.n	80021cc <HAL_TIM_IC_Start_IT+0x80>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80021ce:	7bbb      	ldrb	r3, [r7, #14]
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d102      	bne.n	80021da <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80021d4:	7b7b      	ldrb	r3, [r7, #13]
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d001      	beq.n	80021de <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e0c2      	b.n	8002364 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d104      	bne.n	80021ee <HAL_TIM_IC_Start_IT+0xa2>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2202      	movs	r2, #2
 80021e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80021ec:	e013      	b.n	8002216 <HAL_TIM_IC_Start_IT+0xca>
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	2b04      	cmp	r3, #4
 80021f2:	d104      	bne.n	80021fe <HAL_TIM_IC_Start_IT+0xb2>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2202      	movs	r2, #2
 80021f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80021fc:	e00b      	b.n	8002216 <HAL_TIM_IC_Start_IT+0xca>
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	2b08      	cmp	r3, #8
 8002202:	d104      	bne.n	800220e <HAL_TIM_IC_Start_IT+0xc2>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2202      	movs	r2, #2
 8002208:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800220c:	e003      	b.n	8002216 <HAL_TIM_IC_Start_IT+0xca>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2202      	movs	r2, #2
 8002212:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d104      	bne.n	8002226 <HAL_TIM_IC_Start_IT+0xda>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2202      	movs	r2, #2
 8002220:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002224:	e013      	b.n	800224e <HAL_TIM_IC_Start_IT+0x102>
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	2b04      	cmp	r3, #4
 800222a:	d104      	bne.n	8002236 <HAL_TIM_IC_Start_IT+0xea>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2202      	movs	r2, #2
 8002230:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002234:	e00b      	b.n	800224e <HAL_TIM_IC_Start_IT+0x102>
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	2b08      	cmp	r3, #8
 800223a:	d104      	bne.n	8002246 <HAL_TIM_IC_Start_IT+0xfa>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2202      	movs	r2, #2
 8002240:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002244:	e003      	b.n	800224e <HAL_TIM_IC_Start_IT+0x102>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2202      	movs	r2, #2
 800224a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	2b0c      	cmp	r3, #12
 8002252:	d841      	bhi.n	80022d8 <HAL_TIM_IC_Start_IT+0x18c>
 8002254:	a201      	add	r2, pc, #4	@ (adr r2, 800225c <HAL_TIM_IC_Start_IT+0x110>)
 8002256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800225a:	bf00      	nop
 800225c:	08002291 	.word	0x08002291
 8002260:	080022d9 	.word	0x080022d9
 8002264:	080022d9 	.word	0x080022d9
 8002268:	080022d9 	.word	0x080022d9
 800226c:	080022a3 	.word	0x080022a3
 8002270:	080022d9 	.word	0x080022d9
 8002274:	080022d9 	.word	0x080022d9
 8002278:	080022d9 	.word	0x080022d9
 800227c:	080022b5 	.word	0x080022b5
 8002280:	080022d9 	.word	0x080022d9
 8002284:	080022d9 	.word	0x080022d9
 8002288:	080022d9 	.word	0x080022d9
 800228c:	080022c7 	.word	0x080022c7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	68da      	ldr	r2, [r3, #12]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f042 0202 	orr.w	r2, r2, #2
 800229e:	60da      	str	r2, [r3, #12]
      break;
 80022a0:	e01d      	b.n	80022de <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	68da      	ldr	r2, [r3, #12]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f042 0204 	orr.w	r2, r2, #4
 80022b0:	60da      	str	r2, [r3, #12]
      break;
 80022b2:	e014      	b.n	80022de <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	68da      	ldr	r2, [r3, #12]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f042 0208 	orr.w	r2, r2, #8
 80022c2:	60da      	str	r2, [r3, #12]
      break;
 80022c4:	e00b      	b.n	80022de <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	68da      	ldr	r2, [r3, #12]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f042 0210 	orr.w	r2, r2, #16
 80022d4:	60da      	str	r2, [r3, #12]
      break;
 80022d6:	e002      	b.n	80022de <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	73fb      	strb	r3, [r7, #15]
      break;
 80022dc:	bf00      	nop
  }

  if (status == HAL_OK)
 80022de:	7bfb      	ldrb	r3, [r7, #15]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d13e      	bne.n	8002362 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	2201      	movs	r2, #1
 80022ea:	6839      	ldr	r1, [r7, #0]
 80022ec:	4618      	mov	r0, r3
 80022ee:	f000 fd4b 	bl	8002d88 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a1d      	ldr	r2, [pc, #116]	@ (800236c <HAL_TIM_IC_Start_IT+0x220>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d018      	beq.n	800232e <HAL_TIM_IC_Start_IT+0x1e2>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002304:	d013      	beq.n	800232e <HAL_TIM_IC_Start_IT+0x1e2>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a19      	ldr	r2, [pc, #100]	@ (8002370 <HAL_TIM_IC_Start_IT+0x224>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d00e      	beq.n	800232e <HAL_TIM_IC_Start_IT+0x1e2>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a17      	ldr	r2, [pc, #92]	@ (8002374 <HAL_TIM_IC_Start_IT+0x228>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d009      	beq.n	800232e <HAL_TIM_IC_Start_IT+0x1e2>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a16      	ldr	r2, [pc, #88]	@ (8002378 <HAL_TIM_IC_Start_IT+0x22c>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d004      	beq.n	800232e <HAL_TIM_IC_Start_IT+0x1e2>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a14      	ldr	r2, [pc, #80]	@ (800237c <HAL_TIM_IC_Start_IT+0x230>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d111      	bne.n	8002352 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	f003 0307 	and.w	r3, r3, #7
 8002338:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	2b06      	cmp	r3, #6
 800233e:	d010      	beq.n	8002362 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f042 0201 	orr.w	r2, r2, #1
 800234e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002350:	e007      	b.n	8002362 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f042 0201 	orr.w	r2, r2, #1
 8002360:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002362:	7bfb      	ldrb	r3, [r7, #15]
}
 8002364:	4618      	mov	r0, r3
 8002366:	3710      	adds	r7, #16
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}
 800236c:	40010000 	.word	0x40010000
 8002370:	40000400 	.word	0x40000400
 8002374:	40000800 	.word	0x40000800
 8002378:	40000c00 	.word	0x40000c00
 800237c:	40014000 	.word	0x40014000

08002380 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b084      	sub	sp, #16
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	68db      	ldr	r3, [r3, #12]
 800238e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	691b      	ldr	r3, [r3, #16]
 8002396:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	f003 0302 	and.w	r3, r3, #2
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d020      	beq.n	80023e4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	f003 0302 	and.w	r3, r3, #2
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d01b      	beq.n	80023e4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f06f 0202 	mvn.w	r2, #2
 80023b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2201      	movs	r2, #1
 80023ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	699b      	ldr	r3, [r3, #24]
 80023c2:	f003 0303 	and.w	r3, r3, #3
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d003      	beq.n	80023d2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f7fe f93e 	bl	800064c <HAL_TIM_IC_CaptureCallback>
 80023d0:	e005      	b.n	80023de <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f000 fa76 	bl	80028c4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	f000 fa7d 	bl	80028d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2200      	movs	r2, #0
 80023e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	f003 0304 	and.w	r3, r3, #4
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d020      	beq.n	8002430 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	f003 0304 	and.w	r3, r3, #4
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d01b      	beq.n	8002430 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f06f 0204 	mvn.w	r2, #4
 8002400:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2202      	movs	r2, #2
 8002406:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	699b      	ldr	r3, [r3, #24]
 800240e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002412:	2b00      	cmp	r3, #0
 8002414:	d003      	beq.n	800241e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	f7fe f918 	bl	800064c <HAL_TIM_IC_CaptureCallback>
 800241c:	e005      	b.n	800242a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	f000 fa50 	bl	80028c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	f000 fa57 	bl	80028d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2200      	movs	r2, #0
 800242e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	f003 0308 	and.w	r3, r3, #8
 8002436:	2b00      	cmp	r3, #0
 8002438:	d020      	beq.n	800247c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	f003 0308 	and.w	r3, r3, #8
 8002440:	2b00      	cmp	r3, #0
 8002442:	d01b      	beq.n	800247c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f06f 0208 	mvn.w	r2, #8
 800244c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2204      	movs	r2, #4
 8002452:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	69db      	ldr	r3, [r3, #28]
 800245a:	f003 0303 	and.w	r3, r3, #3
 800245e:	2b00      	cmp	r3, #0
 8002460:	d003      	beq.n	800246a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f7fe f8f2 	bl	800064c <HAL_TIM_IC_CaptureCallback>
 8002468:	e005      	b.n	8002476 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f000 fa2a 	bl	80028c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002470:	6878      	ldr	r0, [r7, #4]
 8002472:	f000 fa31 	bl	80028d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2200      	movs	r2, #0
 800247a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	f003 0310 	and.w	r3, r3, #16
 8002482:	2b00      	cmp	r3, #0
 8002484:	d020      	beq.n	80024c8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	f003 0310 	and.w	r3, r3, #16
 800248c:	2b00      	cmp	r3, #0
 800248e:	d01b      	beq.n	80024c8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f06f 0210 	mvn.w	r2, #16
 8002498:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2208      	movs	r2, #8
 800249e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	69db      	ldr	r3, [r3, #28]
 80024a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d003      	beq.n	80024b6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f7fe f8cc 	bl	800064c <HAL_TIM_IC_CaptureCallback>
 80024b4:	e005      	b.n	80024c2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f000 fa04 	bl	80028c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024bc:	6878      	ldr	r0, [r7, #4]
 80024be:	f000 fa0b 	bl	80028d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2200      	movs	r2, #0
 80024c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	f003 0301 	and.w	r3, r3, #1
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d00c      	beq.n	80024ec <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	f003 0301 	and.w	r3, r3, #1
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d007      	beq.n	80024ec <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f06f 0201 	mvn.w	r2, #1
 80024e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f000 f9e2 	bl	80028b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d00c      	beq.n	8002510 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d007      	beq.n	8002510 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002508:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f000 fcda 	bl	8002ec4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002516:	2b00      	cmp	r3, #0
 8002518:	d00c      	beq.n	8002534 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002520:	2b00      	cmp	r3, #0
 8002522:	d007      	beq.n	8002534 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800252c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	f000 f9dc 	bl	80028ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	f003 0320 	and.w	r3, r3, #32
 800253a:	2b00      	cmp	r3, #0
 800253c:	d00c      	beq.n	8002558 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	f003 0320 	and.w	r3, r3, #32
 8002544:	2b00      	cmp	r3, #0
 8002546:	d007      	beq.n	8002558 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f06f 0220 	mvn.w	r2, #32
 8002550:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f000 fcac 	bl	8002eb0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002558:	bf00      	nop
 800255a:	3710      	adds	r7, #16
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}

08002560 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b086      	sub	sp, #24
 8002564:	af00      	add	r7, sp, #0
 8002566:	60f8      	str	r0, [r7, #12]
 8002568:	60b9      	str	r1, [r7, #8]
 800256a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800256c:	2300      	movs	r3, #0
 800256e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002576:	2b01      	cmp	r3, #1
 8002578:	d101      	bne.n	800257e <HAL_TIM_IC_ConfigChannel+0x1e>
 800257a:	2302      	movs	r3, #2
 800257c:	e088      	b.n	8002690 <HAL_TIM_IC_ConfigChannel+0x130>
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2201      	movs	r2, #1
 8002582:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d11b      	bne.n	80025c4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800259c:	f000 fa3c 	bl	8002a18 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	699a      	ldr	r2, [r3, #24]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f022 020c 	bic.w	r2, r2, #12
 80025ae:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	6999      	ldr	r1, [r3, #24]
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	689a      	ldr	r2, [r3, #8]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	430a      	orrs	r2, r1
 80025c0:	619a      	str	r2, [r3, #24]
 80025c2:	e060      	b.n	8002686 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2b04      	cmp	r3, #4
 80025c8:	d11c      	bne.n	8002604 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80025da:	f000 fab4 	bl	8002b46 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	699a      	ldr	r2, [r3, #24]
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80025ec:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	6999      	ldr	r1, [r3, #24]
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	021a      	lsls	r2, r3, #8
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	430a      	orrs	r2, r1
 8002600:	619a      	str	r2, [r3, #24]
 8002602:	e040      	b.n	8002686 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2b08      	cmp	r3, #8
 8002608:	d11b      	bne.n	8002642 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800261a:	f000 fb01 	bl	8002c20 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	69da      	ldr	r2, [r3, #28]
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f022 020c 	bic.w	r2, r2, #12
 800262c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	69d9      	ldr	r1, [r3, #28]
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	689a      	ldr	r2, [r3, #8]
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	430a      	orrs	r2, r1
 800263e:	61da      	str	r2, [r3, #28]
 8002640:	e021      	b.n	8002686 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2b0c      	cmp	r3, #12
 8002646:	d11c      	bne.n	8002682 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8002658:	f000 fb1e 	bl	8002c98 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	69da      	ldr	r2, [r3, #28]
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800266a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	69d9      	ldr	r1, [r3, #28]
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	021a      	lsls	r2, r3, #8
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	430a      	orrs	r2, r1
 800267e:	61da      	str	r2, [r3, #28]
 8002680:	e001      	b.n	8002686 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2200      	movs	r2, #0
 800268a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800268e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002690:	4618      	mov	r0, r3
 8002692:	3718      	adds	r7, #24
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}

08002698 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b084      	sub	sp, #16
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026a2:	2300      	movs	r3, #0
 80026a4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d101      	bne.n	80026b4 <HAL_TIM_ConfigClockSource+0x1c>
 80026b0:	2302      	movs	r3, #2
 80026b2:	e0b4      	b.n	800281e <HAL_TIM_ConfigClockSource+0x186>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2201      	movs	r2, #1
 80026b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2202      	movs	r2, #2
 80026c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80026d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80026da:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	68ba      	ldr	r2, [r7, #8]
 80026e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80026ec:	d03e      	beq.n	800276c <HAL_TIM_ConfigClockSource+0xd4>
 80026ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80026f2:	f200 8087 	bhi.w	8002804 <HAL_TIM_ConfigClockSource+0x16c>
 80026f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80026fa:	f000 8086 	beq.w	800280a <HAL_TIM_ConfigClockSource+0x172>
 80026fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002702:	d87f      	bhi.n	8002804 <HAL_TIM_ConfigClockSource+0x16c>
 8002704:	2b70      	cmp	r3, #112	@ 0x70
 8002706:	d01a      	beq.n	800273e <HAL_TIM_ConfigClockSource+0xa6>
 8002708:	2b70      	cmp	r3, #112	@ 0x70
 800270a:	d87b      	bhi.n	8002804 <HAL_TIM_ConfigClockSource+0x16c>
 800270c:	2b60      	cmp	r3, #96	@ 0x60
 800270e:	d050      	beq.n	80027b2 <HAL_TIM_ConfigClockSource+0x11a>
 8002710:	2b60      	cmp	r3, #96	@ 0x60
 8002712:	d877      	bhi.n	8002804 <HAL_TIM_ConfigClockSource+0x16c>
 8002714:	2b50      	cmp	r3, #80	@ 0x50
 8002716:	d03c      	beq.n	8002792 <HAL_TIM_ConfigClockSource+0xfa>
 8002718:	2b50      	cmp	r3, #80	@ 0x50
 800271a:	d873      	bhi.n	8002804 <HAL_TIM_ConfigClockSource+0x16c>
 800271c:	2b40      	cmp	r3, #64	@ 0x40
 800271e:	d058      	beq.n	80027d2 <HAL_TIM_ConfigClockSource+0x13a>
 8002720:	2b40      	cmp	r3, #64	@ 0x40
 8002722:	d86f      	bhi.n	8002804 <HAL_TIM_ConfigClockSource+0x16c>
 8002724:	2b30      	cmp	r3, #48	@ 0x30
 8002726:	d064      	beq.n	80027f2 <HAL_TIM_ConfigClockSource+0x15a>
 8002728:	2b30      	cmp	r3, #48	@ 0x30
 800272a:	d86b      	bhi.n	8002804 <HAL_TIM_ConfigClockSource+0x16c>
 800272c:	2b20      	cmp	r3, #32
 800272e:	d060      	beq.n	80027f2 <HAL_TIM_ConfigClockSource+0x15a>
 8002730:	2b20      	cmp	r3, #32
 8002732:	d867      	bhi.n	8002804 <HAL_TIM_ConfigClockSource+0x16c>
 8002734:	2b00      	cmp	r3, #0
 8002736:	d05c      	beq.n	80027f2 <HAL_TIM_ConfigClockSource+0x15a>
 8002738:	2b10      	cmp	r3, #16
 800273a:	d05a      	beq.n	80027f2 <HAL_TIM_ConfigClockSource+0x15a>
 800273c:	e062      	b.n	8002804 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800274e:	f000 fafb 	bl	8002d48 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002760:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	68ba      	ldr	r2, [r7, #8]
 8002768:	609a      	str	r2, [r3, #8]
      break;
 800276a:	e04f      	b.n	800280c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800277c:	f000 fae4 	bl	8002d48 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	689a      	ldr	r2, [r3, #8]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800278e:	609a      	str	r2, [r3, #8]
      break;
 8002790:	e03c      	b.n	800280c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800279e:	461a      	mov	r2, r3
 80027a0:	f000 f9a2 	bl	8002ae8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	2150      	movs	r1, #80	@ 0x50
 80027aa:	4618      	mov	r0, r3
 80027ac:	f000 fab1 	bl	8002d12 <TIM_ITRx_SetConfig>
      break;
 80027b0:	e02c      	b.n	800280c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80027be:	461a      	mov	r2, r3
 80027c0:	f000 f9fe 	bl	8002bc0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	2160      	movs	r1, #96	@ 0x60
 80027ca:	4618      	mov	r0, r3
 80027cc:	f000 faa1 	bl	8002d12 <TIM_ITRx_SetConfig>
      break;
 80027d0:	e01c      	b.n	800280c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80027de:	461a      	mov	r2, r3
 80027e0:	f000 f982 	bl	8002ae8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	2140      	movs	r1, #64	@ 0x40
 80027ea:	4618      	mov	r0, r3
 80027ec:	f000 fa91 	bl	8002d12 <TIM_ITRx_SetConfig>
      break;
 80027f0:	e00c      	b.n	800280c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4619      	mov	r1, r3
 80027fc:	4610      	mov	r0, r2
 80027fe:	f000 fa88 	bl	8002d12 <TIM_ITRx_SetConfig>
      break;
 8002802:	e003      	b.n	800280c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	73fb      	strb	r3, [r7, #15]
      break;
 8002808:	e000      	b.n	800280c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800280a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2201      	movs	r2, #1
 8002810:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2200      	movs	r2, #0
 8002818:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800281c:	7bfb      	ldrb	r3, [r7, #15]
}
 800281e:	4618      	mov	r0, r3
 8002820:	3710      	adds	r7, #16
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}
	...

08002828 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002828:	b480      	push	{r7}
 800282a:	b085      	sub	sp, #20
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8002832:	2300      	movs	r3, #0
 8002834:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	2b0c      	cmp	r3, #12
 800283a:	d831      	bhi.n	80028a0 <HAL_TIM_ReadCapturedValue+0x78>
 800283c:	a201      	add	r2, pc, #4	@ (adr r2, 8002844 <HAL_TIM_ReadCapturedValue+0x1c>)
 800283e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002842:	bf00      	nop
 8002844:	08002879 	.word	0x08002879
 8002848:	080028a1 	.word	0x080028a1
 800284c:	080028a1 	.word	0x080028a1
 8002850:	080028a1 	.word	0x080028a1
 8002854:	08002883 	.word	0x08002883
 8002858:	080028a1 	.word	0x080028a1
 800285c:	080028a1 	.word	0x080028a1
 8002860:	080028a1 	.word	0x080028a1
 8002864:	0800288d 	.word	0x0800288d
 8002868:	080028a1 	.word	0x080028a1
 800286c:	080028a1 	.word	0x080028a1
 8002870:	080028a1 	.word	0x080028a1
 8002874:	08002897 	.word	0x08002897
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800287e:	60fb      	str	r3, [r7, #12]

      break;
 8002880:	e00f      	b.n	80028a2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002888:	60fb      	str	r3, [r7, #12]

      break;
 800288a:	e00a      	b.n	80028a2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002892:	60fb      	str	r3, [r7, #12]

      break;
 8002894:	e005      	b.n	80028a2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800289c:	60fb      	str	r3, [r7, #12]

      break;
 800289e:	e000      	b.n	80028a2 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80028a0:	bf00      	nop
  }

  return tmpreg;
 80028a2:	68fb      	ldr	r3, [r7, #12]
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3714      	adds	r7, #20
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr

080028b0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80028b8:	bf00      	nop
 80028ba:	370c      	adds	r7, #12
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr

080028c4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b083      	sub	sp, #12
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80028cc:	bf00      	nop
 80028ce:	370c      	adds	r7, #12
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr

080028d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80028e0:	bf00      	nop
 80028e2:	370c      	adds	r7, #12
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr

080028ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b083      	sub	sp, #12
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80028f4:	bf00      	nop
 80028f6:	370c      	adds	r7, #12
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr

08002900 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002900:	b480      	push	{r7}
 8002902:	b085      	sub	sp, #20
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	4a3a      	ldr	r2, [pc, #232]	@ (80029fc <TIM_Base_SetConfig+0xfc>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d00f      	beq.n	8002938 <TIM_Base_SetConfig+0x38>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800291e:	d00b      	beq.n	8002938 <TIM_Base_SetConfig+0x38>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	4a37      	ldr	r2, [pc, #220]	@ (8002a00 <TIM_Base_SetConfig+0x100>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d007      	beq.n	8002938 <TIM_Base_SetConfig+0x38>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	4a36      	ldr	r2, [pc, #216]	@ (8002a04 <TIM_Base_SetConfig+0x104>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d003      	beq.n	8002938 <TIM_Base_SetConfig+0x38>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	4a35      	ldr	r2, [pc, #212]	@ (8002a08 <TIM_Base_SetConfig+0x108>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d108      	bne.n	800294a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800293e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	68fa      	ldr	r2, [r7, #12]
 8002946:	4313      	orrs	r3, r2
 8002948:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4a2b      	ldr	r2, [pc, #172]	@ (80029fc <TIM_Base_SetConfig+0xfc>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d01b      	beq.n	800298a <TIM_Base_SetConfig+0x8a>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002958:	d017      	beq.n	800298a <TIM_Base_SetConfig+0x8a>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	4a28      	ldr	r2, [pc, #160]	@ (8002a00 <TIM_Base_SetConfig+0x100>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d013      	beq.n	800298a <TIM_Base_SetConfig+0x8a>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4a27      	ldr	r2, [pc, #156]	@ (8002a04 <TIM_Base_SetConfig+0x104>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d00f      	beq.n	800298a <TIM_Base_SetConfig+0x8a>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	4a26      	ldr	r2, [pc, #152]	@ (8002a08 <TIM_Base_SetConfig+0x108>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d00b      	beq.n	800298a <TIM_Base_SetConfig+0x8a>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4a25      	ldr	r2, [pc, #148]	@ (8002a0c <TIM_Base_SetConfig+0x10c>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d007      	beq.n	800298a <TIM_Base_SetConfig+0x8a>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	4a24      	ldr	r2, [pc, #144]	@ (8002a10 <TIM_Base_SetConfig+0x110>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d003      	beq.n	800298a <TIM_Base_SetConfig+0x8a>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	4a23      	ldr	r2, [pc, #140]	@ (8002a14 <TIM_Base_SetConfig+0x114>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d108      	bne.n	800299c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002990:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	68db      	ldr	r3, [r3, #12]
 8002996:	68fa      	ldr	r2, [r7, #12]
 8002998:	4313      	orrs	r3, r2
 800299a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	695b      	ldr	r3, [r3, #20]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	68fa      	ldr	r2, [r7, #12]
 80029ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	689a      	ldr	r2, [r3, #8]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	4a0e      	ldr	r2, [pc, #56]	@ (80029fc <TIM_Base_SetConfig+0xfc>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d103      	bne.n	80029d0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	691a      	ldr	r2, [r3, #16]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2201      	movs	r2, #1
 80029d4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	691b      	ldr	r3, [r3, #16]
 80029da:	f003 0301 	and.w	r3, r3, #1
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d105      	bne.n	80029ee <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	691b      	ldr	r3, [r3, #16]
 80029e6:	f023 0201 	bic.w	r2, r3, #1
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	611a      	str	r2, [r3, #16]
  }
}
 80029ee:	bf00      	nop
 80029f0:	3714      	adds	r7, #20
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr
 80029fa:	bf00      	nop
 80029fc:	40010000 	.word	0x40010000
 8002a00:	40000400 	.word	0x40000400
 8002a04:	40000800 	.word	0x40000800
 8002a08:	40000c00 	.word	0x40000c00
 8002a0c:	40014000 	.word	0x40014000
 8002a10:	40014400 	.word	0x40014400
 8002a14:	40014800 	.word	0x40014800

08002a18 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b087      	sub	sp, #28
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	60f8      	str	r0, [r7, #12]
 8002a20:	60b9      	str	r1, [r7, #8]
 8002a22:	607a      	str	r2, [r7, #4]
 8002a24:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	6a1b      	ldr	r3, [r3, #32]
 8002a2a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	6a1b      	ldr	r3, [r3, #32]
 8002a30:	f023 0201 	bic.w	r2, r3, #1
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	699b      	ldr	r3, [r3, #24]
 8002a3c:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	4a24      	ldr	r2, [pc, #144]	@ (8002ad4 <TIM_TI1_SetConfig+0xbc>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d013      	beq.n	8002a6e <TIM_TI1_SetConfig+0x56>
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a4c:	d00f      	beq.n	8002a6e <TIM_TI1_SetConfig+0x56>
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	4a21      	ldr	r2, [pc, #132]	@ (8002ad8 <TIM_TI1_SetConfig+0xc0>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d00b      	beq.n	8002a6e <TIM_TI1_SetConfig+0x56>
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	4a20      	ldr	r2, [pc, #128]	@ (8002adc <TIM_TI1_SetConfig+0xc4>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d007      	beq.n	8002a6e <TIM_TI1_SetConfig+0x56>
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	4a1f      	ldr	r2, [pc, #124]	@ (8002ae0 <TIM_TI1_SetConfig+0xc8>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d003      	beq.n	8002a6e <TIM_TI1_SetConfig+0x56>
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	4a1e      	ldr	r2, [pc, #120]	@ (8002ae4 <TIM_TI1_SetConfig+0xcc>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d101      	bne.n	8002a72 <TIM_TI1_SetConfig+0x5a>
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e000      	b.n	8002a74 <TIM_TI1_SetConfig+0x5c>
 8002a72:	2300      	movs	r3, #0
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d008      	beq.n	8002a8a <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	f023 0303 	bic.w	r3, r3, #3
 8002a7e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002a80:	697a      	ldr	r2, [r7, #20]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	4313      	orrs	r3, r2
 8002a86:	617b      	str	r3, [r7, #20]
 8002a88:	e003      	b.n	8002a92 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	f043 0301 	orr.w	r3, r3, #1
 8002a90:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002a98:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	011b      	lsls	r3, r3, #4
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	697a      	ldr	r2, [r7, #20]
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	f023 030a 	bic.w	r3, r3, #10
 8002aac:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	f003 030a 	and.w	r3, r3, #10
 8002ab4:	693a      	ldr	r2, [r7, #16]
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	697a      	ldr	r2, [r7, #20]
 8002abe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	693a      	ldr	r2, [r7, #16]
 8002ac4:	621a      	str	r2, [r3, #32]
}
 8002ac6:	bf00      	nop
 8002ac8:	371c      	adds	r7, #28
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr
 8002ad2:	bf00      	nop
 8002ad4:	40010000 	.word	0x40010000
 8002ad8:	40000400 	.word	0x40000400
 8002adc:	40000800 	.word	0x40000800
 8002ae0:	40000c00 	.word	0x40000c00
 8002ae4:	40014000 	.word	0x40014000

08002ae8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b087      	sub	sp, #28
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	60f8      	str	r0, [r7, #12]
 8002af0:	60b9      	str	r1, [r7, #8]
 8002af2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	6a1b      	ldr	r3, [r3, #32]
 8002af8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	6a1b      	ldr	r3, [r3, #32]
 8002afe:	f023 0201 	bic.w	r2, r3, #1
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	699b      	ldr	r3, [r3, #24]
 8002b0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002b12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	011b      	lsls	r3, r3, #4
 8002b18:	693a      	ldr	r2, [r7, #16]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	f023 030a 	bic.w	r3, r3, #10
 8002b24:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002b26:	697a      	ldr	r2, [r7, #20]
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	693a      	ldr	r2, [r7, #16]
 8002b32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	697a      	ldr	r2, [r7, #20]
 8002b38:	621a      	str	r2, [r3, #32]
}
 8002b3a:	bf00      	nop
 8002b3c:	371c      	adds	r7, #28
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr

08002b46 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002b46:	b480      	push	{r7}
 8002b48:	b087      	sub	sp, #28
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	60f8      	str	r0, [r7, #12]
 8002b4e:	60b9      	str	r1, [r7, #8]
 8002b50:	607a      	str	r2, [r7, #4]
 8002b52:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	6a1b      	ldr	r3, [r3, #32]
 8002b58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	6a1b      	ldr	r3, [r3, #32]
 8002b5e:	f023 0210 	bic.w	r2, r3, #16
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	699b      	ldr	r3, [r3, #24]
 8002b6a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	021b      	lsls	r3, r3, #8
 8002b78:	693a      	ldr	r2, [r7, #16]
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002b84:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	031b      	lsls	r3, r3, #12
 8002b8a:	b29b      	uxth	r3, r3
 8002b8c:	693a      	ldr	r2, [r7, #16]
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002b98:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	011b      	lsls	r3, r3, #4
 8002b9e:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8002ba2:	697a      	ldr	r2, [r7, #20]
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	693a      	ldr	r2, [r7, #16]
 8002bac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	697a      	ldr	r2, [r7, #20]
 8002bb2:	621a      	str	r2, [r3, #32]
}
 8002bb4:	bf00      	nop
 8002bb6:	371c      	adds	r7, #28
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbe:	4770      	bx	lr

08002bc0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b087      	sub	sp, #28
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	60f8      	str	r0, [r7, #12]
 8002bc8:	60b9      	str	r1, [r7, #8]
 8002bca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	6a1b      	ldr	r3, [r3, #32]
 8002bd0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	6a1b      	ldr	r3, [r3, #32]
 8002bd6:	f023 0210 	bic.w	r2, r3, #16
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	699b      	ldr	r3, [r3, #24]
 8002be2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002bea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	031b      	lsls	r3, r3, #12
 8002bf0:	693a      	ldr	r2, [r7, #16]
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002bfc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	011b      	lsls	r3, r3, #4
 8002c02:	697a      	ldr	r2, [r7, #20]
 8002c04:	4313      	orrs	r3, r2
 8002c06:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	693a      	ldr	r2, [r7, #16]
 8002c0c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	697a      	ldr	r2, [r7, #20]
 8002c12:	621a      	str	r2, [r3, #32]
}
 8002c14:	bf00      	nop
 8002c16:	371c      	adds	r7, #28
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr

08002c20 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b087      	sub	sp, #28
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	60f8      	str	r0, [r7, #12]
 8002c28:	60b9      	str	r1, [r7, #8]
 8002c2a:	607a      	str	r2, [r7, #4]
 8002c2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	6a1b      	ldr	r3, [r3, #32]
 8002c32:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	6a1b      	ldr	r3, [r3, #32]
 8002c38:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	69db      	ldr	r3, [r3, #28]
 8002c44:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	f023 0303 	bic.w	r3, r3, #3
 8002c4c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8002c4e:	693a      	ldr	r2, [r7, #16]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	4313      	orrs	r3, r2
 8002c54:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002c5c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	011b      	lsls	r3, r3, #4
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	693a      	ldr	r2, [r7, #16]
 8002c66:	4313      	orrs	r3, r2
 8002c68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8002c70:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	021b      	lsls	r3, r3, #8
 8002c76:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8002c7a:	697a      	ldr	r2, [r7, #20]
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	693a      	ldr	r2, [r7, #16]
 8002c84:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	697a      	ldr	r2, [r7, #20]
 8002c8a:	621a      	str	r2, [r3, #32]
}
 8002c8c:	bf00      	nop
 8002c8e:	371c      	adds	r7, #28
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr

08002c98 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b087      	sub	sp, #28
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	60f8      	str	r0, [r7, #12]
 8002ca0:	60b9      	str	r1, [r7, #8]
 8002ca2:	607a      	str	r2, [r7, #4]
 8002ca4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	6a1b      	ldr	r3, [r3, #32]
 8002caa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	6a1b      	ldr	r3, [r3, #32]
 8002cb0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	69db      	ldr	r3, [r3, #28]
 8002cbc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002cc4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	021b      	lsls	r3, r3, #8
 8002cca:	693a      	ldr	r2, [r7, #16]
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002cd6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	031b      	lsls	r3, r3, #12
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	693a      	ldr	r2, [r7, #16]
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8002cea:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	031b      	lsls	r3, r3, #12
 8002cf0:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8002cf4:	697a      	ldr	r2, [r7, #20]
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	693a      	ldr	r2, [r7, #16]
 8002cfe:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	697a      	ldr	r2, [r7, #20]
 8002d04:	621a      	str	r2, [r3, #32]
}
 8002d06:	bf00      	nop
 8002d08:	371c      	adds	r7, #28
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr

08002d12 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002d12:	b480      	push	{r7}
 8002d14:	b085      	sub	sp, #20
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	6078      	str	r0, [r7, #4]
 8002d1a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d28:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002d2a:	683a      	ldr	r2, [r7, #0]
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	f043 0307 	orr.w	r3, r3, #7
 8002d34:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	68fa      	ldr	r2, [r7, #12]
 8002d3a:	609a      	str	r2, [r3, #8]
}
 8002d3c:	bf00      	nop
 8002d3e:	3714      	adds	r7, #20
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr

08002d48 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b087      	sub	sp, #28
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	60f8      	str	r0, [r7, #12]
 8002d50:	60b9      	str	r1, [r7, #8]
 8002d52:	607a      	str	r2, [r7, #4]
 8002d54:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002d62:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	021a      	lsls	r2, r3, #8
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	431a      	orrs	r2, r3
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	697a      	ldr	r2, [r7, #20]
 8002d72:	4313      	orrs	r3, r2
 8002d74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	697a      	ldr	r2, [r7, #20]
 8002d7a:	609a      	str	r2, [r3, #8]
}
 8002d7c:	bf00      	nop
 8002d7e:	371c      	adds	r7, #28
 8002d80:	46bd      	mov	sp, r7
 8002d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d86:	4770      	bx	lr

08002d88 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b087      	sub	sp, #28
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	60f8      	str	r0, [r7, #12]
 8002d90:	60b9      	str	r1, [r7, #8]
 8002d92:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	f003 031f 	and.w	r3, r3, #31
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002da0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	6a1a      	ldr	r2, [r3, #32]
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	43db      	mvns	r3, r3
 8002daa:	401a      	ands	r2, r3
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	6a1a      	ldr	r2, [r3, #32]
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	f003 031f 	and.w	r3, r3, #31
 8002dba:	6879      	ldr	r1, [r7, #4]
 8002dbc:	fa01 f303 	lsl.w	r3, r1, r3
 8002dc0:	431a      	orrs	r2, r3
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	621a      	str	r2, [r3, #32]
}
 8002dc6:	bf00      	nop
 8002dc8:	371c      	adds	r7, #28
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr
	...

08002dd4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b085      	sub	sp, #20
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d101      	bne.n	8002dec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002de8:	2302      	movs	r3, #2
 8002dea:	e050      	b.n	8002e8e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2201      	movs	r2, #1
 8002df0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2202      	movs	r2, #2
 8002df8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e12:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	68fa      	ldr	r2, [r7, #12]
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	68fa      	ldr	r2, [r7, #12]
 8002e24:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a1c      	ldr	r2, [pc, #112]	@ (8002e9c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d018      	beq.n	8002e62 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e38:	d013      	beq.n	8002e62 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a18      	ldr	r2, [pc, #96]	@ (8002ea0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d00e      	beq.n	8002e62 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a16      	ldr	r2, [pc, #88]	@ (8002ea4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d009      	beq.n	8002e62 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a15      	ldr	r2, [pc, #84]	@ (8002ea8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d004      	beq.n	8002e62 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a13      	ldr	r2, [pc, #76]	@ (8002eac <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d10c      	bne.n	8002e7c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002e68:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	68ba      	ldr	r2, [r7, #8]
 8002e70:	4313      	orrs	r3, r2
 8002e72:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	68ba      	ldr	r2, [r7, #8]
 8002e7a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2201      	movs	r2, #1
 8002e80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2200      	movs	r2, #0
 8002e88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002e8c:	2300      	movs	r3, #0
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3714      	adds	r7, #20
 8002e92:	46bd      	mov	sp, r7
 8002e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e98:	4770      	bx	lr
 8002e9a:	bf00      	nop
 8002e9c:	40010000 	.word	0x40010000
 8002ea0:	40000400 	.word	0x40000400
 8002ea4:	40000800 	.word	0x40000800
 8002ea8:	40000c00 	.word	0x40000c00
 8002eac:	40014000 	.word	0x40014000

08002eb0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b083      	sub	sp, #12
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002eb8:	bf00      	nop
 8002eba:	370c      	adds	r7, #12
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr

08002ec4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b083      	sub	sp, #12
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ecc:	bf00      	nop
 8002ece:	370c      	adds	r7, #12
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr

08002ed8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b082      	sub	sp, #8
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d101      	bne.n	8002eea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e042      	b.n	8002f70 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d106      	bne.n	8002f04 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f7fd ff36 	bl	8000d70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2224      	movs	r2, #36	@ 0x24
 8002f08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	68da      	ldr	r2, [r3, #12]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002f1a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	f000 fd69 	bl	80039f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	691a      	ldr	r2, [r3, #16]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002f30:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	695a      	ldr	r2, [r3, #20]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002f40:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	68da      	ldr	r2, [r3, #12]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002f50:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2200      	movs	r2, #0
 8002f56:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2220      	movs	r2, #32
 8002f5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2220      	movs	r2, #32
 8002f64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002f6e:	2300      	movs	r3, #0
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3708      	adds	r7, #8
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}

08002f78 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b08a      	sub	sp, #40	@ 0x28
 8002f7c:	af02      	add	r7, sp, #8
 8002f7e:	60f8      	str	r0, [r7, #12]
 8002f80:	60b9      	str	r1, [r7, #8]
 8002f82:	603b      	str	r3, [r7, #0]
 8002f84:	4613      	mov	r3, r2
 8002f86:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	2b20      	cmp	r3, #32
 8002f96:	d175      	bne.n	8003084 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d002      	beq.n	8002fa4 <HAL_UART_Transmit+0x2c>
 8002f9e:	88fb      	ldrh	r3, [r7, #6]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d101      	bne.n	8002fa8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e06e      	b.n	8003086 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2200      	movs	r2, #0
 8002fac:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2221      	movs	r2, #33	@ 0x21
 8002fb2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002fb6:	f7fd ffbb 	bl	8000f30 <HAL_GetTick>
 8002fba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	88fa      	ldrh	r2, [r7, #6]
 8002fc0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	88fa      	ldrh	r2, [r7, #6]
 8002fc6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002fd0:	d108      	bne.n	8002fe4 <HAL_UART_Transmit+0x6c>
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	691b      	ldr	r3, [r3, #16]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d104      	bne.n	8002fe4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	61bb      	str	r3, [r7, #24]
 8002fe2:	e003      	b.n	8002fec <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002fec:	e02e      	b.n	800304c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	9300      	str	r3, [sp, #0]
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	2180      	movs	r1, #128	@ 0x80
 8002ff8:	68f8      	ldr	r0, [r7, #12]
 8002ffa:	f000 fb05 	bl	8003608 <UART_WaitOnFlagUntilTimeout>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2b00      	cmp	r3, #0
 8003002:	d005      	beq.n	8003010 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2220      	movs	r2, #32
 8003008:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800300c:	2303      	movs	r3, #3
 800300e:	e03a      	b.n	8003086 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d10b      	bne.n	800302e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003016:	69bb      	ldr	r3, [r7, #24]
 8003018:	881b      	ldrh	r3, [r3, #0]
 800301a:	461a      	mov	r2, r3
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003024:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003026:	69bb      	ldr	r3, [r7, #24]
 8003028:	3302      	adds	r3, #2
 800302a:	61bb      	str	r3, [r7, #24]
 800302c:	e007      	b.n	800303e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	781a      	ldrb	r2, [r3, #0]
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003038:	69fb      	ldr	r3, [r7, #28]
 800303a:	3301      	adds	r3, #1
 800303c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003042:	b29b      	uxth	r3, r3
 8003044:	3b01      	subs	r3, #1
 8003046:	b29a      	uxth	r2, r3
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003050:	b29b      	uxth	r3, r3
 8003052:	2b00      	cmp	r3, #0
 8003054:	d1cb      	bne.n	8002fee <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	9300      	str	r3, [sp, #0]
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	2200      	movs	r2, #0
 800305e:	2140      	movs	r1, #64	@ 0x40
 8003060:	68f8      	ldr	r0, [r7, #12]
 8003062:	f000 fad1 	bl	8003608 <UART_WaitOnFlagUntilTimeout>
 8003066:	4603      	mov	r3, r0
 8003068:	2b00      	cmp	r3, #0
 800306a:	d005      	beq.n	8003078 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2220      	movs	r2, #32
 8003070:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003074:	2303      	movs	r3, #3
 8003076:	e006      	b.n	8003086 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2220      	movs	r2, #32
 800307c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003080:	2300      	movs	r3, #0
 8003082:	e000      	b.n	8003086 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003084:	2302      	movs	r3, #2
  }
}
 8003086:	4618      	mov	r0, r3
 8003088:	3720      	adds	r7, #32
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
	...

08003090 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b0ba      	sub	sp, #232	@ 0xe8
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	68db      	ldr	r3, [r3, #12]
 80030a8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	695b      	ldr	r3, [r3, #20]
 80030b2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80030b6:	2300      	movs	r3, #0
 80030b8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80030bc:	2300      	movs	r3, #0
 80030be:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80030c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030c6:	f003 030f 	and.w	r3, r3, #15
 80030ca:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80030ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d10f      	bne.n	80030f6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80030d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030da:	f003 0320 	and.w	r3, r3, #32
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d009      	beq.n	80030f6 <HAL_UART_IRQHandler+0x66>
 80030e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80030e6:	f003 0320 	and.w	r3, r3, #32
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d003      	beq.n	80030f6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f000 fbc2 	bl	8003878 <UART_Receive_IT>
      return;
 80030f4:	e25b      	b.n	80035ae <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80030f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	f000 80de 	beq.w	80032bc <HAL_UART_IRQHandler+0x22c>
 8003100:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003104:	f003 0301 	and.w	r3, r3, #1
 8003108:	2b00      	cmp	r3, #0
 800310a:	d106      	bne.n	800311a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800310c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003110:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003114:	2b00      	cmp	r3, #0
 8003116:	f000 80d1 	beq.w	80032bc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800311a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800311e:	f003 0301 	and.w	r3, r3, #1
 8003122:	2b00      	cmp	r3, #0
 8003124:	d00b      	beq.n	800313e <HAL_UART_IRQHandler+0xae>
 8003126:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800312a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800312e:	2b00      	cmp	r3, #0
 8003130:	d005      	beq.n	800313e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003136:	f043 0201 	orr.w	r2, r3, #1
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800313e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003142:	f003 0304 	and.w	r3, r3, #4
 8003146:	2b00      	cmp	r3, #0
 8003148:	d00b      	beq.n	8003162 <HAL_UART_IRQHandler+0xd2>
 800314a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800314e:	f003 0301 	and.w	r3, r3, #1
 8003152:	2b00      	cmp	r3, #0
 8003154:	d005      	beq.n	8003162 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800315a:	f043 0202 	orr.w	r2, r3, #2
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003162:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003166:	f003 0302 	and.w	r3, r3, #2
 800316a:	2b00      	cmp	r3, #0
 800316c:	d00b      	beq.n	8003186 <HAL_UART_IRQHandler+0xf6>
 800316e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003172:	f003 0301 	and.w	r3, r3, #1
 8003176:	2b00      	cmp	r3, #0
 8003178:	d005      	beq.n	8003186 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800317e:	f043 0204 	orr.w	r2, r3, #4
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003186:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800318a:	f003 0308 	and.w	r3, r3, #8
 800318e:	2b00      	cmp	r3, #0
 8003190:	d011      	beq.n	80031b6 <HAL_UART_IRQHandler+0x126>
 8003192:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003196:	f003 0320 	and.w	r3, r3, #32
 800319a:	2b00      	cmp	r3, #0
 800319c:	d105      	bne.n	80031aa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800319e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80031a2:	f003 0301 	and.w	r3, r3, #1
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d005      	beq.n	80031b6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031ae:	f043 0208 	orr.w	r2, r3, #8
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	f000 81f2 	beq.w	80035a4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80031c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031c4:	f003 0320 	and.w	r3, r3, #32
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d008      	beq.n	80031de <HAL_UART_IRQHandler+0x14e>
 80031cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80031d0:	f003 0320 	and.w	r3, r3, #32
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d002      	beq.n	80031de <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	f000 fb4d 	bl	8003878 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	695b      	ldr	r3, [r3, #20]
 80031e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031e8:	2b40      	cmp	r3, #64	@ 0x40
 80031ea:	bf0c      	ite	eq
 80031ec:	2301      	moveq	r3, #1
 80031ee:	2300      	movne	r3, #0
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031fa:	f003 0308 	and.w	r3, r3, #8
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d103      	bne.n	800320a <HAL_UART_IRQHandler+0x17a>
 8003202:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003206:	2b00      	cmp	r3, #0
 8003208:	d04f      	beq.n	80032aa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f000 fa55 	bl	80036ba <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	695b      	ldr	r3, [r3, #20]
 8003216:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800321a:	2b40      	cmp	r3, #64	@ 0x40
 800321c:	d141      	bne.n	80032a2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	3314      	adds	r3, #20
 8003224:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003228:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800322c:	e853 3f00 	ldrex	r3, [r3]
 8003230:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003234:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003238:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800323c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	3314      	adds	r3, #20
 8003246:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800324a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800324e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003252:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003256:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800325a:	e841 2300 	strex	r3, r2, [r1]
 800325e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003262:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003266:	2b00      	cmp	r3, #0
 8003268:	d1d9      	bne.n	800321e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800326e:	2b00      	cmp	r3, #0
 8003270:	d013      	beq.n	800329a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003276:	4a7e      	ldr	r2, [pc, #504]	@ (8003470 <HAL_UART_IRQHandler+0x3e0>)
 8003278:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800327e:	4618      	mov	r0, r3
 8003280:	f7fe f807 	bl	8001292 <HAL_DMA_Abort_IT>
 8003284:	4603      	mov	r3, r0
 8003286:	2b00      	cmp	r3, #0
 8003288:	d016      	beq.n	80032b8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800328e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003294:	4610      	mov	r0, r2
 8003296:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003298:	e00e      	b.n	80032b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f000 f99e 	bl	80035dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032a0:	e00a      	b.n	80032b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f000 f99a 	bl	80035dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032a8:	e006      	b.n	80032b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	f000 f996 	bl	80035dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80032b6:	e175      	b.n	80035a4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032b8:	bf00      	nop
    return;
 80032ba:	e173      	b.n	80035a4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	f040 814f 	bne.w	8003564 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80032c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032ca:	f003 0310 	and.w	r3, r3, #16
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	f000 8148 	beq.w	8003564 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80032d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80032d8:	f003 0310 	and.w	r3, r3, #16
 80032dc:	2b00      	cmp	r3, #0
 80032de:	f000 8141 	beq.w	8003564 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80032e2:	2300      	movs	r3, #0
 80032e4:	60bb      	str	r3, [r7, #8]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	60bb      	str	r3, [r7, #8]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	60bb      	str	r3, [r7, #8]
 80032f6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	695b      	ldr	r3, [r3, #20]
 80032fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003302:	2b40      	cmp	r3, #64	@ 0x40
 8003304:	f040 80b6 	bne.w	8003474 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003314:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003318:	2b00      	cmp	r3, #0
 800331a:	f000 8145 	beq.w	80035a8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003322:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003326:	429a      	cmp	r2, r3
 8003328:	f080 813e 	bcs.w	80035a8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003332:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003338:	69db      	ldr	r3, [r3, #28]
 800333a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800333e:	f000 8088 	beq.w	8003452 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	330c      	adds	r3, #12
 8003348:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800334c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003350:	e853 3f00 	ldrex	r3, [r3]
 8003354:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003358:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800335c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003360:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	330c      	adds	r3, #12
 800336a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800336e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003372:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003376:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800337a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800337e:	e841 2300 	strex	r3, r2, [r1]
 8003382:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003386:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800338a:	2b00      	cmp	r3, #0
 800338c:	d1d9      	bne.n	8003342 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	3314      	adds	r3, #20
 8003394:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003396:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003398:	e853 3f00 	ldrex	r3, [r3]
 800339c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800339e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80033a0:	f023 0301 	bic.w	r3, r3, #1
 80033a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	3314      	adds	r3, #20
 80033ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80033b2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80033b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033b8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80033ba:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80033be:	e841 2300 	strex	r3, r2, [r1]
 80033c2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80033c4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d1e1      	bne.n	800338e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	3314      	adds	r3, #20
 80033d0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033d2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80033d4:	e853 3f00 	ldrex	r3, [r3]
 80033d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80033da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80033dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80033e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	3314      	adds	r3, #20
 80033ea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80033ee:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80033f0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033f2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80033f4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80033f6:	e841 2300 	strex	r3, r2, [r1]
 80033fa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80033fc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d1e3      	bne.n	80033ca <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2220      	movs	r2, #32
 8003406:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2200      	movs	r2, #0
 800340e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	330c      	adds	r3, #12
 8003416:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003418:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800341a:	e853 3f00 	ldrex	r3, [r3]
 800341e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003420:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003422:	f023 0310 	bic.w	r3, r3, #16
 8003426:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	330c      	adds	r3, #12
 8003430:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003434:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003436:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003438:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800343a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800343c:	e841 2300 	strex	r3, r2, [r1]
 8003440:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003442:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003444:	2b00      	cmp	r3, #0
 8003446:	d1e3      	bne.n	8003410 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800344c:	4618      	mov	r0, r3
 800344e:	f7fd feb0 	bl	80011b2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2202      	movs	r2, #2
 8003456:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003460:	b29b      	uxth	r3, r3
 8003462:	1ad3      	subs	r3, r2, r3
 8003464:	b29b      	uxth	r3, r3
 8003466:	4619      	mov	r1, r3
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	f000 f8c1 	bl	80035f0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800346e:	e09b      	b.n	80035a8 <HAL_UART_IRQHandler+0x518>
 8003470:	08003781 	.word	0x08003781
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800347c:	b29b      	uxth	r3, r3
 800347e:	1ad3      	subs	r3, r2, r3
 8003480:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003488:	b29b      	uxth	r3, r3
 800348a:	2b00      	cmp	r3, #0
 800348c:	f000 808e 	beq.w	80035ac <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003490:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003494:	2b00      	cmp	r3, #0
 8003496:	f000 8089 	beq.w	80035ac <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	330c      	adds	r3, #12
 80034a0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034a4:	e853 3f00 	ldrex	r3, [r3]
 80034a8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80034aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034ac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80034b0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	330c      	adds	r3, #12
 80034ba:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80034be:	647a      	str	r2, [r7, #68]	@ 0x44
 80034c0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034c2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80034c4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80034c6:	e841 2300 	strex	r3, r2, [r1]
 80034ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80034cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d1e3      	bne.n	800349a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	3314      	adds	r3, #20
 80034d8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034dc:	e853 3f00 	ldrex	r3, [r3]
 80034e0:	623b      	str	r3, [r7, #32]
   return(result);
 80034e2:	6a3b      	ldr	r3, [r7, #32]
 80034e4:	f023 0301 	bic.w	r3, r3, #1
 80034e8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	3314      	adds	r3, #20
 80034f2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80034f6:	633a      	str	r2, [r7, #48]	@ 0x30
 80034f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80034fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80034fe:	e841 2300 	strex	r3, r2, [r1]
 8003502:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003504:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003506:	2b00      	cmp	r3, #0
 8003508:	d1e3      	bne.n	80034d2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2220      	movs	r2, #32
 800350e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2200      	movs	r2, #0
 8003516:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	330c      	adds	r3, #12
 800351e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	e853 3f00 	ldrex	r3, [r3]
 8003526:	60fb      	str	r3, [r7, #12]
   return(result);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f023 0310 	bic.w	r3, r3, #16
 800352e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	330c      	adds	r3, #12
 8003538:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800353c:	61fa      	str	r2, [r7, #28]
 800353e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003540:	69b9      	ldr	r1, [r7, #24]
 8003542:	69fa      	ldr	r2, [r7, #28]
 8003544:	e841 2300 	strex	r3, r2, [r1]
 8003548:	617b      	str	r3, [r7, #20]
   return(result);
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d1e3      	bne.n	8003518 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2202      	movs	r2, #2
 8003554:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003556:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800355a:	4619      	mov	r1, r3
 800355c:	6878      	ldr	r0, [r7, #4]
 800355e:	f000 f847 	bl	80035f0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003562:	e023      	b.n	80035ac <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003564:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003568:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800356c:	2b00      	cmp	r3, #0
 800356e:	d009      	beq.n	8003584 <HAL_UART_IRQHandler+0x4f4>
 8003570:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003574:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003578:	2b00      	cmp	r3, #0
 800357a:	d003      	beq.n	8003584 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800357c:	6878      	ldr	r0, [r7, #4]
 800357e:	f000 f913 	bl	80037a8 <UART_Transmit_IT>
    return;
 8003582:	e014      	b.n	80035ae <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003584:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003588:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800358c:	2b00      	cmp	r3, #0
 800358e:	d00e      	beq.n	80035ae <HAL_UART_IRQHandler+0x51e>
 8003590:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003594:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003598:	2b00      	cmp	r3, #0
 800359a:	d008      	beq.n	80035ae <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	f000 f953 	bl	8003848 <UART_EndTransmit_IT>
    return;
 80035a2:	e004      	b.n	80035ae <HAL_UART_IRQHandler+0x51e>
    return;
 80035a4:	bf00      	nop
 80035a6:	e002      	b.n	80035ae <HAL_UART_IRQHandler+0x51e>
      return;
 80035a8:	bf00      	nop
 80035aa:	e000      	b.n	80035ae <HAL_UART_IRQHandler+0x51e>
      return;
 80035ac:	bf00      	nop
  }
}
 80035ae:	37e8      	adds	r7, #232	@ 0xe8
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}

080035b4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b083      	sub	sp, #12
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80035bc:	bf00      	nop
 80035be:	370c      	adds	r7, #12
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr

080035c8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b083      	sub	sp, #12
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80035d0:	bf00      	nop
 80035d2:	370c      	adds	r7, #12
 80035d4:	46bd      	mov	sp, r7
 80035d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035da:	4770      	bx	lr

080035dc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80035dc:	b480      	push	{r7}
 80035de:	b083      	sub	sp, #12
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80035e4:	bf00      	nop
 80035e6:	370c      	adds	r7, #12
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr

080035f0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b083      	sub	sp, #12
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
 80035f8:	460b      	mov	r3, r1
 80035fa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80035fc:	bf00      	nop
 80035fe:	370c      	adds	r7, #12
 8003600:	46bd      	mov	sp, r7
 8003602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003606:	4770      	bx	lr

08003608 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b086      	sub	sp, #24
 800360c:	af00      	add	r7, sp, #0
 800360e:	60f8      	str	r0, [r7, #12]
 8003610:	60b9      	str	r1, [r7, #8]
 8003612:	603b      	str	r3, [r7, #0]
 8003614:	4613      	mov	r3, r2
 8003616:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003618:	e03b      	b.n	8003692 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800361a:	6a3b      	ldr	r3, [r7, #32]
 800361c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003620:	d037      	beq.n	8003692 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003622:	f7fd fc85 	bl	8000f30 <HAL_GetTick>
 8003626:	4602      	mov	r2, r0
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	1ad3      	subs	r3, r2, r3
 800362c:	6a3a      	ldr	r2, [r7, #32]
 800362e:	429a      	cmp	r2, r3
 8003630:	d302      	bcc.n	8003638 <UART_WaitOnFlagUntilTimeout+0x30>
 8003632:	6a3b      	ldr	r3, [r7, #32]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d101      	bne.n	800363c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003638:	2303      	movs	r3, #3
 800363a:	e03a      	b.n	80036b2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	68db      	ldr	r3, [r3, #12]
 8003642:	f003 0304 	and.w	r3, r3, #4
 8003646:	2b00      	cmp	r3, #0
 8003648:	d023      	beq.n	8003692 <UART_WaitOnFlagUntilTimeout+0x8a>
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	2b80      	cmp	r3, #128	@ 0x80
 800364e:	d020      	beq.n	8003692 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	2b40      	cmp	r3, #64	@ 0x40
 8003654:	d01d      	beq.n	8003692 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 0308 	and.w	r3, r3, #8
 8003660:	2b08      	cmp	r3, #8
 8003662:	d116      	bne.n	8003692 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003664:	2300      	movs	r3, #0
 8003666:	617b      	str	r3, [r7, #20]
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	617b      	str	r3, [r7, #20]
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	617b      	str	r3, [r7, #20]
 8003678:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800367a:	68f8      	ldr	r0, [r7, #12]
 800367c:	f000 f81d 	bl	80036ba <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2208      	movs	r2, #8
 8003684:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2200      	movs	r2, #0
 800368a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e00f      	b.n	80036b2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	4013      	ands	r3, r2
 800369c:	68ba      	ldr	r2, [r7, #8]
 800369e:	429a      	cmp	r2, r3
 80036a0:	bf0c      	ite	eq
 80036a2:	2301      	moveq	r3, #1
 80036a4:	2300      	movne	r3, #0
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	461a      	mov	r2, r3
 80036aa:	79fb      	ldrb	r3, [r7, #7]
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d0b4      	beq.n	800361a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80036b0:	2300      	movs	r3, #0
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3718      	adds	r7, #24
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}

080036ba <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80036ba:	b480      	push	{r7}
 80036bc:	b095      	sub	sp, #84	@ 0x54
 80036be:	af00      	add	r7, sp, #0
 80036c0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	330c      	adds	r3, #12
 80036c8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036cc:	e853 3f00 	ldrex	r3, [r3]
 80036d0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80036d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80036d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	330c      	adds	r3, #12
 80036e0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80036e2:	643a      	str	r2, [r7, #64]	@ 0x40
 80036e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036e6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80036e8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80036ea:	e841 2300 	strex	r3, r2, [r1]
 80036ee:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80036f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d1e5      	bne.n	80036c2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	3314      	adds	r3, #20
 80036fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036fe:	6a3b      	ldr	r3, [r7, #32]
 8003700:	e853 3f00 	ldrex	r3, [r3]
 8003704:	61fb      	str	r3, [r7, #28]
   return(result);
 8003706:	69fb      	ldr	r3, [r7, #28]
 8003708:	f023 0301 	bic.w	r3, r3, #1
 800370c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	3314      	adds	r3, #20
 8003714:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003716:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003718:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800371a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800371c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800371e:	e841 2300 	strex	r3, r2, [r1]
 8003722:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003726:	2b00      	cmp	r3, #0
 8003728:	d1e5      	bne.n	80036f6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800372e:	2b01      	cmp	r3, #1
 8003730:	d119      	bne.n	8003766 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	330c      	adds	r3, #12
 8003738:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	e853 3f00 	ldrex	r3, [r3]
 8003740:	60bb      	str	r3, [r7, #8]
   return(result);
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	f023 0310 	bic.w	r3, r3, #16
 8003748:	647b      	str	r3, [r7, #68]	@ 0x44
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	330c      	adds	r3, #12
 8003750:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003752:	61ba      	str	r2, [r7, #24]
 8003754:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003756:	6979      	ldr	r1, [r7, #20]
 8003758:	69ba      	ldr	r2, [r7, #24]
 800375a:	e841 2300 	strex	r3, r2, [r1]
 800375e:	613b      	str	r3, [r7, #16]
   return(result);
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d1e5      	bne.n	8003732 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2220      	movs	r2, #32
 800376a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2200      	movs	r2, #0
 8003772:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003774:	bf00      	nop
 8003776:	3754      	adds	r7, #84	@ 0x54
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr

08003780 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b084      	sub	sp, #16
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800378c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2200      	movs	r2, #0
 8003792:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2200      	movs	r2, #0
 8003798:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800379a:	68f8      	ldr	r0, [r7, #12]
 800379c:	f7ff ff1e 	bl	80035dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80037a0:	bf00      	nop
 80037a2:	3710      	adds	r7, #16
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}

080037a8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b085      	sub	sp, #20
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037b6:	b2db      	uxtb	r3, r3
 80037b8:	2b21      	cmp	r3, #33	@ 0x21
 80037ba:	d13e      	bne.n	800383a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037c4:	d114      	bne.n	80037f0 <UART_Transmit_IT+0x48>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	691b      	ldr	r3, [r3, #16]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d110      	bne.n	80037f0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6a1b      	ldr	r3, [r3, #32]
 80037d2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	881b      	ldrh	r3, [r3, #0]
 80037d8:	461a      	mov	r2, r3
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80037e2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6a1b      	ldr	r3, [r3, #32]
 80037e8:	1c9a      	adds	r2, r3, #2
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	621a      	str	r2, [r3, #32]
 80037ee:	e008      	b.n	8003802 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6a1b      	ldr	r3, [r3, #32]
 80037f4:	1c59      	adds	r1, r3, #1
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	6211      	str	r1, [r2, #32]
 80037fa:	781a      	ldrb	r2, [r3, #0]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003806:	b29b      	uxth	r3, r3
 8003808:	3b01      	subs	r3, #1
 800380a:	b29b      	uxth	r3, r3
 800380c:	687a      	ldr	r2, [r7, #4]
 800380e:	4619      	mov	r1, r3
 8003810:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003812:	2b00      	cmp	r3, #0
 8003814:	d10f      	bne.n	8003836 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	68da      	ldr	r2, [r3, #12]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003824:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	68da      	ldr	r2, [r3, #12]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003834:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003836:	2300      	movs	r3, #0
 8003838:	e000      	b.n	800383c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800383a:	2302      	movs	r3, #2
  }
}
 800383c:	4618      	mov	r0, r3
 800383e:	3714      	adds	r7, #20
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr

08003848 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b082      	sub	sp, #8
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	68da      	ldr	r2, [r3, #12]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800385e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2220      	movs	r2, #32
 8003864:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	f7ff fea3 	bl	80035b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800386e:	2300      	movs	r3, #0
}
 8003870:	4618      	mov	r0, r3
 8003872:	3708      	adds	r7, #8
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}

08003878 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b08c      	sub	sp, #48	@ 0x30
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003886:	b2db      	uxtb	r3, r3
 8003888:	2b22      	cmp	r3, #34	@ 0x22
 800388a:	f040 80ae 	bne.w	80039ea <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003896:	d117      	bne.n	80038c8 <UART_Receive_IT+0x50>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	691b      	ldr	r3, [r3, #16]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d113      	bne.n	80038c8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80038a0:	2300      	movs	r3, #0
 80038a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038a8:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	b29b      	uxth	r3, r3
 80038b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038b6:	b29a      	uxth	r2, r3
 80038b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038ba:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038c0:	1c9a      	adds	r2, r3, #2
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	629a      	str	r2, [r3, #40]	@ 0x28
 80038c6:	e026      	b.n	8003916 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80038ce:	2300      	movs	r3, #0
 80038d0:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038da:	d007      	beq.n	80038ec <UART_Receive_IT+0x74>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d10a      	bne.n	80038fa <UART_Receive_IT+0x82>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	691b      	ldr	r3, [r3, #16]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d106      	bne.n	80038fa <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	b2da      	uxtb	r2, r3
 80038f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038f6:	701a      	strb	r2, [r3, #0]
 80038f8:	e008      	b.n	800390c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	b2db      	uxtb	r3, r3
 8003902:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003906:	b2da      	uxtb	r2, r3
 8003908:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800390a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003910:	1c5a      	adds	r2, r3, #1
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800391a:	b29b      	uxth	r3, r3
 800391c:	3b01      	subs	r3, #1
 800391e:	b29b      	uxth	r3, r3
 8003920:	687a      	ldr	r2, [r7, #4]
 8003922:	4619      	mov	r1, r3
 8003924:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003926:	2b00      	cmp	r3, #0
 8003928:	d15d      	bne.n	80039e6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	68da      	ldr	r2, [r3, #12]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f022 0220 	bic.w	r2, r2, #32
 8003938:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	68da      	ldr	r2, [r3, #12]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003948:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	695a      	ldr	r2, [r3, #20]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f022 0201 	bic.w	r2, r2, #1
 8003958:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2220      	movs	r2, #32
 800395e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2200      	movs	r2, #0
 8003966:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800396c:	2b01      	cmp	r3, #1
 800396e:	d135      	bne.n	80039dc <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2200      	movs	r2, #0
 8003974:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	330c      	adds	r3, #12
 800397c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	e853 3f00 	ldrex	r3, [r3]
 8003984:	613b      	str	r3, [r7, #16]
   return(result);
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	f023 0310 	bic.w	r3, r3, #16
 800398c:	627b      	str	r3, [r7, #36]	@ 0x24
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	330c      	adds	r3, #12
 8003994:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003996:	623a      	str	r2, [r7, #32]
 8003998:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800399a:	69f9      	ldr	r1, [r7, #28]
 800399c:	6a3a      	ldr	r2, [r7, #32]
 800399e:	e841 2300 	strex	r3, r2, [r1]
 80039a2:	61bb      	str	r3, [r7, #24]
   return(result);
 80039a4:	69bb      	ldr	r3, [r7, #24]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d1e5      	bne.n	8003976 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f003 0310 	and.w	r3, r3, #16
 80039b4:	2b10      	cmp	r3, #16
 80039b6:	d10a      	bne.n	80039ce <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80039b8:	2300      	movs	r3, #0
 80039ba:	60fb      	str	r3, [r7, #12]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	60fb      	str	r3, [r7, #12]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	60fb      	str	r3, [r7, #12]
 80039cc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80039d2:	4619      	mov	r1, r3
 80039d4:	6878      	ldr	r0, [r7, #4]
 80039d6:	f7ff fe0b 	bl	80035f0 <HAL_UARTEx_RxEventCallback>
 80039da:	e002      	b.n	80039e2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	f7ff fdf3 	bl	80035c8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80039e2:	2300      	movs	r3, #0
 80039e4:	e002      	b.n	80039ec <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80039e6:	2300      	movs	r3, #0
 80039e8:	e000      	b.n	80039ec <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80039ea:	2302      	movs	r3, #2
  }
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	3730      	adds	r7, #48	@ 0x30
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}

080039f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039f8:	b0c0      	sub	sp, #256	@ 0x100
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	691b      	ldr	r3, [r3, #16]
 8003a08:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003a0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a10:	68d9      	ldr	r1, [r3, #12]
 8003a12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	ea40 0301 	orr.w	r3, r0, r1
 8003a1c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003a1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a22:	689a      	ldr	r2, [r3, #8]
 8003a24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a28:	691b      	ldr	r3, [r3, #16]
 8003a2a:	431a      	orrs	r2, r3
 8003a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a30:	695b      	ldr	r3, [r3, #20]
 8003a32:	431a      	orrs	r2, r3
 8003a34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a38:	69db      	ldr	r3, [r3, #28]
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003a40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003a4c:	f021 010c 	bic.w	r1, r1, #12
 8003a50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003a5a:	430b      	orrs	r3, r1
 8003a5c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003a5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	695b      	ldr	r3, [r3, #20]
 8003a66:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003a6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a6e:	6999      	ldr	r1, [r3, #24]
 8003a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	ea40 0301 	orr.w	r3, r0, r1
 8003a7a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003a7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	4b8f      	ldr	r3, [pc, #572]	@ (8003cc0 <UART_SetConfig+0x2cc>)
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d005      	beq.n	8003a94 <UART_SetConfig+0xa0>
 8003a88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	4b8d      	ldr	r3, [pc, #564]	@ (8003cc4 <UART_SetConfig+0x2d0>)
 8003a90:	429a      	cmp	r2, r3
 8003a92:	d104      	bne.n	8003a9e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003a94:	f7fe fa42 	bl	8001f1c <HAL_RCC_GetPCLK2Freq>
 8003a98:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003a9c:	e003      	b.n	8003aa6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003a9e:	f7fe fa29 	bl	8001ef4 <HAL_RCC_GetPCLK1Freq>
 8003aa2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003aa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003aaa:	69db      	ldr	r3, [r3, #28]
 8003aac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ab0:	f040 810c 	bne.w	8003ccc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003ab4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ab8:	2200      	movs	r2, #0
 8003aba:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003abe:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003ac2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003ac6:	4622      	mov	r2, r4
 8003ac8:	462b      	mov	r3, r5
 8003aca:	1891      	adds	r1, r2, r2
 8003acc:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003ace:	415b      	adcs	r3, r3
 8003ad0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003ad2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003ad6:	4621      	mov	r1, r4
 8003ad8:	eb12 0801 	adds.w	r8, r2, r1
 8003adc:	4629      	mov	r1, r5
 8003ade:	eb43 0901 	adc.w	r9, r3, r1
 8003ae2:	f04f 0200 	mov.w	r2, #0
 8003ae6:	f04f 0300 	mov.w	r3, #0
 8003aea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003aee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003af2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003af6:	4690      	mov	r8, r2
 8003af8:	4699      	mov	r9, r3
 8003afa:	4623      	mov	r3, r4
 8003afc:	eb18 0303 	adds.w	r3, r8, r3
 8003b00:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003b04:	462b      	mov	r3, r5
 8003b06:	eb49 0303 	adc.w	r3, r9, r3
 8003b0a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003b0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	2200      	movs	r2, #0
 8003b16:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003b1a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003b1e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003b22:	460b      	mov	r3, r1
 8003b24:	18db      	adds	r3, r3, r3
 8003b26:	653b      	str	r3, [r7, #80]	@ 0x50
 8003b28:	4613      	mov	r3, r2
 8003b2a:	eb42 0303 	adc.w	r3, r2, r3
 8003b2e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003b30:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003b34:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003b38:	f7fc fba2 	bl	8000280 <__aeabi_uldivmod>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	460b      	mov	r3, r1
 8003b40:	4b61      	ldr	r3, [pc, #388]	@ (8003cc8 <UART_SetConfig+0x2d4>)
 8003b42:	fba3 2302 	umull	r2, r3, r3, r2
 8003b46:	095b      	lsrs	r3, r3, #5
 8003b48:	011c      	lsls	r4, r3, #4
 8003b4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b4e:	2200      	movs	r2, #0
 8003b50:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003b54:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003b58:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003b5c:	4642      	mov	r2, r8
 8003b5e:	464b      	mov	r3, r9
 8003b60:	1891      	adds	r1, r2, r2
 8003b62:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003b64:	415b      	adcs	r3, r3
 8003b66:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b68:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003b6c:	4641      	mov	r1, r8
 8003b6e:	eb12 0a01 	adds.w	sl, r2, r1
 8003b72:	4649      	mov	r1, r9
 8003b74:	eb43 0b01 	adc.w	fp, r3, r1
 8003b78:	f04f 0200 	mov.w	r2, #0
 8003b7c:	f04f 0300 	mov.w	r3, #0
 8003b80:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003b84:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003b88:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b8c:	4692      	mov	sl, r2
 8003b8e:	469b      	mov	fp, r3
 8003b90:	4643      	mov	r3, r8
 8003b92:	eb1a 0303 	adds.w	r3, sl, r3
 8003b96:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003b9a:	464b      	mov	r3, r9
 8003b9c:	eb4b 0303 	adc.w	r3, fp, r3
 8003ba0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003ba4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	2200      	movs	r2, #0
 8003bac:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003bb0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003bb4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003bb8:	460b      	mov	r3, r1
 8003bba:	18db      	adds	r3, r3, r3
 8003bbc:	643b      	str	r3, [r7, #64]	@ 0x40
 8003bbe:	4613      	mov	r3, r2
 8003bc0:	eb42 0303 	adc.w	r3, r2, r3
 8003bc4:	647b      	str	r3, [r7, #68]	@ 0x44
 8003bc6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003bca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003bce:	f7fc fb57 	bl	8000280 <__aeabi_uldivmod>
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	460b      	mov	r3, r1
 8003bd6:	4611      	mov	r1, r2
 8003bd8:	4b3b      	ldr	r3, [pc, #236]	@ (8003cc8 <UART_SetConfig+0x2d4>)
 8003bda:	fba3 2301 	umull	r2, r3, r3, r1
 8003bde:	095b      	lsrs	r3, r3, #5
 8003be0:	2264      	movs	r2, #100	@ 0x64
 8003be2:	fb02 f303 	mul.w	r3, r2, r3
 8003be6:	1acb      	subs	r3, r1, r3
 8003be8:	00db      	lsls	r3, r3, #3
 8003bea:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003bee:	4b36      	ldr	r3, [pc, #216]	@ (8003cc8 <UART_SetConfig+0x2d4>)
 8003bf0:	fba3 2302 	umull	r2, r3, r3, r2
 8003bf4:	095b      	lsrs	r3, r3, #5
 8003bf6:	005b      	lsls	r3, r3, #1
 8003bf8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003bfc:	441c      	add	r4, r3
 8003bfe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c02:	2200      	movs	r2, #0
 8003c04:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003c08:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003c0c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003c10:	4642      	mov	r2, r8
 8003c12:	464b      	mov	r3, r9
 8003c14:	1891      	adds	r1, r2, r2
 8003c16:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003c18:	415b      	adcs	r3, r3
 8003c1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003c1c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003c20:	4641      	mov	r1, r8
 8003c22:	1851      	adds	r1, r2, r1
 8003c24:	6339      	str	r1, [r7, #48]	@ 0x30
 8003c26:	4649      	mov	r1, r9
 8003c28:	414b      	adcs	r3, r1
 8003c2a:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c2c:	f04f 0200 	mov.w	r2, #0
 8003c30:	f04f 0300 	mov.w	r3, #0
 8003c34:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003c38:	4659      	mov	r1, fp
 8003c3a:	00cb      	lsls	r3, r1, #3
 8003c3c:	4651      	mov	r1, sl
 8003c3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c42:	4651      	mov	r1, sl
 8003c44:	00ca      	lsls	r2, r1, #3
 8003c46:	4610      	mov	r0, r2
 8003c48:	4619      	mov	r1, r3
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	4642      	mov	r2, r8
 8003c4e:	189b      	adds	r3, r3, r2
 8003c50:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003c54:	464b      	mov	r3, r9
 8003c56:	460a      	mov	r2, r1
 8003c58:	eb42 0303 	adc.w	r3, r2, r3
 8003c5c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003c60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	2200      	movs	r2, #0
 8003c68:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003c6c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003c70:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003c74:	460b      	mov	r3, r1
 8003c76:	18db      	adds	r3, r3, r3
 8003c78:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003c7a:	4613      	mov	r3, r2
 8003c7c:	eb42 0303 	adc.w	r3, r2, r3
 8003c80:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c82:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003c86:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003c8a:	f7fc faf9 	bl	8000280 <__aeabi_uldivmod>
 8003c8e:	4602      	mov	r2, r0
 8003c90:	460b      	mov	r3, r1
 8003c92:	4b0d      	ldr	r3, [pc, #52]	@ (8003cc8 <UART_SetConfig+0x2d4>)
 8003c94:	fba3 1302 	umull	r1, r3, r3, r2
 8003c98:	095b      	lsrs	r3, r3, #5
 8003c9a:	2164      	movs	r1, #100	@ 0x64
 8003c9c:	fb01 f303 	mul.w	r3, r1, r3
 8003ca0:	1ad3      	subs	r3, r2, r3
 8003ca2:	00db      	lsls	r3, r3, #3
 8003ca4:	3332      	adds	r3, #50	@ 0x32
 8003ca6:	4a08      	ldr	r2, [pc, #32]	@ (8003cc8 <UART_SetConfig+0x2d4>)
 8003ca8:	fba2 2303 	umull	r2, r3, r2, r3
 8003cac:	095b      	lsrs	r3, r3, #5
 8003cae:	f003 0207 	and.w	r2, r3, #7
 8003cb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4422      	add	r2, r4
 8003cba:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003cbc:	e106      	b.n	8003ecc <UART_SetConfig+0x4d8>
 8003cbe:	bf00      	nop
 8003cc0:	40011000 	.word	0x40011000
 8003cc4:	40011400 	.word	0x40011400
 8003cc8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ccc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003cd6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003cda:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003cde:	4642      	mov	r2, r8
 8003ce0:	464b      	mov	r3, r9
 8003ce2:	1891      	adds	r1, r2, r2
 8003ce4:	6239      	str	r1, [r7, #32]
 8003ce6:	415b      	adcs	r3, r3
 8003ce8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003cea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003cee:	4641      	mov	r1, r8
 8003cf0:	1854      	adds	r4, r2, r1
 8003cf2:	4649      	mov	r1, r9
 8003cf4:	eb43 0501 	adc.w	r5, r3, r1
 8003cf8:	f04f 0200 	mov.w	r2, #0
 8003cfc:	f04f 0300 	mov.w	r3, #0
 8003d00:	00eb      	lsls	r3, r5, #3
 8003d02:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d06:	00e2      	lsls	r2, r4, #3
 8003d08:	4614      	mov	r4, r2
 8003d0a:	461d      	mov	r5, r3
 8003d0c:	4643      	mov	r3, r8
 8003d0e:	18e3      	adds	r3, r4, r3
 8003d10:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003d14:	464b      	mov	r3, r9
 8003d16:	eb45 0303 	adc.w	r3, r5, r3
 8003d1a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003d1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	2200      	movs	r2, #0
 8003d26:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003d2a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003d2e:	f04f 0200 	mov.w	r2, #0
 8003d32:	f04f 0300 	mov.w	r3, #0
 8003d36:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003d3a:	4629      	mov	r1, r5
 8003d3c:	008b      	lsls	r3, r1, #2
 8003d3e:	4621      	mov	r1, r4
 8003d40:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d44:	4621      	mov	r1, r4
 8003d46:	008a      	lsls	r2, r1, #2
 8003d48:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003d4c:	f7fc fa98 	bl	8000280 <__aeabi_uldivmod>
 8003d50:	4602      	mov	r2, r0
 8003d52:	460b      	mov	r3, r1
 8003d54:	4b60      	ldr	r3, [pc, #384]	@ (8003ed8 <UART_SetConfig+0x4e4>)
 8003d56:	fba3 2302 	umull	r2, r3, r3, r2
 8003d5a:	095b      	lsrs	r3, r3, #5
 8003d5c:	011c      	lsls	r4, r3, #4
 8003d5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d62:	2200      	movs	r2, #0
 8003d64:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003d68:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003d6c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003d70:	4642      	mov	r2, r8
 8003d72:	464b      	mov	r3, r9
 8003d74:	1891      	adds	r1, r2, r2
 8003d76:	61b9      	str	r1, [r7, #24]
 8003d78:	415b      	adcs	r3, r3
 8003d7a:	61fb      	str	r3, [r7, #28]
 8003d7c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d80:	4641      	mov	r1, r8
 8003d82:	1851      	adds	r1, r2, r1
 8003d84:	6139      	str	r1, [r7, #16]
 8003d86:	4649      	mov	r1, r9
 8003d88:	414b      	adcs	r3, r1
 8003d8a:	617b      	str	r3, [r7, #20]
 8003d8c:	f04f 0200 	mov.w	r2, #0
 8003d90:	f04f 0300 	mov.w	r3, #0
 8003d94:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003d98:	4659      	mov	r1, fp
 8003d9a:	00cb      	lsls	r3, r1, #3
 8003d9c:	4651      	mov	r1, sl
 8003d9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003da2:	4651      	mov	r1, sl
 8003da4:	00ca      	lsls	r2, r1, #3
 8003da6:	4610      	mov	r0, r2
 8003da8:	4619      	mov	r1, r3
 8003daa:	4603      	mov	r3, r0
 8003dac:	4642      	mov	r2, r8
 8003dae:	189b      	adds	r3, r3, r2
 8003db0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003db4:	464b      	mov	r3, r9
 8003db6:	460a      	mov	r2, r1
 8003db8:	eb42 0303 	adc.w	r3, r2, r3
 8003dbc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003dca:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003dcc:	f04f 0200 	mov.w	r2, #0
 8003dd0:	f04f 0300 	mov.w	r3, #0
 8003dd4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003dd8:	4649      	mov	r1, r9
 8003dda:	008b      	lsls	r3, r1, #2
 8003ddc:	4641      	mov	r1, r8
 8003dde:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003de2:	4641      	mov	r1, r8
 8003de4:	008a      	lsls	r2, r1, #2
 8003de6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003dea:	f7fc fa49 	bl	8000280 <__aeabi_uldivmod>
 8003dee:	4602      	mov	r2, r0
 8003df0:	460b      	mov	r3, r1
 8003df2:	4611      	mov	r1, r2
 8003df4:	4b38      	ldr	r3, [pc, #224]	@ (8003ed8 <UART_SetConfig+0x4e4>)
 8003df6:	fba3 2301 	umull	r2, r3, r3, r1
 8003dfa:	095b      	lsrs	r3, r3, #5
 8003dfc:	2264      	movs	r2, #100	@ 0x64
 8003dfe:	fb02 f303 	mul.w	r3, r2, r3
 8003e02:	1acb      	subs	r3, r1, r3
 8003e04:	011b      	lsls	r3, r3, #4
 8003e06:	3332      	adds	r3, #50	@ 0x32
 8003e08:	4a33      	ldr	r2, [pc, #204]	@ (8003ed8 <UART_SetConfig+0x4e4>)
 8003e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e0e:	095b      	lsrs	r3, r3, #5
 8003e10:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003e14:	441c      	add	r4, r3
 8003e16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	673b      	str	r3, [r7, #112]	@ 0x70
 8003e1e:	677a      	str	r2, [r7, #116]	@ 0x74
 8003e20:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003e24:	4642      	mov	r2, r8
 8003e26:	464b      	mov	r3, r9
 8003e28:	1891      	adds	r1, r2, r2
 8003e2a:	60b9      	str	r1, [r7, #8]
 8003e2c:	415b      	adcs	r3, r3
 8003e2e:	60fb      	str	r3, [r7, #12]
 8003e30:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003e34:	4641      	mov	r1, r8
 8003e36:	1851      	adds	r1, r2, r1
 8003e38:	6039      	str	r1, [r7, #0]
 8003e3a:	4649      	mov	r1, r9
 8003e3c:	414b      	adcs	r3, r1
 8003e3e:	607b      	str	r3, [r7, #4]
 8003e40:	f04f 0200 	mov.w	r2, #0
 8003e44:	f04f 0300 	mov.w	r3, #0
 8003e48:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003e4c:	4659      	mov	r1, fp
 8003e4e:	00cb      	lsls	r3, r1, #3
 8003e50:	4651      	mov	r1, sl
 8003e52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e56:	4651      	mov	r1, sl
 8003e58:	00ca      	lsls	r2, r1, #3
 8003e5a:	4610      	mov	r0, r2
 8003e5c:	4619      	mov	r1, r3
 8003e5e:	4603      	mov	r3, r0
 8003e60:	4642      	mov	r2, r8
 8003e62:	189b      	adds	r3, r3, r2
 8003e64:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003e66:	464b      	mov	r3, r9
 8003e68:	460a      	mov	r2, r1
 8003e6a:	eb42 0303 	adc.w	r3, r2, r3
 8003e6e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003e70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	2200      	movs	r2, #0
 8003e78:	663b      	str	r3, [r7, #96]	@ 0x60
 8003e7a:	667a      	str	r2, [r7, #100]	@ 0x64
 8003e7c:	f04f 0200 	mov.w	r2, #0
 8003e80:	f04f 0300 	mov.w	r3, #0
 8003e84:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003e88:	4649      	mov	r1, r9
 8003e8a:	008b      	lsls	r3, r1, #2
 8003e8c:	4641      	mov	r1, r8
 8003e8e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e92:	4641      	mov	r1, r8
 8003e94:	008a      	lsls	r2, r1, #2
 8003e96:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003e9a:	f7fc f9f1 	bl	8000280 <__aeabi_uldivmod>
 8003e9e:	4602      	mov	r2, r0
 8003ea0:	460b      	mov	r3, r1
 8003ea2:	4b0d      	ldr	r3, [pc, #52]	@ (8003ed8 <UART_SetConfig+0x4e4>)
 8003ea4:	fba3 1302 	umull	r1, r3, r3, r2
 8003ea8:	095b      	lsrs	r3, r3, #5
 8003eaa:	2164      	movs	r1, #100	@ 0x64
 8003eac:	fb01 f303 	mul.w	r3, r1, r3
 8003eb0:	1ad3      	subs	r3, r2, r3
 8003eb2:	011b      	lsls	r3, r3, #4
 8003eb4:	3332      	adds	r3, #50	@ 0x32
 8003eb6:	4a08      	ldr	r2, [pc, #32]	@ (8003ed8 <UART_SetConfig+0x4e4>)
 8003eb8:	fba2 2303 	umull	r2, r3, r2, r3
 8003ebc:	095b      	lsrs	r3, r3, #5
 8003ebe:	f003 020f 	and.w	r2, r3, #15
 8003ec2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4422      	add	r2, r4
 8003eca:	609a      	str	r2, [r3, #8]
}
 8003ecc:	bf00      	nop
 8003ece:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ed8:	51eb851f 	.word	0x51eb851f

08003edc <std>:
 8003edc:	2300      	movs	r3, #0
 8003ede:	b510      	push	{r4, lr}
 8003ee0:	4604      	mov	r4, r0
 8003ee2:	e9c0 3300 	strd	r3, r3, [r0]
 8003ee6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003eea:	6083      	str	r3, [r0, #8]
 8003eec:	8181      	strh	r1, [r0, #12]
 8003eee:	6643      	str	r3, [r0, #100]	@ 0x64
 8003ef0:	81c2      	strh	r2, [r0, #14]
 8003ef2:	6183      	str	r3, [r0, #24]
 8003ef4:	4619      	mov	r1, r3
 8003ef6:	2208      	movs	r2, #8
 8003ef8:	305c      	adds	r0, #92	@ 0x5c
 8003efa:	f000 f906 	bl	800410a <memset>
 8003efe:	4b0d      	ldr	r3, [pc, #52]	@ (8003f34 <std+0x58>)
 8003f00:	6263      	str	r3, [r4, #36]	@ 0x24
 8003f02:	4b0d      	ldr	r3, [pc, #52]	@ (8003f38 <std+0x5c>)
 8003f04:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003f06:	4b0d      	ldr	r3, [pc, #52]	@ (8003f3c <std+0x60>)
 8003f08:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003f0a:	4b0d      	ldr	r3, [pc, #52]	@ (8003f40 <std+0x64>)
 8003f0c:	6323      	str	r3, [r4, #48]	@ 0x30
 8003f0e:	4b0d      	ldr	r3, [pc, #52]	@ (8003f44 <std+0x68>)
 8003f10:	6224      	str	r4, [r4, #32]
 8003f12:	429c      	cmp	r4, r3
 8003f14:	d006      	beq.n	8003f24 <std+0x48>
 8003f16:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003f1a:	4294      	cmp	r4, r2
 8003f1c:	d002      	beq.n	8003f24 <std+0x48>
 8003f1e:	33d0      	adds	r3, #208	@ 0xd0
 8003f20:	429c      	cmp	r4, r3
 8003f22:	d105      	bne.n	8003f30 <std+0x54>
 8003f24:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003f28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f2c:	f000 b966 	b.w	80041fc <__retarget_lock_init_recursive>
 8003f30:	bd10      	pop	{r4, pc}
 8003f32:	bf00      	nop
 8003f34:	08004085 	.word	0x08004085
 8003f38:	080040a7 	.word	0x080040a7
 8003f3c:	080040df 	.word	0x080040df
 8003f40:	08004103 	.word	0x08004103
 8003f44:	2000016c 	.word	0x2000016c

08003f48 <stdio_exit_handler>:
 8003f48:	4a02      	ldr	r2, [pc, #8]	@ (8003f54 <stdio_exit_handler+0xc>)
 8003f4a:	4903      	ldr	r1, [pc, #12]	@ (8003f58 <stdio_exit_handler+0x10>)
 8003f4c:	4803      	ldr	r0, [pc, #12]	@ (8003f5c <stdio_exit_handler+0x14>)
 8003f4e:	f000 b869 	b.w	8004024 <_fwalk_sglue>
 8003f52:	bf00      	nop
 8003f54:	2000000c 	.word	0x2000000c
 8003f58:	08004a9d 	.word	0x08004a9d
 8003f5c:	2000001c 	.word	0x2000001c

08003f60 <cleanup_stdio>:
 8003f60:	6841      	ldr	r1, [r0, #4]
 8003f62:	4b0c      	ldr	r3, [pc, #48]	@ (8003f94 <cleanup_stdio+0x34>)
 8003f64:	4299      	cmp	r1, r3
 8003f66:	b510      	push	{r4, lr}
 8003f68:	4604      	mov	r4, r0
 8003f6a:	d001      	beq.n	8003f70 <cleanup_stdio+0x10>
 8003f6c:	f000 fd96 	bl	8004a9c <_fflush_r>
 8003f70:	68a1      	ldr	r1, [r4, #8]
 8003f72:	4b09      	ldr	r3, [pc, #36]	@ (8003f98 <cleanup_stdio+0x38>)
 8003f74:	4299      	cmp	r1, r3
 8003f76:	d002      	beq.n	8003f7e <cleanup_stdio+0x1e>
 8003f78:	4620      	mov	r0, r4
 8003f7a:	f000 fd8f 	bl	8004a9c <_fflush_r>
 8003f7e:	68e1      	ldr	r1, [r4, #12]
 8003f80:	4b06      	ldr	r3, [pc, #24]	@ (8003f9c <cleanup_stdio+0x3c>)
 8003f82:	4299      	cmp	r1, r3
 8003f84:	d004      	beq.n	8003f90 <cleanup_stdio+0x30>
 8003f86:	4620      	mov	r0, r4
 8003f88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f8c:	f000 bd86 	b.w	8004a9c <_fflush_r>
 8003f90:	bd10      	pop	{r4, pc}
 8003f92:	bf00      	nop
 8003f94:	2000016c 	.word	0x2000016c
 8003f98:	200001d4 	.word	0x200001d4
 8003f9c:	2000023c 	.word	0x2000023c

08003fa0 <global_stdio_init.part.0>:
 8003fa0:	b510      	push	{r4, lr}
 8003fa2:	4b0b      	ldr	r3, [pc, #44]	@ (8003fd0 <global_stdio_init.part.0+0x30>)
 8003fa4:	4c0b      	ldr	r4, [pc, #44]	@ (8003fd4 <global_stdio_init.part.0+0x34>)
 8003fa6:	4a0c      	ldr	r2, [pc, #48]	@ (8003fd8 <global_stdio_init.part.0+0x38>)
 8003fa8:	601a      	str	r2, [r3, #0]
 8003faa:	4620      	mov	r0, r4
 8003fac:	2200      	movs	r2, #0
 8003fae:	2104      	movs	r1, #4
 8003fb0:	f7ff ff94 	bl	8003edc <std>
 8003fb4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003fb8:	2201      	movs	r2, #1
 8003fba:	2109      	movs	r1, #9
 8003fbc:	f7ff ff8e 	bl	8003edc <std>
 8003fc0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003fc4:	2202      	movs	r2, #2
 8003fc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003fca:	2112      	movs	r1, #18
 8003fcc:	f7ff bf86 	b.w	8003edc <std>
 8003fd0:	200002a4 	.word	0x200002a4
 8003fd4:	2000016c 	.word	0x2000016c
 8003fd8:	08003f49 	.word	0x08003f49

08003fdc <__sfp_lock_acquire>:
 8003fdc:	4801      	ldr	r0, [pc, #4]	@ (8003fe4 <__sfp_lock_acquire+0x8>)
 8003fde:	f000 b90e 	b.w	80041fe <__retarget_lock_acquire_recursive>
 8003fe2:	bf00      	nop
 8003fe4:	200002ad 	.word	0x200002ad

08003fe8 <__sfp_lock_release>:
 8003fe8:	4801      	ldr	r0, [pc, #4]	@ (8003ff0 <__sfp_lock_release+0x8>)
 8003fea:	f000 b909 	b.w	8004200 <__retarget_lock_release_recursive>
 8003fee:	bf00      	nop
 8003ff0:	200002ad 	.word	0x200002ad

08003ff4 <__sinit>:
 8003ff4:	b510      	push	{r4, lr}
 8003ff6:	4604      	mov	r4, r0
 8003ff8:	f7ff fff0 	bl	8003fdc <__sfp_lock_acquire>
 8003ffc:	6a23      	ldr	r3, [r4, #32]
 8003ffe:	b11b      	cbz	r3, 8004008 <__sinit+0x14>
 8004000:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004004:	f7ff bff0 	b.w	8003fe8 <__sfp_lock_release>
 8004008:	4b04      	ldr	r3, [pc, #16]	@ (800401c <__sinit+0x28>)
 800400a:	6223      	str	r3, [r4, #32]
 800400c:	4b04      	ldr	r3, [pc, #16]	@ (8004020 <__sinit+0x2c>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d1f5      	bne.n	8004000 <__sinit+0xc>
 8004014:	f7ff ffc4 	bl	8003fa0 <global_stdio_init.part.0>
 8004018:	e7f2      	b.n	8004000 <__sinit+0xc>
 800401a:	bf00      	nop
 800401c:	08003f61 	.word	0x08003f61
 8004020:	200002a4 	.word	0x200002a4

08004024 <_fwalk_sglue>:
 8004024:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004028:	4607      	mov	r7, r0
 800402a:	4688      	mov	r8, r1
 800402c:	4614      	mov	r4, r2
 800402e:	2600      	movs	r6, #0
 8004030:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004034:	f1b9 0901 	subs.w	r9, r9, #1
 8004038:	d505      	bpl.n	8004046 <_fwalk_sglue+0x22>
 800403a:	6824      	ldr	r4, [r4, #0]
 800403c:	2c00      	cmp	r4, #0
 800403e:	d1f7      	bne.n	8004030 <_fwalk_sglue+0xc>
 8004040:	4630      	mov	r0, r6
 8004042:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004046:	89ab      	ldrh	r3, [r5, #12]
 8004048:	2b01      	cmp	r3, #1
 800404a:	d907      	bls.n	800405c <_fwalk_sglue+0x38>
 800404c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004050:	3301      	adds	r3, #1
 8004052:	d003      	beq.n	800405c <_fwalk_sglue+0x38>
 8004054:	4629      	mov	r1, r5
 8004056:	4638      	mov	r0, r7
 8004058:	47c0      	blx	r8
 800405a:	4306      	orrs	r6, r0
 800405c:	3568      	adds	r5, #104	@ 0x68
 800405e:	e7e9      	b.n	8004034 <_fwalk_sglue+0x10>

08004060 <iprintf>:
 8004060:	b40f      	push	{r0, r1, r2, r3}
 8004062:	b507      	push	{r0, r1, r2, lr}
 8004064:	4906      	ldr	r1, [pc, #24]	@ (8004080 <iprintf+0x20>)
 8004066:	ab04      	add	r3, sp, #16
 8004068:	6808      	ldr	r0, [r1, #0]
 800406a:	f853 2b04 	ldr.w	r2, [r3], #4
 800406e:	6881      	ldr	r1, [r0, #8]
 8004070:	9301      	str	r3, [sp, #4]
 8004072:	f000 f9e9 	bl	8004448 <_vfiprintf_r>
 8004076:	b003      	add	sp, #12
 8004078:	f85d eb04 	ldr.w	lr, [sp], #4
 800407c:	b004      	add	sp, #16
 800407e:	4770      	bx	lr
 8004080:	20000018 	.word	0x20000018

08004084 <__sread>:
 8004084:	b510      	push	{r4, lr}
 8004086:	460c      	mov	r4, r1
 8004088:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800408c:	f000 f868 	bl	8004160 <_read_r>
 8004090:	2800      	cmp	r0, #0
 8004092:	bfab      	itete	ge
 8004094:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004096:	89a3      	ldrhlt	r3, [r4, #12]
 8004098:	181b      	addge	r3, r3, r0
 800409a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800409e:	bfac      	ite	ge
 80040a0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80040a2:	81a3      	strhlt	r3, [r4, #12]
 80040a4:	bd10      	pop	{r4, pc}

080040a6 <__swrite>:
 80040a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040aa:	461f      	mov	r7, r3
 80040ac:	898b      	ldrh	r3, [r1, #12]
 80040ae:	05db      	lsls	r3, r3, #23
 80040b0:	4605      	mov	r5, r0
 80040b2:	460c      	mov	r4, r1
 80040b4:	4616      	mov	r6, r2
 80040b6:	d505      	bpl.n	80040c4 <__swrite+0x1e>
 80040b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80040bc:	2302      	movs	r3, #2
 80040be:	2200      	movs	r2, #0
 80040c0:	f000 f83c 	bl	800413c <_lseek_r>
 80040c4:	89a3      	ldrh	r3, [r4, #12]
 80040c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80040ca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80040ce:	81a3      	strh	r3, [r4, #12]
 80040d0:	4632      	mov	r2, r6
 80040d2:	463b      	mov	r3, r7
 80040d4:	4628      	mov	r0, r5
 80040d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80040da:	f000 b853 	b.w	8004184 <_write_r>

080040de <__sseek>:
 80040de:	b510      	push	{r4, lr}
 80040e0:	460c      	mov	r4, r1
 80040e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80040e6:	f000 f829 	bl	800413c <_lseek_r>
 80040ea:	1c43      	adds	r3, r0, #1
 80040ec:	89a3      	ldrh	r3, [r4, #12]
 80040ee:	bf15      	itete	ne
 80040f0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80040f2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80040f6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80040fa:	81a3      	strheq	r3, [r4, #12]
 80040fc:	bf18      	it	ne
 80040fe:	81a3      	strhne	r3, [r4, #12]
 8004100:	bd10      	pop	{r4, pc}

08004102 <__sclose>:
 8004102:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004106:	f000 b809 	b.w	800411c <_close_r>

0800410a <memset>:
 800410a:	4402      	add	r2, r0
 800410c:	4603      	mov	r3, r0
 800410e:	4293      	cmp	r3, r2
 8004110:	d100      	bne.n	8004114 <memset+0xa>
 8004112:	4770      	bx	lr
 8004114:	f803 1b01 	strb.w	r1, [r3], #1
 8004118:	e7f9      	b.n	800410e <memset+0x4>
	...

0800411c <_close_r>:
 800411c:	b538      	push	{r3, r4, r5, lr}
 800411e:	4d06      	ldr	r5, [pc, #24]	@ (8004138 <_close_r+0x1c>)
 8004120:	2300      	movs	r3, #0
 8004122:	4604      	mov	r4, r0
 8004124:	4608      	mov	r0, r1
 8004126:	602b      	str	r3, [r5, #0]
 8004128:	f7fc fc81 	bl	8000a2e <_close>
 800412c:	1c43      	adds	r3, r0, #1
 800412e:	d102      	bne.n	8004136 <_close_r+0x1a>
 8004130:	682b      	ldr	r3, [r5, #0]
 8004132:	b103      	cbz	r3, 8004136 <_close_r+0x1a>
 8004134:	6023      	str	r3, [r4, #0]
 8004136:	bd38      	pop	{r3, r4, r5, pc}
 8004138:	200002a8 	.word	0x200002a8

0800413c <_lseek_r>:
 800413c:	b538      	push	{r3, r4, r5, lr}
 800413e:	4d07      	ldr	r5, [pc, #28]	@ (800415c <_lseek_r+0x20>)
 8004140:	4604      	mov	r4, r0
 8004142:	4608      	mov	r0, r1
 8004144:	4611      	mov	r1, r2
 8004146:	2200      	movs	r2, #0
 8004148:	602a      	str	r2, [r5, #0]
 800414a:	461a      	mov	r2, r3
 800414c:	f7fc fc96 	bl	8000a7c <_lseek>
 8004150:	1c43      	adds	r3, r0, #1
 8004152:	d102      	bne.n	800415a <_lseek_r+0x1e>
 8004154:	682b      	ldr	r3, [r5, #0]
 8004156:	b103      	cbz	r3, 800415a <_lseek_r+0x1e>
 8004158:	6023      	str	r3, [r4, #0]
 800415a:	bd38      	pop	{r3, r4, r5, pc}
 800415c:	200002a8 	.word	0x200002a8

08004160 <_read_r>:
 8004160:	b538      	push	{r3, r4, r5, lr}
 8004162:	4d07      	ldr	r5, [pc, #28]	@ (8004180 <_read_r+0x20>)
 8004164:	4604      	mov	r4, r0
 8004166:	4608      	mov	r0, r1
 8004168:	4611      	mov	r1, r2
 800416a:	2200      	movs	r2, #0
 800416c:	602a      	str	r2, [r5, #0]
 800416e:	461a      	mov	r2, r3
 8004170:	f7fc fc24 	bl	80009bc <_read>
 8004174:	1c43      	adds	r3, r0, #1
 8004176:	d102      	bne.n	800417e <_read_r+0x1e>
 8004178:	682b      	ldr	r3, [r5, #0]
 800417a:	b103      	cbz	r3, 800417e <_read_r+0x1e>
 800417c:	6023      	str	r3, [r4, #0]
 800417e:	bd38      	pop	{r3, r4, r5, pc}
 8004180:	200002a8 	.word	0x200002a8

08004184 <_write_r>:
 8004184:	b538      	push	{r3, r4, r5, lr}
 8004186:	4d07      	ldr	r5, [pc, #28]	@ (80041a4 <_write_r+0x20>)
 8004188:	4604      	mov	r4, r0
 800418a:	4608      	mov	r0, r1
 800418c:	4611      	mov	r1, r2
 800418e:	2200      	movs	r2, #0
 8004190:	602a      	str	r2, [r5, #0]
 8004192:	461a      	mov	r2, r3
 8004194:	f7fc fc2f 	bl	80009f6 <_write>
 8004198:	1c43      	adds	r3, r0, #1
 800419a:	d102      	bne.n	80041a2 <_write_r+0x1e>
 800419c:	682b      	ldr	r3, [r5, #0]
 800419e:	b103      	cbz	r3, 80041a2 <_write_r+0x1e>
 80041a0:	6023      	str	r3, [r4, #0]
 80041a2:	bd38      	pop	{r3, r4, r5, pc}
 80041a4:	200002a8 	.word	0x200002a8

080041a8 <__errno>:
 80041a8:	4b01      	ldr	r3, [pc, #4]	@ (80041b0 <__errno+0x8>)
 80041aa:	6818      	ldr	r0, [r3, #0]
 80041ac:	4770      	bx	lr
 80041ae:	bf00      	nop
 80041b0:	20000018 	.word	0x20000018

080041b4 <__libc_init_array>:
 80041b4:	b570      	push	{r4, r5, r6, lr}
 80041b6:	4d0d      	ldr	r5, [pc, #52]	@ (80041ec <__libc_init_array+0x38>)
 80041b8:	4c0d      	ldr	r4, [pc, #52]	@ (80041f0 <__libc_init_array+0x3c>)
 80041ba:	1b64      	subs	r4, r4, r5
 80041bc:	10a4      	asrs	r4, r4, #2
 80041be:	2600      	movs	r6, #0
 80041c0:	42a6      	cmp	r6, r4
 80041c2:	d109      	bne.n	80041d8 <__libc_init_array+0x24>
 80041c4:	4d0b      	ldr	r5, [pc, #44]	@ (80041f4 <__libc_init_array+0x40>)
 80041c6:	4c0c      	ldr	r4, [pc, #48]	@ (80041f8 <__libc_init_array+0x44>)
 80041c8:	f000 fdb8 	bl	8004d3c <_init>
 80041cc:	1b64      	subs	r4, r4, r5
 80041ce:	10a4      	asrs	r4, r4, #2
 80041d0:	2600      	movs	r6, #0
 80041d2:	42a6      	cmp	r6, r4
 80041d4:	d105      	bne.n	80041e2 <__libc_init_array+0x2e>
 80041d6:	bd70      	pop	{r4, r5, r6, pc}
 80041d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80041dc:	4798      	blx	r3
 80041de:	3601      	adds	r6, #1
 80041e0:	e7ee      	b.n	80041c0 <__libc_init_array+0xc>
 80041e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80041e6:	4798      	blx	r3
 80041e8:	3601      	adds	r6, #1
 80041ea:	e7f2      	b.n	80041d2 <__libc_init_array+0x1e>
 80041ec:	08004dc0 	.word	0x08004dc0
 80041f0:	08004dc0 	.word	0x08004dc0
 80041f4:	08004dc0 	.word	0x08004dc0
 80041f8:	08004dc4 	.word	0x08004dc4

080041fc <__retarget_lock_init_recursive>:
 80041fc:	4770      	bx	lr

080041fe <__retarget_lock_acquire_recursive>:
 80041fe:	4770      	bx	lr

08004200 <__retarget_lock_release_recursive>:
 8004200:	4770      	bx	lr
	...

08004204 <_free_r>:
 8004204:	b538      	push	{r3, r4, r5, lr}
 8004206:	4605      	mov	r5, r0
 8004208:	2900      	cmp	r1, #0
 800420a:	d041      	beq.n	8004290 <_free_r+0x8c>
 800420c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004210:	1f0c      	subs	r4, r1, #4
 8004212:	2b00      	cmp	r3, #0
 8004214:	bfb8      	it	lt
 8004216:	18e4      	addlt	r4, r4, r3
 8004218:	f000 f8e0 	bl	80043dc <__malloc_lock>
 800421c:	4a1d      	ldr	r2, [pc, #116]	@ (8004294 <_free_r+0x90>)
 800421e:	6813      	ldr	r3, [r2, #0]
 8004220:	b933      	cbnz	r3, 8004230 <_free_r+0x2c>
 8004222:	6063      	str	r3, [r4, #4]
 8004224:	6014      	str	r4, [r2, #0]
 8004226:	4628      	mov	r0, r5
 8004228:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800422c:	f000 b8dc 	b.w	80043e8 <__malloc_unlock>
 8004230:	42a3      	cmp	r3, r4
 8004232:	d908      	bls.n	8004246 <_free_r+0x42>
 8004234:	6820      	ldr	r0, [r4, #0]
 8004236:	1821      	adds	r1, r4, r0
 8004238:	428b      	cmp	r3, r1
 800423a:	bf01      	itttt	eq
 800423c:	6819      	ldreq	r1, [r3, #0]
 800423e:	685b      	ldreq	r3, [r3, #4]
 8004240:	1809      	addeq	r1, r1, r0
 8004242:	6021      	streq	r1, [r4, #0]
 8004244:	e7ed      	b.n	8004222 <_free_r+0x1e>
 8004246:	461a      	mov	r2, r3
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	b10b      	cbz	r3, 8004250 <_free_r+0x4c>
 800424c:	42a3      	cmp	r3, r4
 800424e:	d9fa      	bls.n	8004246 <_free_r+0x42>
 8004250:	6811      	ldr	r1, [r2, #0]
 8004252:	1850      	adds	r0, r2, r1
 8004254:	42a0      	cmp	r0, r4
 8004256:	d10b      	bne.n	8004270 <_free_r+0x6c>
 8004258:	6820      	ldr	r0, [r4, #0]
 800425a:	4401      	add	r1, r0
 800425c:	1850      	adds	r0, r2, r1
 800425e:	4283      	cmp	r3, r0
 8004260:	6011      	str	r1, [r2, #0]
 8004262:	d1e0      	bne.n	8004226 <_free_r+0x22>
 8004264:	6818      	ldr	r0, [r3, #0]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	6053      	str	r3, [r2, #4]
 800426a:	4408      	add	r0, r1
 800426c:	6010      	str	r0, [r2, #0]
 800426e:	e7da      	b.n	8004226 <_free_r+0x22>
 8004270:	d902      	bls.n	8004278 <_free_r+0x74>
 8004272:	230c      	movs	r3, #12
 8004274:	602b      	str	r3, [r5, #0]
 8004276:	e7d6      	b.n	8004226 <_free_r+0x22>
 8004278:	6820      	ldr	r0, [r4, #0]
 800427a:	1821      	adds	r1, r4, r0
 800427c:	428b      	cmp	r3, r1
 800427e:	bf04      	itt	eq
 8004280:	6819      	ldreq	r1, [r3, #0]
 8004282:	685b      	ldreq	r3, [r3, #4]
 8004284:	6063      	str	r3, [r4, #4]
 8004286:	bf04      	itt	eq
 8004288:	1809      	addeq	r1, r1, r0
 800428a:	6021      	streq	r1, [r4, #0]
 800428c:	6054      	str	r4, [r2, #4]
 800428e:	e7ca      	b.n	8004226 <_free_r+0x22>
 8004290:	bd38      	pop	{r3, r4, r5, pc}
 8004292:	bf00      	nop
 8004294:	200002b4 	.word	0x200002b4

08004298 <sbrk_aligned>:
 8004298:	b570      	push	{r4, r5, r6, lr}
 800429a:	4e0f      	ldr	r6, [pc, #60]	@ (80042d8 <sbrk_aligned+0x40>)
 800429c:	460c      	mov	r4, r1
 800429e:	6831      	ldr	r1, [r6, #0]
 80042a0:	4605      	mov	r5, r0
 80042a2:	b911      	cbnz	r1, 80042aa <sbrk_aligned+0x12>
 80042a4:	f000 fcb6 	bl	8004c14 <_sbrk_r>
 80042a8:	6030      	str	r0, [r6, #0]
 80042aa:	4621      	mov	r1, r4
 80042ac:	4628      	mov	r0, r5
 80042ae:	f000 fcb1 	bl	8004c14 <_sbrk_r>
 80042b2:	1c43      	adds	r3, r0, #1
 80042b4:	d103      	bne.n	80042be <sbrk_aligned+0x26>
 80042b6:	f04f 34ff 	mov.w	r4, #4294967295
 80042ba:	4620      	mov	r0, r4
 80042bc:	bd70      	pop	{r4, r5, r6, pc}
 80042be:	1cc4      	adds	r4, r0, #3
 80042c0:	f024 0403 	bic.w	r4, r4, #3
 80042c4:	42a0      	cmp	r0, r4
 80042c6:	d0f8      	beq.n	80042ba <sbrk_aligned+0x22>
 80042c8:	1a21      	subs	r1, r4, r0
 80042ca:	4628      	mov	r0, r5
 80042cc:	f000 fca2 	bl	8004c14 <_sbrk_r>
 80042d0:	3001      	adds	r0, #1
 80042d2:	d1f2      	bne.n	80042ba <sbrk_aligned+0x22>
 80042d4:	e7ef      	b.n	80042b6 <sbrk_aligned+0x1e>
 80042d6:	bf00      	nop
 80042d8:	200002b0 	.word	0x200002b0

080042dc <_malloc_r>:
 80042dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80042e0:	1ccd      	adds	r5, r1, #3
 80042e2:	f025 0503 	bic.w	r5, r5, #3
 80042e6:	3508      	adds	r5, #8
 80042e8:	2d0c      	cmp	r5, #12
 80042ea:	bf38      	it	cc
 80042ec:	250c      	movcc	r5, #12
 80042ee:	2d00      	cmp	r5, #0
 80042f0:	4606      	mov	r6, r0
 80042f2:	db01      	blt.n	80042f8 <_malloc_r+0x1c>
 80042f4:	42a9      	cmp	r1, r5
 80042f6:	d904      	bls.n	8004302 <_malloc_r+0x26>
 80042f8:	230c      	movs	r3, #12
 80042fa:	6033      	str	r3, [r6, #0]
 80042fc:	2000      	movs	r0, #0
 80042fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004302:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80043d8 <_malloc_r+0xfc>
 8004306:	f000 f869 	bl	80043dc <__malloc_lock>
 800430a:	f8d8 3000 	ldr.w	r3, [r8]
 800430e:	461c      	mov	r4, r3
 8004310:	bb44      	cbnz	r4, 8004364 <_malloc_r+0x88>
 8004312:	4629      	mov	r1, r5
 8004314:	4630      	mov	r0, r6
 8004316:	f7ff ffbf 	bl	8004298 <sbrk_aligned>
 800431a:	1c43      	adds	r3, r0, #1
 800431c:	4604      	mov	r4, r0
 800431e:	d158      	bne.n	80043d2 <_malloc_r+0xf6>
 8004320:	f8d8 4000 	ldr.w	r4, [r8]
 8004324:	4627      	mov	r7, r4
 8004326:	2f00      	cmp	r7, #0
 8004328:	d143      	bne.n	80043b2 <_malloc_r+0xd6>
 800432a:	2c00      	cmp	r4, #0
 800432c:	d04b      	beq.n	80043c6 <_malloc_r+0xea>
 800432e:	6823      	ldr	r3, [r4, #0]
 8004330:	4639      	mov	r1, r7
 8004332:	4630      	mov	r0, r6
 8004334:	eb04 0903 	add.w	r9, r4, r3
 8004338:	f000 fc6c 	bl	8004c14 <_sbrk_r>
 800433c:	4581      	cmp	r9, r0
 800433e:	d142      	bne.n	80043c6 <_malloc_r+0xea>
 8004340:	6821      	ldr	r1, [r4, #0]
 8004342:	1a6d      	subs	r5, r5, r1
 8004344:	4629      	mov	r1, r5
 8004346:	4630      	mov	r0, r6
 8004348:	f7ff ffa6 	bl	8004298 <sbrk_aligned>
 800434c:	3001      	adds	r0, #1
 800434e:	d03a      	beq.n	80043c6 <_malloc_r+0xea>
 8004350:	6823      	ldr	r3, [r4, #0]
 8004352:	442b      	add	r3, r5
 8004354:	6023      	str	r3, [r4, #0]
 8004356:	f8d8 3000 	ldr.w	r3, [r8]
 800435a:	685a      	ldr	r2, [r3, #4]
 800435c:	bb62      	cbnz	r2, 80043b8 <_malloc_r+0xdc>
 800435e:	f8c8 7000 	str.w	r7, [r8]
 8004362:	e00f      	b.n	8004384 <_malloc_r+0xa8>
 8004364:	6822      	ldr	r2, [r4, #0]
 8004366:	1b52      	subs	r2, r2, r5
 8004368:	d420      	bmi.n	80043ac <_malloc_r+0xd0>
 800436a:	2a0b      	cmp	r2, #11
 800436c:	d917      	bls.n	800439e <_malloc_r+0xc2>
 800436e:	1961      	adds	r1, r4, r5
 8004370:	42a3      	cmp	r3, r4
 8004372:	6025      	str	r5, [r4, #0]
 8004374:	bf18      	it	ne
 8004376:	6059      	strne	r1, [r3, #4]
 8004378:	6863      	ldr	r3, [r4, #4]
 800437a:	bf08      	it	eq
 800437c:	f8c8 1000 	streq.w	r1, [r8]
 8004380:	5162      	str	r2, [r4, r5]
 8004382:	604b      	str	r3, [r1, #4]
 8004384:	4630      	mov	r0, r6
 8004386:	f000 f82f 	bl	80043e8 <__malloc_unlock>
 800438a:	f104 000b 	add.w	r0, r4, #11
 800438e:	1d23      	adds	r3, r4, #4
 8004390:	f020 0007 	bic.w	r0, r0, #7
 8004394:	1ac2      	subs	r2, r0, r3
 8004396:	bf1c      	itt	ne
 8004398:	1a1b      	subne	r3, r3, r0
 800439a:	50a3      	strne	r3, [r4, r2]
 800439c:	e7af      	b.n	80042fe <_malloc_r+0x22>
 800439e:	6862      	ldr	r2, [r4, #4]
 80043a0:	42a3      	cmp	r3, r4
 80043a2:	bf0c      	ite	eq
 80043a4:	f8c8 2000 	streq.w	r2, [r8]
 80043a8:	605a      	strne	r2, [r3, #4]
 80043aa:	e7eb      	b.n	8004384 <_malloc_r+0xa8>
 80043ac:	4623      	mov	r3, r4
 80043ae:	6864      	ldr	r4, [r4, #4]
 80043b0:	e7ae      	b.n	8004310 <_malloc_r+0x34>
 80043b2:	463c      	mov	r4, r7
 80043b4:	687f      	ldr	r7, [r7, #4]
 80043b6:	e7b6      	b.n	8004326 <_malloc_r+0x4a>
 80043b8:	461a      	mov	r2, r3
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	42a3      	cmp	r3, r4
 80043be:	d1fb      	bne.n	80043b8 <_malloc_r+0xdc>
 80043c0:	2300      	movs	r3, #0
 80043c2:	6053      	str	r3, [r2, #4]
 80043c4:	e7de      	b.n	8004384 <_malloc_r+0xa8>
 80043c6:	230c      	movs	r3, #12
 80043c8:	6033      	str	r3, [r6, #0]
 80043ca:	4630      	mov	r0, r6
 80043cc:	f000 f80c 	bl	80043e8 <__malloc_unlock>
 80043d0:	e794      	b.n	80042fc <_malloc_r+0x20>
 80043d2:	6005      	str	r5, [r0, #0]
 80043d4:	e7d6      	b.n	8004384 <_malloc_r+0xa8>
 80043d6:	bf00      	nop
 80043d8:	200002b4 	.word	0x200002b4

080043dc <__malloc_lock>:
 80043dc:	4801      	ldr	r0, [pc, #4]	@ (80043e4 <__malloc_lock+0x8>)
 80043de:	f7ff bf0e 	b.w	80041fe <__retarget_lock_acquire_recursive>
 80043e2:	bf00      	nop
 80043e4:	200002ac 	.word	0x200002ac

080043e8 <__malloc_unlock>:
 80043e8:	4801      	ldr	r0, [pc, #4]	@ (80043f0 <__malloc_unlock+0x8>)
 80043ea:	f7ff bf09 	b.w	8004200 <__retarget_lock_release_recursive>
 80043ee:	bf00      	nop
 80043f0:	200002ac 	.word	0x200002ac

080043f4 <__sfputc_r>:
 80043f4:	6893      	ldr	r3, [r2, #8]
 80043f6:	3b01      	subs	r3, #1
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	b410      	push	{r4}
 80043fc:	6093      	str	r3, [r2, #8]
 80043fe:	da08      	bge.n	8004412 <__sfputc_r+0x1e>
 8004400:	6994      	ldr	r4, [r2, #24]
 8004402:	42a3      	cmp	r3, r4
 8004404:	db01      	blt.n	800440a <__sfputc_r+0x16>
 8004406:	290a      	cmp	r1, #10
 8004408:	d103      	bne.n	8004412 <__sfputc_r+0x1e>
 800440a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800440e:	f000 bb6d 	b.w	8004aec <__swbuf_r>
 8004412:	6813      	ldr	r3, [r2, #0]
 8004414:	1c58      	adds	r0, r3, #1
 8004416:	6010      	str	r0, [r2, #0]
 8004418:	7019      	strb	r1, [r3, #0]
 800441a:	4608      	mov	r0, r1
 800441c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004420:	4770      	bx	lr

08004422 <__sfputs_r>:
 8004422:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004424:	4606      	mov	r6, r0
 8004426:	460f      	mov	r7, r1
 8004428:	4614      	mov	r4, r2
 800442a:	18d5      	adds	r5, r2, r3
 800442c:	42ac      	cmp	r4, r5
 800442e:	d101      	bne.n	8004434 <__sfputs_r+0x12>
 8004430:	2000      	movs	r0, #0
 8004432:	e007      	b.n	8004444 <__sfputs_r+0x22>
 8004434:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004438:	463a      	mov	r2, r7
 800443a:	4630      	mov	r0, r6
 800443c:	f7ff ffda 	bl	80043f4 <__sfputc_r>
 8004440:	1c43      	adds	r3, r0, #1
 8004442:	d1f3      	bne.n	800442c <__sfputs_r+0xa>
 8004444:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004448 <_vfiprintf_r>:
 8004448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800444c:	460d      	mov	r5, r1
 800444e:	b09d      	sub	sp, #116	@ 0x74
 8004450:	4614      	mov	r4, r2
 8004452:	4698      	mov	r8, r3
 8004454:	4606      	mov	r6, r0
 8004456:	b118      	cbz	r0, 8004460 <_vfiprintf_r+0x18>
 8004458:	6a03      	ldr	r3, [r0, #32]
 800445a:	b90b      	cbnz	r3, 8004460 <_vfiprintf_r+0x18>
 800445c:	f7ff fdca 	bl	8003ff4 <__sinit>
 8004460:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004462:	07d9      	lsls	r1, r3, #31
 8004464:	d405      	bmi.n	8004472 <_vfiprintf_r+0x2a>
 8004466:	89ab      	ldrh	r3, [r5, #12]
 8004468:	059a      	lsls	r2, r3, #22
 800446a:	d402      	bmi.n	8004472 <_vfiprintf_r+0x2a>
 800446c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800446e:	f7ff fec6 	bl	80041fe <__retarget_lock_acquire_recursive>
 8004472:	89ab      	ldrh	r3, [r5, #12]
 8004474:	071b      	lsls	r3, r3, #28
 8004476:	d501      	bpl.n	800447c <_vfiprintf_r+0x34>
 8004478:	692b      	ldr	r3, [r5, #16]
 800447a:	b99b      	cbnz	r3, 80044a4 <_vfiprintf_r+0x5c>
 800447c:	4629      	mov	r1, r5
 800447e:	4630      	mov	r0, r6
 8004480:	f000 fb72 	bl	8004b68 <__swsetup_r>
 8004484:	b170      	cbz	r0, 80044a4 <_vfiprintf_r+0x5c>
 8004486:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004488:	07dc      	lsls	r4, r3, #31
 800448a:	d504      	bpl.n	8004496 <_vfiprintf_r+0x4e>
 800448c:	f04f 30ff 	mov.w	r0, #4294967295
 8004490:	b01d      	add	sp, #116	@ 0x74
 8004492:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004496:	89ab      	ldrh	r3, [r5, #12]
 8004498:	0598      	lsls	r0, r3, #22
 800449a:	d4f7      	bmi.n	800448c <_vfiprintf_r+0x44>
 800449c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800449e:	f7ff feaf 	bl	8004200 <__retarget_lock_release_recursive>
 80044a2:	e7f3      	b.n	800448c <_vfiprintf_r+0x44>
 80044a4:	2300      	movs	r3, #0
 80044a6:	9309      	str	r3, [sp, #36]	@ 0x24
 80044a8:	2320      	movs	r3, #32
 80044aa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80044ae:	f8cd 800c 	str.w	r8, [sp, #12]
 80044b2:	2330      	movs	r3, #48	@ 0x30
 80044b4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004664 <_vfiprintf_r+0x21c>
 80044b8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80044bc:	f04f 0901 	mov.w	r9, #1
 80044c0:	4623      	mov	r3, r4
 80044c2:	469a      	mov	sl, r3
 80044c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80044c8:	b10a      	cbz	r2, 80044ce <_vfiprintf_r+0x86>
 80044ca:	2a25      	cmp	r2, #37	@ 0x25
 80044cc:	d1f9      	bne.n	80044c2 <_vfiprintf_r+0x7a>
 80044ce:	ebba 0b04 	subs.w	fp, sl, r4
 80044d2:	d00b      	beq.n	80044ec <_vfiprintf_r+0xa4>
 80044d4:	465b      	mov	r3, fp
 80044d6:	4622      	mov	r2, r4
 80044d8:	4629      	mov	r1, r5
 80044da:	4630      	mov	r0, r6
 80044dc:	f7ff ffa1 	bl	8004422 <__sfputs_r>
 80044e0:	3001      	adds	r0, #1
 80044e2:	f000 80a7 	beq.w	8004634 <_vfiprintf_r+0x1ec>
 80044e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80044e8:	445a      	add	r2, fp
 80044ea:	9209      	str	r2, [sp, #36]	@ 0x24
 80044ec:	f89a 3000 	ldrb.w	r3, [sl]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	f000 809f 	beq.w	8004634 <_vfiprintf_r+0x1ec>
 80044f6:	2300      	movs	r3, #0
 80044f8:	f04f 32ff 	mov.w	r2, #4294967295
 80044fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004500:	f10a 0a01 	add.w	sl, sl, #1
 8004504:	9304      	str	r3, [sp, #16]
 8004506:	9307      	str	r3, [sp, #28]
 8004508:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800450c:	931a      	str	r3, [sp, #104]	@ 0x68
 800450e:	4654      	mov	r4, sl
 8004510:	2205      	movs	r2, #5
 8004512:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004516:	4853      	ldr	r0, [pc, #332]	@ (8004664 <_vfiprintf_r+0x21c>)
 8004518:	f7fb fe62 	bl	80001e0 <memchr>
 800451c:	9a04      	ldr	r2, [sp, #16]
 800451e:	b9d8      	cbnz	r0, 8004558 <_vfiprintf_r+0x110>
 8004520:	06d1      	lsls	r1, r2, #27
 8004522:	bf44      	itt	mi
 8004524:	2320      	movmi	r3, #32
 8004526:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800452a:	0713      	lsls	r3, r2, #28
 800452c:	bf44      	itt	mi
 800452e:	232b      	movmi	r3, #43	@ 0x2b
 8004530:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004534:	f89a 3000 	ldrb.w	r3, [sl]
 8004538:	2b2a      	cmp	r3, #42	@ 0x2a
 800453a:	d015      	beq.n	8004568 <_vfiprintf_r+0x120>
 800453c:	9a07      	ldr	r2, [sp, #28]
 800453e:	4654      	mov	r4, sl
 8004540:	2000      	movs	r0, #0
 8004542:	f04f 0c0a 	mov.w	ip, #10
 8004546:	4621      	mov	r1, r4
 8004548:	f811 3b01 	ldrb.w	r3, [r1], #1
 800454c:	3b30      	subs	r3, #48	@ 0x30
 800454e:	2b09      	cmp	r3, #9
 8004550:	d94b      	bls.n	80045ea <_vfiprintf_r+0x1a2>
 8004552:	b1b0      	cbz	r0, 8004582 <_vfiprintf_r+0x13a>
 8004554:	9207      	str	r2, [sp, #28]
 8004556:	e014      	b.n	8004582 <_vfiprintf_r+0x13a>
 8004558:	eba0 0308 	sub.w	r3, r0, r8
 800455c:	fa09 f303 	lsl.w	r3, r9, r3
 8004560:	4313      	orrs	r3, r2
 8004562:	9304      	str	r3, [sp, #16]
 8004564:	46a2      	mov	sl, r4
 8004566:	e7d2      	b.n	800450e <_vfiprintf_r+0xc6>
 8004568:	9b03      	ldr	r3, [sp, #12]
 800456a:	1d19      	adds	r1, r3, #4
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	9103      	str	r1, [sp, #12]
 8004570:	2b00      	cmp	r3, #0
 8004572:	bfbb      	ittet	lt
 8004574:	425b      	neglt	r3, r3
 8004576:	f042 0202 	orrlt.w	r2, r2, #2
 800457a:	9307      	strge	r3, [sp, #28]
 800457c:	9307      	strlt	r3, [sp, #28]
 800457e:	bfb8      	it	lt
 8004580:	9204      	strlt	r2, [sp, #16]
 8004582:	7823      	ldrb	r3, [r4, #0]
 8004584:	2b2e      	cmp	r3, #46	@ 0x2e
 8004586:	d10a      	bne.n	800459e <_vfiprintf_r+0x156>
 8004588:	7863      	ldrb	r3, [r4, #1]
 800458a:	2b2a      	cmp	r3, #42	@ 0x2a
 800458c:	d132      	bne.n	80045f4 <_vfiprintf_r+0x1ac>
 800458e:	9b03      	ldr	r3, [sp, #12]
 8004590:	1d1a      	adds	r2, r3, #4
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	9203      	str	r2, [sp, #12]
 8004596:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800459a:	3402      	adds	r4, #2
 800459c:	9305      	str	r3, [sp, #20]
 800459e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004674 <_vfiprintf_r+0x22c>
 80045a2:	7821      	ldrb	r1, [r4, #0]
 80045a4:	2203      	movs	r2, #3
 80045a6:	4650      	mov	r0, sl
 80045a8:	f7fb fe1a 	bl	80001e0 <memchr>
 80045ac:	b138      	cbz	r0, 80045be <_vfiprintf_r+0x176>
 80045ae:	9b04      	ldr	r3, [sp, #16]
 80045b0:	eba0 000a 	sub.w	r0, r0, sl
 80045b4:	2240      	movs	r2, #64	@ 0x40
 80045b6:	4082      	lsls	r2, r0
 80045b8:	4313      	orrs	r3, r2
 80045ba:	3401      	adds	r4, #1
 80045bc:	9304      	str	r3, [sp, #16]
 80045be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80045c2:	4829      	ldr	r0, [pc, #164]	@ (8004668 <_vfiprintf_r+0x220>)
 80045c4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80045c8:	2206      	movs	r2, #6
 80045ca:	f7fb fe09 	bl	80001e0 <memchr>
 80045ce:	2800      	cmp	r0, #0
 80045d0:	d03f      	beq.n	8004652 <_vfiprintf_r+0x20a>
 80045d2:	4b26      	ldr	r3, [pc, #152]	@ (800466c <_vfiprintf_r+0x224>)
 80045d4:	bb1b      	cbnz	r3, 800461e <_vfiprintf_r+0x1d6>
 80045d6:	9b03      	ldr	r3, [sp, #12]
 80045d8:	3307      	adds	r3, #7
 80045da:	f023 0307 	bic.w	r3, r3, #7
 80045de:	3308      	adds	r3, #8
 80045e0:	9303      	str	r3, [sp, #12]
 80045e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80045e4:	443b      	add	r3, r7
 80045e6:	9309      	str	r3, [sp, #36]	@ 0x24
 80045e8:	e76a      	b.n	80044c0 <_vfiprintf_r+0x78>
 80045ea:	fb0c 3202 	mla	r2, ip, r2, r3
 80045ee:	460c      	mov	r4, r1
 80045f0:	2001      	movs	r0, #1
 80045f2:	e7a8      	b.n	8004546 <_vfiprintf_r+0xfe>
 80045f4:	2300      	movs	r3, #0
 80045f6:	3401      	adds	r4, #1
 80045f8:	9305      	str	r3, [sp, #20]
 80045fa:	4619      	mov	r1, r3
 80045fc:	f04f 0c0a 	mov.w	ip, #10
 8004600:	4620      	mov	r0, r4
 8004602:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004606:	3a30      	subs	r2, #48	@ 0x30
 8004608:	2a09      	cmp	r2, #9
 800460a:	d903      	bls.n	8004614 <_vfiprintf_r+0x1cc>
 800460c:	2b00      	cmp	r3, #0
 800460e:	d0c6      	beq.n	800459e <_vfiprintf_r+0x156>
 8004610:	9105      	str	r1, [sp, #20]
 8004612:	e7c4      	b.n	800459e <_vfiprintf_r+0x156>
 8004614:	fb0c 2101 	mla	r1, ip, r1, r2
 8004618:	4604      	mov	r4, r0
 800461a:	2301      	movs	r3, #1
 800461c:	e7f0      	b.n	8004600 <_vfiprintf_r+0x1b8>
 800461e:	ab03      	add	r3, sp, #12
 8004620:	9300      	str	r3, [sp, #0]
 8004622:	462a      	mov	r2, r5
 8004624:	4b12      	ldr	r3, [pc, #72]	@ (8004670 <_vfiprintf_r+0x228>)
 8004626:	a904      	add	r1, sp, #16
 8004628:	4630      	mov	r0, r6
 800462a:	f3af 8000 	nop.w
 800462e:	4607      	mov	r7, r0
 8004630:	1c78      	adds	r0, r7, #1
 8004632:	d1d6      	bne.n	80045e2 <_vfiprintf_r+0x19a>
 8004634:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004636:	07d9      	lsls	r1, r3, #31
 8004638:	d405      	bmi.n	8004646 <_vfiprintf_r+0x1fe>
 800463a:	89ab      	ldrh	r3, [r5, #12]
 800463c:	059a      	lsls	r2, r3, #22
 800463e:	d402      	bmi.n	8004646 <_vfiprintf_r+0x1fe>
 8004640:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004642:	f7ff fddd 	bl	8004200 <__retarget_lock_release_recursive>
 8004646:	89ab      	ldrh	r3, [r5, #12]
 8004648:	065b      	lsls	r3, r3, #25
 800464a:	f53f af1f 	bmi.w	800448c <_vfiprintf_r+0x44>
 800464e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004650:	e71e      	b.n	8004490 <_vfiprintf_r+0x48>
 8004652:	ab03      	add	r3, sp, #12
 8004654:	9300      	str	r3, [sp, #0]
 8004656:	462a      	mov	r2, r5
 8004658:	4b05      	ldr	r3, [pc, #20]	@ (8004670 <_vfiprintf_r+0x228>)
 800465a:	a904      	add	r1, sp, #16
 800465c:	4630      	mov	r0, r6
 800465e:	f000 f879 	bl	8004754 <_printf_i>
 8004662:	e7e4      	b.n	800462e <_vfiprintf_r+0x1e6>
 8004664:	08004d84 	.word	0x08004d84
 8004668:	08004d8e 	.word	0x08004d8e
 800466c:	00000000 	.word	0x00000000
 8004670:	08004423 	.word	0x08004423
 8004674:	08004d8a 	.word	0x08004d8a

08004678 <_printf_common>:
 8004678:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800467c:	4616      	mov	r6, r2
 800467e:	4698      	mov	r8, r3
 8004680:	688a      	ldr	r2, [r1, #8]
 8004682:	690b      	ldr	r3, [r1, #16]
 8004684:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004688:	4293      	cmp	r3, r2
 800468a:	bfb8      	it	lt
 800468c:	4613      	movlt	r3, r2
 800468e:	6033      	str	r3, [r6, #0]
 8004690:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004694:	4607      	mov	r7, r0
 8004696:	460c      	mov	r4, r1
 8004698:	b10a      	cbz	r2, 800469e <_printf_common+0x26>
 800469a:	3301      	adds	r3, #1
 800469c:	6033      	str	r3, [r6, #0]
 800469e:	6823      	ldr	r3, [r4, #0]
 80046a0:	0699      	lsls	r1, r3, #26
 80046a2:	bf42      	ittt	mi
 80046a4:	6833      	ldrmi	r3, [r6, #0]
 80046a6:	3302      	addmi	r3, #2
 80046a8:	6033      	strmi	r3, [r6, #0]
 80046aa:	6825      	ldr	r5, [r4, #0]
 80046ac:	f015 0506 	ands.w	r5, r5, #6
 80046b0:	d106      	bne.n	80046c0 <_printf_common+0x48>
 80046b2:	f104 0a19 	add.w	sl, r4, #25
 80046b6:	68e3      	ldr	r3, [r4, #12]
 80046b8:	6832      	ldr	r2, [r6, #0]
 80046ba:	1a9b      	subs	r3, r3, r2
 80046bc:	42ab      	cmp	r3, r5
 80046be:	dc26      	bgt.n	800470e <_printf_common+0x96>
 80046c0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80046c4:	6822      	ldr	r2, [r4, #0]
 80046c6:	3b00      	subs	r3, #0
 80046c8:	bf18      	it	ne
 80046ca:	2301      	movne	r3, #1
 80046cc:	0692      	lsls	r2, r2, #26
 80046ce:	d42b      	bmi.n	8004728 <_printf_common+0xb0>
 80046d0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80046d4:	4641      	mov	r1, r8
 80046d6:	4638      	mov	r0, r7
 80046d8:	47c8      	blx	r9
 80046da:	3001      	adds	r0, #1
 80046dc:	d01e      	beq.n	800471c <_printf_common+0xa4>
 80046de:	6823      	ldr	r3, [r4, #0]
 80046e0:	6922      	ldr	r2, [r4, #16]
 80046e2:	f003 0306 	and.w	r3, r3, #6
 80046e6:	2b04      	cmp	r3, #4
 80046e8:	bf02      	ittt	eq
 80046ea:	68e5      	ldreq	r5, [r4, #12]
 80046ec:	6833      	ldreq	r3, [r6, #0]
 80046ee:	1aed      	subeq	r5, r5, r3
 80046f0:	68a3      	ldr	r3, [r4, #8]
 80046f2:	bf0c      	ite	eq
 80046f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80046f8:	2500      	movne	r5, #0
 80046fa:	4293      	cmp	r3, r2
 80046fc:	bfc4      	itt	gt
 80046fe:	1a9b      	subgt	r3, r3, r2
 8004700:	18ed      	addgt	r5, r5, r3
 8004702:	2600      	movs	r6, #0
 8004704:	341a      	adds	r4, #26
 8004706:	42b5      	cmp	r5, r6
 8004708:	d11a      	bne.n	8004740 <_printf_common+0xc8>
 800470a:	2000      	movs	r0, #0
 800470c:	e008      	b.n	8004720 <_printf_common+0xa8>
 800470e:	2301      	movs	r3, #1
 8004710:	4652      	mov	r2, sl
 8004712:	4641      	mov	r1, r8
 8004714:	4638      	mov	r0, r7
 8004716:	47c8      	blx	r9
 8004718:	3001      	adds	r0, #1
 800471a:	d103      	bne.n	8004724 <_printf_common+0xac>
 800471c:	f04f 30ff 	mov.w	r0, #4294967295
 8004720:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004724:	3501      	adds	r5, #1
 8004726:	e7c6      	b.n	80046b6 <_printf_common+0x3e>
 8004728:	18e1      	adds	r1, r4, r3
 800472a:	1c5a      	adds	r2, r3, #1
 800472c:	2030      	movs	r0, #48	@ 0x30
 800472e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004732:	4422      	add	r2, r4
 8004734:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004738:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800473c:	3302      	adds	r3, #2
 800473e:	e7c7      	b.n	80046d0 <_printf_common+0x58>
 8004740:	2301      	movs	r3, #1
 8004742:	4622      	mov	r2, r4
 8004744:	4641      	mov	r1, r8
 8004746:	4638      	mov	r0, r7
 8004748:	47c8      	blx	r9
 800474a:	3001      	adds	r0, #1
 800474c:	d0e6      	beq.n	800471c <_printf_common+0xa4>
 800474e:	3601      	adds	r6, #1
 8004750:	e7d9      	b.n	8004706 <_printf_common+0x8e>
	...

08004754 <_printf_i>:
 8004754:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004758:	7e0f      	ldrb	r7, [r1, #24]
 800475a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800475c:	2f78      	cmp	r7, #120	@ 0x78
 800475e:	4691      	mov	r9, r2
 8004760:	4680      	mov	r8, r0
 8004762:	460c      	mov	r4, r1
 8004764:	469a      	mov	sl, r3
 8004766:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800476a:	d807      	bhi.n	800477c <_printf_i+0x28>
 800476c:	2f62      	cmp	r7, #98	@ 0x62
 800476e:	d80a      	bhi.n	8004786 <_printf_i+0x32>
 8004770:	2f00      	cmp	r7, #0
 8004772:	f000 80d2 	beq.w	800491a <_printf_i+0x1c6>
 8004776:	2f58      	cmp	r7, #88	@ 0x58
 8004778:	f000 80b9 	beq.w	80048ee <_printf_i+0x19a>
 800477c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004780:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004784:	e03a      	b.n	80047fc <_printf_i+0xa8>
 8004786:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800478a:	2b15      	cmp	r3, #21
 800478c:	d8f6      	bhi.n	800477c <_printf_i+0x28>
 800478e:	a101      	add	r1, pc, #4	@ (adr r1, 8004794 <_printf_i+0x40>)
 8004790:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004794:	080047ed 	.word	0x080047ed
 8004798:	08004801 	.word	0x08004801
 800479c:	0800477d 	.word	0x0800477d
 80047a0:	0800477d 	.word	0x0800477d
 80047a4:	0800477d 	.word	0x0800477d
 80047a8:	0800477d 	.word	0x0800477d
 80047ac:	08004801 	.word	0x08004801
 80047b0:	0800477d 	.word	0x0800477d
 80047b4:	0800477d 	.word	0x0800477d
 80047b8:	0800477d 	.word	0x0800477d
 80047bc:	0800477d 	.word	0x0800477d
 80047c0:	08004901 	.word	0x08004901
 80047c4:	0800482b 	.word	0x0800482b
 80047c8:	080048bb 	.word	0x080048bb
 80047cc:	0800477d 	.word	0x0800477d
 80047d0:	0800477d 	.word	0x0800477d
 80047d4:	08004923 	.word	0x08004923
 80047d8:	0800477d 	.word	0x0800477d
 80047dc:	0800482b 	.word	0x0800482b
 80047e0:	0800477d 	.word	0x0800477d
 80047e4:	0800477d 	.word	0x0800477d
 80047e8:	080048c3 	.word	0x080048c3
 80047ec:	6833      	ldr	r3, [r6, #0]
 80047ee:	1d1a      	adds	r2, r3, #4
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	6032      	str	r2, [r6, #0]
 80047f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80047f8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80047fc:	2301      	movs	r3, #1
 80047fe:	e09d      	b.n	800493c <_printf_i+0x1e8>
 8004800:	6833      	ldr	r3, [r6, #0]
 8004802:	6820      	ldr	r0, [r4, #0]
 8004804:	1d19      	adds	r1, r3, #4
 8004806:	6031      	str	r1, [r6, #0]
 8004808:	0606      	lsls	r6, r0, #24
 800480a:	d501      	bpl.n	8004810 <_printf_i+0xbc>
 800480c:	681d      	ldr	r5, [r3, #0]
 800480e:	e003      	b.n	8004818 <_printf_i+0xc4>
 8004810:	0645      	lsls	r5, r0, #25
 8004812:	d5fb      	bpl.n	800480c <_printf_i+0xb8>
 8004814:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004818:	2d00      	cmp	r5, #0
 800481a:	da03      	bge.n	8004824 <_printf_i+0xd0>
 800481c:	232d      	movs	r3, #45	@ 0x2d
 800481e:	426d      	negs	r5, r5
 8004820:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004824:	4859      	ldr	r0, [pc, #356]	@ (800498c <_printf_i+0x238>)
 8004826:	230a      	movs	r3, #10
 8004828:	e011      	b.n	800484e <_printf_i+0xfa>
 800482a:	6821      	ldr	r1, [r4, #0]
 800482c:	6833      	ldr	r3, [r6, #0]
 800482e:	0608      	lsls	r0, r1, #24
 8004830:	f853 5b04 	ldr.w	r5, [r3], #4
 8004834:	d402      	bmi.n	800483c <_printf_i+0xe8>
 8004836:	0649      	lsls	r1, r1, #25
 8004838:	bf48      	it	mi
 800483a:	b2ad      	uxthmi	r5, r5
 800483c:	2f6f      	cmp	r7, #111	@ 0x6f
 800483e:	4853      	ldr	r0, [pc, #332]	@ (800498c <_printf_i+0x238>)
 8004840:	6033      	str	r3, [r6, #0]
 8004842:	bf14      	ite	ne
 8004844:	230a      	movne	r3, #10
 8004846:	2308      	moveq	r3, #8
 8004848:	2100      	movs	r1, #0
 800484a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800484e:	6866      	ldr	r6, [r4, #4]
 8004850:	60a6      	str	r6, [r4, #8]
 8004852:	2e00      	cmp	r6, #0
 8004854:	bfa2      	ittt	ge
 8004856:	6821      	ldrge	r1, [r4, #0]
 8004858:	f021 0104 	bicge.w	r1, r1, #4
 800485c:	6021      	strge	r1, [r4, #0]
 800485e:	b90d      	cbnz	r5, 8004864 <_printf_i+0x110>
 8004860:	2e00      	cmp	r6, #0
 8004862:	d04b      	beq.n	80048fc <_printf_i+0x1a8>
 8004864:	4616      	mov	r6, r2
 8004866:	fbb5 f1f3 	udiv	r1, r5, r3
 800486a:	fb03 5711 	mls	r7, r3, r1, r5
 800486e:	5dc7      	ldrb	r7, [r0, r7]
 8004870:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004874:	462f      	mov	r7, r5
 8004876:	42bb      	cmp	r3, r7
 8004878:	460d      	mov	r5, r1
 800487a:	d9f4      	bls.n	8004866 <_printf_i+0x112>
 800487c:	2b08      	cmp	r3, #8
 800487e:	d10b      	bne.n	8004898 <_printf_i+0x144>
 8004880:	6823      	ldr	r3, [r4, #0]
 8004882:	07df      	lsls	r7, r3, #31
 8004884:	d508      	bpl.n	8004898 <_printf_i+0x144>
 8004886:	6923      	ldr	r3, [r4, #16]
 8004888:	6861      	ldr	r1, [r4, #4]
 800488a:	4299      	cmp	r1, r3
 800488c:	bfde      	ittt	le
 800488e:	2330      	movle	r3, #48	@ 0x30
 8004890:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004894:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004898:	1b92      	subs	r2, r2, r6
 800489a:	6122      	str	r2, [r4, #16]
 800489c:	f8cd a000 	str.w	sl, [sp]
 80048a0:	464b      	mov	r3, r9
 80048a2:	aa03      	add	r2, sp, #12
 80048a4:	4621      	mov	r1, r4
 80048a6:	4640      	mov	r0, r8
 80048a8:	f7ff fee6 	bl	8004678 <_printf_common>
 80048ac:	3001      	adds	r0, #1
 80048ae:	d14a      	bne.n	8004946 <_printf_i+0x1f2>
 80048b0:	f04f 30ff 	mov.w	r0, #4294967295
 80048b4:	b004      	add	sp, #16
 80048b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048ba:	6823      	ldr	r3, [r4, #0]
 80048bc:	f043 0320 	orr.w	r3, r3, #32
 80048c0:	6023      	str	r3, [r4, #0]
 80048c2:	4833      	ldr	r0, [pc, #204]	@ (8004990 <_printf_i+0x23c>)
 80048c4:	2778      	movs	r7, #120	@ 0x78
 80048c6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80048ca:	6823      	ldr	r3, [r4, #0]
 80048cc:	6831      	ldr	r1, [r6, #0]
 80048ce:	061f      	lsls	r7, r3, #24
 80048d0:	f851 5b04 	ldr.w	r5, [r1], #4
 80048d4:	d402      	bmi.n	80048dc <_printf_i+0x188>
 80048d6:	065f      	lsls	r7, r3, #25
 80048d8:	bf48      	it	mi
 80048da:	b2ad      	uxthmi	r5, r5
 80048dc:	6031      	str	r1, [r6, #0]
 80048de:	07d9      	lsls	r1, r3, #31
 80048e0:	bf44      	itt	mi
 80048e2:	f043 0320 	orrmi.w	r3, r3, #32
 80048e6:	6023      	strmi	r3, [r4, #0]
 80048e8:	b11d      	cbz	r5, 80048f2 <_printf_i+0x19e>
 80048ea:	2310      	movs	r3, #16
 80048ec:	e7ac      	b.n	8004848 <_printf_i+0xf4>
 80048ee:	4827      	ldr	r0, [pc, #156]	@ (800498c <_printf_i+0x238>)
 80048f0:	e7e9      	b.n	80048c6 <_printf_i+0x172>
 80048f2:	6823      	ldr	r3, [r4, #0]
 80048f4:	f023 0320 	bic.w	r3, r3, #32
 80048f8:	6023      	str	r3, [r4, #0]
 80048fa:	e7f6      	b.n	80048ea <_printf_i+0x196>
 80048fc:	4616      	mov	r6, r2
 80048fe:	e7bd      	b.n	800487c <_printf_i+0x128>
 8004900:	6833      	ldr	r3, [r6, #0]
 8004902:	6825      	ldr	r5, [r4, #0]
 8004904:	6961      	ldr	r1, [r4, #20]
 8004906:	1d18      	adds	r0, r3, #4
 8004908:	6030      	str	r0, [r6, #0]
 800490a:	062e      	lsls	r6, r5, #24
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	d501      	bpl.n	8004914 <_printf_i+0x1c0>
 8004910:	6019      	str	r1, [r3, #0]
 8004912:	e002      	b.n	800491a <_printf_i+0x1c6>
 8004914:	0668      	lsls	r0, r5, #25
 8004916:	d5fb      	bpl.n	8004910 <_printf_i+0x1bc>
 8004918:	8019      	strh	r1, [r3, #0]
 800491a:	2300      	movs	r3, #0
 800491c:	6123      	str	r3, [r4, #16]
 800491e:	4616      	mov	r6, r2
 8004920:	e7bc      	b.n	800489c <_printf_i+0x148>
 8004922:	6833      	ldr	r3, [r6, #0]
 8004924:	1d1a      	adds	r2, r3, #4
 8004926:	6032      	str	r2, [r6, #0]
 8004928:	681e      	ldr	r6, [r3, #0]
 800492a:	6862      	ldr	r2, [r4, #4]
 800492c:	2100      	movs	r1, #0
 800492e:	4630      	mov	r0, r6
 8004930:	f7fb fc56 	bl	80001e0 <memchr>
 8004934:	b108      	cbz	r0, 800493a <_printf_i+0x1e6>
 8004936:	1b80      	subs	r0, r0, r6
 8004938:	6060      	str	r0, [r4, #4]
 800493a:	6863      	ldr	r3, [r4, #4]
 800493c:	6123      	str	r3, [r4, #16]
 800493e:	2300      	movs	r3, #0
 8004940:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004944:	e7aa      	b.n	800489c <_printf_i+0x148>
 8004946:	6923      	ldr	r3, [r4, #16]
 8004948:	4632      	mov	r2, r6
 800494a:	4649      	mov	r1, r9
 800494c:	4640      	mov	r0, r8
 800494e:	47d0      	blx	sl
 8004950:	3001      	adds	r0, #1
 8004952:	d0ad      	beq.n	80048b0 <_printf_i+0x15c>
 8004954:	6823      	ldr	r3, [r4, #0]
 8004956:	079b      	lsls	r3, r3, #30
 8004958:	d413      	bmi.n	8004982 <_printf_i+0x22e>
 800495a:	68e0      	ldr	r0, [r4, #12]
 800495c:	9b03      	ldr	r3, [sp, #12]
 800495e:	4298      	cmp	r0, r3
 8004960:	bfb8      	it	lt
 8004962:	4618      	movlt	r0, r3
 8004964:	e7a6      	b.n	80048b4 <_printf_i+0x160>
 8004966:	2301      	movs	r3, #1
 8004968:	4632      	mov	r2, r6
 800496a:	4649      	mov	r1, r9
 800496c:	4640      	mov	r0, r8
 800496e:	47d0      	blx	sl
 8004970:	3001      	adds	r0, #1
 8004972:	d09d      	beq.n	80048b0 <_printf_i+0x15c>
 8004974:	3501      	adds	r5, #1
 8004976:	68e3      	ldr	r3, [r4, #12]
 8004978:	9903      	ldr	r1, [sp, #12]
 800497a:	1a5b      	subs	r3, r3, r1
 800497c:	42ab      	cmp	r3, r5
 800497e:	dcf2      	bgt.n	8004966 <_printf_i+0x212>
 8004980:	e7eb      	b.n	800495a <_printf_i+0x206>
 8004982:	2500      	movs	r5, #0
 8004984:	f104 0619 	add.w	r6, r4, #25
 8004988:	e7f5      	b.n	8004976 <_printf_i+0x222>
 800498a:	bf00      	nop
 800498c:	08004d95 	.word	0x08004d95
 8004990:	08004da6 	.word	0x08004da6

08004994 <__sflush_r>:
 8004994:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004998:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800499c:	0716      	lsls	r6, r2, #28
 800499e:	4605      	mov	r5, r0
 80049a0:	460c      	mov	r4, r1
 80049a2:	d454      	bmi.n	8004a4e <__sflush_r+0xba>
 80049a4:	684b      	ldr	r3, [r1, #4]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	dc02      	bgt.n	80049b0 <__sflush_r+0x1c>
 80049aa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	dd48      	ble.n	8004a42 <__sflush_r+0xae>
 80049b0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80049b2:	2e00      	cmp	r6, #0
 80049b4:	d045      	beq.n	8004a42 <__sflush_r+0xae>
 80049b6:	2300      	movs	r3, #0
 80049b8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80049bc:	682f      	ldr	r7, [r5, #0]
 80049be:	6a21      	ldr	r1, [r4, #32]
 80049c0:	602b      	str	r3, [r5, #0]
 80049c2:	d030      	beq.n	8004a26 <__sflush_r+0x92>
 80049c4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80049c6:	89a3      	ldrh	r3, [r4, #12]
 80049c8:	0759      	lsls	r1, r3, #29
 80049ca:	d505      	bpl.n	80049d8 <__sflush_r+0x44>
 80049cc:	6863      	ldr	r3, [r4, #4]
 80049ce:	1ad2      	subs	r2, r2, r3
 80049d0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80049d2:	b10b      	cbz	r3, 80049d8 <__sflush_r+0x44>
 80049d4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80049d6:	1ad2      	subs	r2, r2, r3
 80049d8:	2300      	movs	r3, #0
 80049da:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80049dc:	6a21      	ldr	r1, [r4, #32]
 80049de:	4628      	mov	r0, r5
 80049e0:	47b0      	blx	r6
 80049e2:	1c43      	adds	r3, r0, #1
 80049e4:	89a3      	ldrh	r3, [r4, #12]
 80049e6:	d106      	bne.n	80049f6 <__sflush_r+0x62>
 80049e8:	6829      	ldr	r1, [r5, #0]
 80049ea:	291d      	cmp	r1, #29
 80049ec:	d82b      	bhi.n	8004a46 <__sflush_r+0xb2>
 80049ee:	4a2a      	ldr	r2, [pc, #168]	@ (8004a98 <__sflush_r+0x104>)
 80049f0:	410a      	asrs	r2, r1
 80049f2:	07d6      	lsls	r6, r2, #31
 80049f4:	d427      	bmi.n	8004a46 <__sflush_r+0xb2>
 80049f6:	2200      	movs	r2, #0
 80049f8:	6062      	str	r2, [r4, #4]
 80049fa:	04d9      	lsls	r1, r3, #19
 80049fc:	6922      	ldr	r2, [r4, #16]
 80049fe:	6022      	str	r2, [r4, #0]
 8004a00:	d504      	bpl.n	8004a0c <__sflush_r+0x78>
 8004a02:	1c42      	adds	r2, r0, #1
 8004a04:	d101      	bne.n	8004a0a <__sflush_r+0x76>
 8004a06:	682b      	ldr	r3, [r5, #0]
 8004a08:	b903      	cbnz	r3, 8004a0c <__sflush_r+0x78>
 8004a0a:	6560      	str	r0, [r4, #84]	@ 0x54
 8004a0c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004a0e:	602f      	str	r7, [r5, #0]
 8004a10:	b1b9      	cbz	r1, 8004a42 <__sflush_r+0xae>
 8004a12:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004a16:	4299      	cmp	r1, r3
 8004a18:	d002      	beq.n	8004a20 <__sflush_r+0x8c>
 8004a1a:	4628      	mov	r0, r5
 8004a1c:	f7ff fbf2 	bl	8004204 <_free_r>
 8004a20:	2300      	movs	r3, #0
 8004a22:	6363      	str	r3, [r4, #52]	@ 0x34
 8004a24:	e00d      	b.n	8004a42 <__sflush_r+0xae>
 8004a26:	2301      	movs	r3, #1
 8004a28:	4628      	mov	r0, r5
 8004a2a:	47b0      	blx	r6
 8004a2c:	4602      	mov	r2, r0
 8004a2e:	1c50      	adds	r0, r2, #1
 8004a30:	d1c9      	bne.n	80049c6 <__sflush_r+0x32>
 8004a32:	682b      	ldr	r3, [r5, #0]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d0c6      	beq.n	80049c6 <__sflush_r+0x32>
 8004a38:	2b1d      	cmp	r3, #29
 8004a3a:	d001      	beq.n	8004a40 <__sflush_r+0xac>
 8004a3c:	2b16      	cmp	r3, #22
 8004a3e:	d11e      	bne.n	8004a7e <__sflush_r+0xea>
 8004a40:	602f      	str	r7, [r5, #0]
 8004a42:	2000      	movs	r0, #0
 8004a44:	e022      	b.n	8004a8c <__sflush_r+0xf8>
 8004a46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004a4a:	b21b      	sxth	r3, r3
 8004a4c:	e01b      	b.n	8004a86 <__sflush_r+0xf2>
 8004a4e:	690f      	ldr	r7, [r1, #16]
 8004a50:	2f00      	cmp	r7, #0
 8004a52:	d0f6      	beq.n	8004a42 <__sflush_r+0xae>
 8004a54:	0793      	lsls	r3, r2, #30
 8004a56:	680e      	ldr	r6, [r1, #0]
 8004a58:	bf08      	it	eq
 8004a5a:	694b      	ldreq	r3, [r1, #20]
 8004a5c:	600f      	str	r7, [r1, #0]
 8004a5e:	bf18      	it	ne
 8004a60:	2300      	movne	r3, #0
 8004a62:	eba6 0807 	sub.w	r8, r6, r7
 8004a66:	608b      	str	r3, [r1, #8]
 8004a68:	f1b8 0f00 	cmp.w	r8, #0
 8004a6c:	dde9      	ble.n	8004a42 <__sflush_r+0xae>
 8004a6e:	6a21      	ldr	r1, [r4, #32]
 8004a70:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004a72:	4643      	mov	r3, r8
 8004a74:	463a      	mov	r2, r7
 8004a76:	4628      	mov	r0, r5
 8004a78:	47b0      	blx	r6
 8004a7a:	2800      	cmp	r0, #0
 8004a7c:	dc08      	bgt.n	8004a90 <__sflush_r+0xfc>
 8004a7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004a86:	81a3      	strh	r3, [r4, #12]
 8004a88:	f04f 30ff 	mov.w	r0, #4294967295
 8004a8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a90:	4407      	add	r7, r0
 8004a92:	eba8 0800 	sub.w	r8, r8, r0
 8004a96:	e7e7      	b.n	8004a68 <__sflush_r+0xd4>
 8004a98:	dfbffffe 	.word	0xdfbffffe

08004a9c <_fflush_r>:
 8004a9c:	b538      	push	{r3, r4, r5, lr}
 8004a9e:	690b      	ldr	r3, [r1, #16]
 8004aa0:	4605      	mov	r5, r0
 8004aa2:	460c      	mov	r4, r1
 8004aa4:	b913      	cbnz	r3, 8004aac <_fflush_r+0x10>
 8004aa6:	2500      	movs	r5, #0
 8004aa8:	4628      	mov	r0, r5
 8004aaa:	bd38      	pop	{r3, r4, r5, pc}
 8004aac:	b118      	cbz	r0, 8004ab6 <_fflush_r+0x1a>
 8004aae:	6a03      	ldr	r3, [r0, #32]
 8004ab0:	b90b      	cbnz	r3, 8004ab6 <_fflush_r+0x1a>
 8004ab2:	f7ff fa9f 	bl	8003ff4 <__sinit>
 8004ab6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d0f3      	beq.n	8004aa6 <_fflush_r+0xa>
 8004abe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004ac0:	07d0      	lsls	r0, r2, #31
 8004ac2:	d404      	bmi.n	8004ace <_fflush_r+0x32>
 8004ac4:	0599      	lsls	r1, r3, #22
 8004ac6:	d402      	bmi.n	8004ace <_fflush_r+0x32>
 8004ac8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004aca:	f7ff fb98 	bl	80041fe <__retarget_lock_acquire_recursive>
 8004ace:	4628      	mov	r0, r5
 8004ad0:	4621      	mov	r1, r4
 8004ad2:	f7ff ff5f 	bl	8004994 <__sflush_r>
 8004ad6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004ad8:	07da      	lsls	r2, r3, #31
 8004ada:	4605      	mov	r5, r0
 8004adc:	d4e4      	bmi.n	8004aa8 <_fflush_r+0xc>
 8004ade:	89a3      	ldrh	r3, [r4, #12]
 8004ae0:	059b      	lsls	r3, r3, #22
 8004ae2:	d4e1      	bmi.n	8004aa8 <_fflush_r+0xc>
 8004ae4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004ae6:	f7ff fb8b 	bl	8004200 <__retarget_lock_release_recursive>
 8004aea:	e7dd      	b.n	8004aa8 <_fflush_r+0xc>

08004aec <__swbuf_r>:
 8004aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aee:	460e      	mov	r6, r1
 8004af0:	4614      	mov	r4, r2
 8004af2:	4605      	mov	r5, r0
 8004af4:	b118      	cbz	r0, 8004afe <__swbuf_r+0x12>
 8004af6:	6a03      	ldr	r3, [r0, #32]
 8004af8:	b90b      	cbnz	r3, 8004afe <__swbuf_r+0x12>
 8004afa:	f7ff fa7b 	bl	8003ff4 <__sinit>
 8004afe:	69a3      	ldr	r3, [r4, #24]
 8004b00:	60a3      	str	r3, [r4, #8]
 8004b02:	89a3      	ldrh	r3, [r4, #12]
 8004b04:	071a      	lsls	r2, r3, #28
 8004b06:	d501      	bpl.n	8004b0c <__swbuf_r+0x20>
 8004b08:	6923      	ldr	r3, [r4, #16]
 8004b0a:	b943      	cbnz	r3, 8004b1e <__swbuf_r+0x32>
 8004b0c:	4621      	mov	r1, r4
 8004b0e:	4628      	mov	r0, r5
 8004b10:	f000 f82a 	bl	8004b68 <__swsetup_r>
 8004b14:	b118      	cbz	r0, 8004b1e <__swbuf_r+0x32>
 8004b16:	f04f 37ff 	mov.w	r7, #4294967295
 8004b1a:	4638      	mov	r0, r7
 8004b1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b1e:	6823      	ldr	r3, [r4, #0]
 8004b20:	6922      	ldr	r2, [r4, #16]
 8004b22:	1a98      	subs	r0, r3, r2
 8004b24:	6963      	ldr	r3, [r4, #20]
 8004b26:	b2f6      	uxtb	r6, r6
 8004b28:	4283      	cmp	r3, r0
 8004b2a:	4637      	mov	r7, r6
 8004b2c:	dc05      	bgt.n	8004b3a <__swbuf_r+0x4e>
 8004b2e:	4621      	mov	r1, r4
 8004b30:	4628      	mov	r0, r5
 8004b32:	f7ff ffb3 	bl	8004a9c <_fflush_r>
 8004b36:	2800      	cmp	r0, #0
 8004b38:	d1ed      	bne.n	8004b16 <__swbuf_r+0x2a>
 8004b3a:	68a3      	ldr	r3, [r4, #8]
 8004b3c:	3b01      	subs	r3, #1
 8004b3e:	60a3      	str	r3, [r4, #8]
 8004b40:	6823      	ldr	r3, [r4, #0]
 8004b42:	1c5a      	adds	r2, r3, #1
 8004b44:	6022      	str	r2, [r4, #0]
 8004b46:	701e      	strb	r6, [r3, #0]
 8004b48:	6962      	ldr	r2, [r4, #20]
 8004b4a:	1c43      	adds	r3, r0, #1
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	d004      	beq.n	8004b5a <__swbuf_r+0x6e>
 8004b50:	89a3      	ldrh	r3, [r4, #12]
 8004b52:	07db      	lsls	r3, r3, #31
 8004b54:	d5e1      	bpl.n	8004b1a <__swbuf_r+0x2e>
 8004b56:	2e0a      	cmp	r6, #10
 8004b58:	d1df      	bne.n	8004b1a <__swbuf_r+0x2e>
 8004b5a:	4621      	mov	r1, r4
 8004b5c:	4628      	mov	r0, r5
 8004b5e:	f7ff ff9d 	bl	8004a9c <_fflush_r>
 8004b62:	2800      	cmp	r0, #0
 8004b64:	d0d9      	beq.n	8004b1a <__swbuf_r+0x2e>
 8004b66:	e7d6      	b.n	8004b16 <__swbuf_r+0x2a>

08004b68 <__swsetup_r>:
 8004b68:	b538      	push	{r3, r4, r5, lr}
 8004b6a:	4b29      	ldr	r3, [pc, #164]	@ (8004c10 <__swsetup_r+0xa8>)
 8004b6c:	4605      	mov	r5, r0
 8004b6e:	6818      	ldr	r0, [r3, #0]
 8004b70:	460c      	mov	r4, r1
 8004b72:	b118      	cbz	r0, 8004b7c <__swsetup_r+0x14>
 8004b74:	6a03      	ldr	r3, [r0, #32]
 8004b76:	b90b      	cbnz	r3, 8004b7c <__swsetup_r+0x14>
 8004b78:	f7ff fa3c 	bl	8003ff4 <__sinit>
 8004b7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b80:	0719      	lsls	r1, r3, #28
 8004b82:	d422      	bmi.n	8004bca <__swsetup_r+0x62>
 8004b84:	06da      	lsls	r2, r3, #27
 8004b86:	d407      	bmi.n	8004b98 <__swsetup_r+0x30>
 8004b88:	2209      	movs	r2, #9
 8004b8a:	602a      	str	r2, [r5, #0]
 8004b8c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004b90:	81a3      	strh	r3, [r4, #12]
 8004b92:	f04f 30ff 	mov.w	r0, #4294967295
 8004b96:	e033      	b.n	8004c00 <__swsetup_r+0x98>
 8004b98:	0758      	lsls	r0, r3, #29
 8004b9a:	d512      	bpl.n	8004bc2 <__swsetup_r+0x5a>
 8004b9c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004b9e:	b141      	cbz	r1, 8004bb2 <__swsetup_r+0x4a>
 8004ba0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004ba4:	4299      	cmp	r1, r3
 8004ba6:	d002      	beq.n	8004bae <__swsetup_r+0x46>
 8004ba8:	4628      	mov	r0, r5
 8004baa:	f7ff fb2b 	bl	8004204 <_free_r>
 8004bae:	2300      	movs	r3, #0
 8004bb0:	6363      	str	r3, [r4, #52]	@ 0x34
 8004bb2:	89a3      	ldrh	r3, [r4, #12]
 8004bb4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004bb8:	81a3      	strh	r3, [r4, #12]
 8004bba:	2300      	movs	r3, #0
 8004bbc:	6063      	str	r3, [r4, #4]
 8004bbe:	6923      	ldr	r3, [r4, #16]
 8004bc0:	6023      	str	r3, [r4, #0]
 8004bc2:	89a3      	ldrh	r3, [r4, #12]
 8004bc4:	f043 0308 	orr.w	r3, r3, #8
 8004bc8:	81a3      	strh	r3, [r4, #12]
 8004bca:	6923      	ldr	r3, [r4, #16]
 8004bcc:	b94b      	cbnz	r3, 8004be2 <__swsetup_r+0x7a>
 8004bce:	89a3      	ldrh	r3, [r4, #12]
 8004bd0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004bd4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004bd8:	d003      	beq.n	8004be2 <__swsetup_r+0x7a>
 8004bda:	4621      	mov	r1, r4
 8004bdc:	4628      	mov	r0, r5
 8004bde:	f000 f84f 	bl	8004c80 <__smakebuf_r>
 8004be2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004be6:	f013 0201 	ands.w	r2, r3, #1
 8004bea:	d00a      	beq.n	8004c02 <__swsetup_r+0x9a>
 8004bec:	2200      	movs	r2, #0
 8004bee:	60a2      	str	r2, [r4, #8]
 8004bf0:	6962      	ldr	r2, [r4, #20]
 8004bf2:	4252      	negs	r2, r2
 8004bf4:	61a2      	str	r2, [r4, #24]
 8004bf6:	6922      	ldr	r2, [r4, #16]
 8004bf8:	b942      	cbnz	r2, 8004c0c <__swsetup_r+0xa4>
 8004bfa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004bfe:	d1c5      	bne.n	8004b8c <__swsetup_r+0x24>
 8004c00:	bd38      	pop	{r3, r4, r5, pc}
 8004c02:	0799      	lsls	r1, r3, #30
 8004c04:	bf58      	it	pl
 8004c06:	6962      	ldrpl	r2, [r4, #20]
 8004c08:	60a2      	str	r2, [r4, #8]
 8004c0a:	e7f4      	b.n	8004bf6 <__swsetup_r+0x8e>
 8004c0c:	2000      	movs	r0, #0
 8004c0e:	e7f7      	b.n	8004c00 <__swsetup_r+0x98>
 8004c10:	20000018 	.word	0x20000018

08004c14 <_sbrk_r>:
 8004c14:	b538      	push	{r3, r4, r5, lr}
 8004c16:	4d06      	ldr	r5, [pc, #24]	@ (8004c30 <_sbrk_r+0x1c>)
 8004c18:	2300      	movs	r3, #0
 8004c1a:	4604      	mov	r4, r0
 8004c1c:	4608      	mov	r0, r1
 8004c1e:	602b      	str	r3, [r5, #0]
 8004c20:	f7fb ff3a 	bl	8000a98 <_sbrk>
 8004c24:	1c43      	adds	r3, r0, #1
 8004c26:	d102      	bne.n	8004c2e <_sbrk_r+0x1a>
 8004c28:	682b      	ldr	r3, [r5, #0]
 8004c2a:	b103      	cbz	r3, 8004c2e <_sbrk_r+0x1a>
 8004c2c:	6023      	str	r3, [r4, #0]
 8004c2e:	bd38      	pop	{r3, r4, r5, pc}
 8004c30:	200002a8 	.word	0x200002a8

08004c34 <__swhatbuf_r>:
 8004c34:	b570      	push	{r4, r5, r6, lr}
 8004c36:	460c      	mov	r4, r1
 8004c38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c3c:	2900      	cmp	r1, #0
 8004c3e:	b096      	sub	sp, #88	@ 0x58
 8004c40:	4615      	mov	r5, r2
 8004c42:	461e      	mov	r6, r3
 8004c44:	da0d      	bge.n	8004c62 <__swhatbuf_r+0x2e>
 8004c46:	89a3      	ldrh	r3, [r4, #12]
 8004c48:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004c4c:	f04f 0100 	mov.w	r1, #0
 8004c50:	bf14      	ite	ne
 8004c52:	2340      	movne	r3, #64	@ 0x40
 8004c54:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004c58:	2000      	movs	r0, #0
 8004c5a:	6031      	str	r1, [r6, #0]
 8004c5c:	602b      	str	r3, [r5, #0]
 8004c5e:	b016      	add	sp, #88	@ 0x58
 8004c60:	bd70      	pop	{r4, r5, r6, pc}
 8004c62:	466a      	mov	r2, sp
 8004c64:	f000 f848 	bl	8004cf8 <_fstat_r>
 8004c68:	2800      	cmp	r0, #0
 8004c6a:	dbec      	blt.n	8004c46 <__swhatbuf_r+0x12>
 8004c6c:	9901      	ldr	r1, [sp, #4]
 8004c6e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004c72:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004c76:	4259      	negs	r1, r3
 8004c78:	4159      	adcs	r1, r3
 8004c7a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004c7e:	e7eb      	b.n	8004c58 <__swhatbuf_r+0x24>

08004c80 <__smakebuf_r>:
 8004c80:	898b      	ldrh	r3, [r1, #12]
 8004c82:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004c84:	079d      	lsls	r5, r3, #30
 8004c86:	4606      	mov	r6, r0
 8004c88:	460c      	mov	r4, r1
 8004c8a:	d507      	bpl.n	8004c9c <__smakebuf_r+0x1c>
 8004c8c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004c90:	6023      	str	r3, [r4, #0]
 8004c92:	6123      	str	r3, [r4, #16]
 8004c94:	2301      	movs	r3, #1
 8004c96:	6163      	str	r3, [r4, #20]
 8004c98:	b003      	add	sp, #12
 8004c9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c9c:	ab01      	add	r3, sp, #4
 8004c9e:	466a      	mov	r2, sp
 8004ca0:	f7ff ffc8 	bl	8004c34 <__swhatbuf_r>
 8004ca4:	9f00      	ldr	r7, [sp, #0]
 8004ca6:	4605      	mov	r5, r0
 8004ca8:	4639      	mov	r1, r7
 8004caa:	4630      	mov	r0, r6
 8004cac:	f7ff fb16 	bl	80042dc <_malloc_r>
 8004cb0:	b948      	cbnz	r0, 8004cc6 <__smakebuf_r+0x46>
 8004cb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004cb6:	059a      	lsls	r2, r3, #22
 8004cb8:	d4ee      	bmi.n	8004c98 <__smakebuf_r+0x18>
 8004cba:	f023 0303 	bic.w	r3, r3, #3
 8004cbe:	f043 0302 	orr.w	r3, r3, #2
 8004cc2:	81a3      	strh	r3, [r4, #12]
 8004cc4:	e7e2      	b.n	8004c8c <__smakebuf_r+0xc>
 8004cc6:	89a3      	ldrh	r3, [r4, #12]
 8004cc8:	6020      	str	r0, [r4, #0]
 8004cca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004cce:	81a3      	strh	r3, [r4, #12]
 8004cd0:	9b01      	ldr	r3, [sp, #4]
 8004cd2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004cd6:	b15b      	cbz	r3, 8004cf0 <__smakebuf_r+0x70>
 8004cd8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004cdc:	4630      	mov	r0, r6
 8004cde:	f000 f81d 	bl	8004d1c <_isatty_r>
 8004ce2:	b128      	cbz	r0, 8004cf0 <__smakebuf_r+0x70>
 8004ce4:	89a3      	ldrh	r3, [r4, #12]
 8004ce6:	f023 0303 	bic.w	r3, r3, #3
 8004cea:	f043 0301 	orr.w	r3, r3, #1
 8004cee:	81a3      	strh	r3, [r4, #12]
 8004cf0:	89a3      	ldrh	r3, [r4, #12]
 8004cf2:	431d      	orrs	r5, r3
 8004cf4:	81a5      	strh	r5, [r4, #12]
 8004cf6:	e7cf      	b.n	8004c98 <__smakebuf_r+0x18>

08004cf8 <_fstat_r>:
 8004cf8:	b538      	push	{r3, r4, r5, lr}
 8004cfa:	4d07      	ldr	r5, [pc, #28]	@ (8004d18 <_fstat_r+0x20>)
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	4604      	mov	r4, r0
 8004d00:	4608      	mov	r0, r1
 8004d02:	4611      	mov	r1, r2
 8004d04:	602b      	str	r3, [r5, #0]
 8004d06:	f7fb fe9e 	bl	8000a46 <_fstat>
 8004d0a:	1c43      	adds	r3, r0, #1
 8004d0c:	d102      	bne.n	8004d14 <_fstat_r+0x1c>
 8004d0e:	682b      	ldr	r3, [r5, #0]
 8004d10:	b103      	cbz	r3, 8004d14 <_fstat_r+0x1c>
 8004d12:	6023      	str	r3, [r4, #0]
 8004d14:	bd38      	pop	{r3, r4, r5, pc}
 8004d16:	bf00      	nop
 8004d18:	200002a8 	.word	0x200002a8

08004d1c <_isatty_r>:
 8004d1c:	b538      	push	{r3, r4, r5, lr}
 8004d1e:	4d06      	ldr	r5, [pc, #24]	@ (8004d38 <_isatty_r+0x1c>)
 8004d20:	2300      	movs	r3, #0
 8004d22:	4604      	mov	r4, r0
 8004d24:	4608      	mov	r0, r1
 8004d26:	602b      	str	r3, [r5, #0]
 8004d28:	f7fb fe9d 	bl	8000a66 <_isatty>
 8004d2c:	1c43      	adds	r3, r0, #1
 8004d2e:	d102      	bne.n	8004d36 <_isatty_r+0x1a>
 8004d30:	682b      	ldr	r3, [r5, #0]
 8004d32:	b103      	cbz	r3, 8004d36 <_isatty_r+0x1a>
 8004d34:	6023      	str	r3, [r4, #0]
 8004d36:	bd38      	pop	{r3, r4, r5, pc}
 8004d38:	200002a8 	.word	0x200002a8

08004d3c <_init>:
 8004d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d3e:	bf00      	nop
 8004d40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d42:	bc08      	pop	{r3}
 8004d44:	469e      	mov	lr, r3
 8004d46:	4770      	bx	lr

08004d48 <_fini>:
 8004d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d4a:	bf00      	nop
 8004d4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d4e:	bc08      	pop	{r3}
 8004d50:	469e      	mov	lr, r3
 8004d52:	4770      	bx	lr
