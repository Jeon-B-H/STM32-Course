
Personal_Project_Car_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000757c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  0800771c  0800771c  0000871c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080077d8  080077d8  00009060  2**0
                  CONTENTS
  4 .ARM          00000008  080077d8  080077d8  000087d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080077e0  080077e0  00009060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080077e0  080077e0  000087e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080077e4  080077e4  000087e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080077e8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004de4  20000060  08007848  00009060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004e44  08007848  00009e44  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cb1e  00000000  00000000  00009090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004501  00000000  00000000  00025bae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001740  00000000  00000000  0002a0b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011ed  00000000  00000000  0002b7f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b793  00000000  00000000  0002c9dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001dfcf  00000000  00000000  00048170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a4ea5  00000000  00000000  0006613f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010afe4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006228  00000000  00000000  0010b028  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  00111250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007704 	.word	0x08007704

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	08007704 	.word	0x08007704

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b96a 	b.w	80004cc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	460c      	mov	r4, r1
 8000218:	2b00      	cmp	r3, #0
 800021a:	d14e      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021c:	4694      	mov	ip, r2
 800021e:	458c      	cmp	ip, r1
 8000220:	4686      	mov	lr, r0
 8000222:	fab2 f282 	clz	r2, r2
 8000226:	d962      	bls.n	80002ee <__udivmoddi4+0xde>
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0320 	rsb	r3, r2, #32
 800022e:	4091      	lsls	r1, r2
 8000230:	fa20 f303 	lsr.w	r3, r0, r3
 8000234:	fa0c fc02 	lsl.w	ip, ip, r2
 8000238:	4319      	orrs	r1, r3
 800023a:	fa00 fe02 	lsl.w	lr, r0, r2
 800023e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000242:	fa1f f68c 	uxth.w	r6, ip
 8000246:	fbb1 f4f7 	udiv	r4, r1, r7
 800024a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800024e:	fb07 1114 	mls	r1, r7, r4, r1
 8000252:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000256:	fb04 f106 	mul.w	r1, r4, r6
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f104 30ff 	add.w	r0, r4, #4294967295
 8000266:	f080 8112 	bcs.w	800048e <__udivmoddi4+0x27e>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 810f 	bls.w	800048e <__udivmoddi4+0x27e>
 8000270:	3c02      	subs	r4, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a59      	subs	r1, r3, r1
 8000276:	fa1f f38e 	uxth.w	r3, lr
 800027a:	fbb1 f0f7 	udiv	r0, r1, r7
 800027e:	fb07 1110 	mls	r1, r7, r0, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb00 f606 	mul.w	r6, r0, r6
 800028a:	429e      	cmp	r6, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x94>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f100 31ff 	add.w	r1, r0, #4294967295
 8000296:	f080 80fc 	bcs.w	8000492 <__udivmoddi4+0x282>
 800029a:	429e      	cmp	r6, r3
 800029c:	f240 80f9 	bls.w	8000492 <__udivmoddi4+0x282>
 80002a0:	4463      	add	r3, ip
 80002a2:	3802      	subs	r0, #2
 80002a4:	1b9b      	subs	r3, r3, r6
 80002a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002aa:	2100      	movs	r1, #0
 80002ac:	b11d      	cbz	r5, 80002b6 <__udivmoddi4+0xa6>
 80002ae:	40d3      	lsrs	r3, r2
 80002b0:	2200      	movs	r2, #0
 80002b2:	e9c5 3200 	strd	r3, r2, [r5]
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d905      	bls.n	80002ca <__udivmoddi4+0xba>
 80002be:	b10d      	cbz	r5, 80002c4 <__udivmoddi4+0xb4>
 80002c0:	e9c5 0100 	strd	r0, r1, [r5]
 80002c4:	2100      	movs	r1, #0
 80002c6:	4608      	mov	r0, r1
 80002c8:	e7f5      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ca:	fab3 f183 	clz	r1, r3
 80002ce:	2900      	cmp	r1, #0
 80002d0:	d146      	bne.n	8000360 <__udivmoddi4+0x150>
 80002d2:	42a3      	cmp	r3, r4
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xcc>
 80002d6:	4290      	cmp	r0, r2
 80002d8:	f0c0 80f0 	bcc.w	80004bc <__udivmoddi4+0x2ac>
 80002dc:	1a86      	subs	r6, r0, r2
 80002de:	eb64 0303 	sbc.w	r3, r4, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	2d00      	cmp	r5, #0
 80002e6:	d0e6      	beq.n	80002b6 <__udivmoddi4+0xa6>
 80002e8:	e9c5 6300 	strd	r6, r3, [r5]
 80002ec:	e7e3      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x204>
 80002f4:	eba1 040c 	sub.w	r4, r1, ip
 80002f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002fc:	fa1f f78c 	uxth.w	r7, ip
 8000300:	2101      	movs	r1, #1
 8000302:	fbb4 f6f8 	udiv	r6, r4, r8
 8000306:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030a:	fb08 4416 	mls	r4, r8, r6, r4
 800030e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000312:	fb07 f006 	mul.w	r0, r7, r6
 8000316:	4298      	cmp	r0, r3
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x11c>
 800031a:	eb1c 0303 	adds.w	r3, ip, r3
 800031e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x11a>
 8000324:	4298      	cmp	r0, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 800032a:	4626      	mov	r6, r4
 800032c:	1a1c      	subs	r4, r3, r0
 800032e:	fa1f f38e 	uxth.w	r3, lr
 8000332:	fbb4 f0f8 	udiv	r0, r4, r8
 8000336:	fb08 4410 	mls	r4, r8, r0, r4
 800033a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033e:	fb00 f707 	mul.w	r7, r0, r7
 8000342:	429f      	cmp	r7, r3
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x148>
 8000346:	eb1c 0303 	adds.w	r3, ip, r3
 800034a:	f100 34ff 	add.w	r4, r0, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x146>
 8000350:	429f      	cmp	r7, r3
 8000352:	f200 80b0 	bhi.w	80004b6 <__udivmoddi4+0x2a6>
 8000356:	4620      	mov	r0, r4
 8000358:	1bdb      	subs	r3, r3, r7
 800035a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800035e:	e7a5      	b.n	80002ac <__udivmoddi4+0x9c>
 8000360:	f1c1 0620 	rsb	r6, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 f706 	lsr.w	r7, r2, r6
 800036a:	431f      	orrs	r7, r3
 800036c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000370:	fa04 f301 	lsl.w	r3, r4, r1
 8000374:	ea43 030c 	orr.w	r3, r3, ip
 8000378:	40f4      	lsrs	r4, r6
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	0c38      	lsrs	r0, r7, #16
 8000380:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000384:	fbb4 fef0 	udiv	lr, r4, r0
 8000388:	fa1f fc87 	uxth.w	ip, r7
 800038c:	fb00 441e 	mls	r4, r0, lr, r4
 8000390:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000394:	fb0e f90c 	mul.w	r9, lr, ip
 8000398:	45a1      	cmp	r9, r4
 800039a:	fa02 f201 	lsl.w	r2, r2, r1
 800039e:	d90a      	bls.n	80003b6 <__udivmoddi4+0x1a6>
 80003a0:	193c      	adds	r4, r7, r4
 80003a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003a6:	f080 8084 	bcs.w	80004b2 <__udivmoddi4+0x2a2>
 80003aa:	45a1      	cmp	r9, r4
 80003ac:	f240 8081 	bls.w	80004b2 <__udivmoddi4+0x2a2>
 80003b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003b4:	443c      	add	r4, r7
 80003b6:	eba4 0409 	sub.w	r4, r4, r9
 80003ba:	fa1f f983 	uxth.w	r9, r3
 80003be:	fbb4 f3f0 	udiv	r3, r4, r0
 80003c2:	fb00 4413 	mls	r4, r0, r3, r4
 80003c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d907      	bls.n	80003e2 <__udivmoddi4+0x1d2>
 80003d2:	193c      	adds	r4, r7, r4
 80003d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d8:	d267      	bcs.n	80004aa <__udivmoddi4+0x29a>
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d965      	bls.n	80004aa <__udivmoddi4+0x29a>
 80003de:	3b02      	subs	r3, #2
 80003e0:	443c      	add	r4, r7
 80003e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003e6:	fba0 9302 	umull	r9, r3, r0, r2
 80003ea:	eba4 040c 	sub.w	r4, r4, ip
 80003ee:	429c      	cmp	r4, r3
 80003f0:	46ce      	mov	lr, r9
 80003f2:	469c      	mov	ip, r3
 80003f4:	d351      	bcc.n	800049a <__udivmoddi4+0x28a>
 80003f6:	d04e      	beq.n	8000496 <__udivmoddi4+0x286>
 80003f8:	b155      	cbz	r5, 8000410 <__udivmoddi4+0x200>
 80003fa:	ebb8 030e 	subs.w	r3, r8, lr
 80003fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000402:	fa04 f606 	lsl.w	r6, r4, r6
 8000406:	40cb      	lsrs	r3, r1
 8000408:	431e      	orrs	r6, r3
 800040a:	40cc      	lsrs	r4, r1
 800040c:	e9c5 6400 	strd	r6, r4, [r5]
 8000410:	2100      	movs	r1, #0
 8000412:	e750      	b.n	80002b6 <__udivmoddi4+0xa6>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f103 	lsr.w	r1, r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa24 f303 	lsr.w	r3, r4, r3
 8000424:	4094      	lsls	r4, r2
 8000426:	430c      	orrs	r4, r1
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000430:	fa1f f78c 	uxth.w	r7, ip
 8000434:	fbb3 f0f8 	udiv	r0, r3, r8
 8000438:	fb08 3110 	mls	r1, r8, r0, r3
 800043c:	0c23      	lsrs	r3, r4, #16
 800043e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000442:	fb00 f107 	mul.w	r1, r0, r7
 8000446:	4299      	cmp	r1, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x24c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000452:	d22c      	bcs.n	80004ae <__udivmoddi4+0x29e>
 8000454:	4299      	cmp	r1, r3
 8000456:	d92a      	bls.n	80004ae <__udivmoddi4+0x29e>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b2a4      	uxth	r4, r4
 8000460:	fbb3 f1f8 	udiv	r1, r3, r8
 8000464:	fb08 3311 	mls	r3, r8, r1, r3
 8000468:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800046c:	fb01 f307 	mul.w	r3, r1, r7
 8000470:	42a3      	cmp	r3, r4
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x276>
 8000474:	eb1c 0404 	adds.w	r4, ip, r4
 8000478:	f101 36ff 	add.w	r6, r1, #4294967295
 800047c:	d213      	bcs.n	80004a6 <__udivmoddi4+0x296>
 800047e:	42a3      	cmp	r3, r4
 8000480:	d911      	bls.n	80004a6 <__udivmoddi4+0x296>
 8000482:	3902      	subs	r1, #2
 8000484:	4464      	add	r4, ip
 8000486:	1ae4      	subs	r4, r4, r3
 8000488:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800048c:	e739      	b.n	8000302 <__udivmoddi4+0xf2>
 800048e:	4604      	mov	r4, r0
 8000490:	e6f0      	b.n	8000274 <__udivmoddi4+0x64>
 8000492:	4608      	mov	r0, r1
 8000494:	e706      	b.n	80002a4 <__udivmoddi4+0x94>
 8000496:	45c8      	cmp	r8, r9
 8000498:	d2ae      	bcs.n	80003f8 <__udivmoddi4+0x1e8>
 800049a:	ebb9 0e02 	subs.w	lr, r9, r2
 800049e:	eb63 0c07 	sbc.w	ip, r3, r7
 80004a2:	3801      	subs	r0, #1
 80004a4:	e7a8      	b.n	80003f8 <__udivmoddi4+0x1e8>
 80004a6:	4631      	mov	r1, r6
 80004a8:	e7ed      	b.n	8000486 <__udivmoddi4+0x276>
 80004aa:	4603      	mov	r3, r0
 80004ac:	e799      	b.n	80003e2 <__udivmoddi4+0x1d2>
 80004ae:	4630      	mov	r0, r6
 80004b0:	e7d4      	b.n	800045c <__udivmoddi4+0x24c>
 80004b2:	46d6      	mov	lr, sl
 80004b4:	e77f      	b.n	80003b6 <__udivmoddi4+0x1a6>
 80004b6:	4463      	add	r3, ip
 80004b8:	3802      	subs	r0, #2
 80004ba:	e74d      	b.n	8000358 <__udivmoddi4+0x148>
 80004bc:	4606      	mov	r6, r0
 80004be:	4623      	mov	r3, r4
 80004c0:	4608      	mov	r0, r1
 80004c2:	e70f      	b.n	80002e4 <__udivmoddi4+0xd4>
 80004c4:	3e02      	subs	r6, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	e730      	b.n	800032c <__udivmoddi4+0x11c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b084      	sub	sp, #16
 80004d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004d6:	463b      	mov	r3, r7
 80004d8:	2200      	movs	r2, #0
 80004da:	601a      	str	r2, [r3, #0]
 80004dc:	605a      	str	r2, [r3, #4]
 80004de:	609a      	str	r2, [r3, #8]
 80004e0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80004e2:	4b28      	ldr	r3, [pc, #160]	@ (8000584 <MX_ADC1_Init+0xb4>)
 80004e4:	4a28      	ldr	r2, [pc, #160]	@ (8000588 <MX_ADC1_Init+0xb8>)
 80004e6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80004e8:	4b26      	ldr	r3, [pc, #152]	@ (8000584 <MX_ADC1_Init+0xb4>)
 80004ea:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80004ee:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80004f0:	4b24      	ldr	r3, [pc, #144]	@ (8000584 <MX_ADC1_Init+0xb4>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80004f6:	4b23      	ldr	r3, [pc, #140]	@ (8000584 <MX_ADC1_Init+0xb4>)
 80004f8:	2201      	movs	r2, #1
 80004fa:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80004fc:	4b21      	ldr	r3, [pc, #132]	@ (8000584 <MX_ADC1_Init+0xb4>)
 80004fe:	2201      	movs	r2, #1
 8000500:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000502:	4b20      	ldr	r3, [pc, #128]	@ (8000584 <MX_ADC1_Init+0xb4>)
 8000504:	2200      	movs	r2, #0
 8000506:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800050a:	4b1e      	ldr	r3, [pc, #120]	@ (8000584 <MX_ADC1_Init+0xb4>)
 800050c:	2200      	movs	r2, #0
 800050e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000510:	4b1c      	ldr	r3, [pc, #112]	@ (8000584 <MX_ADC1_Init+0xb4>)
 8000512:	4a1e      	ldr	r2, [pc, #120]	@ (800058c <MX_ADC1_Init+0xbc>)
 8000514:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000516:	4b1b      	ldr	r3, [pc, #108]	@ (8000584 <MX_ADC1_Init+0xb4>)
 8000518:	2200      	movs	r2, #0
 800051a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 800051c:	4b19      	ldr	r3, [pc, #100]	@ (8000584 <MX_ADC1_Init+0xb4>)
 800051e:	2202      	movs	r2, #2
 8000520:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000522:	4b18      	ldr	r3, [pc, #96]	@ (8000584 <MX_ADC1_Init+0xb4>)
 8000524:	2201      	movs	r2, #1
 8000526:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800052a:	4b16      	ldr	r3, [pc, #88]	@ (8000584 <MX_ADC1_Init+0xb4>)
 800052c:	2201      	movs	r2, #1
 800052e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000530:	4814      	ldr	r0, [pc, #80]	@ (8000584 <MX_ADC1_Init+0xb4>)
 8000532:	f000 fe37 	bl	80011a4 <HAL_ADC_Init>
 8000536:	4603      	mov	r3, r0
 8000538:	2b00      	cmp	r3, #0
 800053a:	d001      	beq.n	8000540 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800053c:	f000 fa30 	bl	80009a0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000540:	2308      	movs	r3, #8
 8000542:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000544:	2301      	movs	r3, #1
 8000546:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8000548:	2306      	movs	r3, #6
 800054a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800054c:	463b      	mov	r3, r7
 800054e:	4619      	mov	r1, r3
 8000550:	480c      	ldr	r0, [pc, #48]	@ (8000584 <MX_ADC1_Init+0xb4>)
 8000552:	f000 ff99 	bl	8001488 <HAL_ADC_ConfigChannel>
 8000556:	4603      	mov	r3, r0
 8000558:	2b00      	cmp	r3, #0
 800055a:	d001      	beq.n	8000560 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800055c:	f000 fa20 	bl	80009a0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000560:	2309      	movs	r3, #9
 8000562:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000564:	2302      	movs	r3, #2
 8000566:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000568:	463b      	mov	r3, r7
 800056a:	4619      	mov	r1, r3
 800056c:	4805      	ldr	r0, [pc, #20]	@ (8000584 <MX_ADC1_Init+0xb4>)
 800056e:	f000 ff8b 	bl	8001488 <HAL_ADC_ConfigChannel>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	d001      	beq.n	800057c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000578:	f000 fa12 	bl	80009a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800057c:	bf00      	nop
 800057e:	3710      	adds	r7, #16
 8000580:	46bd      	mov	sp, r7
 8000582:	bd80      	pop	{r7, pc}
 8000584:	2000007c 	.word	0x2000007c
 8000588:	40012000 	.word	0x40012000
 800058c:	0f000001 	.word	0x0f000001

08000590 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b08a      	sub	sp, #40	@ 0x28
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000598:	f107 0314 	add.w	r3, r7, #20
 800059c:	2200      	movs	r2, #0
 800059e:	601a      	str	r2, [r3, #0]
 80005a0:	605a      	str	r2, [r3, #4]
 80005a2:	609a      	str	r2, [r3, #8]
 80005a4:	60da      	str	r2, [r3, #12]
 80005a6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	4a33      	ldr	r2, [pc, #204]	@ (800067c <HAL_ADC_MspInit+0xec>)
 80005ae:	4293      	cmp	r3, r2
 80005b0:	d15f      	bne.n	8000672 <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80005b2:	2300      	movs	r3, #0
 80005b4:	613b      	str	r3, [r7, #16]
 80005b6:	4b32      	ldr	r3, [pc, #200]	@ (8000680 <HAL_ADC_MspInit+0xf0>)
 80005b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80005ba:	4a31      	ldr	r2, [pc, #196]	@ (8000680 <HAL_ADC_MspInit+0xf0>)
 80005bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80005c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80005c2:	4b2f      	ldr	r3, [pc, #188]	@ (8000680 <HAL_ADC_MspInit+0xf0>)
 80005c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80005c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80005ca:	613b      	str	r3, [r7, #16]
 80005cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ce:	2300      	movs	r3, #0
 80005d0:	60fb      	str	r3, [r7, #12]
 80005d2:	4b2b      	ldr	r3, [pc, #172]	@ (8000680 <HAL_ADC_MspInit+0xf0>)
 80005d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005d6:	4a2a      	ldr	r2, [pc, #168]	@ (8000680 <HAL_ADC_MspInit+0xf0>)
 80005d8:	f043 0302 	orr.w	r3, r3, #2
 80005dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80005de:	4b28      	ldr	r3, [pc, #160]	@ (8000680 <HAL_ADC_MspInit+0xf0>)
 80005e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005e2:	f003 0302 	and.w	r3, r3, #2
 80005e6:	60fb      	str	r3, [r7, #12]
 80005e8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80005ea:	2303      	movs	r3, #3
 80005ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005ee:	2303      	movs	r3, #3
 80005f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f2:	2300      	movs	r3, #0
 80005f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005f6:	f107 0314 	add.w	r3, r7, #20
 80005fa:	4619      	mov	r1, r3
 80005fc:	4821      	ldr	r0, [pc, #132]	@ (8000684 <HAL_ADC_MspInit+0xf4>)
 80005fe:	f001 fdcd 	bl	800219c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000602:	4b21      	ldr	r3, [pc, #132]	@ (8000688 <HAL_ADC_MspInit+0xf8>)
 8000604:	4a21      	ldr	r2, [pc, #132]	@ (800068c <HAL_ADC_MspInit+0xfc>)
 8000606:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000608:	4b1f      	ldr	r3, [pc, #124]	@ (8000688 <HAL_ADC_MspInit+0xf8>)
 800060a:	2200      	movs	r2, #0
 800060c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800060e:	4b1e      	ldr	r3, [pc, #120]	@ (8000688 <HAL_ADC_MspInit+0xf8>)
 8000610:	2200      	movs	r2, #0
 8000612:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000614:	4b1c      	ldr	r3, [pc, #112]	@ (8000688 <HAL_ADC_MspInit+0xf8>)
 8000616:	2200      	movs	r2, #0
 8000618:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800061a:	4b1b      	ldr	r3, [pc, #108]	@ (8000688 <HAL_ADC_MspInit+0xf8>)
 800061c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000620:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000622:	4b19      	ldr	r3, [pc, #100]	@ (8000688 <HAL_ADC_MspInit+0xf8>)
 8000624:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000628:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800062a:	4b17      	ldr	r3, [pc, #92]	@ (8000688 <HAL_ADC_MspInit+0xf8>)
 800062c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000630:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000632:	4b15      	ldr	r3, [pc, #84]	@ (8000688 <HAL_ADC_MspInit+0xf8>)
 8000634:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000638:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800063a:	4b13      	ldr	r3, [pc, #76]	@ (8000688 <HAL_ADC_MspInit+0xf8>)
 800063c:	2200      	movs	r2, #0
 800063e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000640:	4b11      	ldr	r3, [pc, #68]	@ (8000688 <HAL_ADC_MspInit+0xf8>)
 8000642:	2200      	movs	r2, #0
 8000644:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000646:	4810      	ldr	r0, [pc, #64]	@ (8000688 <HAL_ADC_MspInit+0xf8>)
 8000648:	f001 fa38 	bl	8001abc <HAL_DMA_Init>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000652:	f000 f9a5 	bl	80009a0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	4a0b      	ldr	r2, [pc, #44]	@ (8000688 <HAL_ADC_MspInit+0xf8>)
 800065a:	639a      	str	r2, [r3, #56]	@ 0x38
 800065c:	4a0a      	ldr	r2, [pc, #40]	@ (8000688 <HAL_ADC_MspInit+0xf8>)
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8000662:	2200      	movs	r2, #0
 8000664:	2105      	movs	r1, #5
 8000666:	2012      	movs	r0, #18
 8000668:	f001 f9fe 	bl	8001a68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800066c:	2012      	movs	r0, #18
 800066e:	f001 fa17 	bl	8001aa0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000672:	bf00      	nop
 8000674:	3728      	adds	r7, #40	@ 0x28
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	40012000 	.word	0x40012000
 8000680:	40023800 	.word	0x40023800
 8000684:	40020400 	.word	0x40020400
 8000688:	200000c4 	.word	0x200000c4
 800068c:	40026410 	.word	0x40026410

08000690 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000696:	2300      	movs	r3, #0
 8000698:	607b      	str	r3, [r7, #4]
 800069a:	4b14      	ldr	r3, [pc, #80]	@ (80006ec <MX_DMA_Init+0x5c>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800069e:	4a13      	ldr	r2, [pc, #76]	@ (80006ec <MX_DMA_Init+0x5c>)
 80006a0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80006a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006a6:	4b11      	ldr	r3, [pc, #68]	@ (80006ec <MX_DMA_Init+0x5c>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80006ae:	607b      	str	r3, [r7, #4]
 80006b0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80006b2:	2200      	movs	r2, #0
 80006b4:	2105      	movs	r1, #5
 80006b6:	2038      	movs	r0, #56	@ 0x38
 80006b8:	f001 f9d6 	bl	8001a68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80006bc:	2038      	movs	r0, #56	@ 0x38
 80006be:	f001 f9ef 	bl	8001aa0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 80006c2:	2200      	movs	r2, #0
 80006c4:	2105      	movs	r1, #5
 80006c6:	203a      	movs	r0, #58	@ 0x3a
 80006c8:	f001 f9ce 	bl	8001a68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80006cc:	203a      	movs	r0, #58	@ 0x3a
 80006ce:	f001 f9e7 	bl	8001aa0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 80006d2:	2200      	movs	r2, #0
 80006d4:	2105      	movs	r1, #5
 80006d6:	2046      	movs	r0, #70	@ 0x46
 80006d8:	f001 f9c6 	bl	8001a68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80006dc:	2046      	movs	r0, #70	@ 0x46
 80006de:	f001 f9df 	bl	8001aa0 <HAL_NVIC_EnableIRQ>

}
 80006e2:	bf00      	nop
 80006e4:	3708      	adds	r7, #8
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	40023800 	.word	0x40023800

080006f0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80006f4:	4a0c      	ldr	r2, [pc, #48]	@ (8000728 <MX_FREERTOS_Init+0x38>)
 80006f6:	2100      	movs	r1, #0
 80006f8:	480c      	ldr	r0, [pc, #48]	@ (800072c <MX_FREERTOS_Init+0x3c>)
 80006fa:	f004 f83f 	bl	800477c <osThreadNew>
 80006fe:	4603      	mov	r3, r0
 8000700:	4a0b      	ldr	r2, [pc, #44]	@ (8000730 <MX_FREERTOS_Init+0x40>)
 8000702:	6013      	str	r3, [r2, #0]

  /* creation of LED */
  LEDHandle = osThreadNew(StartTask02, NULL, &LED_attributes);
 8000704:	4a0b      	ldr	r2, [pc, #44]	@ (8000734 <MX_FREERTOS_Init+0x44>)
 8000706:	2100      	movs	r1, #0
 8000708:	480b      	ldr	r0, [pc, #44]	@ (8000738 <MX_FREERTOS_Init+0x48>)
 800070a:	f004 f837 	bl	800477c <osThreadNew>
 800070e:	4603      	mov	r3, r0
 8000710:	4a0a      	ldr	r2, [pc, #40]	@ (800073c <MX_FREERTOS_Init+0x4c>)
 8000712:	6013      	str	r3, [r2, #0]

  /* creation of MOTOR */
  MOTORHandle = osThreadNew(StartTask03, NULL, &MOTOR_attributes);
 8000714:	4a0a      	ldr	r2, [pc, #40]	@ (8000740 <MX_FREERTOS_Init+0x50>)
 8000716:	2100      	movs	r1, #0
 8000718:	480a      	ldr	r0, [pc, #40]	@ (8000744 <MX_FREERTOS_Init+0x54>)
 800071a:	f004 f82f 	bl	800477c <osThreadNew>
 800071e:	4603      	mov	r3, r0
 8000720:	4a09      	ldr	r2, [pc, #36]	@ (8000748 <MX_FREERTOS_Init+0x58>)
 8000722:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000724:	bf00      	nop
 8000726:	bd80      	pop	{r7, pc}
 8000728:	0800774c 	.word	0x0800774c
 800072c:	0800074d 	.word	0x0800074d
 8000730:	20000124 	.word	0x20000124
 8000734:	08007770 	.word	0x08007770
 8000738:	08000759 	.word	0x08000759
 800073c:	20000128 	.word	0x20000128
 8000740:	08007794 	.word	0x08007794
 8000744:	0800076f 	.word	0x0800076f
 8000748:	2000012c 	.word	0x2000012c

0800074c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800074c:	b480      	push	{r7}
 800074e:	b083      	sub	sp, #12
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
 8000754:	bf00      	nop
 8000756:	e7fd      	b.n	8000754 <StartDefaultTask+0x8>

08000758 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
	/* Infinite loop */
	for(;;)
	{
		control_motor();
 8000760:	f006 fdda 	bl	8007318 <control_motor>
		osDelay(1);
 8000764:	2001      	movs	r0, #1
 8000766:	f004 f89b 	bl	80048a0 <osDelay>
		control_motor();
 800076a:	bf00      	nop
 800076c:	e7f8      	b.n	8000760 <StartTask02+0x8>

0800076e <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 800076e:	b580      	push	{r7, lr}
 8000770:	b082      	sub	sp, #8
 8000772:	af00      	add	r7, sp, #0
 8000774:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
	/* Infinite loop */
	for(;;)
	{
		control_led();
 8000776:	f006 fd87 	bl	8007288 <control_led>
		osDelay(1);
 800077a:	2001      	movs	r0, #1
 800077c:	f004 f890 	bl	80048a0 <osDelay>
		control_led();
 8000780:	bf00      	nop
 8000782:	e7f8      	b.n	8000776 <StartTask03+0x8>

08000784 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b08a      	sub	sp, #40	@ 0x28
 8000788:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800078a:	f107 0314 	add.w	r3, r7, #20
 800078e:	2200      	movs	r2, #0
 8000790:	601a      	str	r2, [r3, #0]
 8000792:	605a      	str	r2, [r3, #4]
 8000794:	609a      	str	r2, [r3, #8]
 8000796:	60da      	str	r2, [r3, #12]
 8000798:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800079a:	2300      	movs	r3, #0
 800079c:	613b      	str	r3, [r7, #16]
 800079e:	4b31      	ldr	r3, [pc, #196]	@ (8000864 <MX_GPIO_Init+0xe0>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a2:	4a30      	ldr	r2, [pc, #192]	@ (8000864 <MX_GPIO_Init+0xe0>)
 80007a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007aa:	4b2e      	ldr	r3, [pc, #184]	@ (8000864 <MX_GPIO_Init+0xe0>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007b2:	613b      	str	r3, [r7, #16]
 80007b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b6:	2300      	movs	r3, #0
 80007b8:	60fb      	str	r3, [r7, #12]
 80007ba:	4b2a      	ldr	r3, [pc, #168]	@ (8000864 <MX_GPIO_Init+0xe0>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007be:	4a29      	ldr	r2, [pc, #164]	@ (8000864 <MX_GPIO_Init+0xe0>)
 80007c0:	f043 0301 	orr.w	r3, r3, #1
 80007c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007c6:	4b27      	ldr	r3, [pc, #156]	@ (8000864 <MX_GPIO_Init+0xe0>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ca:	f003 0301 	and.w	r3, r3, #1
 80007ce:	60fb      	str	r3, [r7, #12]
 80007d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	60bb      	str	r3, [r7, #8]
 80007d6:	4b23      	ldr	r3, [pc, #140]	@ (8000864 <MX_GPIO_Init+0xe0>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007da:	4a22      	ldr	r2, [pc, #136]	@ (8000864 <MX_GPIO_Init+0xe0>)
 80007dc:	f043 0302 	orr.w	r3, r3, #2
 80007e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007e2:	4b20      	ldr	r3, [pc, #128]	@ (8000864 <MX_GPIO_Init+0xe0>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e6:	f003 0302 	and.w	r3, r3, #2
 80007ea:	60bb      	str	r3, [r7, #8]
 80007ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	607b      	str	r3, [r7, #4]
 80007f2:	4b1c      	ldr	r3, [pc, #112]	@ (8000864 <MX_GPIO_Init+0xe0>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f6:	4a1b      	ldr	r2, [pc, #108]	@ (8000864 <MX_GPIO_Init+0xe0>)
 80007f8:	f043 0304 	orr.w	r3, r3, #4
 80007fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007fe:	4b19      	ldr	r3, [pc, #100]	@ (8000864 <MX_GPIO_Init+0xe0>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000802:	f003 0304 	and.w	r3, r3, #4
 8000806:	607b      	str	r3, [r7, #4]
 8000808:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 800080a:	2200      	movs	r2, #0
 800080c:	21e0      	movs	r1, #224	@ 0xe0
 800080e:	4816      	ldr	r0, [pc, #88]	@ (8000868 <MX_GPIO_Init+0xe4>)
 8000810:	f001 fe48 	bl	80024a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8000814:	2200      	movs	r2, #0
 8000816:	f242 0168 	movw	r1, #8296	@ 0x2068
 800081a:	4814      	ldr	r0, [pc, #80]	@ (800086c <MX_GPIO_Init+0xe8>)
 800081c:	f001 fe42 	bl	80024a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000820:	23e0      	movs	r3, #224	@ 0xe0
 8000822:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000824:	2301      	movs	r3, #1
 8000826:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000828:	2300      	movs	r3, #0
 800082a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082c:	2300      	movs	r3, #0
 800082e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000830:	f107 0314 	add.w	r3, r7, #20
 8000834:	4619      	mov	r1, r3
 8000836:	480c      	ldr	r0, [pc, #48]	@ (8000868 <MX_GPIO_Init+0xe4>)
 8000838:	f001 fcb0 	bl	800219c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB3 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_6;
 800083c:	f242 0368 	movw	r3, #8296	@ 0x2068
 8000840:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000842:	2301      	movs	r3, #1
 8000844:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000846:	2300      	movs	r3, #0
 8000848:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084a:	2300      	movs	r3, #0
 800084c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800084e:	f107 0314 	add.w	r3, r7, #20
 8000852:	4619      	mov	r1, r3
 8000854:	4805      	ldr	r0, [pc, #20]	@ (800086c <MX_GPIO_Init+0xe8>)
 8000856:	f001 fca1 	bl	800219c <HAL_GPIO_Init>

}
 800085a:	bf00      	nop
 800085c:	3728      	adds	r7, #40	@ 0x28
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	40023800 	.word	0x40023800
 8000868:	40020000 	.word	0x40020000
 800086c:	40020400 	.word	0x40020400

08000870 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000874:	f000 fc30 	bl	80010d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000878:	f000 f818 	bl	80008ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800087c:	f7ff ff82 	bl	8000784 <MX_GPIO_Init>
  MX_DMA_Init();
 8000880:	f7ff ff06 	bl	8000690 <MX_DMA_Init>
  MX_TIM1_Init();
 8000884:	f000 f99e 	bl	8000bc4 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000888:	f000 fa20 	bl	8000ccc <MX_TIM3_Init>
  MX_ADC1_Init();
 800088c:	f7ff fe20 	bl	80004d0 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000890:	f000 fb1e 	bl	8000ed0 <MX_USART1_UART_Init>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000894:	f003 ff28 	bl	80046e8 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000898:	f7ff ff2a 	bl	80006f0 <MX_FREERTOS_Init>

  /* Start scheduler */
  apInit();
 800089c:	f006 fcd4 	bl	8007248 <apInit>
  apMain();
 80008a0:	f006 fce2 	bl	8007268 <apMain>
  osKernelStart();
 80008a4:	f003 ff44 	bl	8004730 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008a8:	bf00      	nop
 80008aa:	e7fd      	b.n	80008a8 <main+0x38>

080008ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b094      	sub	sp, #80	@ 0x50
 80008b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008b2:	f107 0320 	add.w	r3, r7, #32
 80008b6:	2230      	movs	r2, #48	@ 0x30
 80008b8:	2100      	movs	r1, #0
 80008ba:	4618      	mov	r0, r3
 80008bc:	f006 fe3a 	bl	8007534 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008c0:	f107 030c 	add.w	r3, r7, #12
 80008c4:	2200      	movs	r2, #0
 80008c6:	601a      	str	r2, [r3, #0]
 80008c8:	605a      	str	r2, [r3, #4]
 80008ca:	609a      	str	r2, [r3, #8]
 80008cc:	60da      	str	r2, [r3, #12]
 80008ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008d0:	2300      	movs	r3, #0
 80008d2:	60bb      	str	r3, [r7, #8]
 80008d4:	4b27      	ldr	r3, [pc, #156]	@ (8000974 <SystemClock_Config+0xc8>)
 80008d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008d8:	4a26      	ldr	r2, [pc, #152]	@ (8000974 <SystemClock_Config+0xc8>)
 80008da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008de:	6413      	str	r3, [r2, #64]	@ 0x40
 80008e0:	4b24      	ldr	r3, [pc, #144]	@ (8000974 <SystemClock_Config+0xc8>)
 80008e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008e8:	60bb      	str	r3, [r7, #8]
 80008ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008ec:	2300      	movs	r3, #0
 80008ee:	607b      	str	r3, [r7, #4]
 80008f0:	4b21      	ldr	r3, [pc, #132]	@ (8000978 <SystemClock_Config+0xcc>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	4a20      	ldr	r2, [pc, #128]	@ (8000978 <SystemClock_Config+0xcc>)
 80008f6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80008fa:	6013      	str	r3, [r2, #0]
 80008fc:	4b1e      	ldr	r3, [pc, #120]	@ (8000978 <SystemClock_Config+0xcc>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000904:	607b      	str	r3, [r7, #4]
 8000906:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000908:	2301      	movs	r3, #1
 800090a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800090c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000910:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000912:	2302      	movs	r3, #2
 8000914:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000916:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800091a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800091c:	2304      	movs	r3, #4
 800091e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000920:	2364      	movs	r3, #100	@ 0x64
 8000922:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000924:	2302      	movs	r3, #2
 8000926:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000928:	2304      	movs	r3, #4
 800092a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800092c:	f107 0320 	add.w	r3, r7, #32
 8000930:	4618      	mov	r0, r3
 8000932:	f001 fdeb 	bl	800250c <HAL_RCC_OscConfig>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800093c:	f000 f830 	bl	80009a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000940:	230f      	movs	r3, #15
 8000942:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000944:	2302      	movs	r3, #2
 8000946:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000948:	2300      	movs	r3, #0
 800094a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800094c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000950:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000952:	2300      	movs	r3, #0
 8000954:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000956:	f107 030c 	add.w	r3, r7, #12
 800095a:	2103      	movs	r1, #3
 800095c:	4618      	mov	r0, r3
 800095e:	f002 f84d 	bl	80029fc <HAL_RCC_ClockConfig>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000968:	f000 f81a 	bl	80009a0 <Error_Handler>
  }
}
 800096c:	bf00      	nop
 800096e:	3750      	adds	r7, #80	@ 0x50
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	40023800 	.word	0x40023800
 8000978:	40007000 	.word	0x40007000

0800097c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11) {
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a04      	ldr	r2, [pc, #16]	@ (800099c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800098a:	4293      	cmp	r3, r2
 800098c:	d101      	bne.n	8000992 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800098e:	f000 fbc5 	bl	800111c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000992:	bf00      	nop
 8000994:	3708      	adds	r7, #8
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	40014800 	.word	0x40014800

080009a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009a4:	b672      	cpsid	i
}
 80009a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009a8:	bf00      	nop
 80009aa:	e7fd      	b.n	80009a8 <Error_Handler+0x8>

080009ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009b2:	2300      	movs	r3, #0
 80009b4:	607b      	str	r3, [r7, #4]
 80009b6:	4b12      	ldr	r3, [pc, #72]	@ (8000a00 <HAL_MspInit+0x54>)
 80009b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009ba:	4a11      	ldr	r2, [pc, #68]	@ (8000a00 <HAL_MspInit+0x54>)
 80009bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80009c2:	4b0f      	ldr	r3, [pc, #60]	@ (8000a00 <HAL_MspInit+0x54>)
 80009c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009ca:	607b      	str	r3, [r7, #4]
 80009cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ce:	2300      	movs	r3, #0
 80009d0:	603b      	str	r3, [r7, #0]
 80009d2:	4b0b      	ldr	r3, [pc, #44]	@ (8000a00 <HAL_MspInit+0x54>)
 80009d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009d6:	4a0a      	ldr	r2, [pc, #40]	@ (8000a00 <HAL_MspInit+0x54>)
 80009d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80009de:	4b08      	ldr	r3, [pc, #32]	@ (8000a00 <HAL_MspInit+0x54>)
 80009e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009e6:	603b      	str	r3, [r7, #0]
 80009e8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009ea:	2200      	movs	r2, #0
 80009ec:	210f      	movs	r1, #15
 80009ee:	f06f 0001 	mvn.w	r0, #1
 80009f2:	f001 f839 	bl	8001a68 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009f6:	bf00      	nop
 80009f8:	3708      	adds	r7, #8
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	40023800 	.word	0x40023800

08000a04 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b08c      	sub	sp, #48	@ 0x30
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000a10:	2300      	movs	r3, #0
 8000a12:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 8000a14:	2300      	movs	r3, #0
 8000a16:	60bb      	str	r3, [r7, #8]
 8000a18:	4b2e      	ldr	r3, [pc, #184]	@ (8000ad4 <HAL_InitTick+0xd0>)
 8000a1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a1c:	4a2d      	ldr	r2, [pc, #180]	@ (8000ad4 <HAL_InitTick+0xd0>)
 8000a1e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000a22:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a24:	4b2b      	ldr	r3, [pc, #172]	@ (8000ad4 <HAL_InitTick+0xd0>)
 8000a26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a28:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000a2c:	60bb      	str	r3, [r7, #8]
 8000a2e:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a30:	f107 020c 	add.w	r2, r7, #12
 8000a34:	f107 0310 	add.w	r3, r7, #16
 8000a38:	4611      	mov	r1, r2
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f002 f9fe 	bl	8002e3c <HAL_RCC_GetClockConfig>
  /* Compute TIM11 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000a40:	f002 f9e8 	bl	8002e14 <HAL_RCC_GetPCLK2Freq>
 8000a44:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a48:	4a23      	ldr	r2, [pc, #140]	@ (8000ad8 <HAL_InitTick+0xd4>)
 8000a4a:	fba2 2303 	umull	r2, r3, r2, r3
 8000a4e:	0c9b      	lsrs	r3, r3, #18
 8000a50:	3b01      	subs	r3, #1
 8000a52:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 8000a54:	4b21      	ldr	r3, [pc, #132]	@ (8000adc <HAL_InitTick+0xd8>)
 8000a56:	4a22      	ldr	r2, [pc, #136]	@ (8000ae0 <HAL_InitTick+0xdc>)
 8000a58:	601a      	str	r2, [r3, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 8000a5a:	4b20      	ldr	r3, [pc, #128]	@ (8000adc <HAL_InitTick+0xd8>)
 8000a5c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a60:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 8000a62:	4a1e      	ldr	r2, [pc, #120]	@ (8000adc <HAL_InitTick+0xd8>)
 8000a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a66:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 8000a68:	4b1c      	ldr	r3, [pc, #112]	@ (8000adc <HAL_InitTick+0xd8>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a6e:	4b1b      	ldr	r3, [pc, #108]	@ (8000adc <HAL_InitTick+0xd8>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	609a      	str	r2, [r3, #8]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a74:	4b19      	ldr	r3, [pc, #100]	@ (8000adc <HAL_InitTick+0xd8>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim11);
 8000a7a:	4818      	ldr	r0, [pc, #96]	@ (8000adc <HAL_InitTick+0xd8>)
 8000a7c:	f002 fa10 	bl	8002ea0 <HAL_TIM_Base_Init>
 8000a80:	4603      	mov	r3, r0
 8000a82:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000a86:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d11b      	bne.n	8000ac6 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim11);
 8000a8e:	4813      	ldr	r0, [pc, #76]	@ (8000adc <HAL_InitTick+0xd8>)
 8000a90:	f002 fa60 	bl	8002f54 <HAL_TIM_Base_Start_IT>
 8000a94:	4603      	mov	r3, r0
 8000a96:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000a9a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d111      	bne.n	8000ac6 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM11 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8000aa2:	201a      	movs	r0, #26
 8000aa4:	f000 fffc 	bl	8001aa0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	2b0f      	cmp	r3, #15
 8000aac:	d808      	bhi.n	8000ac0 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority, 0U);
 8000aae:	2200      	movs	r2, #0
 8000ab0:	6879      	ldr	r1, [r7, #4]
 8000ab2:	201a      	movs	r0, #26
 8000ab4:	f000 ffd8 	bl	8001a68 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ab8:	4a0a      	ldr	r2, [pc, #40]	@ (8000ae4 <HAL_InitTick+0xe0>)
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	6013      	str	r3, [r2, #0]
 8000abe:	e002      	b.n	8000ac6 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000ac6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	3730      	adds	r7, #48	@ 0x30
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	40023800 	.word	0x40023800
 8000ad8:	431bde83 	.word	0x431bde83
 8000adc:	20000130 	.word	0x20000130
 8000ae0:	40014800 	.word	0x40014800
 8000ae4:	20000004 	.word	0x20000004

08000ae8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000aec:	bf00      	nop
 8000aee:	e7fd      	b.n	8000aec <NMI_Handler+0x4>

08000af0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000af4:	bf00      	nop
 8000af6:	e7fd      	b.n	8000af4 <HardFault_Handler+0x4>

08000af8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000afc:	bf00      	nop
 8000afe:	e7fd      	b.n	8000afc <MemManage_Handler+0x4>

08000b00 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b04:	bf00      	nop
 8000b06:	e7fd      	b.n	8000b04 <BusFault_Handler+0x4>

08000b08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b0c:	bf00      	nop
 8000b0e:	e7fd      	b.n	8000b0c <UsageFault_Handler+0x4>

08000b10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b14:	bf00      	nop
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
	...

08000b20 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000b24:	4802      	ldr	r0, [pc, #8]	@ (8000b30 <ADC_IRQHandler+0x10>)
 8000b26:	f000 fb80 	bl	800122a <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000b2a:	bf00      	nop
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	2000007c 	.word	0x2000007c

08000b34 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b38:	4802      	ldr	r0, [pc, #8]	@ (8000b44 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000b3a:	f002 fb6d 	bl	8003218 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000b3e:	bf00      	nop
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	20000178 	.word	0x20000178

08000b48 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b4c:	4803      	ldr	r0, [pc, #12]	@ (8000b5c <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8000b4e:	f002 fb63 	bl	8003218 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8000b52:	4803      	ldr	r0, [pc, #12]	@ (8000b60 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8000b54:	f002 fb60 	bl	8003218 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8000b58:	bf00      	nop
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	20000178 	.word	0x20000178
 8000b60:	20000130 	.word	0x20000130

08000b64 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000b68:	4802      	ldr	r0, [pc, #8]	@ (8000b74 <DMA2_Stream0_IRQHandler+0x10>)
 8000b6a:	f001 f8ad 	bl	8001cc8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000b6e:	bf00      	nop
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	200000c4 	.word	0x200000c4

08000b78 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000b7c:	4802      	ldr	r0, [pc, #8]	@ (8000b88 <DMA2_Stream2_IRQHandler+0x10>)
 8000b7e:	f001 f8a3 	bl	8001cc8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8000b82:	bf00      	nop
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	20000250 	.word	0x20000250

08000b8c <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000b90:	4802      	ldr	r0, [pc, #8]	@ (8000b9c <DMA2_Stream7_IRQHandler+0x10>)
 8000b92:	f001 f899 	bl	8001cc8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8000b96:	bf00      	nop
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	200002b0 	.word	0x200002b0

08000ba0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ba4:	4b06      	ldr	r3, [pc, #24]	@ (8000bc0 <SystemInit+0x20>)
 8000ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000baa:	4a05      	ldr	r2, [pc, #20]	@ (8000bc0 <SystemInit+0x20>)
 8000bac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bb0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bb4:	bf00      	nop
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	e000ed00 	.word	0xe000ed00

08000bc4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b092      	sub	sp, #72	@ 0x48
 8000bc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bca:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000bce:	2200      	movs	r2, #0
 8000bd0:	601a      	str	r2, [r3, #0]
 8000bd2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bd4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bd8:	2200      	movs	r2, #0
 8000bda:	601a      	str	r2, [r3, #0]
 8000bdc:	605a      	str	r2, [r3, #4]
 8000bde:	609a      	str	r2, [r3, #8]
 8000be0:	60da      	str	r2, [r3, #12]
 8000be2:	611a      	str	r2, [r3, #16]
 8000be4:	615a      	str	r2, [r3, #20]
 8000be6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000be8:	1d3b      	adds	r3, r7, #4
 8000bea:	2220      	movs	r2, #32
 8000bec:	2100      	movs	r1, #0
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f006 fca0 	bl	8007534 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000bf4:	4b33      	ldr	r3, [pc, #204]	@ (8000cc4 <MX_TIM1_Init+0x100>)
 8000bf6:	4a34      	ldr	r2, [pc, #208]	@ (8000cc8 <MX_TIM1_Init+0x104>)
 8000bf8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10000-1;
 8000bfa:	4b32      	ldr	r3, [pc, #200]	@ (8000cc4 <MX_TIM1_Init+0x100>)
 8000bfc:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000c00:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c02:	4b30      	ldr	r3, [pc, #192]	@ (8000cc4 <MX_TIM1_Init+0x100>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8000c08:	4b2e      	ldr	r3, [pc, #184]	@ (8000cc4 <MX_TIM1_Init+0x100>)
 8000c0a:	2263      	movs	r2, #99	@ 0x63
 8000c0c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c0e:	4b2d      	ldr	r3, [pc, #180]	@ (8000cc4 <MX_TIM1_Init+0x100>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c14:	4b2b      	ldr	r3, [pc, #172]	@ (8000cc4 <MX_TIM1_Init+0x100>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c1a:	4b2a      	ldr	r3, [pc, #168]	@ (8000cc4 <MX_TIM1_Init+0x100>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000c20:	4828      	ldr	r0, [pc, #160]	@ (8000cc4 <MX_TIM1_Init+0x100>)
 8000c22:	f002 f9f9 	bl	8003018 <HAL_TIM_PWM_Init>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8000c2c:	f7ff feb8 	bl	80009a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c30:	2300      	movs	r3, #0
 8000c32:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c34:	2300      	movs	r3, #0
 8000c36:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c38:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	4821      	ldr	r0, [pc, #132]	@ (8000cc4 <MX_TIM1_Init+0x100>)
 8000c40:	f002 ff02 	bl	8003a48 <HAL_TIMEx_MasterConfigSynchronization>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8000c4a:	f7ff fea9 	bl	80009a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c4e:	2360      	movs	r3, #96	@ 0x60
 8000c50:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 500;
 8000c52:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000c56:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c60:	2300      	movs	r3, #0
 8000c62:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c64:	2300      	movs	r3, #0
 8000c66:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c6c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c70:	2204      	movs	r2, #4
 8000c72:	4619      	mov	r1, r3
 8000c74:	4813      	ldr	r0, [pc, #76]	@ (8000cc4 <MX_TIM1_Init+0x100>)
 8000c76:	f002 fbbf 	bl	80033f8 <HAL_TIM_PWM_ConfigChannel>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8000c80:	f7ff fe8e 	bl	80009a0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000c84:	2300      	movs	r3, #0
 8000c86:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000c90:	2300      	movs	r3, #0
 8000c92:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c94:	2300      	movs	r3, #0
 8000c96:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c98:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c9c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000ca2:	1d3b      	adds	r3, r7, #4
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	4807      	ldr	r0, [pc, #28]	@ (8000cc4 <MX_TIM1_Init+0x100>)
 8000ca8:	f002 ff3c 	bl	8003b24 <HAL_TIMEx_ConfigBreakDeadTime>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <MX_TIM1_Init+0xf2>
  {
    Error_Handler();
 8000cb2:	f7ff fe75 	bl	80009a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000cb6:	4803      	ldr	r0, [pc, #12]	@ (8000cc4 <MX_TIM1_Init+0x100>)
 8000cb8:	f000 f8a8 	bl	8000e0c <HAL_TIM_MspPostInit>

}
 8000cbc:	bf00      	nop
 8000cbe:	3748      	adds	r7, #72	@ 0x48
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	20000178 	.word	0x20000178
 8000cc8:	40010000 	.word	0x40010000

08000ccc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b08a      	sub	sp, #40	@ 0x28
 8000cd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cd2:	f107 0320 	add.w	r3, r7, #32
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	601a      	str	r2, [r3, #0]
 8000cda:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cdc:	1d3b      	adds	r3, r7, #4
 8000cde:	2200      	movs	r2, #0
 8000ce0:	601a      	str	r2, [r3, #0]
 8000ce2:	605a      	str	r2, [r3, #4]
 8000ce4:	609a      	str	r2, [r3, #8]
 8000ce6:	60da      	str	r2, [r3, #12]
 8000ce8:	611a      	str	r2, [r3, #16]
 8000cea:	615a      	str	r2, [r3, #20]
 8000cec:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000cee:	4b22      	ldr	r3, [pc, #136]	@ (8000d78 <MX_TIM3_Init+0xac>)
 8000cf0:	4a22      	ldr	r2, [pc, #136]	@ (8000d7c <MX_TIM3_Init+0xb0>)
 8000cf2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10000-1;
 8000cf4:	4b20      	ldr	r3, [pc, #128]	@ (8000d78 <MX_TIM3_Init+0xac>)
 8000cf6:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000cfa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cfc:	4b1e      	ldr	r3, [pc, #120]	@ (8000d78 <MX_TIM3_Init+0xac>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8000d02:	4b1d      	ldr	r3, [pc, #116]	@ (8000d78 <MX_TIM3_Init+0xac>)
 8000d04:	2263      	movs	r2, #99	@ 0x63
 8000d06:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d08:	4b1b      	ldr	r3, [pc, #108]	@ (8000d78 <MX_TIM3_Init+0xac>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d0e:	4b1a      	ldr	r3, [pc, #104]	@ (8000d78 <MX_TIM3_Init+0xac>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000d14:	4818      	ldr	r0, [pc, #96]	@ (8000d78 <MX_TIM3_Init+0xac>)
 8000d16:	f002 f97f 	bl	8003018 <HAL_TIM_PWM_Init>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000d20:	f7ff fe3e 	bl	80009a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d24:	2300      	movs	r3, #0
 8000d26:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d2c:	f107 0320 	add.w	r3, r7, #32
 8000d30:	4619      	mov	r1, r3
 8000d32:	4811      	ldr	r0, [pc, #68]	@ (8000d78 <MX_TIM3_Init+0xac>)
 8000d34:	f002 fe88 	bl	8003a48 <HAL_TIMEx_MasterConfigSynchronization>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000d3e:	f7ff fe2f 	bl	80009a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d42:	2360      	movs	r3, #96	@ 0x60
 8000d44:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 8000d46:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000d4a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d50:	2300      	movs	r3, #0
 8000d52:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d54:	1d3b      	adds	r3, r7, #4
 8000d56:	2204      	movs	r2, #4
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4807      	ldr	r0, [pc, #28]	@ (8000d78 <MX_TIM3_Init+0xac>)
 8000d5c:	f002 fb4c 	bl	80033f8 <HAL_TIM_PWM_ConfigChannel>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000d66:	f7ff fe1b 	bl	80009a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000d6a:	4803      	ldr	r0, [pc, #12]	@ (8000d78 <MX_TIM3_Init+0xac>)
 8000d6c:	f000 f84e 	bl	8000e0c <HAL_TIM_MspPostInit>

}
 8000d70:	bf00      	nop
 8000d72:	3728      	adds	r7, #40	@ 0x28
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	200001c0 	.word	0x200001c0
 8000d7c:	40000400 	.word	0x40000400

08000d80 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b084      	sub	sp, #16
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a1c      	ldr	r2, [pc, #112]	@ (8000e00 <HAL_TIM_PWM_MspInit+0x80>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d11e      	bne.n	8000dd0 <HAL_TIM_PWM_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d92:	2300      	movs	r3, #0
 8000d94:	60fb      	str	r3, [r7, #12]
 8000d96:	4b1b      	ldr	r3, [pc, #108]	@ (8000e04 <HAL_TIM_PWM_MspInit+0x84>)
 8000d98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d9a:	4a1a      	ldr	r2, [pc, #104]	@ (8000e04 <HAL_TIM_PWM_MspInit+0x84>)
 8000d9c:	f043 0301 	orr.w	r3, r3, #1
 8000da0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000da2:	4b18      	ldr	r3, [pc, #96]	@ (8000e04 <HAL_TIM_PWM_MspInit+0x84>)
 8000da4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000da6:	f003 0301 	and.w	r3, r3, #1
 8000daa:	60fb      	str	r3, [r7, #12]
 8000dac:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8000dae:	2200      	movs	r2, #0
 8000db0:	2105      	movs	r1, #5
 8000db2:	2019      	movs	r0, #25
 8000db4:	f000 fe58 	bl	8001a68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000db8:	2019      	movs	r0, #25
 8000dba:	f000 fe71 	bl	8001aa0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 15, 0);
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	210f      	movs	r1, #15
 8000dc2:	201a      	movs	r0, #26
 8000dc4:	f000 fe50 	bl	8001a68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8000dc8:	201a      	movs	r0, #26
 8000dca:	f000 fe69 	bl	8001aa0 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000dce:	e012      	b.n	8000df6 <HAL_TIM_PWM_MspInit+0x76>
  else if(tim_pwmHandle->Instance==TIM3)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a0c      	ldr	r2, [pc, #48]	@ (8000e08 <HAL_TIM_PWM_MspInit+0x88>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d10d      	bne.n	8000df6 <HAL_TIM_PWM_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000dda:	2300      	movs	r3, #0
 8000ddc:	60bb      	str	r3, [r7, #8]
 8000dde:	4b09      	ldr	r3, [pc, #36]	@ (8000e04 <HAL_TIM_PWM_MspInit+0x84>)
 8000de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000de2:	4a08      	ldr	r2, [pc, #32]	@ (8000e04 <HAL_TIM_PWM_MspInit+0x84>)
 8000de4:	f043 0302 	orr.w	r3, r3, #2
 8000de8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dea:	4b06      	ldr	r3, [pc, #24]	@ (8000e04 <HAL_TIM_PWM_MspInit+0x84>)
 8000dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dee:	f003 0302 	and.w	r3, r3, #2
 8000df2:	60bb      	str	r3, [r7, #8]
 8000df4:	68bb      	ldr	r3, [r7, #8]
}
 8000df6:	bf00      	nop
 8000df8:	3710      	adds	r7, #16
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	40010000 	.word	0x40010000
 8000e04:	40023800 	.word	0x40023800
 8000e08:	40000400 	.word	0x40000400

08000e0c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b08a      	sub	sp, #40	@ 0x28
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e14:	f107 0314 	add.w	r3, r7, #20
 8000e18:	2200      	movs	r2, #0
 8000e1a:	601a      	str	r2, [r3, #0]
 8000e1c:	605a      	str	r2, [r3, #4]
 8000e1e:	609a      	str	r2, [r3, #8]
 8000e20:	60da      	str	r2, [r3, #12]
 8000e22:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a24      	ldr	r2, [pc, #144]	@ (8000ebc <HAL_TIM_MspPostInit+0xb0>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d11f      	bne.n	8000e6e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e2e:	2300      	movs	r3, #0
 8000e30:	613b      	str	r3, [r7, #16]
 8000e32:	4b23      	ldr	r3, [pc, #140]	@ (8000ec0 <HAL_TIM_MspPostInit+0xb4>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e36:	4a22      	ldr	r2, [pc, #136]	@ (8000ec0 <HAL_TIM_MspPostInit+0xb4>)
 8000e38:	f043 0301 	orr.w	r3, r3, #1
 8000e3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e3e:	4b20      	ldr	r3, [pc, #128]	@ (8000ec0 <HAL_TIM_MspPostInit+0xb4>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e42:	f003 0301 	and.w	r3, r3, #1
 8000e46:	613b      	str	r3, [r7, #16]
 8000e48:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e4a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000e4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e50:	2302      	movs	r3, #2
 8000e52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e54:	2300      	movs	r3, #0
 8000e56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e60:	f107 0314 	add.w	r3, r7, #20
 8000e64:	4619      	mov	r1, r3
 8000e66:	4817      	ldr	r0, [pc, #92]	@ (8000ec4 <HAL_TIM_MspPostInit+0xb8>)
 8000e68:	f001 f998 	bl	800219c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000e6c:	e022      	b.n	8000eb4 <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM3)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4a15      	ldr	r2, [pc, #84]	@ (8000ec8 <HAL_TIM_MspPostInit+0xbc>)
 8000e74:	4293      	cmp	r3, r2
 8000e76:	d11d      	bne.n	8000eb4 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e78:	2300      	movs	r3, #0
 8000e7a:	60fb      	str	r3, [r7, #12]
 8000e7c:	4b10      	ldr	r3, [pc, #64]	@ (8000ec0 <HAL_TIM_MspPostInit+0xb4>)
 8000e7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e80:	4a0f      	ldr	r2, [pc, #60]	@ (8000ec0 <HAL_TIM_MspPostInit+0xb4>)
 8000e82:	f043 0304 	orr.w	r3, r3, #4
 8000e86:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e88:	4b0d      	ldr	r3, [pc, #52]	@ (8000ec0 <HAL_TIM_MspPostInit+0xb4>)
 8000e8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e8c:	f003 0304 	and.w	r3, r3, #4
 8000e90:	60fb      	str	r3, [r7, #12]
 8000e92:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000e94:	2380      	movs	r3, #128	@ 0x80
 8000e96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e98:	2302      	movs	r3, #2
 8000e9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000ea4:	2302      	movs	r3, #2
 8000ea6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ea8:	f107 0314 	add.w	r3, r7, #20
 8000eac:	4619      	mov	r1, r3
 8000eae:	4807      	ldr	r0, [pc, #28]	@ (8000ecc <HAL_TIM_MspPostInit+0xc0>)
 8000eb0:	f001 f974 	bl	800219c <HAL_GPIO_Init>
}
 8000eb4:	bf00      	nop
 8000eb6:	3728      	adds	r7, #40	@ 0x28
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	40010000 	.word	0x40010000
 8000ec0:	40023800 	.word	0x40023800
 8000ec4:	40020000 	.word	0x40020000
 8000ec8:	40000400 	.word	0x40000400
 8000ecc:	40020800 	.word	0x40020800

08000ed0 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ed4:	4b11      	ldr	r3, [pc, #68]	@ (8000f1c <MX_USART1_UART_Init+0x4c>)
 8000ed6:	4a12      	ldr	r2, [pc, #72]	@ (8000f20 <MX_USART1_UART_Init+0x50>)
 8000ed8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000eda:	4b10      	ldr	r3, [pc, #64]	@ (8000f1c <MX_USART1_UART_Init+0x4c>)
 8000edc:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000ee0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ee2:	4b0e      	ldr	r3, [pc, #56]	@ (8000f1c <MX_USART1_UART_Init+0x4c>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ee8:	4b0c      	ldr	r3, [pc, #48]	@ (8000f1c <MX_USART1_UART_Init+0x4c>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000eee:	4b0b      	ldr	r3, [pc, #44]	@ (8000f1c <MX_USART1_UART_Init+0x4c>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ef4:	4b09      	ldr	r3, [pc, #36]	@ (8000f1c <MX_USART1_UART_Init+0x4c>)
 8000ef6:	220c      	movs	r2, #12
 8000ef8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000efa:	4b08      	ldr	r3, [pc, #32]	@ (8000f1c <MX_USART1_UART_Init+0x4c>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f00:	4b06      	ldr	r3, [pc, #24]	@ (8000f1c <MX_USART1_UART_Init+0x4c>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f06:	4805      	ldr	r0, [pc, #20]	@ (8000f1c <MX_USART1_UART_Init+0x4c>)
 8000f08:	f002 fe72 	bl	8003bf0 <HAL_UART_Init>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000f12:	f7ff fd45 	bl	80009a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f16:	bf00      	nop
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	20000208 	.word	0x20000208
 8000f20:	40011000 	.word	0x40011000

08000f24 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b08a      	sub	sp, #40	@ 0x28
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f2c:	f107 0314 	add.w	r3, r7, #20
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]
 8000f34:	605a      	str	r2, [r3, #4]
 8000f36:	609a      	str	r2, [r3, #8]
 8000f38:	60da      	str	r2, [r3, #12]
 8000f3a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a49      	ldr	r2, [pc, #292]	@ (8001068 <HAL_UART_MspInit+0x144>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	f040 808b 	bne.w	800105e <HAL_UART_MspInit+0x13a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f48:	2300      	movs	r3, #0
 8000f4a:	613b      	str	r3, [r7, #16]
 8000f4c:	4b47      	ldr	r3, [pc, #284]	@ (800106c <HAL_UART_MspInit+0x148>)
 8000f4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f50:	4a46      	ldr	r2, [pc, #280]	@ (800106c <HAL_UART_MspInit+0x148>)
 8000f52:	f043 0310 	orr.w	r3, r3, #16
 8000f56:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f58:	4b44      	ldr	r3, [pc, #272]	@ (800106c <HAL_UART_MspInit+0x148>)
 8000f5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f5c:	f003 0310 	and.w	r3, r3, #16
 8000f60:	613b      	str	r3, [r7, #16]
 8000f62:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f64:	2300      	movs	r3, #0
 8000f66:	60fb      	str	r3, [r7, #12]
 8000f68:	4b40      	ldr	r3, [pc, #256]	@ (800106c <HAL_UART_MspInit+0x148>)
 8000f6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f6c:	4a3f      	ldr	r2, [pc, #252]	@ (800106c <HAL_UART_MspInit+0x148>)
 8000f6e:	f043 0301 	orr.w	r3, r3, #1
 8000f72:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f74:	4b3d      	ldr	r3, [pc, #244]	@ (800106c <HAL_UART_MspInit+0x148>)
 8000f76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f78:	f003 0301 	and.w	r3, r3, #1
 8000f7c:	60fb      	str	r3, [r7, #12]
 8000f7e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA15     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 8000f80:	f44f 4304 	mov.w	r3, #33792	@ 0x8400
 8000f84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f86:	2302      	movs	r3, #2
 8000f88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f8e:	2303      	movs	r3, #3
 8000f90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f92:	2307      	movs	r3, #7
 8000f94:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f96:	f107 0314 	add.w	r3, r7, #20
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	4834      	ldr	r0, [pc, #208]	@ (8001070 <HAL_UART_MspInit+0x14c>)
 8000f9e:	f001 f8fd 	bl	800219c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8000fa2:	4b34      	ldr	r3, [pc, #208]	@ (8001074 <HAL_UART_MspInit+0x150>)
 8000fa4:	4a34      	ldr	r2, [pc, #208]	@ (8001078 <HAL_UART_MspInit+0x154>)
 8000fa6:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8000fa8:	4b32      	ldr	r3, [pc, #200]	@ (8001074 <HAL_UART_MspInit+0x150>)
 8000faa:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000fae:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fb0:	4b30      	ldr	r3, [pc, #192]	@ (8001074 <HAL_UART_MspInit+0x150>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fb6:	4b2f      	ldr	r3, [pc, #188]	@ (8001074 <HAL_UART_MspInit+0x150>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000fbc:	4b2d      	ldr	r3, [pc, #180]	@ (8001074 <HAL_UART_MspInit+0x150>)
 8000fbe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000fc2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000fc4:	4b2b      	ldr	r3, [pc, #172]	@ (8001074 <HAL_UART_MspInit+0x150>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000fca:	4b2a      	ldr	r3, [pc, #168]	@ (8001074 <HAL_UART_MspInit+0x150>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8000fd0:	4b28      	ldr	r3, [pc, #160]	@ (8001074 <HAL_UART_MspInit+0x150>)
 8000fd2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000fd6:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000fd8:	4b26      	ldr	r3, [pc, #152]	@ (8001074 <HAL_UART_MspInit+0x150>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000fde:	4b25      	ldr	r3, [pc, #148]	@ (8001074 <HAL_UART_MspInit+0x150>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000fe4:	4823      	ldr	r0, [pc, #140]	@ (8001074 <HAL_UART_MspInit+0x150>)
 8000fe6:	f000 fd69 	bl	8001abc <HAL_DMA_Init>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8000ff0:	f7ff fcd6 	bl	80009a0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	4a1f      	ldr	r2, [pc, #124]	@ (8001074 <HAL_UART_MspInit+0x150>)
 8000ff8:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000ffa:	4a1e      	ldr	r2, [pc, #120]	@ (8001074 <HAL_UART_MspInit+0x150>)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8001000:	4b1e      	ldr	r3, [pc, #120]	@ (800107c <HAL_UART_MspInit+0x158>)
 8001002:	4a1f      	ldr	r2, [pc, #124]	@ (8001080 <HAL_UART_MspInit+0x15c>)
 8001004:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8001006:	4b1d      	ldr	r3, [pc, #116]	@ (800107c <HAL_UART_MspInit+0x158>)
 8001008:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800100c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800100e:	4b1b      	ldr	r3, [pc, #108]	@ (800107c <HAL_UART_MspInit+0x158>)
 8001010:	2240      	movs	r2, #64	@ 0x40
 8001012:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001014:	4b19      	ldr	r3, [pc, #100]	@ (800107c <HAL_UART_MspInit+0x158>)
 8001016:	2200      	movs	r2, #0
 8001018:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800101a:	4b18      	ldr	r3, [pc, #96]	@ (800107c <HAL_UART_MspInit+0x158>)
 800101c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001020:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001022:	4b16      	ldr	r3, [pc, #88]	@ (800107c <HAL_UART_MspInit+0x158>)
 8001024:	2200      	movs	r2, #0
 8001026:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001028:	4b14      	ldr	r3, [pc, #80]	@ (800107c <HAL_UART_MspInit+0x158>)
 800102a:	2200      	movs	r2, #0
 800102c:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
 800102e:	4b13      	ldr	r3, [pc, #76]	@ (800107c <HAL_UART_MspInit+0x158>)
 8001030:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001034:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001036:	4b11      	ldr	r3, [pc, #68]	@ (800107c <HAL_UART_MspInit+0x158>)
 8001038:	2200      	movs	r2, #0
 800103a:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800103c:	4b0f      	ldr	r3, [pc, #60]	@ (800107c <HAL_UART_MspInit+0x158>)
 800103e:	2200      	movs	r2, #0
 8001040:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001042:	480e      	ldr	r0, [pc, #56]	@ (800107c <HAL_UART_MspInit+0x158>)
 8001044:	f000 fd3a 	bl	8001abc <HAL_DMA_Init>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 800104e:	f7ff fca7 	bl	80009a0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4a09      	ldr	r2, [pc, #36]	@ (800107c <HAL_UART_MspInit+0x158>)
 8001056:	639a      	str	r2, [r3, #56]	@ 0x38
 8001058:	4a08      	ldr	r2, [pc, #32]	@ (800107c <HAL_UART_MspInit+0x158>)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800105e:	bf00      	nop
 8001060:	3728      	adds	r7, #40	@ 0x28
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	40011000 	.word	0x40011000
 800106c:	40023800 	.word	0x40023800
 8001070:	40020000 	.word	0x40020000
 8001074:	20000250 	.word	0x20000250
 8001078:	40026440 	.word	0x40026440
 800107c:	200002b0 	.word	0x200002b0
 8001080:	400264b8 	.word	0x400264b8

08001084 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001084:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80010bc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001088:	f7ff fd8a 	bl	8000ba0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800108c:	480c      	ldr	r0, [pc, #48]	@ (80010c0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800108e:	490d      	ldr	r1, [pc, #52]	@ (80010c4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001090:	4a0d      	ldr	r2, [pc, #52]	@ (80010c8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001092:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001094:	e002      	b.n	800109c <LoopCopyDataInit>

08001096 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001096:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001098:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800109a:	3304      	adds	r3, #4

0800109c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800109c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800109e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010a0:	d3f9      	bcc.n	8001096 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010a2:	4a0a      	ldr	r2, [pc, #40]	@ (80010cc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010a4:	4c0a      	ldr	r4, [pc, #40]	@ (80010d0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80010a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010a8:	e001      	b.n	80010ae <LoopFillZerobss>

080010aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010ac:	3204      	adds	r2, #4

080010ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010b0:	d3fb      	bcc.n	80010aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010b2:	f006 fa9d 	bl	80075f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010b6:	f7ff fbdb 	bl	8000870 <main>
  bx  lr    
 80010ba:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80010bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80010c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010c4:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80010c8:	080077e8 	.word	0x080077e8
  ldr r2, =_sbss
 80010cc:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80010d0:	20004e44 	.word	0x20004e44

080010d4 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010d4:	e7fe      	b.n	80010d4 <DMA1_Stream0_IRQHandler>
	...

080010d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010dc:	4b0e      	ldr	r3, [pc, #56]	@ (8001118 <HAL_Init+0x40>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a0d      	ldr	r2, [pc, #52]	@ (8001118 <HAL_Init+0x40>)
 80010e2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80010e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001118 <HAL_Init+0x40>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a0a      	ldr	r2, [pc, #40]	@ (8001118 <HAL_Init+0x40>)
 80010ee:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80010f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010f4:	4b08      	ldr	r3, [pc, #32]	@ (8001118 <HAL_Init+0x40>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a07      	ldr	r2, [pc, #28]	@ (8001118 <HAL_Init+0x40>)
 80010fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001100:	2003      	movs	r0, #3
 8001102:	f000 fca6 	bl	8001a52 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001106:	200f      	movs	r0, #15
 8001108:	f7ff fc7c 	bl	8000a04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800110c:	f7ff fc4e 	bl	80009ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001110:	2300      	movs	r3, #0
}
 8001112:	4618      	mov	r0, r3
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	40023c00 	.word	0x40023c00

0800111c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001120:	4b06      	ldr	r3, [pc, #24]	@ (800113c <HAL_IncTick+0x20>)
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	461a      	mov	r2, r3
 8001126:	4b06      	ldr	r3, [pc, #24]	@ (8001140 <HAL_IncTick+0x24>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4413      	add	r3, r2
 800112c:	4a04      	ldr	r2, [pc, #16]	@ (8001140 <HAL_IncTick+0x24>)
 800112e:	6013      	str	r3, [r2, #0]
}
 8001130:	bf00      	nop
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	20000008 	.word	0x20000008
 8001140:	20000310 	.word	0x20000310

08001144 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  return uwTick;
 8001148:	4b03      	ldr	r3, [pc, #12]	@ (8001158 <HAL_GetTick+0x14>)
 800114a:	681b      	ldr	r3, [r3, #0]
}
 800114c:	4618      	mov	r0, r3
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	20000310 	.word	0x20000310

0800115c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b084      	sub	sp, #16
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001164:	f7ff ffee 	bl	8001144 <HAL_GetTick>
 8001168:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001174:	d005      	beq.n	8001182 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001176:	4b0a      	ldr	r3, [pc, #40]	@ (80011a0 <HAL_Delay+0x44>)
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	461a      	mov	r2, r3
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	4413      	add	r3, r2
 8001180:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001182:	bf00      	nop
 8001184:	f7ff ffde 	bl	8001144 <HAL_GetTick>
 8001188:	4602      	mov	r2, r0
 800118a:	68bb      	ldr	r3, [r7, #8]
 800118c:	1ad3      	subs	r3, r2, r3
 800118e:	68fa      	ldr	r2, [r7, #12]
 8001190:	429a      	cmp	r2, r3
 8001192:	d8f7      	bhi.n	8001184 <HAL_Delay+0x28>
  {
  }
}
 8001194:	bf00      	nop
 8001196:	bf00      	nop
 8001198:	3710      	adds	r7, #16
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	20000008 	.word	0x20000008

080011a4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b084      	sub	sp, #16
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011ac:	2300      	movs	r3, #0
 80011ae:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d101      	bne.n	80011ba <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80011b6:	2301      	movs	r3, #1
 80011b8:	e033      	b.n	8001222 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d109      	bne.n	80011d6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80011c2:	6878      	ldr	r0, [r7, #4]
 80011c4:	f7ff f9e4 	bl	8000590 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2200      	movs	r2, #0
 80011cc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2200      	movs	r2, #0
 80011d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011da:	f003 0310 	and.w	r3, r3, #16
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d118      	bne.n	8001214 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011e6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80011ea:	f023 0302 	bic.w	r3, r3, #2
 80011ee:	f043 0202 	orr.w	r2, r3, #2
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80011f6:	6878      	ldr	r0, [r7, #4]
 80011f8:	f000 fa78 	bl	80016ec <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2200      	movs	r2, #0
 8001200:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001206:	f023 0303 	bic.w	r3, r3, #3
 800120a:	f043 0201 	orr.w	r2, r3, #1
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	641a      	str	r2, [r3, #64]	@ 0x40
 8001212:	e001      	b.n	8001218 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001214:	2301      	movs	r3, #1
 8001216:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2200      	movs	r2, #0
 800121c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001220:	7bfb      	ldrb	r3, [r7, #15]
}
 8001222:	4618      	mov	r0, r3
 8001224:	3710      	adds	r7, #16
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}

0800122a <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800122a:	b580      	push	{r7, lr}
 800122c:	b086      	sub	sp, #24
 800122e:	af00      	add	r7, sp, #0
 8001230:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001232:	2300      	movs	r3, #0
 8001234:	617b      	str	r3, [r7, #20]
 8001236:	2300      	movs	r3, #0
 8001238:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	f003 0302 	and.w	r3, r3, #2
 8001250:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001252:	68bb      	ldr	r3, [r7, #8]
 8001254:	f003 0320 	and.w	r3, r3, #32
 8001258:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d049      	beq.n	80012f4 <HAL_ADC_IRQHandler+0xca>
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d046      	beq.n	80012f4 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800126a:	f003 0310 	and.w	r3, r3, #16
 800126e:	2b00      	cmp	r3, #0
 8001270:	d105      	bne.n	800127e <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001276:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	689b      	ldr	r3, [r3, #8]
 8001284:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001288:	2b00      	cmp	r3, #0
 800128a:	d12b      	bne.n	80012e4 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001290:	2b00      	cmp	r3, #0
 8001292:	d127      	bne.n	80012e4 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800129a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d006      	beq.n	80012b0 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	689b      	ldr	r3, [r3, #8]
 80012a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d119      	bne.n	80012e4 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	685a      	ldr	r2, [r3, #4]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f022 0220 	bic.w	r2, r2, #32
 80012be:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012c4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012d0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d105      	bne.n	80012e4 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012dc:	f043 0201 	orr.w	r2, r3, #1
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80012e4:	6878      	ldr	r0, [r7, #4]
 80012e6:	f000 f8b0 	bl	800144a <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f06f 0212 	mvn.w	r2, #18
 80012f2:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	f003 0304 	and.w	r3, r3, #4
 80012fa:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001302:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d057      	beq.n	80013ba <HAL_ADC_IRQHandler+0x190>
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d054      	beq.n	80013ba <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001314:	f003 0310 	and.w	r3, r3, #16
 8001318:	2b00      	cmp	r3, #0
 800131a:	d105      	bne.n	8001328 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001320:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	689b      	ldr	r3, [r3, #8]
 800132e:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8001332:	2b00      	cmp	r3, #0
 8001334:	d139      	bne.n	80013aa <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800133c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001340:	2b00      	cmp	r3, #0
 8001342:	d006      	beq.n	8001352 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	689b      	ldr	r3, [r3, #8]
 800134a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800134e:	2b00      	cmp	r3, #0
 8001350:	d12b      	bne.n	80013aa <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800135c:	2b00      	cmp	r3, #0
 800135e:	d124      	bne.n	80013aa <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	689b      	ldr	r3, [r3, #8]
 8001366:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800136a:	2b00      	cmp	r3, #0
 800136c:	d11d      	bne.n	80013aa <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001372:	2b00      	cmp	r3, #0
 8001374:	d119      	bne.n	80013aa <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	685a      	ldr	r2, [r3, #4]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001384:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800138a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001396:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800139a:	2b00      	cmp	r3, #0
 800139c:	d105      	bne.n	80013aa <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013a2:	f043 0201 	orr.w	r2, r3, #1
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80013aa:	6878      	ldr	r0, [r7, #4]
 80013ac:	f000 fa9a 	bl	80018e4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f06f 020c 	mvn.w	r2, #12
 80013b8:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	f003 0301 	and.w	r3, r3, #1
 80013c0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80013c2:	68bb      	ldr	r3, [r7, #8]
 80013c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80013c8:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d017      	beq.n	8001400 <HAL_ADC_IRQHandler+0x1d6>
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d014      	beq.n	8001400 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f003 0301 	and.w	r3, r3, #1
 80013e0:	2b01      	cmp	r3, #1
 80013e2:	d10d      	bne.n	8001400 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013e8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80013f0:	6878      	ldr	r0, [r7, #4]
 80013f2:	f000 f834 	bl	800145e <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f06f 0201 	mvn.w	r2, #1
 80013fe:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	f003 0320 	and.w	r3, r3, #32
 8001406:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800140e:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d015      	beq.n	8001442 <HAL_ADC_IRQHandler+0x218>
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d012      	beq.n	8001442 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001420:	f043 0202 	orr.w	r2, r3, #2
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f06f 0220 	mvn.w	r2, #32
 8001430:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8001432:	6878      	ldr	r0, [r7, #4]
 8001434:	f000 f81d 	bl	8001472 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f06f 0220 	mvn.w	r2, #32
 8001440:	601a      	str	r2, [r3, #0]
  }
}
 8001442:	bf00      	nop
 8001444:	3718      	adds	r7, #24
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}

0800144a <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800144a:	b480      	push	{r7}
 800144c:	b083      	sub	sp, #12
 800144e:	af00      	add	r7, sp, #0
 8001450:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001452:	bf00      	nop
 8001454:	370c      	adds	r7, #12
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr

0800145e <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800145e:	b480      	push	{r7}
 8001460:	b083      	sub	sp, #12
 8001462:	af00      	add	r7, sp, #0
 8001464:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001466:	bf00      	nop
 8001468:	370c      	adds	r7, #12
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr

08001472 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001472:	b480      	push	{r7}
 8001474:	b083      	sub	sp, #12
 8001476:	af00      	add	r7, sp, #0
 8001478:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800147a:	bf00      	nop
 800147c:	370c      	adds	r7, #12
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr
	...

08001488 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001488:	b480      	push	{r7}
 800148a:	b085      	sub	sp, #20
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001492:	2300      	movs	r3, #0
 8001494:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800149c:	2b01      	cmp	r3, #1
 800149e:	d101      	bne.n	80014a4 <HAL_ADC_ConfigChannel+0x1c>
 80014a0:	2302      	movs	r3, #2
 80014a2:	e113      	b.n	80016cc <HAL_ADC_ConfigChannel+0x244>
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2201      	movs	r2, #1
 80014a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	2b09      	cmp	r3, #9
 80014b2:	d925      	bls.n	8001500 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	68d9      	ldr	r1, [r3, #12]
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	b29b      	uxth	r3, r3
 80014c0:	461a      	mov	r2, r3
 80014c2:	4613      	mov	r3, r2
 80014c4:	005b      	lsls	r3, r3, #1
 80014c6:	4413      	add	r3, r2
 80014c8:	3b1e      	subs	r3, #30
 80014ca:	2207      	movs	r2, #7
 80014cc:	fa02 f303 	lsl.w	r3, r2, r3
 80014d0:	43da      	mvns	r2, r3
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	400a      	ands	r2, r1
 80014d8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	68d9      	ldr	r1, [r3, #12]
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	689a      	ldr	r2, [r3, #8]
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	b29b      	uxth	r3, r3
 80014ea:	4618      	mov	r0, r3
 80014ec:	4603      	mov	r3, r0
 80014ee:	005b      	lsls	r3, r3, #1
 80014f0:	4403      	add	r3, r0
 80014f2:	3b1e      	subs	r3, #30
 80014f4:	409a      	lsls	r2, r3
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	430a      	orrs	r2, r1
 80014fc:	60da      	str	r2, [r3, #12]
 80014fe:	e022      	b.n	8001546 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	6919      	ldr	r1, [r3, #16]
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	b29b      	uxth	r3, r3
 800150c:	461a      	mov	r2, r3
 800150e:	4613      	mov	r3, r2
 8001510:	005b      	lsls	r3, r3, #1
 8001512:	4413      	add	r3, r2
 8001514:	2207      	movs	r2, #7
 8001516:	fa02 f303 	lsl.w	r3, r2, r3
 800151a:	43da      	mvns	r2, r3
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	400a      	ands	r2, r1
 8001522:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	6919      	ldr	r1, [r3, #16]
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	689a      	ldr	r2, [r3, #8]
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	b29b      	uxth	r3, r3
 8001534:	4618      	mov	r0, r3
 8001536:	4603      	mov	r3, r0
 8001538:	005b      	lsls	r3, r3, #1
 800153a:	4403      	add	r3, r0
 800153c:	409a      	lsls	r2, r3
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	430a      	orrs	r2, r1
 8001544:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	2b06      	cmp	r3, #6
 800154c:	d824      	bhi.n	8001598 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	685a      	ldr	r2, [r3, #4]
 8001558:	4613      	mov	r3, r2
 800155a:	009b      	lsls	r3, r3, #2
 800155c:	4413      	add	r3, r2
 800155e:	3b05      	subs	r3, #5
 8001560:	221f      	movs	r2, #31
 8001562:	fa02 f303 	lsl.w	r3, r2, r3
 8001566:	43da      	mvns	r2, r3
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	400a      	ands	r2, r1
 800156e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	b29b      	uxth	r3, r3
 800157c:	4618      	mov	r0, r3
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	685a      	ldr	r2, [r3, #4]
 8001582:	4613      	mov	r3, r2
 8001584:	009b      	lsls	r3, r3, #2
 8001586:	4413      	add	r3, r2
 8001588:	3b05      	subs	r3, #5
 800158a:	fa00 f203 	lsl.w	r2, r0, r3
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	430a      	orrs	r2, r1
 8001594:	635a      	str	r2, [r3, #52]	@ 0x34
 8001596:	e04c      	b.n	8001632 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	2b0c      	cmp	r3, #12
 800159e:	d824      	bhi.n	80015ea <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	685a      	ldr	r2, [r3, #4]
 80015aa:	4613      	mov	r3, r2
 80015ac:	009b      	lsls	r3, r3, #2
 80015ae:	4413      	add	r3, r2
 80015b0:	3b23      	subs	r3, #35	@ 0x23
 80015b2:	221f      	movs	r2, #31
 80015b4:	fa02 f303 	lsl.w	r3, r2, r3
 80015b8:	43da      	mvns	r2, r3
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	400a      	ands	r2, r1
 80015c0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	b29b      	uxth	r3, r3
 80015ce:	4618      	mov	r0, r3
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	685a      	ldr	r2, [r3, #4]
 80015d4:	4613      	mov	r3, r2
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	4413      	add	r3, r2
 80015da:	3b23      	subs	r3, #35	@ 0x23
 80015dc:	fa00 f203 	lsl.w	r2, r0, r3
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	430a      	orrs	r2, r1
 80015e6:	631a      	str	r2, [r3, #48]	@ 0x30
 80015e8:	e023      	b.n	8001632 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	685a      	ldr	r2, [r3, #4]
 80015f4:	4613      	mov	r3, r2
 80015f6:	009b      	lsls	r3, r3, #2
 80015f8:	4413      	add	r3, r2
 80015fa:	3b41      	subs	r3, #65	@ 0x41
 80015fc:	221f      	movs	r2, #31
 80015fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001602:	43da      	mvns	r2, r3
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	400a      	ands	r2, r1
 800160a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	b29b      	uxth	r3, r3
 8001618:	4618      	mov	r0, r3
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	685a      	ldr	r2, [r3, #4]
 800161e:	4613      	mov	r3, r2
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	4413      	add	r3, r2
 8001624:	3b41      	subs	r3, #65	@ 0x41
 8001626:	fa00 f203 	lsl.w	r2, r0, r3
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	430a      	orrs	r2, r1
 8001630:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001632:	4b29      	ldr	r3, [pc, #164]	@ (80016d8 <HAL_ADC_ConfigChannel+0x250>)
 8001634:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a28      	ldr	r2, [pc, #160]	@ (80016dc <HAL_ADC_ConfigChannel+0x254>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d10f      	bne.n	8001660 <HAL_ADC_ConfigChannel+0x1d8>
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	2b12      	cmp	r3, #18
 8001646:	d10b      	bne.n	8001660 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a1d      	ldr	r2, [pc, #116]	@ (80016dc <HAL_ADC_ConfigChannel+0x254>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d12b      	bne.n	80016c2 <HAL_ADC_ConfigChannel+0x23a>
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a1c      	ldr	r2, [pc, #112]	@ (80016e0 <HAL_ADC_ConfigChannel+0x258>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d003      	beq.n	800167c <HAL_ADC_ConfigChannel+0x1f4>
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	2b11      	cmp	r3, #17
 800167a:	d122      	bne.n	80016c2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a11      	ldr	r2, [pc, #68]	@ (80016e0 <HAL_ADC_ConfigChannel+0x258>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d111      	bne.n	80016c2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800169e:	4b11      	ldr	r3, [pc, #68]	@ (80016e4 <HAL_ADC_ConfigChannel+0x25c>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a11      	ldr	r2, [pc, #68]	@ (80016e8 <HAL_ADC_ConfigChannel+0x260>)
 80016a4:	fba2 2303 	umull	r2, r3, r2, r3
 80016a8:	0c9a      	lsrs	r2, r3, #18
 80016aa:	4613      	mov	r3, r2
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	4413      	add	r3, r2
 80016b0:	005b      	lsls	r3, r3, #1
 80016b2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80016b4:	e002      	b.n	80016bc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80016b6:	68bb      	ldr	r3, [r7, #8]
 80016b8:	3b01      	subs	r3, #1
 80016ba:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d1f9      	bne.n	80016b6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2200      	movs	r2, #0
 80016c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80016ca:	2300      	movs	r3, #0
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	3714      	adds	r7, #20
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr
 80016d8:	40012300 	.word	0x40012300
 80016dc:	40012000 	.word	0x40012000
 80016e0:	10000012 	.word	0x10000012
 80016e4:	20000000 	.word	0x20000000
 80016e8:	431bde83 	.word	0x431bde83

080016ec <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b085      	sub	sp, #20
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80016f4:	4b79      	ldr	r3, [pc, #484]	@ (80018dc <ADC_Init+0x1f0>)
 80016f6:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	685a      	ldr	r2, [r3, #4]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	431a      	orrs	r2, r3
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	685a      	ldr	r2, [r3, #4]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001720:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	6859      	ldr	r1, [r3, #4]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	691b      	ldr	r3, [r3, #16]
 800172c:	021a      	lsls	r2, r3, #8
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	430a      	orrs	r2, r1
 8001734:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	685a      	ldr	r2, [r3, #4]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001744:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	6859      	ldr	r1, [r3, #4]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	689a      	ldr	r2, [r3, #8]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	430a      	orrs	r2, r1
 8001756:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	689a      	ldr	r2, [r3, #8]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001766:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	6899      	ldr	r1, [r3, #8]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	68da      	ldr	r2, [r3, #12]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	430a      	orrs	r2, r1
 8001778:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800177e:	4a58      	ldr	r2, [pc, #352]	@ (80018e0 <ADC_Init+0x1f4>)
 8001780:	4293      	cmp	r3, r2
 8001782:	d022      	beq.n	80017ca <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	689a      	ldr	r2, [r3, #8]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001792:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	6899      	ldr	r1, [r3, #8]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	430a      	orrs	r2, r1
 80017a4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	689a      	ldr	r2, [r3, #8]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80017b4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	6899      	ldr	r1, [r3, #8]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	430a      	orrs	r2, r1
 80017c6:	609a      	str	r2, [r3, #8]
 80017c8:	e00f      	b.n	80017ea <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	689a      	ldr	r2, [r3, #8]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80017d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	689a      	ldr	r2, [r3, #8]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80017e8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	689a      	ldr	r2, [r3, #8]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f022 0202 	bic.w	r2, r2, #2
 80017f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	6899      	ldr	r1, [r3, #8]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	7e1b      	ldrb	r3, [r3, #24]
 8001804:	005a      	lsls	r2, r3, #1
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	430a      	orrs	r2, r1
 800180c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d01b      	beq.n	8001850 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	685a      	ldr	r2, [r3, #4]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001826:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	685a      	ldr	r2, [r3, #4]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001836:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	6859      	ldr	r1, [r3, #4]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001842:	3b01      	subs	r3, #1
 8001844:	035a      	lsls	r2, r3, #13
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	430a      	orrs	r2, r1
 800184c:	605a      	str	r2, [r3, #4]
 800184e:	e007      	b.n	8001860 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	685a      	ldr	r2, [r3, #4]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800185e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800186e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	69db      	ldr	r3, [r3, #28]
 800187a:	3b01      	subs	r3, #1
 800187c:	051a      	lsls	r2, r3, #20
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	430a      	orrs	r2, r1
 8001884:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	689a      	ldr	r2, [r3, #8]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001894:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	6899      	ldr	r1, [r3, #8]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80018a2:	025a      	lsls	r2, r3, #9
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	430a      	orrs	r2, r1
 80018aa:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	689a      	ldr	r2, [r3, #8]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80018ba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	6899      	ldr	r1, [r3, #8]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	695b      	ldr	r3, [r3, #20]
 80018c6:	029a      	lsls	r2, r3, #10
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	430a      	orrs	r2, r1
 80018ce:	609a      	str	r2, [r3, #8]
}
 80018d0:	bf00      	nop
 80018d2:	3714      	adds	r7, #20
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr
 80018dc:	40012300 	.word	0x40012300
 80018e0:	0f000001 	.word	0x0f000001

080018e4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80018ec:	bf00      	nop
 80018ee:	370c      	adds	r7, #12
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr

080018f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b085      	sub	sp, #20
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	f003 0307 	and.w	r3, r3, #7
 8001906:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001908:	4b0c      	ldr	r3, [pc, #48]	@ (800193c <__NVIC_SetPriorityGrouping+0x44>)
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800190e:	68ba      	ldr	r2, [r7, #8]
 8001910:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001914:	4013      	ands	r3, r2
 8001916:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001920:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001924:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001928:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800192a:	4a04      	ldr	r2, [pc, #16]	@ (800193c <__NVIC_SetPriorityGrouping+0x44>)
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	60d3      	str	r3, [r2, #12]
}
 8001930:	bf00      	nop
 8001932:	3714      	adds	r7, #20
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr
 800193c:	e000ed00 	.word	0xe000ed00

08001940 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001944:	4b04      	ldr	r3, [pc, #16]	@ (8001958 <__NVIC_GetPriorityGrouping+0x18>)
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	0a1b      	lsrs	r3, r3, #8
 800194a:	f003 0307 	and.w	r3, r3, #7
}
 800194e:	4618      	mov	r0, r3
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr
 8001958:	e000ed00 	.word	0xe000ed00

0800195c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	4603      	mov	r3, r0
 8001964:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800196a:	2b00      	cmp	r3, #0
 800196c:	db0b      	blt.n	8001986 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800196e:	79fb      	ldrb	r3, [r7, #7]
 8001970:	f003 021f 	and.w	r2, r3, #31
 8001974:	4907      	ldr	r1, [pc, #28]	@ (8001994 <__NVIC_EnableIRQ+0x38>)
 8001976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800197a:	095b      	lsrs	r3, r3, #5
 800197c:	2001      	movs	r0, #1
 800197e:	fa00 f202 	lsl.w	r2, r0, r2
 8001982:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001986:	bf00      	nop
 8001988:	370c      	adds	r7, #12
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	e000e100 	.word	0xe000e100

08001998 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	4603      	mov	r3, r0
 80019a0:	6039      	str	r1, [r7, #0]
 80019a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	db0a      	blt.n	80019c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	b2da      	uxtb	r2, r3
 80019b0:	490c      	ldr	r1, [pc, #48]	@ (80019e4 <__NVIC_SetPriority+0x4c>)
 80019b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b6:	0112      	lsls	r2, r2, #4
 80019b8:	b2d2      	uxtb	r2, r2
 80019ba:	440b      	add	r3, r1
 80019bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019c0:	e00a      	b.n	80019d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	b2da      	uxtb	r2, r3
 80019c6:	4908      	ldr	r1, [pc, #32]	@ (80019e8 <__NVIC_SetPriority+0x50>)
 80019c8:	79fb      	ldrb	r3, [r7, #7]
 80019ca:	f003 030f 	and.w	r3, r3, #15
 80019ce:	3b04      	subs	r3, #4
 80019d0:	0112      	lsls	r2, r2, #4
 80019d2:	b2d2      	uxtb	r2, r2
 80019d4:	440b      	add	r3, r1
 80019d6:	761a      	strb	r2, [r3, #24]
}
 80019d8:	bf00      	nop
 80019da:	370c      	adds	r7, #12
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr
 80019e4:	e000e100 	.word	0xe000e100
 80019e8:	e000ed00 	.word	0xe000ed00

080019ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b089      	sub	sp, #36	@ 0x24
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	60f8      	str	r0, [r7, #12]
 80019f4:	60b9      	str	r1, [r7, #8]
 80019f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	f003 0307 	and.w	r3, r3, #7
 80019fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a00:	69fb      	ldr	r3, [r7, #28]
 8001a02:	f1c3 0307 	rsb	r3, r3, #7
 8001a06:	2b04      	cmp	r3, #4
 8001a08:	bf28      	it	cs
 8001a0a:	2304      	movcs	r3, #4
 8001a0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	3304      	adds	r3, #4
 8001a12:	2b06      	cmp	r3, #6
 8001a14:	d902      	bls.n	8001a1c <NVIC_EncodePriority+0x30>
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	3b03      	subs	r3, #3
 8001a1a:	e000      	b.n	8001a1e <NVIC_EncodePriority+0x32>
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a20:	f04f 32ff 	mov.w	r2, #4294967295
 8001a24:	69bb      	ldr	r3, [r7, #24]
 8001a26:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2a:	43da      	mvns	r2, r3
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	401a      	ands	r2, r3
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a34:	f04f 31ff 	mov.w	r1, #4294967295
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a3e:	43d9      	mvns	r1, r3
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a44:	4313      	orrs	r3, r2
         );
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3724      	adds	r7, #36	@ 0x24
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr

08001a52 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a52:	b580      	push	{r7, lr}
 8001a54:	b082      	sub	sp, #8
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	f7ff ff4c 	bl	80018f8 <__NVIC_SetPriorityGrouping>
}
 8001a60:	bf00      	nop
 8001a62:	3708      	adds	r7, #8
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}

08001a68 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b086      	sub	sp, #24
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	4603      	mov	r3, r0
 8001a70:	60b9      	str	r1, [r7, #8]
 8001a72:	607a      	str	r2, [r7, #4]
 8001a74:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a76:	2300      	movs	r3, #0
 8001a78:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a7a:	f7ff ff61 	bl	8001940 <__NVIC_GetPriorityGrouping>
 8001a7e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a80:	687a      	ldr	r2, [r7, #4]
 8001a82:	68b9      	ldr	r1, [r7, #8]
 8001a84:	6978      	ldr	r0, [r7, #20]
 8001a86:	f7ff ffb1 	bl	80019ec <NVIC_EncodePriority>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a90:	4611      	mov	r1, r2
 8001a92:	4618      	mov	r0, r3
 8001a94:	f7ff ff80 	bl	8001998 <__NVIC_SetPriority>
}
 8001a98:	bf00      	nop
 8001a9a:	3718      	adds	r7, #24
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}

08001aa0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f7ff ff54 	bl	800195c <__NVIC_EnableIRQ>
}
 8001ab4:	bf00      	nop
 8001ab6:	3708      	adds	r7, #8
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}

08001abc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b086      	sub	sp, #24
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001ac8:	f7ff fb3c 	bl	8001144 <HAL_GetTick>
 8001acc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d101      	bne.n	8001ad8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e099      	b.n	8001c0c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2202      	movs	r2, #2
 8001adc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f022 0201 	bic.w	r2, r2, #1
 8001af6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001af8:	e00f      	b.n	8001b1a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001afa:	f7ff fb23 	bl	8001144 <HAL_GetTick>
 8001afe:	4602      	mov	r2, r0
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	1ad3      	subs	r3, r2, r3
 8001b04:	2b05      	cmp	r3, #5
 8001b06:	d908      	bls.n	8001b1a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2220      	movs	r2, #32
 8001b0c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2203      	movs	r2, #3
 8001b12:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001b16:	2303      	movs	r3, #3
 8001b18:	e078      	b.n	8001c0c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 0301 	and.w	r3, r3, #1
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d1e8      	bne.n	8001afa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001b30:	697a      	ldr	r2, [r7, #20]
 8001b32:	4b38      	ldr	r3, [pc, #224]	@ (8001c14 <HAL_DMA_Init+0x158>)
 8001b34:	4013      	ands	r3, r2
 8001b36:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	685a      	ldr	r2, [r3, #4]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b46:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	691b      	ldr	r3, [r3, #16]
 8001b4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b52:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	699b      	ldr	r3, [r3, #24]
 8001b58:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b5e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6a1b      	ldr	r3, [r3, #32]
 8001b64:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b66:	697a      	ldr	r2, [r7, #20]
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b70:	2b04      	cmp	r3, #4
 8001b72:	d107      	bne.n	8001b84 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	697a      	ldr	r2, [r7, #20]
 8001b80:	4313      	orrs	r3, r2
 8001b82:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	697a      	ldr	r2, [r7, #20]
 8001b8a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	695b      	ldr	r3, [r3, #20]
 8001b92:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	f023 0307 	bic.w	r3, r3, #7
 8001b9a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ba0:	697a      	ldr	r2, [r7, #20]
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001baa:	2b04      	cmp	r3, #4
 8001bac:	d117      	bne.n	8001bde <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bb2:	697a      	ldr	r2, [r7, #20]
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d00e      	beq.n	8001bde <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	f000 fa6f 	bl	80020a4 <DMA_CheckFifoParam>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d008      	beq.n	8001bde <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2240      	movs	r2, #64	@ 0x40
 8001bd0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e016      	b.n	8001c0c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	697a      	ldr	r2, [r7, #20]
 8001be4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	f000 fa26 	bl	8002038 <DMA_CalcBaseAndBitshift>
 8001bec:	4603      	mov	r3, r0
 8001bee:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bf4:	223f      	movs	r2, #63	@ 0x3f
 8001bf6:	409a      	lsls	r2, r3
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2201      	movs	r2, #1
 8001c06:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001c0a:	2300      	movs	r3, #0
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3718      	adds	r7, #24
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	f010803f 	.word	0xf010803f

08001c18 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b086      	sub	sp, #24
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	60f8      	str	r0, [r7, #12]
 8001c20:	60b9      	str	r1, [r7, #8]
 8001c22:	607a      	str	r2, [r7, #4]
 8001c24:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c26:	2300      	movs	r3, #0
 8001c28:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c2e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d101      	bne.n	8001c3e <HAL_DMA_Start_IT+0x26>
 8001c3a:	2302      	movs	r3, #2
 8001c3c:	e040      	b.n	8001cc0 <HAL_DMA_Start_IT+0xa8>
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	2201      	movs	r2, #1
 8001c42:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d12f      	bne.n	8001cb2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	2202      	movs	r2, #2
 8001c56:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	687a      	ldr	r2, [r7, #4]
 8001c64:	68b9      	ldr	r1, [r7, #8]
 8001c66:	68f8      	ldr	r0, [r7, #12]
 8001c68:	f000 f9b8 	bl	8001fdc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c70:	223f      	movs	r2, #63	@ 0x3f
 8001c72:	409a      	lsls	r2, r3
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f042 0216 	orr.w	r2, r2, #22
 8001c86:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d007      	beq.n	8001ca0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f042 0208 	orr.w	r2, r2, #8
 8001c9e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f042 0201 	orr.w	r2, r2, #1
 8001cae:	601a      	str	r2, [r3, #0]
 8001cb0:	e005      	b.n	8001cbe <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001cba:	2302      	movs	r3, #2
 8001cbc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001cbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3718      	adds	r7, #24
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}

08001cc8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b086      	sub	sp, #24
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001cd4:	4b8e      	ldr	r3, [pc, #568]	@ (8001f10 <HAL_DMA_IRQHandler+0x248>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a8e      	ldr	r2, [pc, #568]	@ (8001f14 <HAL_DMA_IRQHandler+0x24c>)
 8001cda:	fba2 2303 	umull	r2, r3, r2, r3
 8001cde:	0a9b      	lsrs	r3, r3, #10
 8001ce0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ce6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cf2:	2208      	movs	r2, #8
 8001cf4:	409a      	lsls	r2, r3
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d01a      	beq.n	8001d34 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f003 0304 	and.w	r3, r3, #4
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d013      	beq.n	8001d34 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f022 0204 	bic.w	r2, r2, #4
 8001d1a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d20:	2208      	movs	r2, #8
 8001d22:	409a      	lsls	r2, r3
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d2c:	f043 0201 	orr.w	r2, r3, #1
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d38:	2201      	movs	r2, #1
 8001d3a:	409a      	lsls	r2, r3
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	4013      	ands	r3, r2
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d012      	beq.n	8001d6a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	695b      	ldr	r3, [r3, #20]
 8001d4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d00b      	beq.n	8001d6a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d56:	2201      	movs	r2, #1
 8001d58:	409a      	lsls	r2, r3
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d62:	f043 0202 	orr.w	r2, r3, #2
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d6e:	2204      	movs	r2, #4
 8001d70:	409a      	lsls	r2, r3
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	4013      	ands	r3, r2
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d012      	beq.n	8001da0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f003 0302 	and.w	r3, r3, #2
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d00b      	beq.n	8001da0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d8c:	2204      	movs	r2, #4
 8001d8e:	409a      	lsls	r2, r3
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d98:	f043 0204 	orr.w	r2, r3, #4
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001da4:	2210      	movs	r2, #16
 8001da6:	409a      	lsls	r2, r3
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	4013      	ands	r3, r2
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d043      	beq.n	8001e38 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 0308 	and.w	r3, r3, #8
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d03c      	beq.n	8001e38 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dc2:	2210      	movs	r2, #16
 8001dc4:	409a      	lsls	r2, r3
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d018      	beq.n	8001e0a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d108      	bne.n	8001df8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d024      	beq.n	8001e38 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	4798      	blx	r3
 8001df6:	e01f      	b.n	8001e38 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d01b      	beq.n	8001e38 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	4798      	blx	r3
 8001e08:	e016      	b.n	8001e38 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d107      	bne.n	8001e28 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f022 0208 	bic.w	r2, r2, #8
 8001e26:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d003      	beq.n	8001e38 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e34:	6878      	ldr	r0, [r7, #4]
 8001e36:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e3c:	2220      	movs	r2, #32
 8001e3e:	409a      	lsls	r2, r3
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	4013      	ands	r3, r2
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	f000 808f 	beq.w	8001f68 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 0310 	and.w	r3, r3, #16
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	f000 8087 	beq.w	8001f68 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e5e:	2220      	movs	r2, #32
 8001e60:	409a      	lsls	r2, r3
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	2b05      	cmp	r3, #5
 8001e70:	d136      	bne.n	8001ee0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f022 0216 	bic.w	r2, r2, #22
 8001e80:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	695a      	ldr	r2, [r3, #20]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001e90:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d103      	bne.n	8001ea2 <HAL_DMA_IRQHandler+0x1da>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d007      	beq.n	8001eb2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f022 0208 	bic.w	r2, r2, #8
 8001eb0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001eb6:	223f      	movs	r2, #63	@ 0x3f
 8001eb8:	409a      	lsls	r2, r3
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d07e      	beq.n	8001fd4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	4798      	blx	r3
        }
        return;
 8001ede:	e079      	b.n	8001fd4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d01d      	beq.n	8001f2a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d10d      	bne.n	8001f18 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d031      	beq.n	8001f68 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f08:	6878      	ldr	r0, [r7, #4]
 8001f0a:	4798      	blx	r3
 8001f0c:	e02c      	b.n	8001f68 <HAL_DMA_IRQHandler+0x2a0>
 8001f0e:	bf00      	nop
 8001f10:	20000000 	.word	0x20000000
 8001f14:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d023      	beq.n	8001f68 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	4798      	blx	r3
 8001f28:	e01e      	b.n	8001f68 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d10f      	bne.n	8001f58 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f022 0210 	bic.w	r2, r2, #16
 8001f46:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2200      	movs	r2, #0
 8001f54:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d003      	beq.n	8001f68 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d032      	beq.n	8001fd6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f74:	f003 0301 	and.w	r3, r3, #1
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d022      	beq.n	8001fc2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2205      	movs	r2, #5
 8001f80:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f022 0201 	bic.w	r2, r2, #1
 8001f92:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	3301      	adds	r3, #1
 8001f98:	60bb      	str	r3, [r7, #8]
 8001f9a:	697a      	ldr	r2, [r7, #20]
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d307      	bcc.n	8001fb0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 0301 	and.w	r3, r3, #1
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d1f2      	bne.n	8001f94 <HAL_DMA_IRQHandler+0x2cc>
 8001fae:	e000      	b.n	8001fb2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001fb0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d005      	beq.n	8001fd6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	4798      	blx	r3
 8001fd2:	e000      	b.n	8001fd6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001fd4:	bf00      	nop
    }
  }
}
 8001fd6:	3718      	adds	r7, #24
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}

08001fdc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b085      	sub	sp, #20
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	60f8      	str	r0, [r7, #12]
 8001fe4:	60b9      	str	r1, [r7, #8]
 8001fe6:	607a      	str	r2, [r7, #4]
 8001fe8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001ff8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	683a      	ldr	r2, [r7, #0]
 8002000:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	2b40      	cmp	r3, #64	@ 0x40
 8002008:	d108      	bne.n	800201c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	687a      	ldr	r2, [r7, #4]
 8002010:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	68ba      	ldr	r2, [r7, #8]
 8002018:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800201a:	e007      	b.n	800202c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	68ba      	ldr	r2, [r7, #8]
 8002022:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	687a      	ldr	r2, [r7, #4]
 800202a:	60da      	str	r2, [r3, #12]
}
 800202c:	bf00      	nop
 800202e:	3714      	adds	r7, #20
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr

08002038 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002038:	b480      	push	{r7}
 800203a:	b085      	sub	sp, #20
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	b2db      	uxtb	r3, r3
 8002046:	3b10      	subs	r3, #16
 8002048:	4a14      	ldr	r2, [pc, #80]	@ (800209c <DMA_CalcBaseAndBitshift+0x64>)
 800204a:	fba2 2303 	umull	r2, r3, r2, r3
 800204e:	091b      	lsrs	r3, r3, #4
 8002050:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002052:	4a13      	ldr	r2, [pc, #76]	@ (80020a0 <DMA_CalcBaseAndBitshift+0x68>)
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	4413      	add	r3, r2
 8002058:	781b      	ldrb	r3, [r3, #0]
 800205a:	461a      	mov	r2, r3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2b03      	cmp	r3, #3
 8002064:	d909      	bls.n	800207a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800206e:	f023 0303 	bic.w	r3, r3, #3
 8002072:	1d1a      	adds	r2, r3, #4
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	659a      	str	r2, [r3, #88]	@ 0x58
 8002078:	e007      	b.n	800208a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002082:	f023 0303 	bic.w	r3, r3, #3
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800208e:	4618      	mov	r0, r3
 8002090:	3714      	adds	r7, #20
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr
 800209a:	bf00      	nop
 800209c:	aaaaaaab 	.word	0xaaaaaaab
 80020a0:	080077d0 	.word	0x080077d0

080020a4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b085      	sub	sp, #20
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020ac:	2300      	movs	r3, #0
 80020ae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020b4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	699b      	ldr	r3, [r3, #24]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d11f      	bne.n	80020fe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	2b03      	cmp	r3, #3
 80020c2:	d856      	bhi.n	8002172 <DMA_CheckFifoParam+0xce>
 80020c4:	a201      	add	r2, pc, #4	@ (adr r2, 80020cc <DMA_CheckFifoParam+0x28>)
 80020c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020ca:	bf00      	nop
 80020cc:	080020dd 	.word	0x080020dd
 80020d0:	080020ef 	.word	0x080020ef
 80020d4:	080020dd 	.word	0x080020dd
 80020d8:	08002173 	.word	0x08002173
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020e0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d046      	beq.n	8002176 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020ec:	e043      	b.n	8002176 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020f2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80020f6:	d140      	bne.n	800217a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020fc:	e03d      	b.n	800217a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	699b      	ldr	r3, [r3, #24]
 8002102:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002106:	d121      	bne.n	800214c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	2b03      	cmp	r3, #3
 800210c:	d837      	bhi.n	800217e <DMA_CheckFifoParam+0xda>
 800210e:	a201      	add	r2, pc, #4	@ (adr r2, 8002114 <DMA_CheckFifoParam+0x70>)
 8002110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002114:	08002125 	.word	0x08002125
 8002118:	0800212b 	.word	0x0800212b
 800211c:	08002125 	.word	0x08002125
 8002120:	0800213d 	.word	0x0800213d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	73fb      	strb	r3, [r7, #15]
      break;
 8002128:	e030      	b.n	800218c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800212e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d025      	beq.n	8002182 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800213a:	e022      	b.n	8002182 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002140:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002144:	d11f      	bne.n	8002186 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800214a:	e01c      	b.n	8002186 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	2b02      	cmp	r3, #2
 8002150:	d903      	bls.n	800215a <DMA_CheckFifoParam+0xb6>
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	2b03      	cmp	r3, #3
 8002156:	d003      	beq.n	8002160 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002158:	e018      	b.n	800218c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	73fb      	strb	r3, [r7, #15]
      break;
 800215e:	e015      	b.n	800218c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002164:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002168:	2b00      	cmp	r3, #0
 800216a:	d00e      	beq.n	800218a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	73fb      	strb	r3, [r7, #15]
      break;
 8002170:	e00b      	b.n	800218a <DMA_CheckFifoParam+0xe6>
      break;
 8002172:	bf00      	nop
 8002174:	e00a      	b.n	800218c <DMA_CheckFifoParam+0xe8>
      break;
 8002176:	bf00      	nop
 8002178:	e008      	b.n	800218c <DMA_CheckFifoParam+0xe8>
      break;
 800217a:	bf00      	nop
 800217c:	e006      	b.n	800218c <DMA_CheckFifoParam+0xe8>
      break;
 800217e:	bf00      	nop
 8002180:	e004      	b.n	800218c <DMA_CheckFifoParam+0xe8>
      break;
 8002182:	bf00      	nop
 8002184:	e002      	b.n	800218c <DMA_CheckFifoParam+0xe8>
      break;   
 8002186:	bf00      	nop
 8002188:	e000      	b.n	800218c <DMA_CheckFifoParam+0xe8>
      break;
 800218a:	bf00      	nop
    }
  } 
  
  return status; 
 800218c:	7bfb      	ldrb	r3, [r7, #15]
}
 800218e:	4618      	mov	r0, r3
 8002190:	3714      	adds	r7, #20
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr
 800219a:	bf00      	nop

0800219c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800219c:	b480      	push	{r7}
 800219e:	b089      	sub	sp, #36	@ 0x24
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021a6:	2300      	movs	r3, #0
 80021a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021aa:	2300      	movs	r3, #0
 80021ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021ae:	2300      	movs	r3, #0
 80021b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021b2:	2300      	movs	r3, #0
 80021b4:	61fb      	str	r3, [r7, #28]
 80021b6:	e159      	b.n	800246c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021b8:	2201      	movs	r2, #1
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	fa02 f303 	lsl.w	r3, r2, r3
 80021c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	697a      	ldr	r2, [r7, #20]
 80021c8:	4013      	ands	r3, r2
 80021ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80021cc:	693a      	ldr	r2, [r7, #16]
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	429a      	cmp	r2, r3
 80021d2:	f040 8148 	bne.w	8002466 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	f003 0303 	and.w	r3, r3, #3
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d005      	beq.n	80021ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d130      	bne.n	8002250 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021f4:	69fb      	ldr	r3, [r7, #28]
 80021f6:	005b      	lsls	r3, r3, #1
 80021f8:	2203      	movs	r2, #3
 80021fa:	fa02 f303 	lsl.w	r3, r2, r3
 80021fe:	43db      	mvns	r3, r3
 8002200:	69ba      	ldr	r2, [r7, #24]
 8002202:	4013      	ands	r3, r2
 8002204:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	68da      	ldr	r2, [r3, #12]
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	005b      	lsls	r3, r3, #1
 800220e:	fa02 f303 	lsl.w	r3, r2, r3
 8002212:	69ba      	ldr	r2, [r7, #24]
 8002214:	4313      	orrs	r3, r2
 8002216:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	69ba      	ldr	r2, [r7, #24]
 800221c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002224:	2201      	movs	r2, #1
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	fa02 f303 	lsl.w	r3, r2, r3
 800222c:	43db      	mvns	r3, r3
 800222e:	69ba      	ldr	r2, [r7, #24]
 8002230:	4013      	ands	r3, r2
 8002232:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	091b      	lsrs	r3, r3, #4
 800223a:	f003 0201 	and.w	r2, r3, #1
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	fa02 f303 	lsl.w	r3, r2, r3
 8002244:	69ba      	ldr	r2, [r7, #24]
 8002246:	4313      	orrs	r3, r2
 8002248:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	69ba      	ldr	r2, [r7, #24]
 800224e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f003 0303 	and.w	r3, r3, #3
 8002258:	2b03      	cmp	r3, #3
 800225a:	d017      	beq.n	800228c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	005b      	lsls	r3, r3, #1
 8002266:	2203      	movs	r2, #3
 8002268:	fa02 f303 	lsl.w	r3, r2, r3
 800226c:	43db      	mvns	r3, r3
 800226e:	69ba      	ldr	r2, [r7, #24]
 8002270:	4013      	ands	r3, r2
 8002272:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	689a      	ldr	r2, [r3, #8]
 8002278:	69fb      	ldr	r3, [r7, #28]
 800227a:	005b      	lsls	r3, r3, #1
 800227c:	fa02 f303 	lsl.w	r3, r2, r3
 8002280:	69ba      	ldr	r2, [r7, #24]
 8002282:	4313      	orrs	r3, r2
 8002284:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	69ba      	ldr	r2, [r7, #24]
 800228a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f003 0303 	and.w	r3, r3, #3
 8002294:	2b02      	cmp	r3, #2
 8002296:	d123      	bne.n	80022e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002298:	69fb      	ldr	r3, [r7, #28]
 800229a:	08da      	lsrs	r2, r3, #3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	3208      	adds	r2, #8
 80022a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	f003 0307 	and.w	r3, r3, #7
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	220f      	movs	r2, #15
 80022b0:	fa02 f303 	lsl.w	r3, r2, r3
 80022b4:	43db      	mvns	r3, r3
 80022b6:	69ba      	ldr	r2, [r7, #24]
 80022b8:	4013      	ands	r3, r2
 80022ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	691a      	ldr	r2, [r3, #16]
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	f003 0307 	and.w	r3, r3, #7
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	fa02 f303 	lsl.w	r3, r2, r3
 80022cc:	69ba      	ldr	r2, [r7, #24]
 80022ce:	4313      	orrs	r3, r2
 80022d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	08da      	lsrs	r2, r3, #3
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	3208      	adds	r2, #8
 80022da:	69b9      	ldr	r1, [r7, #24]
 80022dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	005b      	lsls	r3, r3, #1
 80022ea:	2203      	movs	r2, #3
 80022ec:	fa02 f303 	lsl.w	r3, r2, r3
 80022f0:	43db      	mvns	r3, r3
 80022f2:	69ba      	ldr	r2, [r7, #24]
 80022f4:	4013      	ands	r3, r2
 80022f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f003 0203 	and.w	r2, r3, #3
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	005b      	lsls	r3, r3, #1
 8002304:	fa02 f303 	lsl.w	r3, r2, r3
 8002308:	69ba      	ldr	r2, [r7, #24]
 800230a:	4313      	orrs	r3, r2
 800230c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	69ba      	ldr	r2, [r7, #24]
 8002312:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800231c:	2b00      	cmp	r3, #0
 800231e:	f000 80a2 	beq.w	8002466 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002322:	2300      	movs	r3, #0
 8002324:	60fb      	str	r3, [r7, #12]
 8002326:	4b57      	ldr	r3, [pc, #348]	@ (8002484 <HAL_GPIO_Init+0x2e8>)
 8002328:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800232a:	4a56      	ldr	r2, [pc, #344]	@ (8002484 <HAL_GPIO_Init+0x2e8>)
 800232c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002330:	6453      	str	r3, [r2, #68]	@ 0x44
 8002332:	4b54      	ldr	r3, [pc, #336]	@ (8002484 <HAL_GPIO_Init+0x2e8>)
 8002334:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002336:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800233a:	60fb      	str	r3, [r7, #12]
 800233c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800233e:	4a52      	ldr	r2, [pc, #328]	@ (8002488 <HAL_GPIO_Init+0x2ec>)
 8002340:	69fb      	ldr	r3, [r7, #28]
 8002342:	089b      	lsrs	r3, r3, #2
 8002344:	3302      	adds	r3, #2
 8002346:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800234a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800234c:	69fb      	ldr	r3, [r7, #28]
 800234e:	f003 0303 	and.w	r3, r3, #3
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	220f      	movs	r2, #15
 8002356:	fa02 f303 	lsl.w	r3, r2, r3
 800235a:	43db      	mvns	r3, r3
 800235c:	69ba      	ldr	r2, [r7, #24]
 800235e:	4013      	ands	r3, r2
 8002360:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4a49      	ldr	r2, [pc, #292]	@ (800248c <HAL_GPIO_Init+0x2f0>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d019      	beq.n	800239e <HAL_GPIO_Init+0x202>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4a48      	ldr	r2, [pc, #288]	@ (8002490 <HAL_GPIO_Init+0x2f4>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d013      	beq.n	800239a <HAL_GPIO_Init+0x1fe>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4a47      	ldr	r2, [pc, #284]	@ (8002494 <HAL_GPIO_Init+0x2f8>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d00d      	beq.n	8002396 <HAL_GPIO_Init+0x1fa>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4a46      	ldr	r2, [pc, #280]	@ (8002498 <HAL_GPIO_Init+0x2fc>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d007      	beq.n	8002392 <HAL_GPIO_Init+0x1f6>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4a45      	ldr	r2, [pc, #276]	@ (800249c <HAL_GPIO_Init+0x300>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d101      	bne.n	800238e <HAL_GPIO_Init+0x1f2>
 800238a:	2304      	movs	r3, #4
 800238c:	e008      	b.n	80023a0 <HAL_GPIO_Init+0x204>
 800238e:	2307      	movs	r3, #7
 8002390:	e006      	b.n	80023a0 <HAL_GPIO_Init+0x204>
 8002392:	2303      	movs	r3, #3
 8002394:	e004      	b.n	80023a0 <HAL_GPIO_Init+0x204>
 8002396:	2302      	movs	r3, #2
 8002398:	e002      	b.n	80023a0 <HAL_GPIO_Init+0x204>
 800239a:	2301      	movs	r3, #1
 800239c:	e000      	b.n	80023a0 <HAL_GPIO_Init+0x204>
 800239e:	2300      	movs	r3, #0
 80023a0:	69fa      	ldr	r2, [r7, #28]
 80023a2:	f002 0203 	and.w	r2, r2, #3
 80023a6:	0092      	lsls	r2, r2, #2
 80023a8:	4093      	lsls	r3, r2
 80023aa:	69ba      	ldr	r2, [r7, #24]
 80023ac:	4313      	orrs	r3, r2
 80023ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023b0:	4935      	ldr	r1, [pc, #212]	@ (8002488 <HAL_GPIO_Init+0x2ec>)
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	089b      	lsrs	r3, r3, #2
 80023b6:	3302      	adds	r3, #2
 80023b8:	69ba      	ldr	r2, [r7, #24]
 80023ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023be:	4b38      	ldr	r3, [pc, #224]	@ (80024a0 <HAL_GPIO_Init+0x304>)
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	43db      	mvns	r3, r3
 80023c8:	69ba      	ldr	r2, [r7, #24]
 80023ca:	4013      	ands	r3, r2
 80023cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d003      	beq.n	80023e2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80023da:	69ba      	ldr	r2, [r7, #24]
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	4313      	orrs	r3, r2
 80023e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023e2:	4a2f      	ldr	r2, [pc, #188]	@ (80024a0 <HAL_GPIO_Init+0x304>)
 80023e4:	69bb      	ldr	r3, [r7, #24]
 80023e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023e8:	4b2d      	ldr	r3, [pc, #180]	@ (80024a0 <HAL_GPIO_Init+0x304>)
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	43db      	mvns	r3, r3
 80023f2:	69ba      	ldr	r2, [r7, #24]
 80023f4:	4013      	ands	r3, r2
 80023f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002400:	2b00      	cmp	r3, #0
 8002402:	d003      	beq.n	800240c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002404:	69ba      	ldr	r2, [r7, #24]
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	4313      	orrs	r3, r2
 800240a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800240c:	4a24      	ldr	r2, [pc, #144]	@ (80024a0 <HAL_GPIO_Init+0x304>)
 800240e:	69bb      	ldr	r3, [r7, #24]
 8002410:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002412:	4b23      	ldr	r3, [pc, #140]	@ (80024a0 <HAL_GPIO_Init+0x304>)
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	43db      	mvns	r3, r3
 800241c:	69ba      	ldr	r2, [r7, #24]
 800241e:	4013      	ands	r3, r2
 8002420:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d003      	beq.n	8002436 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800242e:	69ba      	ldr	r2, [r7, #24]
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	4313      	orrs	r3, r2
 8002434:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002436:	4a1a      	ldr	r2, [pc, #104]	@ (80024a0 <HAL_GPIO_Init+0x304>)
 8002438:	69bb      	ldr	r3, [r7, #24]
 800243a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800243c:	4b18      	ldr	r3, [pc, #96]	@ (80024a0 <HAL_GPIO_Init+0x304>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	43db      	mvns	r3, r3
 8002446:	69ba      	ldr	r2, [r7, #24]
 8002448:	4013      	ands	r3, r2
 800244a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002454:	2b00      	cmp	r3, #0
 8002456:	d003      	beq.n	8002460 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002458:	69ba      	ldr	r2, [r7, #24]
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	4313      	orrs	r3, r2
 800245e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002460:	4a0f      	ldr	r2, [pc, #60]	@ (80024a0 <HAL_GPIO_Init+0x304>)
 8002462:	69bb      	ldr	r3, [r7, #24]
 8002464:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	3301      	adds	r3, #1
 800246a:	61fb      	str	r3, [r7, #28]
 800246c:	69fb      	ldr	r3, [r7, #28]
 800246e:	2b0f      	cmp	r3, #15
 8002470:	f67f aea2 	bls.w	80021b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002474:	bf00      	nop
 8002476:	bf00      	nop
 8002478:	3724      	adds	r7, #36	@ 0x24
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr
 8002482:	bf00      	nop
 8002484:	40023800 	.word	0x40023800
 8002488:	40013800 	.word	0x40013800
 800248c:	40020000 	.word	0x40020000
 8002490:	40020400 	.word	0x40020400
 8002494:	40020800 	.word	0x40020800
 8002498:	40020c00 	.word	0x40020c00
 800249c:	40021000 	.word	0x40021000
 80024a0:	40013c00 	.word	0x40013c00

080024a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
 80024ac:	460b      	mov	r3, r1
 80024ae:	807b      	strh	r3, [r7, #2]
 80024b0:	4613      	mov	r3, r2
 80024b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024b4:	787b      	ldrb	r3, [r7, #1]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d003      	beq.n	80024c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024ba:	887a      	ldrh	r2, [r7, #2]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80024c0:	e003      	b.n	80024ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80024c2:	887b      	ldrh	r3, [r7, #2]
 80024c4:	041a      	lsls	r2, r3, #16
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	619a      	str	r2, [r3, #24]
}
 80024ca:	bf00      	nop
 80024cc:	370c      	adds	r7, #12
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr

080024d6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80024d6:	b480      	push	{r7}
 80024d8:	b085      	sub	sp, #20
 80024da:	af00      	add	r7, sp, #0
 80024dc:	6078      	str	r0, [r7, #4]
 80024de:	460b      	mov	r3, r1
 80024e0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	695b      	ldr	r3, [r3, #20]
 80024e6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80024e8:	887a      	ldrh	r2, [r7, #2]
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	4013      	ands	r3, r2
 80024ee:	041a      	lsls	r2, r3, #16
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	43d9      	mvns	r1, r3
 80024f4:	887b      	ldrh	r3, [r7, #2]
 80024f6:	400b      	ands	r3, r1
 80024f8:	431a      	orrs	r2, r3
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	619a      	str	r2, [r3, #24]
}
 80024fe:	bf00      	nop
 8002500:	3714      	adds	r7, #20
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr
	...

0800250c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b086      	sub	sp, #24
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d101      	bne.n	800251e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e267      	b.n	80029ee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 0301 	and.w	r3, r3, #1
 8002526:	2b00      	cmp	r3, #0
 8002528:	d075      	beq.n	8002616 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800252a:	4b88      	ldr	r3, [pc, #544]	@ (800274c <HAL_RCC_OscConfig+0x240>)
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	f003 030c 	and.w	r3, r3, #12
 8002532:	2b04      	cmp	r3, #4
 8002534:	d00c      	beq.n	8002550 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002536:	4b85      	ldr	r3, [pc, #532]	@ (800274c <HAL_RCC_OscConfig+0x240>)
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800253e:	2b08      	cmp	r3, #8
 8002540:	d112      	bne.n	8002568 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002542:	4b82      	ldr	r3, [pc, #520]	@ (800274c <HAL_RCC_OscConfig+0x240>)
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800254a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800254e:	d10b      	bne.n	8002568 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002550:	4b7e      	ldr	r3, [pc, #504]	@ (800274c <HAL_RCC_OscConfig+0x240>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002558:	2b00      	cmp	r3, #0
 800255a:	d05b      	beq.n	8002614 <HAL_RCC_OscConfig+0x108>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d157      	bne.n	8002614 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	e242      	b.n	80029ee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002570:	d106      	bne.n	8002580 <HAL_RCC_OscConfig+0x74>
 8002572:	4b76      	ldr	r3, [pc, #472]	@ (800274c <HAL_RCC_OscConfig+0x240>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a75      	ldr	r2, [pc, #468]	@ (800274c <HAL_RCC_OscConfig+0x240>)
 8002578:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800257c:	6013      	str	r3, [r2, #0]
 800257e:	e01d      	b.n	80025bc <HAL_RCC_OscConfig+0xb0>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002588:	d10c      	bne.n	80025a4 <HAL_RCC_OscConfig+0x98>
 800258a:	4b70      	ldr	r3, [pc, #448]	@ (800274c <HAL_RCC_OscConfig+0x240>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a6f      	ldr	r2, [pc, #444]	@ (800274c <HAL_RCC_OscConfig+0x240>)
 8002590:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002594:	6013      	str	r3, [r2, #0]
 8002596:	4b6d      	ldr	r3, [pc, #436]	@ (800274c <HAL_RCC_OscConfig+0x240>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a6c      	ldr	r2, [pc, #432]	@ (800274c <HAL_RCC_OscConfig+0x240>)
 800259c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025a0:	6013      	str	r3, [r2, #0]
 80025a2:	e00b      	b.n	80025bc <HAL_RCC_OscConfig+0xb0>
 80025a4:	4b69      	ldr	r3, [pc, #420]	@ (800274c <HAL_RCC_OscConfig+0x240>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a68      	ldr	r2, [pc, #416]	@ (800274c <HAL_RCC_OscConfig+0x240>)
 80025aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025ae:	6013      	str	r3, [r2, #0]
 80025b0:	4b66      	ldr	r3, [pc, #408]	@ (800274c <HAL_RCC_OscConfig+0x240>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a65      	ldr	r2, [pc, #404]	@ (800274c <HAL_RCC_OscConfig+0x240>)
 80025b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80025ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d013      	beq.n	80025ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025c4:	f7fe fdbe 	bl	8001144 <HAL_GetTick>
 80025c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ca:	e008      	b.n	80025de <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025cc:	f7fe fdba 	bl	8001144 <HAL_GetTick>
 80025d0:	4602      	mov	r2, r0
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	2b64      	cmp	r3, #100	@ 0x64
 80025d8:	d901      	bls.n	80025de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80025da:	2303      	movs	r3, #3
 80025dc:	e207      	b.n	80029ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025de:	4b5b      	ldr	r3, [pc, #364]	@ (800274c <HAL_RCC_OscConfig+0x240>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d0f0      	beq.n	80025cc <HAL_RCC_OscConfig+0xc0>
 80025ea:	e014      	b.n	8002616 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ec:	f7fe fdaa 	bl	8001144 <HAL_GetTick>
 80025f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025f2:	e008      	b.n	8002606 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025f4:	f7fe fda6 	bl	8001144 <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	2b64      	cmp	r3, #100	@ 0x64
 8002600:	d901      	bls.n	8002606 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e1f3      	b.n	80029ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002606:	4b51      	ldr	r3, [pc, #324]	@ (800274c <HAL_RCC_OscConfig+0x240>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d1f0      	bne.n	80025f4 <HAL_RCC_OscConfig+0xe8>
 8002612:	e000      	b.n	8002616 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002614:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0302 	and.w	r3, r3, #2
 800261e:	2b00      	cmp	r3, #0
 8002620:	d063      	beq.n	80026ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002622:	4b4a      	ldr	r3, [pc, #296]	@ (800274c <HAL_RCC_OscConfig+0x240>)
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	f003 030c 	and.w	r3, r3, #12
 800262a:	2b00      	cmp	r3, #0
 800262c:	d00b      	beq.n	8002646 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800262e:	4b47      	ldr	r3, [pc, #284]	@ (800274c <HAL_RCC_OscConfig+0x240>)
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002636:	2b08      	cmp	r3, #8
 8002638:	d11c      	bne.n	8002674 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800263a:	4b44      	ldr	r3, [pc, #272]	@ (800274c <HAL_RCC_OscConfig+0x240>)
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d116      	bne.n	8002674 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002646:	4b41      	ldr	r3, [pc, #260]	@ (800274c <HAL_RCC_OscConfig+0x240>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0302 	and.w	r3, r3, #2
 800264e:	2b00      	cmp	r3, #0
 8002650:	d005      	beq.n	800265e <HAL_RCC_OscConfig+0x152>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	2b01      	cmp	r3, #1
 8002658:	d001      	beq.n	800265e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e1c7      	b.n	80029ee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800265e:	4b3b      	ldr	r3, [pc, #236]	@ (800274c <HAL_RCC_OscConfig+0x240>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	691b      	ldr	r3, [r3, #16]
 800266a:	00db      	lsls	r3, r3, #3
 800266c:	4937      	ldr	r1, [pc, #220]	@ (800274c <HAL_RCC_OscConfig+0x240>)
 800266e:	4313      	orrs	r3, r2
 8002670:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002672:	e03a      	b.n	80026ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d020      	beq.n	80026be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800267c:	4b34      	ldr	r3, [pc, #208]	@ (8002750 <HAL_RCC_OscConfig+0x244>)
 800267e:	2201      	movs	r2, #1
 8002680:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002682:	f7fe fd5f 	bl	8001144 <HAL_GetTick>
 8002686:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002688:	e008      	b.n	800269c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800268a:	f7fe fd5b 	bl	8001144 <HAL_GetTick>
 800268e:	4602      	mov	r2, r0
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	1ad3      	subs	r3, r2, r3
 8002694:	2b02      	cmp	r3, #2
 8002696:	d901      	bls.n	800269c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002698:	2303      	movs	r3, #3
 800269a:	e1a8      	b.n	80029ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800269c:	4b2b      	ldr	r3, [pc, #172]	@ (800274c <HAL_RCC_OscConfig+0x240>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 0302 	and.w	r3, r3, #2
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d0f0      	beq.n	800268a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026a8:	4b28      	ldr	r3, [pc, #160]	@ (800274c <HAL_RCC_OscConfig+0x240>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	691b      	ldr	r3, [r3, #16]
 80026b4:	00db      	lsls	r3, r3, #3
 80026b6:	4925      	ldr	r1, [pc, #148]	@ (800274c <HAL_RCC_OscConfig+0x240>)
 80026b8:	4313      	orrs	r3, r2
 80026ba:	600b      	str	r3, [r1, #0]
 80026bc:	e015      	b.n	80026ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026be:	4b24      	ldr	r3, [pc, #144]	@ (8002750 <HAL_RCC_OscConfig+0x244>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026c4:	f7fe fd3e 	bl	8001144 <HAL_GetTick>
 80026c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026ca:	e008      	b.n	80026de <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026cc:	f7fe fd3a 	bl	8001144 <HAL_GetTick>
 80026d0:	4602      	mov	r2, r0
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	2b02      	cmp	r3, #2
 80026d8:	d901      	bls.n	80026de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e187      	b.n	80029ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026de:	4b1b      	ldr	r3, [pc, #108]	@ (800274c <HAL_RCC_OscConfig+0x240>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0302 	and.w	r3, r3, #2
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d1f0      	bne.n	80026cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0308 	and.w	r3, r3, #8
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d036      	beq.n	8002764 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	695b      	ldr	r3, [r3, #20]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d016      	beq.n	800272c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026fe:	4b15      	ldr	r3, [pc, #84]	@ (8002754 <HAL_RCC_OscConfig+0x248>)
 8002700:	2201      	movs	r2, #1
 8002702:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002704:	f7fe fd1e 	bl	8001144 <HAL_GetTick>
 8002708:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800270a:	e008      	b.n	800271e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800270c:	f7fe fd1a 	bl	8001144 <HAL_GetTick>
 8002710:	4602      	mov	r2, r0
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	2b02      	cmp	r3, #2
 8002718:	d901      	bls.n	800271e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800271a:	2303      	movs	r3, #3
 800271c:	e167      	b.n	80029ee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800271e:	4b0b      	ldr	r3, [pc, #44]	@ (800274c <HAL_RCC_OscConfig+0x240>)
 8002720:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002722:	f003 0302 	and.w	r3, r3, #2
 8002726:	2b00      	cmp	r3, #0
 8002728:	d0f0      	beq.n	800270c <HAL_RCC_OscConfig+0x200>
 800272a:	e01b      	b.n	8002764 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800272c:	4b09      	ldr	r3, [pc, #36]	@ (8002754 <HAL_RCC_OscConfig+0x248>)
 800272e:	2200      	movs	r2, #0
 8002730:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002732:	f7fe fd07 	bl	8001144 <HAL_GetTick>
 8002736:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002738:	e00e      	b.n	8002758 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800273a:	f7fe fd03 	bl	8001144 <HAL_GetTick>
 800273e:	4602      	mov	r2, r0
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	1ad3      	subs	r3, r2, r3
 8002744:	2b02      	cmp	r3, #2
 8002746:	d907      	bls.n	8002758 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002748:	2303      	movs	r3, #3
 800274a:	e150      	b.n	80029ee <HAL_RCC_OscConfig+0x4e2>
 800274c:	40023800 	.word	0x40023800
 8002750:	42470000 	.word	0x42470000
 8002754:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002758:	4b88      	ldr	r3, [pc, #544]	@ (800297c <HAL_RCC_OscConfig+0x470>)
 800275a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800275c:	f003 0302 	and.w	r3, r3, #2
 8002760:	2b00      	cmp	r3, #0
 8002762:	d1ea      	bne.n	800273a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0304 	and.w	r3, r3, #4
 800276c:	2b00      	cmp	r3, #0
 800276e:	f000 8097 	beq.w	80028a0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002772:	2300      	movs	r3, #0
 8002774:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002776:	4b81      	ldr	r3, [pc, #516]	@ (800297c <HAL_RCC_OscConfig+0x470>)
 8002778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800277a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d10f      	bne.n	80027a2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002782:	2300      	movs	r3, #0
 8002784:	60bb      	str	r3, [r7, #8]
 8002786:	4b7d      	ldr	r3, [pc, #500]	@ (800297c <HAL_RCC_OscConfig+0x470>)
 8002788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800278a:	4a7c      	ldr	r2, [pc, #496]	@ (800297c <HAL_RCC_OscConfig+0x470>)
 800278c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002790:	6413      	str	r3, [r2, #64]	@ 0x40
 8002792:	4b7a      	ldr	r3, [pc, #488]	@ (800297c <HAL_RCC_OscConfig+0x470>)
 8002794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002796:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800279a:	60bb      	str	r3, [r7, #8]
 800279c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800279e:	2301      	movs	r3, #1
 80027a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027a2:	4b77      	ldr	r3, [pc, #476]	@ (8002980 <HAL_RCC_OscConfig+0x474>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d118      	bne.n	80027e0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027ae:	4b74      	ldr	r3, [pc, #464]	@ (8002980 <HAL_RCC_OscConfig+0x474>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a73      	ldr	r2, [pc, #460]	@ (8002980 <HAL_RCC_OscConfig+0x474>)
 80027b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027ba:	f7fe fcc3 	bl	8001144 <HAL_GetTick>
 80027be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027c0:	e008      	b.n	80027d4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027c2:	f7fe fcbf 	bl	8001144 <HAL_GetTick>
 80027c6:	4602      	mov	r2, r0
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	1ad3      	subs	r3, r2, r3
 80027cc:	2b02      	cmp	r3, #2
 80027ce:	d901      	bls.n	80027d4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80027d0:	2303      	movs	r3, #3
 80027d2:	e10c      	b.n	80029ee <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027d4:	4b6a      	ldr	r3, [pc, #424]	@ (8002980 <HAL_RCC_OscConfig+0x474>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d0f0      	beq.n	80027c2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d106      	bne.n	80027f6 <HAL_RCC_OscConfig+0x2ea>
 80027e8:	4b64      	ldr	r3, [pc, #400]	@ (800297c <HAL_RCC_OscConfig+0x470>)
 80027ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027ec:	4a63      	ldr	r2, [pc, #396]	@ (800297c <HAL_RCC_OscConfig+0x470>)
 80027ee:	f043 0301 	orr.w	r3, r3, #1
 80027f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80027f4:	e01c      	b.n	8002830 <HAL_RCC_OscConfig+0x324>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	2b05      	cmp	r3, #5
 80027fc:	d10c      	bne.n	8002818 <HAL_RCC_OscConfig+0x30c>
 80027fe:	4b5f      	ldr	r3, [pc, #380]	@ (800297c <HAL_RCC_OscConfig+0x470>)
 8002800:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002802:	4a5e      	ldr	r2, [pc, #376]	@ (800297c <HAL_RCC_OscConfig+0x470>)
 8002804:	f043 0304 	orr.w	r3, r3, #4
 8002808:	6713      	str	r3, [r2, #112]	@ 0x70
 800280a:	4b5c      	ldr	r3, [pc, #368]	@ (800297c <HAL_RCC_OscConfig+0x470>)
 800280c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800280e:	4a5b      	ldr	r2, [pc, #364]	@ (800297c <HAL_RCC_OscConfig+0x470>)
 8002810:	f043 0301 	orr.w	r3, r3, #1
 8002814:	6713      	str	r3, [r2, #112]	@ 0x70
 8002816:	e00b      	b.n	8002830 <HAL_RCC_OscConfig+0x324>
 8002818:	4b58      	ldr	r3, [pc, #352]	@ (800297c <HAL_RCC_OscConfig+0x470>)
 800281a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800281c:	4a57      	ldr	r2, [pc, #348]	@ (800297c <HAL_RCC_OscConfig+0x470>)
 800281e:	f023 0301 	bic.w	r3, r3, #1
 8002822:	6713      	str	r3, [r2, #112]	@ 0x70
 8002824:	4b55      	ldr	r3, [pc, #340]	@ (800297c <HAL_RCC_OscConfig+0x470>)
 8002826:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002828:	4a54      	ldr	r2, [pc, #336]	@ (800297c <HAL_RCC_OscConfig+0x470>)
 800282a:	f023 0304 	bic.w	r3, r3, #4
 800282e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d015      	beq.n	8002864 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002838:	f7fe fc84 	bl	8001144 <HAL_GetTick>
 800283c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800283e:	e00a      	b.n	8002856 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002840:	f7fe fc80 	bl	8001144 <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800284e:	4293      	cmp	r3, r2
 8002850:	d901      	bls.n	8002856 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e0cb      	b.n	80029ee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002856:	4b49      	ldr	r3, [pc, #292]	@ (800297c <HAL_RCC_OscConfig+0x470>)
 8002858:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800285a:	f003 0302 	and.w	r3, r3, #2
 800285e:	2b00      	cmp	r3, #0
 8002860:	d0ee      	beq.n	8002840 <HAL_RCC_OscConfig+0x334>
 8002862:	e014      	b.n	800288e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002864:	f7fe fc6e 	bl	8001144 <HAL_GetTick>
 8002868:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800286a:	e00a      	b.n	8002882 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800286c:	f7fe fc6a 	bl	8001144 <HAL_GetTick>
 8002870:	4602      	mov	r2, r0
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	f241 3288 	movw	r2, #5000	@ 0x1388
 800287a:	4293      	cmp	r3, r2
 800287c:	d901      	bls.n	8002882 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800287e:	2303      	movs	r3, #3
 8002880:	e0b5      	b.n	80029ee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002882:	4b3e      	ldr	r3, [pc, #248]	@ (800297c <HAL_RCC_OscConfig+0x470>)
 8002884:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002886:	f003 0302 	and.w	r3, r3, #2
 800288a:	2b00      	cmp	r3, #0
 800288c:	d1ee      	bne.n	800286c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800288e:	7dfb      	ldrb	r3, [r7, #23]
 8002890:	2b01      	cmp	r3, #1
 8002892:	d105      	bne.n	80028a0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002894:	4b39      	ldr	r3, [pc, #228]	@ (800297c <HAL_RCC_OscConfig+0x470>)
 8002896:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002898:	4a38      	ldr	r2, [pc, #224]	@ (800297c <HAL_RCC_OscConfig+0x470>)
 800289a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800289e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	699b      	ldr	r3, [r3, #24]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	f000 80a1 	beq.w	80029ec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80028aa:	4b34      	ldr	r3, [pc, #208]	@ (800297c <HAL_RCC_OscConfig+0x470>)
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	f003 030c 	and.w	r3, r3, #12
 80028b2:	2b08      	cmp	r3, #8
 80028b4:	d05c      	beq.n	8002970 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	699b      	ldr	r3, [r3, #24]
 80028ba:	2b02      	cmp	r3, #2
 80028bc:	d141      	bne.n	8002942 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028be:	4b31      	ldr	r3, [pc, #196]	@ (8002984 <HAL_RCC_OscConfig+0x478>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028c4:	f7fe fc3e 	bl	8001144 <HAL_GetTick>
 80028c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028ca:	e008      	b.n	80028de <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028cc:	f7fe fc3a 	bl	8001144 <HAL_GetTick>
 80028d0:	4602      	mov	r2, r0
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	2b02      	cmp	r3, #2
 80028d8:	d901      	bls.n	80028de <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80028da:	2303      	movs	r3, #3
 80028dc:	e087      	b.n	80029ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028de:	4b27      	ldr	r3, [pc, #156]	@ (800297c <HAL_RCC_OscConfig+0x470>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d1f0      	bne.n	80028cc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	69da      	ldr	r2, [r3, #28]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6a1b      	ldr	r3, [r3, #32]
 80028f2:	431a      	orrs	r2, r3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028f8:	019b      	lsls	r3, r3, #6
 80028fa:	431a      	orrs	r2, r3
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002900:	085b      	lsrs	r3, r3, #1
 8002902:	3b01      	subs	r3, #1
 8002904:	041b      	lsls	r3, r3, #16
 8002906:	431a      	orrs	r2, r3
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800290c:	061b      	lsls	r3, r3, #24
 800290e:	491b      	ldr	r1, [pc, #108]	@ (800297c <HAL_RCC_OscConfig+0x470>)
 8002910:	4313      	orrs	r3, r2
 8002912:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002914:	4b1b      	ldr	r3, [pc, #108]	@ (8002984 <HAL_RCC_OscConfig+0x478>)
 8002916:	2201      	movs	r2, #1
 8002918:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800291a:	f7fe fc13 	bl	8001144 <HAL_GetTick>
 800291e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002920:	e008      	b.n	8002934 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002922:	f7fe fc0f 	bl	8001144 <HAL_GetTick>
 8002926:	4602      	mov	r2, r0
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	1ad3      	subs	r3, r2, r3
 800292c:	2b02      	cmp	r3, #2
 800292e:	d901      	bls.n	8002934 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002930:	2303      	movs	r3, #3
 8002932:	e05c      	b.n	80029ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002934:	4b11      	ldr	r3, [pc, #68]	@ (800297c <HAL_RCC_OscConfig+0x470>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800293c:	2b00      	cmp	r3, #0
 800293e:	d0f0      	beq.n	8002922 <HAL_RCC_OscConfig+0x416>
 8002940:	e054      	b.n	80029ec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002942:	4b10      	ldr	r3, [pc, #64]	@ (8002984 <HAL_RCC_OscConfig+0x478>)
 8002944:	2200      	movs	r2, #0
 8002946:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002948:	f7fe fbfc 	bl	8001144 <HAL_GetTick>
 800294c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800294e:	e008      	b.n	8002962 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002950:	f7fe fbf8 	bl	8001144 <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	2b02      	cmp	r3, #2
 800295c:	d901      	bls.n	8002962 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	e045      	b.n	80029ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002962:	4b06      	ldr	r3, [pc, #24]	@ (800297c <HAL_RCC_OscConfig+0x470>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800296a:	2b00      	cmp	r3, #0
 800296c:	d1f0      	bne.n	8002950 <HAL_RCC_OscConfig+0x444>
 800296e:	e03d      	b.n	80029ec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	699b      	ldr	r3, [r3, #24]
 8002974:	2b01      	cmp	r3, #1
 8002976:	d107      	bne.n	8002988 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e038      	b.n	80029ee <HAL_RCC_OscConfig+0x4e2>
 800297c:	40023800 	.word	0x40023800
 8002980:	40007000 	.word	0x40007000
 8002984:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002988:	4b1b      	ldr	r3, [pc, #108]	@ (80029f8 <HAL_RCC_OscConfig+0x4ec>)
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	699b      	ldr	r3, [r3, #24]
 8002992:	2b01      	cmp	r3, #1
 8002994:	d028      	beq.n	80029e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d121      	bne.n	80029e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d11a      	bne.n	80029e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029b2:	68fa      	ldr	r2, [r7, #12]
 80029b4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80029b8:	4013      	ands	r3, r2
 80029ba:	687a      	ldr	r2, [r7, #4]
 80029bc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80029be:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d111      	bne.n	80029e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029ce:	085b      	lsrs	r3, r3, #1
 80029d0:	3b01      	subs	r3, #1
 80029d2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d107      	bne.n	80029e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029e2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d001      	beq.n	80029ec <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	e000      	b.n	80029ee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80029ec:	2300      	movs	r3, #0
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3718      	adds	r7, #24
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	40023800 	.word	0x40023800

080029fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b084      	sub	sp, #16
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
 8002a04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d101      	bne.n	8002a10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e0cc      	b.n	8002baa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a10:	4b68      	ldr	r3, [pc, #416]	@ (8002bb4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 0307 	and.w	r3, r3, #7
 8002a18:	683a      	ldr	r2, [r7, #0]
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d90c      	bls.n	8002a38 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a1e:	4b65      	ldr	r3, [pc, #404]	@ (8002bb4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a20:	683a      	ldr	r2, [r7, #0]
 8002a22:	b2d2      	uxtb	r2, r2
 8002a24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a26:	4b63      	ldr	r3, [pc, #396]	@ (8002bb4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0307 	and.w	r3, r3, #7
 8002a2e:	683a      	ldr	r2, [r7, #0]
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d001      	beq.n	8002a38 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	e0b8      	b.n	8002baa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 0302 	and.w	r3, r3, #2
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d020      	beq.n	8002a86 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 0304 	and.w	r3, r3, #4
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d005      	beq.n	8002a5c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a50:	4b59      	ldr	r3, [pc, #356]	@ (8002bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	4a58      	ldr	r2, [pc, #352]	@ (8002bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a56:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002a5a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 0308 	and.w	r3, r3, #8
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d005      	beq.n	8002a74 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a68:	4b53      	ldr	r3, [pc, #332]	@ (8002bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	4a52      	ldr	r2, [pc, #328]	@ (8002bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a6e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002a72:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a74:	4b50      	ldr	r3, [pc, #320]	@ (8002bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	494d      	ldr	r1, [pc, #308]	@ (8002bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a82:	4313      	orrs	r3, r2
 8002a84:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 0301 	and.w	r3, r3, #1
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d044      	beq.n	8002b1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d107      	bne.n	8002aaa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a9a:	4b47      	ldr	r3, [pc, #284]	@ (8002bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d119      	bne.n	8002ada <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e07f      	b.n	8002baa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	2b02      	cmp	r3, #2
 8002ab0:	d003      	beq.n	8002aba <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ab6:	2b03      	cmp	r3, #3
 8002ab8:	d107      	bne.n	8002aca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002aba:	4b3f      	ldr	r3, [pc, #252]	@ (8002bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d109      	bne.n	8002ada <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e06f      	b.n	8002baa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002aca:	4b3b      	ldr	r3, [pc, #236]	@ (8002bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0302 	and.w	r3, r3, #2
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d101      	bne.n	8002ada <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e067      	b.n	8002baa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ada:	4b37      	ldr	r3, [pc, #220]	@ (8002bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	f023 0203 	bic.w	r2, r3, #3
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	4934      	ldr	r1, [pc, #208]	@ (8002bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002aec:	f7fe fb2a 	bl	8001144 <HAL_GetTick>
 8002af0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002af2:	e00a      	b.n	8002b0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002af4:	f7fe fb26 	bl	8001144 <HAL_GetTick>
 8002af8:	4602      	mov	r2, r0
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d901      	bls.n	8002b0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e04f      	b.n	8002baa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b0a:	4b2b      	ldr	r3, [pc, #172]	@ (8002bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	f003 020c 	and.w	r2, r3, #12
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d1eb      	bne.n	8002af4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b1c:	4b25      	ldr	r3, [pc, #148]	@ (8002bb4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 0307 	and.w	r3, r3, #7
 8002b24:	683a      	ldr	r2, [r7, #0]
 8002b26:	429a      	cmp	r2, r3
 8002b28:	d20c      	bcs.n	8002b44 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b2a:	4b22      	ldr	r3, [pc, #136]	@ (8002bb4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b2c:	683a      	ldr	r2, [r7, #0]
 8002b2e:	b2d2      	uxtb	r2, r2
 8002b30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b32:	4b20      	ldr	r3, [pc, #128]	@ (8002bb4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0307 	and.w	r3, r3, #7
 8002b3a:	683a      	ldr	r2, [r7, #0]
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d001      	beq.n	8002b44 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	e032      	b.n	8002baa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 0304 	and.w	r3, r3, #4
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d008      	beq.n	8002b62 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b50:	4b19      	ldr	r3, [pc, #100]	@ (8002bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	4916      	ldr	r1, [pc, #88]	@ (8002bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 0308 	and.w	r3, r3, #8
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d009      	beq.n	8002b82 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b6e:	4b12      	ldr	r3, [pc, #72]	@ (8002bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	691b      	ldr	r3, [r3, #16]
 8002b7a:	00db      	lsls	r3, r3, #3
 8002b7c:	490e      	ldr	r1, [pc, #56]	@ (8002bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b82:	f000 f821 	bl	8002bc8 <HAL_RCC_GetSysClockFreq>
 8002b86:	4602      	mov	r2, r0
 8002b88:	4b0b      	ldr	r3, [pc, #44]	@ (8002bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	091b      	lsrs	r3, r3, #4
 8002b8e:	f003 030f 	and.w	r3, r3, #15
 8002b92:	490a      	ldr	r1, [pc, #40]	@ (8002bbc <HAL_RCC_ClockConfig+0x1c0>)
 8002b94:	5ccb      	ldrb	r3, [r1, r3]
 8002b96:	fa22 f303 	lsr.w	r3, r2, r3
 8002b9a:	4a09      	ldr	r2, [pc, #36]	@ (8002bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002b9e:	4b09      	ldr	r3, [pc, #36]	@ (8002bc4 <HAL_RCC_ClockConfig+0x1c8>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f7fd ff2e 	bl	8000a04 <HAL_InitTick>

  return HAL_OK;
 8002ba8:	2300      	movs	r3, #0
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3710      	adds	r7, #16
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	40023c00 	.word	0x40023c00
 8002bb8:	40023800 	.word	0x40023800
 8002bbc:	080077b8 	.word	0x080077b8
 8002bc0:	20000000 	.word	0x20000000
 8002bc4:	20000004 	.word	0x20000004

08002bc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002bcc:	b094      	sub	sp, #80	@ 0x50
 8002bce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002be0:	4b79      	ldr	r3, [pc, #484]	@ (8002dc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	f003 030c 	and.w	r3, r3, #12
 8002be8:	2b08      	cmp	r3, #8
 8002bea:	d00d      	beq.n	8002c08 <HAL_RCC_GetSysClockFreq+0x40>
 8002bec:	2b08      	cmp	r3, #8
 8002bee:	f200 80e1 	bhi.w	8002db4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d002      	beq.n	8002bfc <HAL_RCC_GetSysClockFreq+0x34>
 8002bf6:	2b04      	cmp	r3, #4
 8002bf8:	d003      	beq.n	8002c02 <HAL_RCC_GetSysClockFreq+0x3a>
 8002bfa:	e0db      	b.n	8002db4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002bfc:	4b73      	ldr	r3, [pc, #460]	@ (8002dcc <HAL_RCC_GetSysClockFreq+0x204>)
 8002bfe:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002c00:	e0db      	b.n	8002dba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c02:	4b73      	ldr	r3, [pc, #460]	@ (8002dd0 <HAL_RCC_GetSysClockFreq+0x208>)
 8002c04:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002c06:	e0d8      	b.n	8002dba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c08:	4b6f      	ldr	r3, [pc, #444]	@ (8002dc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002c10:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c12:	4b6d      	ldr	r3, [pc, #436]	@ (8002dc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d063      	beq.n	8002ce6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c1e:	4b6a      	ldr	r3, [pc, #424]	@ (8002dc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	099b      	lsrs	r3, r3, #6
 8002c24:	2200      	movs	r2, #0
 8002c26:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002c28:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002c2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c30:	633b      	str	r3, [r7, #48]	@ 0x30
 8002c32:	2300      	movs	r3, #0
 8002c34:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c36:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002c3a:	4622      	mov	r2, r4
 8002c3c:	462b      	mov	r3, r5
 8002c3e:	f04f 0000 	mov.w	r0, #0
 8002c42:	f04f 0100 	mov.w	r1, #0
 8002c46:	0159      	lsls	r1, r3, #5
 8002c48:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c4c:	0150      	lsls	r0, r2, #5
 8002c4e:	4602      	mov	r2, r0
 8002c50:	460b      	mov	r3, r1
 8002c52:	4621      	mov	r1, r4
 8002c54:	1a51      	subs	r1, r2, r1
 8002c56:	6139      	str	r1, [r7, #16]
 8002c58:	4629      	mov	r1, r5
 8002c5a:	eb63 0301 	sbc.w	r3, r3, r1
 8002c5e:	617b      	str	r3, [r7, #20]
 8002c60:	f04f 0200 	mov.w	r2, #0
 8002c64:	f04f 0300 	mov.w	r3, #0
 8002c68:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002c6c:	4659      	mov	r1, fp
 8002c6e:	018b      	lsls	r3, r1, #6
 8002c70:	4651      	mov	r1, sl
 8002c72:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c76:	4651      	mov	r1, sl
 8002c78:	018a      	lsls	r2, r1, #6
 8002c7a:	4651      	mov	r1, sl
 8002c7c:	ebb2 0801 	subs.w	r8, r2, r1
 8002c80:	4659      	mov	r1, fp
 8002c82:	eb63 0901 	sbc.w	r9, r3, r1
 8002c86:	f04f 0200 	mov.w	r2, #0
 8002c8a:	f04f 0300 	mov.w	r3, #0
 8002c8e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c92:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c96:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c9a:	4690      	mov	r8, r2
 8002c9c:	4699      	mov	r9, r3
 8002c9e:	4623      	mov	r3, r4
 8002ca0:	eb18 0303 	adds.w	r3, r8, r3
 8002ca4:	60bb      	str	r3, [r7, #8]
 8002ca6:	462b      	mov	r3, r5
 8002ca8:	eb49 0303 	adc.w	r3, r9, r3
 8002cac:	60fb      	str	r3, [r7, #12]
 8002cae:	f04f 0200 	mov.w	r2, #0
 8002cb2:	f04f 0300 	mov.w	r3, #0
 8002cb6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002cba:	4629      	mov	r1, r5
 8002cbc:	024b      	lsls	r3, r1, #9
 8002cbe:	4621      	mov	r1, r4
 8002cc0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002cc4:	4621      	mov	r1, r4
 8002cc6:	024a      	lsls	r2, r1, #9
 8002cc8:	4610      	mov	r0, r2
 8002cca:	4619      	mov	r1, r3
 8002ccc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002cce:	2200      	movs	r2, #0
 8002cd0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002cd2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002cd4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002cd8:	f7fd fa82 	bl	80001e0 <__aeabi_uldivmod>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	460b      	mov	r3, r1
 8002ce0:	4613      	mov	r3, r2
 8002ce2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002ce4:	e058      	b.n	8002d98 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ce6:	4b38      	ldr	r3, [pc, #224]	@ (8002dc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	099b      	lsrs	r3, r3, #6
 8002cec:	2200      	movs	r2, #0
 8002cee:	4618      	mov	r0, r3
 8002cf0:	4611      	mov	r1, r2
 8002cf2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002cf6:	623b      	str	r3, [r7, #32]
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cfc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002d00:	4642      	mov	r2, r8
 8002d02:	464b      	mov	r3, r9
 8002d04:	f04f 0000 	mov.w	r0, #0
 8002d08:	f04f 0100 	mov.w	r1, #0
 8002d0c:	0159      	lsls	r1, r3, #5
 8002d0e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d12:	0150      	lsls	r0, r2, #5
 8002d14:	4602      	mov	r2, r0
 8002d16:	460b      	mov	r3, r1
 8002d18:	4641      	mov	r1, r8
 8002d1a:	ebb2 0a01 	subs.w	sl, r2, r1
 8002d1e:	4649      	mov	r1, r9
 8002d20:	eb63 0b01 	sbc.w	fp, r3, r1
 8002d24:	f04f 0200 	mov.w	r2, #0
 8002d28:	f04f 0300 	mov.w	r3, #0
 8002d2c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002d30:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002d34:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002d38:	ebb2 040a 	subs.w	r4, r2, sl
 8002d3c:	eb63 050b 	sbc.w	r5, r3, fp
 8002d40:	f04f 0200 	mov.w	r2, #0
 8002d44:	f04f 0300 	mov.w	r3, #0
 8002d48:	00eb      	lsls	r3, r5, #3
 8002d4a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d4e:	00e2      	lsls	r2, r4, #3
 8002d50:	4614      	mov	r4, r2
 8002d52:	461d      	mov	r5, r3
 8002d54:	4643      	mov	r3, r8
 8002d56:	18e3      	adds	r3, r4, r3
 8002d58:	603b      	str	r3, [r7, #0]
 8002d5a:	464b      	mov	r3, r9
 8002d5c:	eb45 0303 	adc.w	r3, r5, r3
 8002d60:	607b      	str	r3, [r7, #4]
 8002d62:	f04f 0200 	mov.w	r2, #0
 8002d66:	f04f 0300 	mov.w	r3, #0
 8002d6a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d6e:	4629      	mov	r1, r5
 8002d70:	028b      	lsls	r3, r1, #10
 8002d72:	4621      	mov	r1, r4
 8002d74:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d78:	4621      	mov	r1, r4
 8002d7a:	028a      	lsls	r2, r1, #10
 8002d7c:	4610      	mov	r0, r2
 8002d7e:	4619      	mov	r1, r3
 8002d80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d82:	2200      	movs	r2, #0
 8002d84:	61bb      	str	r3, [r7, #24]
 8002d86:	61fa      	str	r2, [r7, #28]
 8002d88:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d8c:	f7fd fa28 	bl	80001e0 <__aeabi_uldivmod>
 8002d90:	4602      	mov	r2, r0
 8002d92:	460b      	mov	r3, r1
 8002d94:	4613      	mov	r3, r2
 8002d96:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002d98:	4b0b      	ldr	r3, [pc, #44]	@ (8002dc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	0c1b      	lsrs	r3, r3, #16
 8002d9e:	f003 0303 	and.w	r3, r3, #3
 8002da2:	3301      	adds	r3, #1
 8002da4:	005b      	lsls	r3, r3, #1
 8002da6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002da8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002daa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002dac:	fbb2 f3f3 	udiv	r3, r2, r3
 8002db0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002db2:	e002      	b.n	8002dba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002db4:	4b05      	ldr	r3, [pc, #20]	@ (8002dcc <HAL_RCC_GetSysClockFreq+0x204>)
 8002db6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002db8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002dba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3750      	adds	r7, #80	@ 0x50
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002dc6:	bf00      	nop
 8002dc8:	40023800 	.word	0x40023800
 8002dcc:	00f42400 	.word	0x00f42400
 8002dd0:	007a1200 	.word	0x007a1200

08002dd4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002dd8:	4b03      	ldr	r3, [pc, #12]	@ (8002de8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002dda:	681b      	ldr	r3, [r3, #0]
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr
 8002de6:	bf00      	nop
 8002de8:	20000000 	.word	0x20000000

08002dec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002df0:	f7ff fff0 	bl	8002dd4 <HAL_RCC_GetHCLKFreq>
 8002df4:	4602      	mov	r2, r0
 8002df6:	4b05      	ldr	r3, [pc, #20]	@ (8002e0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	0a9b      	lsrs	r3, r3, #10
 8002dfc:	f003 0307 	and.w	r3, r3, #7
 8002e00:	4903      	ldr	r1, [pc, #12]	@ (8002e10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e02:	5ccb      	ldrb	r3, [r1, r3]
 8002e04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	40023800 	.word	0x40023800
 8002e10:	080077c8 	.word	0x080077c8

08002e14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002e18:	f7ff ffdc 	bl	8002dd4 <HAL_RCC_GetHCLKFreq>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	4b05      	ldr	r3, [pc, #20]	@ (8002e34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	0b5b      	lsrs	r3, r3, #13
 8002e24:	f003 0307 	and.w	r3, r3, #7
 8002e28:	4903      	ldr	r1, [pc, #12]	@ (8002e38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e2a:	5ccb      	ldrb	r3, [r1, r3]
 8002e2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	bd80      	pop	{r7, pc}
 8002e34:	40023800 	.word	0x40023800
 8002e38:	080077c8 	.word	0x080077c8

08002e3c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b083      	sub	sp, #12
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
 8002e44:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	220f      	movs	r2, #15
 8002e4a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002e4c:	4b12      	ldr	r3, [pc, #72]	@ (8002e98 <HAL_RCC_GetClockConfig+0x5c>)
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	f003 0203 	and.w	r2, r3, #3
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002e58:	4b0f      	ldr	r3, [pc, #60]	@ (8002e98 <HAL_RCC_GetClockConfig+0x5c>)
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002e64:	4b0c      	ldr	r3, [pc, #48]	@ (8002e98 <HAL_RCC_GetClockConfig+0x5c>)
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002e70:	4b09      	ldr	r3, [pc, #36]	@ (8002e98 <HAL_RCC_GetClockConfig+0x5c>)
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	08db      	lsrs	r3, r3, #3
 8002e76:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002e7e:	4b07      	ldr	r3, [pc, #28]	@ (8002e9c <HAL_RCC_GetClockConfig+0x60>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0207 	and.w	r2, r3, #7
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	601a      	str	r2, [r3, #0]
}
 8002e8a:	bf00      	nop
 8002e8c:	370c      	adds	r7, #12
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e94:	4770      	bx	lr
 8002e96:	bf00      	nop
 8002e98:	40023800 	.word	0x40023800
 8002e9c:	40023c00 	.word	0x40023c00

08002ea0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b082      	sub	sp, #8
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d101      	bne.n	8002eb2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e041      	b.n	8002f36 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d106      	bne.n	8002ecc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f000 f839 	bl	8002f3e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2202      	movs	r2, #2
 8002ed0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	3304      	adds	r3, #4
 8002edc:	4619      	mov	r1, r3
 8002ede:	4610      	mov	r0, r2
 8002ee0:	f000 fb74 	bl	80035cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2201      	movs	r2, #1
 8002ef0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2201      	movs	r2, #1
 8002f00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2201      	movs	r2, #1
 8002f08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2201      	movs	r2, #1
 8002f18:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2201      	movs	r2, #1
 8002f28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002f34:	2300      	movs	r3, #0
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3708      	adds	r7, #8
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}

08002f3e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002f3e:	b480      	push	{r7}
 8002f40:	b083      	sub	sp, #12
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002f46:	bf00      	nop
 8002f48:	370c      	adds	r7, #12
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr
	...

08002f54 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b085      	sub	sp, #20
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d001      	beq.n	8002f6c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e044      	b.n	8002ff6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2202      	movs	r2, #2
 8002f70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	68da      	ldr	r2, [r3, #12]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f042 0201 	orr.w	r2, r2, #1
 8002f82:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a1e      	ldr	r2, [pc, #120]	@ (8003004 <HAL_TIM_Base_Start_IT+0xb0>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d018      	beq.n	8002fc0 <HAL_TIM_Base_Start_IT+0x6c>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f96:	d013      	beq.n	8002fc0 <HAL_TIM_Base_Start_IT+0x6c>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a1a      	ldr	r2, [pc, #104]	@ (8003008 <HAL_TIM_Base_Start_IT+0xb4>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d00e      	beq.n	8002fc0 <HAL_TIM_Base_Start_IT+0x6c>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a19      	ldr	r2, [pc, #100]	@ (800300c <HAL_TIM_Base_Start_IT+0xb8>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d009      	beq.n	8002fc0 <HAL_TIM_Base_Start_IT+0x6c>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a17      	ldr	r2, [pc, #92]	@ (8003010 <HAL_TIM_Base_Start_IT+0xbc>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d004      	beq.n	8002fc0 <HAL_TIM_Base_Start_IT+0x6c>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a16      	ldr	r2, [pc, #88]	@ (8003014 <HAL_TIM_Base_Start_IT+0xc0>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d111      	bne.n	8002fe4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	f003 0307 	and.w	r3, r3, #7
 8002fca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2b06      	cmp	r3, #6
 8002fd0:	d010      	beq.n	8002ff4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f042 0201 	orr.w	r2, r2, #1
 8002fe0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fe2:	e007      	b.n	8002ff4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f042 0201 	orr.w	r2, r2, #1
 8002ff2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ff4:	2300      	movs	r3, #0
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3714      	adds	r7, #20
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003000:	4770      	bx	lr
 8003002:	bf00      	nop
 8003004:	40010000 	.word	0x40010000
 8003008:	40000400 	.word	0x40000400
 800300c:	40000800 	.word	0x40000800
 8003010:	40000c00 	.word	0x40000c00
 8003014:	40014000 	.word	0x40014000

08003018 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b082      	sub	sp, #8
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d101      	bne.n	800302a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e041      	b.n	80030ae <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003030:	b2db      	uxtb	r3, r3
 8003032:	2b00      	cmp	r3, #0
 8003034:	d106      	bne.n	8003044 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2200      	movs	r2, #0
 800303a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f7fd fe9e 	bl	8000d80 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2202      	movs	r2, #2
 8003048:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	3304      	adds	r3, #4
 8003054:	4619      	mov	r1, r3
 8003056:	4610      	mov	r0, r2
 8003058:	f000 fab8 	bl	80035cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2201      	movs	r2, #1
 8003060:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2201      	movs	r2, #1
 8003068:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2201      	movs	r2, #1
 8003070:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2201      	movs	r2, #1
 8003080:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2201      	movs	r2, #1
 8003088:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2201      	movs	r2, #1
 8003090:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2201      	movs	r2, #1
 8003098:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2201      	movs	r2, #1
 80030a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2201      	movs	r2, #1
 80030a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80030ac:	2300      	movs	r3, #0
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3708      	adds	r7, #8
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
	...

080030b8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b084      	sub	sp, #16
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d109      	bne.n	80030dc <HAL_TIM_PWM_Start+0x24>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	bf14      	ite	ne
 80030d4:	2301      	movne	r3, #1
 80030d6:	2300      	moveq	r3, #0
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	e022      	b.n	8003122 <HAL_TIM_PWM_Start+0x6a>
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	2b04      	cmp	r3, #4
 80030e0:	d109      	bne.n	80030f6 <HAL_TIM_PWM_Start+0x3e>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	bf14      	ite	ne
 80030ee:	2301      	movne	r3, #1
 80030f0:	2300      	moveq	r3, #0
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	e015      	b.n	8003122 <HAL_TIM_PWM_Start+0x6a>
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	2b08      	cmp	r3, #8
 80030fa:	d109      	bne.n	8003110 <HAL_TIM_PWM_Start+0x58>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003102:	b2db      	uxtb	r3, r3
 8003104:	2b01      	cmp	r3, #1
 8003106:	bf14      	ite	ne
 8003108:	2301      	movne	r3, #1
 800310a:	2300      	moveq	r3, #0
 800310c:	b2db      	uxtb	r3, r3
 800310e:	e008      	b.n	8003122 <HAL_TIM_PWM_Start+0x6a>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003116:	b2db      	uxtb	r3, r3
 8003118:	2b01      	cmp	r3, #1
 800311a:	bf14      	ite	ne
 800311c:	2301      	movne	r3, #1
 800311e:	2300      	moveq	r3, #0
 8003120:	b2db      	uxtb	r3, r3
 8003122:	2b00      	cmp	r3, #0
 8003124:	d001      	beq.n	800312a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e068      	b.n	80031fc <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d104      	bne.n	800313a <HAL_TIM_PWM_Start+0x82>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2202      	movs	r2, #2
 8003134:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003138:	e013      	b.n	8003162 <HAL_TIM_PWM_Start+0xaa>
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	2b04      	cmp	r3, #4
 800313e:	d104      	bne.n	800314a <HAL_TIM_PWM_Start+0x92>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2202      	movs	r2, #2
 8003144:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003148:	e00b      	b.n	8003162 <HAL_TIM_PWM_Start+0xaa>
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	2b08      	cmp	r3, #8
 800314e:	d104      	bne.n	800315a <HAL_TIM_PWM_Start+0xa2>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2202      	movs	r2, #2
 8003154:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003158:	e003      	b.n	8003162 <HAL_TIM_PWM_Start+0xaa>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2202      	movs	r2, #2
 800315e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	2201      	movs	r2, #1
 8003168:	6839      	ldr	r1, [r7, #0]
 800316a:	4618      	mov	r0, r3
 800316c:	f000 fc46 	bl	80039fc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a23      	ldr	r2, [pc, #140]	@ (8003204 <HAL_TIM_PWM_Start+0x14c>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d107      	bne.n	800318a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003188:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a1d      	ldr	r2, [pc, #116]	@ (8003204 <HAL_TIM_PWM_Start+0x14c>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d018      	beq.n	80031c6 <HAL_TIM_PWM_Start+0x10e>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800319c:	d013      	beq.n	80031c6 <HAL_TIM_PWM_Start+0x10e>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a19      	ldr	r2, [pc, #100]	@ (8003208 <HAL_TIM_PWM_Start+0x150>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d00e      	beq.n	80031c6 <HAL_TIM_PWM_Start+0x10e>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a17      	ldr	r2, [pc, #92]	@ (800320c <HAL_TIM_PWM_Start+0x154>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d009      	beq.n	80031c6 <HAL_TIM_PWM_Start+0x10e>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a16      	ldr	r2, [pc, #88]	@ (8003210 <HAL_TIM_PWM_Start+0x158>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d004      	beq.n	80031c6 <HAL_TIM_PWM_Start+0x10e>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a14      	ldr	r2, [pc, #80]	@ (8003214 <HAL_TIM_PWM_Start+0x15c>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d111      	bne.n	80031ea <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	f003 0307 	and.w	r3, r3, #7
 80031d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2b06      	cmp	r3, #6
 80031d6:	d010      	beq.n	80031fa <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f042 0201 	orr.w	r2, r2, #1
 80031e6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031e8:	e007      	b.n	80031fa <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f042 0201 	orr.w	r2, r2, #1
 80031f8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80031fa:	2300      	movs	r3, #0
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	3710      	adds	r7, #16
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}
 8003204:	40010000 	.word	0x40010000
 8003208:	40000400 	.word	0x40000400
 800320c:	40000800 	.word	0x40000800
 8003210:	40000c00 	.word	0x40000c00
 8003214:	40014000 	.word	0x40014000

08003218 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b084      	sub	sp, #16
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	68db      	ldr	r3, [r3, #12]
 8003226:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	691b      	ldr	r3, [r3, #16]
 800322e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	f003 0302 	and.w	r3, r3, #2
 8003236:	2b00      	cmp	r3, #0
 8003238:	d020      	beq.n	800327c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	f003 0302 	and.w	r3, r3, #2
 8003240:	2b00      	cmp	r3, #0
 8003242:	d01b      	beq.n	800327c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f06f 0202 	mvn.w	r2, #2
 800324c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2201      	movs	r2, #1
 8003252:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	699b      	ldr	r3, [r3, #24]
 800325a:	f003 0303 	and.w	r3, r3, #3
 800325e:	2b00      	cmp	r3, #0
 8003260:	d003      	beq.n	800326a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f000 f994 	bl	8003590 <HAL_TIM_IC_CaptureCallback>
 8003268:	e005      	b.n	8003276 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f000 f986 	bl	800357c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	f000 f997 	bl	80035a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2200      	movs	r2, #0
 800327a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	f003 0304 	and.w	r3, r3, #4
 8003282:	2b00      	cmp	r3, #0
 8003284:	d020      	beq.n	80032c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	f003 0304 	and.w	r3, r3, #4
 800328c:	2b00      	cmp	r3, #0
 800328e:	d01b      	beq.n	80032c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f06f 0204 	mvn.w	r2, #4
 8003298:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2202      	movs	r2, #2
 800329e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	699b      	ldr	r3, [r3, #24]
 80032a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d003      	beq.n	80032b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f000 f96e 	bl	8003590 <HAL_TIM_IC_CaptureCallback>
 80032b4:	e005      	b.n	80032c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f000 f960 	bl	800357c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	f000 f971 	bl	80035a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2200      	movs	r2, #0
 80032c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	f003 0308 	and.w	r3, r3, #8
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d020      	beq.n	8003314 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	f003 0308 	and.w	r3, r3, #8
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d01b      	beq.n	8003314 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f06f 0208 	mvn.w	r2, #8
 80032e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2204      	movs	r2, #4
 80032ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	69db      	ldr	r3, [r3, #28]
 80032f2:	f003 0303 	and.w	r3, r3, #3
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d003      	beq.n	8003302 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	f000 f948 	bl	8003590 <HAL_TIM_IC_CaptureCallback>
 8003300:	e005      	b.n	800330e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f000 f93a 	bl	800357c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	f000 f94b 	bl	80035a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	f003 0310 	and.w	r3, r3, #16
 800331a:	2b00      	cmp	r3, #0
 800331c:	d020      	beq.n	8003360 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	f003 0310 	and.w	r3, r3, #16
 8003324:	2b00      	cmp	r3, #0
 8003326:	d01b      	beq.n	8003360 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f06f 0210 	mvn.w	r2, #16
 8003330:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2208      	movs	r2, #8
 8003336:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	69db      	ldr	r3, [r3, #28]
 800333e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003342:	2b00      	cmp	r3, #0
 8003344:	d003      	beq.n	800334e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f000 f922 	bl	8003590 <HAL_TIM_IC_CaptureCallback>
 800334c:	e005      	b.n	800335a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f000 f914 	bl	800357c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	f000 f925 	bl	80035a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2200      	movs	r2, #0
 800335e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	f003 0301 	and.w	r3, r3, #1
 8003366:	2b00      	cmp	r3, #0
 8003368:	d00c      	beq.n	8003384 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	f003 0301 	and.w	r3, r3, #1
 8003370:	2b00      	cmp	r3, #0
 8003372:	d007      	beq.n	8003384 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f06f 0201 	mvn.w	r2, #1
 800337c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f7fd fafc 	bl	800097c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800338a:	2b00      	cmp	r3, #0
 800338c:	d00c      	beq.n	80033a8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003394:	2b00      	cmp	r3, #0
 8003396:	d007      	beq.n	80033a8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80033a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f000 fc1a 	bl	8003bdc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d00c      	beq.n	80033cc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d007      	beq.n	80033cc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80033c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f000 f8f6 	bl	80035b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	f003 0320 	and.w	r3, r3, #32
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d00c      	beq.n	80033f0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	f003 0320 	and.w	r3, r3, #32
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d007      	beq.n	80033f0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f06f 0220 	mvn.w	r2, #32
 80033e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f000 fbec 	bl	8003bc8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80033f0:	bf00      	nop
 80033f2:	3710      	adds	r7, #16
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}

080033f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b086      	sub	sp, #24
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	60f8      	str	r0, [r7, #12]
 8003400:	60b9      	str	r1, [r7, #8]
 8003402:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003404:	2300      	movs	r3, #0
 8003406:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800340e:	2b01      	cmp	r3, #1
 8003410:	d101      	bne.n	8003416 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003412:	2302      	movs	r3, #2
 8003414:	e0ae      	b.n	8003574 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2201      	movs	r2, #1
 800341a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2b0c      	cmp	r3, #12
 8003422:	f200 809f 	bhi.w	8003564 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003426:	a201      	add	r2, pc, #4	@ (adr r2, 800342c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800342c:	08003461 	.word	0x08003461
 8003430:	08003565 	.word	0x08003565
 8003434:	08003565 	.word	0x08003565
 8003438:	08003565 	.word	0x08003565
 800343c:	080034a1 	.word	0x080034a1
 8003440:	08003565 	.word	0x08003565
 8003444:	08003565 	.word	0x08003565
 8003448:	08003565 	.word	0x08003565
 800344c:	080034e3 	.word	0x080034e3
 8003450:	08003565 	.word	0x08003565
 8003454:	08003565 	.word	0x08003565
 8003458:	08003565 	.word	0x08003565
 800345c:	08003523 	.word	0x08003523
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	68b9      	ldr	r1, [r7, #8]
 8003466:	4618      	mov	r0, r3
 8003468:	f000 f93c 	bl	80036e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	699a      	ldr	r2, [r3, #24]
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f042 0208 	orr.w	r2, r2, #8
 800347a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	699a      	ldr	r2, [r3, #24]
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f022 0204 	bic.w	r2, r2, #4
 800348a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	6999      	ldr	r1, [r3, #24]
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	691a      	ldr	r2, [r3, #16]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	430a      	orrs	r2, r1
 800349c:	619a      	str	r2, [r3, #24]
      break;
 800349e:	e064      	b.n	800356a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	68b9      	ldr	r1, [r7, #8]
 80034a6:	4618      	mov	r0, r3
 80034a8:	f000 f982 	bl	80037b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	699a      	ldr	r2, [r3, #24]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80034ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	699a      	ldr	r2, [r3, #24]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80034ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	6999      	ldr	r1, [r3, #24]
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	691b      	ldr	r3, [r3, #16]
 80034d6:	021a      	lsls	r2, r3, #8
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	430a      	orrs	r2, r1
 80034de:	619a      	str	r2, [r3, #24]
      break;
 80034e0:	e043      	b.n	800356a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	68b9      	ldr	r1, [r7, #8]
 80034e8:	4618      	mov	r0, r3
 80034ea:	f000 f9cd 	bl	8003888 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	69da      	ldr	r2, [r3, #28]
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f042 0208 	orr.w	r2, r2, #8
 80034fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	69da      	ldr	r2, [r3, #28]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f022 0204 	bic.w	r2, r2, #4
 800350c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	69d9      	ldr	r1, [r3, #28]
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	691a      	ldr	r2, [r3, #16]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	430a      	orrs	r2, r1
 800351e:	61da      	str	r2, [r3, #28]
      break;
 8003520:	e023      	b.n	800356a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	68b9      	ldr	r1, [r7, #8]
 8003528:	4618      	mov	r0, r3
 800352a:	f000 fa17 	bl	800395c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	69da      	ldr	r2, [r3, #28]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800353c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	69da      	ldr	r2, [r3, #28]
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800354c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	69d9      	ldr	r1, [r3, #28]
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	691b      	ldr	r3, [r3, #16]
 8003558:	021a      	lsls	r2, r3, #8
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	430a      	orrs	r2, r1
 8003560:	61da      	str	r2, [r3, #28]
      break;
 8003562:	e002      	b.n	800356a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	75fb      	strb	r3, [r7, #23]
      break;
 8003568:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2200      	movs	r2, #0
 800356e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003572:	7dfb      	ldrb	r3, [r7, #23]
}
 8003574:	4618      	mov	r0, r3
 8003576:	3718      	adds	r7, #24
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}

0800357c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800357c:	b480      	push	{r7}
 800357e:	b083      	sub	sp, #12
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003584:	bf00      	nop
 8003586:	370c      	adds	r7, #12
 8003588:	46bd      	mov	sp, r7
 800358a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358e:	4770      	bx	lr

08003590 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003590:	b480      	push	{r7}
 8003592:	b083      	sub	sp, #12
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003598:	bf00      	nop
 800359a:	370c      	adds	r7, #12
 800359c:	46bd      	mov	sp, r7
 800359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a2:	4770      	bx	lr

080035a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b083      	sub	sp, #12
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80035ac:	bf00      	nop
 80035ae:	370c      	adds	r7, #12
 80035b0:	46bd      	mov	sp, r7
 80035b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b6:	4770      	bx	lr

080035b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b083      	sub	sp, #12
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80035c0:	bf00      	nop
 80035c2:	370c      	adds	r7, #12
 80035c4:	46bd      	mov	sp, r7
 80035c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ca:	4770      	bx	lr

080035cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b085      	sub	sp, #20
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
 80035d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	4a3a      	ldr	r2, [pc, #232]	@ (80036c8 <TIM_Base_SetConfig+0xfc>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d00f      	beq.n	8003604 <TIM_Base_SetConfig+0x38>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035ea:	d00b      	beq.n	8003604 <TIM_Base_SetConfig+0x38>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	4a37      	ldr	r2, [pc, #220]	@ (80036cc <TIM_Base_SetConfig+0x100>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d007      	beq.n	8003604 <TIM_Base_SetConfig+0x38>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	4a36      	ldr	r2, [pc, #216]	@ (80036d0 <TIM_Base_SetConfig+0x104>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d003      	beq.n	8003604 <TIM_Base_SetConfig+0x38>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	4a35      	ldr	r2, [pc, #212]	@ (80036d4 <TIM_Base_SetConfig+0x108>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d108      	bne.n	8003616 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800360a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	68fa      	ldr	r2, [r7, #12]
 8003612:	4313      	orrs	r3, r2
 8003614:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	4a2b      	ldr	r2, [pc, #172]	@ (80036c8 <TIM_Base_SetConfig+0xfc>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d01b      	beq.n	8003656 <TIM_Base_SetConfig+0x8a>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003624:	d017      	beq.n	8003656 <TIM_Base_SetConfig+0x8a>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	4a28      	ldr	r2, [pc, #160]	@ (80036cc <TIM_Base_SetConfig+0x100>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d013      	beq.n	8003656 <TIM_Base_SetConfig+0x8a>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4a27      	ldr	r2, [pc, #156]	@ (80036d0 <TIM_Base_SetConfig+0x104>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d00f      	beq.n	8003656 <TIM_Base_SetConfig+0x8a>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	4a26      	ldr	r2, [pc, #152]	@ (80036d4 <TIM_Base_SetConfig+0x108>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d00b      	beq.n	8003656 <TIM_Base_SetConfig+0x8a>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	4a25      	ldr	r2, [pc, #148]	@ (80036d8 <TIM_Base_SetConfig+0x10c>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d007      	beq.n	8003656 <TIM_Base_SetConfig+0x8a>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	4a24      	ldr	r2, [pc, #144]	@ (80036dc <TIM_Base_SetConfig+0x110>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d003      	beq.n	8003656 <TIM_Base_SetConfig+0x8a>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	4a23      	ldr	r2, [pc, #140]	@ (80036e0 <TIM_Base_SetConfig+0x114>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d108      	bne.n	8003668 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800365c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	68db      	ldr	r3, [r3, #12]
 8003662:	68fa      	ldr	r2, [r7, #12]
 8003664:	4313      	orrs	r3, r2
 8003666:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	695b      	ldr	r3, [r3, #20]
 8003672:	4313      	orrs	r3, r2
 8003674:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	68fa      	ldr	r2, [r7, #12]
 800367a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	689a      	ldr	r2, [r3, #8]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	4a0e      	ldr	r2, [pc, #56]	@ (80036c8 <TIM_Base_SetConfig+0xfc>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d103      	bne.n	800369c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	691a      	ldr	r2, [r3, #16]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2201      	movs	r2, #1
 80036a0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	691b      	ldr	r3, [r3, #16]
 80036a6:	f003 0301 	and.w	r3, r3, #1
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d105      	bne.n	80036ba <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	691b      	ldr	r3, [r3, #16]
 80036b2:	f023 0201 	bic.w	r2, r3, #1
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	611a      	str	r2, [r3, #16]
  }
}
 80036ba:	bf00      	nop
 80036bc:	3714      	adds	r7, #20
 80036be:	46bd      	mov	sp, r7
 80036c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c4:	4770      	bx	lr
 80036c6:	bf00      	nop
 80036c8:	40010000 	.word	0x40010000
 80036cc:	40000400 	.word	0x40000400
 80036d0:	40000800 	.word	0x40000800
 80036d4:	40000c00 	.word	0x40000c00
 80036d8:	40014000 	.word	0x40014000
 80036dc:	40014400 	.word	0x40014400
 80036e0:	40014800 	.word	0x40014800

080036e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b087      	sub	sp, #28
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
 80036ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6a1b      	ldr	r3, [r3, #32]
 80036f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6a1b      	ldr	r3, [r3, #32]
 80036f8:	f023 0201 	bic.w	r2, r3, #1
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	699b      	ldr	r3, [r3, #24]
 800370a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003712:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	f023 0303 	bic.w	r3, r3, #3
 800371a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	68fa      	ldr	r2, [r7, #12]
 8003722:	4313      	orrs	r3, r2
 8003724:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	f023 0302 	bic.w	r3, r3, #2
 800372c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	697a      	ldr	r2, [r7, #20]
 8003734:	4313      	orrs	r3, r2
 8003736:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	4a1c      	ldr	r2, [pc, #112]	@ (80037ac <TIM_OC1_SetConfig+0xc8>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d10c      	bne.n	800375a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	f023 0308 	bic.w	r3, r3, #8
 8003746:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	697a      	ldr	r2, [r7, #20]
 800374e:	4313      	orrs	r3, r2
 8003750:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	f023 0304 	bic.w	r3, r3, #4
 8003758:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	4a13      	ldr	r2, [pc, #76]	@ (80037ac <TIM_OC1_SetConfig+0xc8>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d111      	bne.n	8003786 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003768:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003770:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	695b      	ldr	r3, [r3, #20]
 8003776:	693a      	ldr	r2, [r7, #16]
 8003778:	4313      	orrs	r3, r2
 800377a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	699b      	ldr	r3, [r3, #24]
 8003780:	693a      	ldr	r2, [r7, #16]
 8003782:	4313      	orrs	r3, r2
 8003784:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	693a      	ldr	r2, [r7, #16]
 800378a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	68fa      	ldr	r2, [r7, #12]
 8003790:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	685a      	ldr	r2, [r3, #4]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	697a      	ldr	r2, [r7, #20]
 800379e:	621a      	str	r2, [r3, #32]
}
 80037a0:	bf00      	nop
 80037a2:	371c      	adds	r7, #28
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr
 80037ac:	40010000 	.word	0x40010000

080037b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b087      	sub	sp, #28
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
 80037b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6a1b      	ldr	r3, [r3, #32]
 80037be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6a1b      	ldr	r3, [r3, #32]
 80037c4:	f023 0210 	bic.w	r2, r3, #16
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	699b      	ldr	r3, [r3, #24]
 80037d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80037de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	021b      	lsls	r3, r3, #8
 80037ee:	68fa      	ldr	r2, [r7, #12]
 80037f0:	4313      	orrs	r3, r2
 80037f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	f023 0320 	bic.w	r3, r3, #32
 80037fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	011b      	lsls	r3, r3, #4
 8003802:	697a      	ldr	r2, [r7, #20]
 8003804:	4313      	orrs	r3, r2
 8003806:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	4a1e      	ldr	r2, [pc, #120]	@ (8003884 <TIM_OC2_SetConfig+0xd4>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d10d      	bne.n	800382c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003816:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	68db      	ldr	r3, [r3, #12]
 800381c:	011b      	lsls	r3, r3, #4
 800381e:	697a      	ldr	r2, [r7, #20]
 8003820:	4313      	orrs	r3, r2
 8003822:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800382a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	4a15      	ldr	r2, [pc, #84]	@ (8003884 <TIM_OC2_SetConfig+0xd4>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d113      	bne.n	800385c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800383a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003842:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	695b      	ldr	r3, [r3, #20]
 8003848:	009b      	lsls	r3, r3, #2
 800384a:	693a      	ldr	r2, [r7, #16]
 800384c:	4313      	orrs	r3, r2
 800384e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	699b      	ldr	r3, [r3, #24]
 8003854:	009b      	lsls	r3, r3, #2
 8003856:	693a      	ldr	r2, [r7, #16]
 8003858:	4313      	orrs	r3, r2
 800385a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	693a      	ldr	r2, [r7, #16]
 8003860:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	68fa      	ldr	r2, [r7, #12]
 8003866:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	685a      	ldr	r2, [r3, #4]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	697a      	ldr	r2, [r7, #20]
 8003874:	621a      	str	r2, [r3, #32]
}
 8003876:	bf00      	nop
 8003878:	371c      	adds	r7, #28
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr
 8003882:	bf00      	nop
 8003884:	40010000 	.word	0x40010000

08003888 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003888:	b480      	push	{r7}
 800388a:	b087      	sub	sp, #28
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6a1b      	ldr	r3, [r3, #32]
 8003896:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6a1b      	ldr	r3, [r3, #32]
 800389c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	69db      	ldr	r3, [r3, #28]
 80038ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	f023 0303 	bic.w	r3, r3, #3
 80038be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	68fa      	ldr	r2, [r7, #12]
 80038c6:	4313      	orrs	r3, r2
 80038c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80038d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	021b      	lsls	r3, r3, #8
 80038d8:	697a      	ldr	r2, [r7, #20]
 80038da:	4313      	orrs	r3, r2
 80038dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4a1d      	ldr	r2, [pc, #116]	@ (8003958 <TIM_OC3_SetConfig+0xd0>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d10d      	bne.n	8003902 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80038ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	68db      	ldr	r3, [r3, #12]
 80038f2:	021b      	lsls	r3, r3, #8
 80038f4:	697a      	ldr	r2, [r7, #20]
 80038f6:	4313      	orrs	r3, r2
 80038f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003900:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a14      	ldr	r2, [pc, #80]	@ (8003958 <TIM_OC3_SetConfig+0xd0>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d113      	bne.n	8003932 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003910:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003918:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	695b      	ldr	r3, [r3, #20]
 800391e:	011b      	lsls	r3, r3, #4
 8003920:	693a      	ldr	r2, [r7, #16]
 8003922:	4313      	orrs	r3, r2
 8003924:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	699b      	ldr	r3, [r3, #24]
 800392a:	011b      	lsls	r3, r3, #4
 800392c:	693a      	ldr	r2, [r7, #16]
 800392e:	4313      	orrs	r3, r2
 8003930:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	693a      	ldr	r2, [r7, #16]
 8003936:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	68fa      	ldr	r2, [r7, #12]
 800393c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	685a      	ldr	r2, [r3, #4]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	697a      	ldr	r2, [r7, #20]
 800394a:	621a      	str	r2, [r3, #32]
}
 800394c:	bf00      	nop
 800394e:	371c      	adds	r7, #28
 8003950:	46bd      	mov	sp, r7
 8003952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003956:	4770      	bx	lr
 8003958:	40010000 	.word	0x40010000

0800395c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800395c:	b480      	push	{r7}
 800395e:	b087      	sub	sp, #28
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
 8003964:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6a1b      	ldr	r3, [r3, #32]
 800396a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6a1b      	ldr	r3, [r3, #32]
 8003970:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	69db      	ldr	r3, [r3, #28]
 8003982:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800398a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003992:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	021b      	lsls	r3, r3, #8
 800399a:	68fa      	ldr	r2, [r7, #12]
 800399c:	4313      	orrs	r3, r2
 800399e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80039a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	031b      	lsls	r3, r3, #12
 80039ae:	693a      	ldr	r2, [r7, #16]
 80039b0:	4313      	orrs	r3, r2
 80039b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	4a10      	ldr	r2, [pc, #64]	@ (80039f8 <TIM_OC4_SetConfig+0x9c>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d109      	bne.n	80039d0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80039c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	695b      	ldr	r3, [r3, #20]
 80039c8:	019b      	lsls	r3, r3, #6
 80039ca:	697a      	ldr	r2, [r7, #20]
 80039cc:	4313      	orrs	r3, r2
 80039ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	697a      	ldr	r2, [r7, #20]
 80039d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	68fa      	ldr	r2, [r7, #12]
 80039da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	685a      	ldr	r2, [r3, #4]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	693a      	ldr	r2, [r7, #16]
 80039e8:	621a      	str	r2, [r3, #32]
}
 80039ea:	bf00      	nop
 80039ec:	371c      	adds	r7, #28
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr
 80039f6:	bf00      	nop
 80039f8:	40010000 	.word	0x40010000

080039fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b087      	sub	sp, #28
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	60f8      	str	r0, [r7, #12]
 8003a04:	60b9      	str	r1, [r7, #8]
 8003a06:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	f003 031f 	and.w	r3, r3, #31
 8003a0e:	2201      	movs	r2, #1
 8003a10:	fa02 f303 	lsl.w	r3, r2, r3
 8003a14:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	6a1a      	ldr	r2, [r3, #32]
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	43db      	mvns	r3, r3
 8003a1e:	401a      	ands	r2, r3
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	6a1a      	ldr	r2, [r3, #32]
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	f003 031f 	and.w	r3, r3, #31
 8003a2e:	6879      	ldr	r1, [r7, #4]
 8003a30:	fa01 f303 	lsl.w	r3, r1, r3
 8003a34:	431a      	orrs	r2, r3
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	621a      	str	r2, [r3, #32]
}
 8003a3a:	bf00      	nop
 8003a3c:	371c      	adds	r7, #28
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr
	...

08003a48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b085      	sub	sp, #20
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
 8003a50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d101      	bne.n	8003a60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a5c:	2302      	movs	r3, #2
 8003a5e:	e050      	b.n	8003b02 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2201      	movs	r2, #1
 8003a64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2202      	movs	r2, #2
 8003a6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a86:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	68fa      	ldr	r2, [r7, #12]
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	68fa      	ldr	r2, [r7, #12]
 8003a98:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a1c      	ldr	r2, [pc, #112]	@ (8003b10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d018      	beq.n	8003ad6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003aac:	d013      	beq.n	8003ad6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a18      	ldr	r2, [pc, #96]	@ (8003b14 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d00e      	beq.n	8003ad6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a16      	ldr	r2, [pc, #88]	@ (8003b18 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d009      	beq.n	8003ad6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a15      	ldr	r2, [pc, #84]	@ (8003b1c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d004      	beq.n	8003ad6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a13      	ldr	r2, [pc, #76]	@ (8003b20 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d10c      	bne.n	8003af0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003adc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	68ba      	ldr	r2, [r7, #8]
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	68ba      	ldr	r2, [r7, #8]
 8003aee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2201      	movs	r2, #1
 8003af4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2200      	movs	r2, #0
 8003afc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003b00:	2300      	movs	r3, #0
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3714      	adds	r7, #20
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr
 8003b0e:	bf00      	nop
 8003b10:	40010000 	.word	0x40010000
 8003b14:	40000400 	.word	0x40000400
 8003b18:	40000800 	.word	0x40000800
 8003b1c:	40000c00 	.word	0x40000c00
 8003b20:	40014000 	.word	0x40014000

08003b24 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b085      	sub	sp, #20
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
 8003b2c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d101      	bne.n	8003b40 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003b3c:	2302      	movs	r3, #2
 8003b3e:	e03d      	b.n	8003bbc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2201      	movs	r2, #1
 8003b44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	68db      	ldr	r3, [r3, #12]
 8003b52:	4313      	orrs	r3, r2
 8003b54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	4313      	orrs	r3, r2
 8003b62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	691b      	ldr	r3, [r3, #16]
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	695b      	ldr	r3, [r3, #20]
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	69db      	ldr	r3, [r3, #28]
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	68fa      	ldr	r2, [r7, #12]
 8003bb0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003bba:	2300      	movs	r3, #0
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	3714      	adds	r7, #20
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc6:	4770      	bx	lr

08003bc8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b083      	sub	sp, #12
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003bd0:	bf00      	nop
 8003bd2:	370c      	adds	r7, #12
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bda:	4770      	bx	lr

08003bdc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b083      	sub	sp, #12
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003be4:	bf00      	nop
 8003be6:	370c      	adds	r7, #12
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr

08003bf0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b082      	sub	sp, #8
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d101      	bne.n	8003c02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e042      	b.n	8003c88 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d106      	bne.n	8003c1c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f7fd f984 	bl	8000f24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2224      	movs	r2, #36	@ 0x24
 8003c20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	68da      	ldr	r2, [r3, #12]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003c32:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c34:	6878      	ldr	r0, [r7, #4]
 8003c36:	f000 fa9f 	bl	8004178 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	691a      	ldr	r2, [r3, #16]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003c48:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	695a      	ldr	r2, [r3, #20]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003c58:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	68da      	ldr	r2, [r3, #12]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003c68:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2220      	movs	r2, #32
 8003c74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2220      	movs	r2, #32
 8003c7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2200      	movs	r2, #0
 8003c84:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003c86:	2300      	movs	r3, #0
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	3708      	adds	r7, #8
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}

08003c90 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b084      	sub	sp, #16
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	60f8      	str	r0, [r7, #12]
 8003c98:	60b9      	str	r1, [r7, #8]
 8003c9a:	4613      	mov	r3, r2
 8003c9c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	2b20      	cmp	r3, #32
 8003ca8:	d112      	bne.n	8003cd0 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d002      	beq.n	8003cb6 <HAL_UART_Receive_DMA+0x26>
 8003cb0:	88fb      	ldrh	r3, [r7, #6]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d101      	bne.n	8003cba <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e00b      	b.n	8003cd2 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003cc0:	88fb      	ldrh	r3, [r7, #6]
 8003cc2:	461a      	mov	r2, r3
 8003cc4:	68b9      	ldr	r1, [r7, #8]
 8003cc6:	68f8      	ldr	r0, [r7, #12]
 8003cc8:	f000 f930 	bl	8003f2c <UART_Start_Receive_DMA>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	e000      	b.n	8003cd2 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003cd0:	2302      	movs	r3, #2
  }
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3710      	adds	r7, #16
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}

08003cda <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003cda:	b480      	push	{r7}
 8003cdc:	b083      	sub	sp, #12
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003ce2:	bf00      	nop
 8003ce4:	370c      	adds	r7, #12
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr

08003cee <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003cee:	b480      	push	{r7}
 8003cf0:	b083      	sub	sp, #12
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003cf6:	bf00      	nop
 8003cf8:	370c      	adds	r7, #12
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d00:	4770      	bx	lr

08003d02 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003d02:	b480      	push	{r7}
 8003d04:	b083      	sub	sp, #12
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003d0a:	bf00      	nop
 8003d0c:	370c      	adds	r7, #12
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr

08003d16 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003d16:	b480      	push	{r7}
 8003d18:	b083      	sub	sp, #12
 8003d1a:	af00      	add	r7, sp, #0
 8003d1c:	6078      	str	r0, [r7, #4]
 8003d1e:	460b      	mov	r3, r1
 8003d20:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003d22:	bf00      	nop
 8003d24:	370c      	adds	r7, #12
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr

08003d2e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003d2e:	b580      	push	{r7, lr}
 8003d30:	b09c      	sub	sp, #112	@ 0x70
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d3a:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d172      	bne.n	8003e30 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8003d4a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d50:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	330c      	adds	r3, #12
 8003d56:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003d5a:	e853 3f00 	ldrex	r3, [r3]
 8003d5e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003d60:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003d62:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003d66:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003d68:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	330c      	adds	r3, #12
 8003d6e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8003d70:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003d72:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d74:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003d76:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003d78:	e841 2300 	strex	r3, r2, [r1]
 8003d7c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003d7e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d1e5      	bne.n	8003d50 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d84:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	3314      	adds	r3, #20
 8003d8a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d8e:	e853 3f00 	ldrex	r3, [r3]
 8003d92:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003d94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d96:	f023 0301 	bic.w	r3, r3, #1
 8003d9a:	667b      	str	r3, [r7, #100]	@ 0x64
 8003d9c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	3314      	adds	r3, #20
 8003da2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003da4:	647a      	str	r2, [r7, #68]	@ 0x44
 8003da6:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003da8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003daa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003dac:	e841 2300 	strex	r3, r2, [r1]
 8003db0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003db2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d1e5      	bne.n	8003d84 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003db8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	3314      	adds	r3, #20
 8003dbe:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dc2:	e853 3f00 	ldrex	r3, [r3]
 8003dc6:	623b      	str	r3, [r7, #32]
   return(result);
 8003dc8:	6a3b      	ldr	r3, [r7, #32]
 8003dca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003dce:	663b      	str	r3, [r7, #96]	@ 0x60
 8003dd0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	3314      	adds	r3, #20
 8003dd6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003dd8:	633a      	str	r2, [r7, #48]	@ 0x30
 8003dda:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ddc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003dde:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003de0:	e841 2300 	strex	r3, r2, [r1]
 8003de4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003de6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d1e5      	bne.n	8003db8 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003dec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003dee:	2220      	movs	r2, #32
 8003df0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003df4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003df6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d119      	bne.n	8003e30 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dfc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	330c      	adds	r3, #12
 8003e02:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	e853 3f00 	ldrex	r3, [r3]
 8003e0a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	f023 0310 	bic.w	r3, r3, #16
 8003e12:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003e14:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	330c      	adds	r3, #12
 8003e1a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003e1c:	61fa      	str	r2, [r7, #28]
 8003e1e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e20:	69b9      	ldr	r1, [r7, #24]
 8003e22:	69fa      	ldr	r2, [r7, #28]
 8003e24:	e841 2300 	strex	r3, r2, [r1]
 8003e28:	617b      	str	r3, [r7, #20]
   return(result);
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d1e5      	bne.n	8003dfc <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e30:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003e32:	2200      	movs	r2, #0
 8003e34:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e36:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d106      	bne.n	8003e4c <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003e3e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003e40:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003e42:	4619      	mov	r1, r3
 8003e44:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003e46:	f7ff ff66 	bl	8003d16 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003e4a:	e002      	b.n	8003e52 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8003e4c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003e4e:	f7ff ff44 	bl	8003cda <HAL_UART_RxCpltCallback>
}
 8003e52:	bf00      	nop
 8003e54:	3770      	adds	r7, #112	@ 0x70
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}

08003e5a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003e5a:	b580      	push	{r7, lr}
 8003e5c:	b084      	sub	sp, #16
 8003e5e:	af00      	add	r7, sp, #0
 8003e60:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e66:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d108      	bne.n	8003e88 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003e7a:	085b      	lsrs	r3, r3, #1
 8003e7c:	b29b      	uxth	r3, r3
 8003e7e:	4619      	mov	r1, r3
 8003e80:	68f8      	ldr	r0, [r7, #12]
 8003e82:	f7ff ff48 	bl	8003d16 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003e86:	e002      	b.n	8003e8e <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8003e88:	68f8      	ldr	r0, [r7, #12]
 8003e8a:	f7ff ff30 	bl	8003cee <HAL_UART_RxHalfCpltCallback>
}
 8003e8e:	bf00      	nop
 8003e90:	3710      	adds	r7, #16
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}

08003e96 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003e96:	b580      	push	{r7, lr}
 8003e98:	b084      	sub	sp, #16
 8003e9a:	af00      	add	r7, sp, #0
 8003e9c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ea6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	695b      	ldr	r3, [r3, #20]
 8003eae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003eb2:	2b80      	cmp	r3, #128	@ 0x80
 8003eb4:	bf0c      	ite	eq
 8003eb6:	2301      	moveq	r3, #1
 8003eb8:	2300      	movne	r3, #0
 8003eba:	b2db      	uxtb	r3, r3
 8003ebc:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	2b21      	cmp	r3, #33	@ 0x21
 8003ec8:	d108      	bne.n	8003edc <UART_DMAError+0x46>
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d005      	beq.n	8003edc <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8003ed6:	68b8      	ldr	r0, [r7, #8]
 8003ed8:	f000 f8c2 	bl	8004060 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	695b      	ldr	r3, [r3, #20]
 8003ee2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ee6:	2b40      	cmp	r3, #64	@ 0x40
 8003ee8:	bf0c      	ite	eq
 8003eea:	2301      	moveq	r3, #1
 8003eec:	2300      	movne	r3, #0
 8003eee:	b2db      	uxtb	r3, r3
 8003ef0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	2b22      	cmp	r3, #34	@ 0x22
 8003efc:	d108      	bne.n	8003f10 <UART_DMAError+0x7a>
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d005      	beq.n	8003f10 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	2200      	movs	r2, #0
 8003f08:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8003f0a:	68b8      	ldr	r0, [r7, #8]
 8003f0c:	f000 f8d0 	bl	80040b0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f14:	f043 0210 	orr.w	r2, r3, #16
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003f1c:	68b8      	ldr	r0, [r7, #8]
 8003f1e:	f7ff fef0 	bl	8003d02 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f22:	bf00      	nop
 8003f24:	3710      	adds	r7, #16
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}
	...

08003f2c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b098      	sub	sp, #96	@ 0x60
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	60f8      	str	r0, [r7, #12]
 8003f34:	60b9      	str	r1, [r7, #8]
 8003f36:	4613      	mov	r3, r2
 8003f38:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8003f3a:	68ba      	ldr	r2, [r7, #8]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	88fa      	ldrh	r2, [r7, #6]
 8003f44:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2222      	movs	r2, #34	@ 0x22
 8003f50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f58:	4a3e      	ldr	r2, [pc, #248]	@ (8004054 <UART_Start_Receive_DMA+0x128>)
 8003f5a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f60:	4a3d      	ldr	r2, [pc, #244]	@ (8004058 <UART_Start_Receive_DMA+0x12c>)
 8003f62:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f68:	4a3c      	ldr	r2, [pc, #240]	@ (800405c <UART_Start_Receive_DMA+0x130>)
 8003f6a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f70:	2200      	movs	r2, #0
 8003f72:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8003f74:	f107 0308 	add.w	r3, r7, #8
 8003f78:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	3304      	adds	r3, #4
 8003f84:	4619      	mov	r1, r3
 8003f86:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	88fb      	ldrh	r3, [r7, #6]
 8003f8c:	f7fd fe44 	bl	8001c18 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003f90:	2300      	movs	r3, #0
 8003f92:	613b      	str	r3, [r7, #16]
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	613b      	str	r3, [r7, #16]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	613b      	str	r3, [r7, #16]
 8003fa4:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	691b      	ldr	r3, [r3, #16]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d019      	beq.n	8003fe2 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	330c      	adds	r3, #12
 8003fb4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fb6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003fb8:	e853 3f00 	ldrex	r3, [r3]
 8003fbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003fbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003fc0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fc4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	330c      	adds	r3, #12
 8003fcc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003fce:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003fd0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fd2:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8003fd4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003fd6:	e841 2300 	strex	r3, r2, [r1]
 8003fda:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8003fdc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d1e5      	bne.n	8003fae <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	3314      	adds	r3, #20
 8003fe8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fec:	e853 3f00 	ldrex	r3, [r3]
 8003ff0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003ff2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ff4:	f043 0301 	orr.w	r3, r3, #1
 8003ff8:	657b      	str	r3, [r7, #84]	@ 0x54
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	3314      	adds	r3, #20
 8004000:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004002:	63ba      	str	r2, [r7, #56]	@ 0x38
 8004004:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004006:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004008:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800400a:	e841 2300 	strex	r3, r2, [r1]
 800400e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004010:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004012:	2b00      	cmp	r3, #0
 8004014:	d1e5      	bne.n	8003fe2 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	3314      	adds	r3, #20
 800401c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800401e:	69bb      	ldr	r3, [r7, #24]
 8004020:	e853 3f00 	ldrex	r3, [r3]
 8004024:	617b      	str	r3, [r7, #20]
   return(result);
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800402c:	653b      	str	r3, [r7, #80]	@ 0x50
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	3314      	adds	r3, #20
 8004034:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004036:	627a      	str	r2, [r7, #36]	@ 0x24
 8004038:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800403a:	6a39      	ldr	r1, [r7, #32]
 800403c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800403e:	e841 2300 	strex	r3, r2, [r1]
 8004042:	61fb      	str	r3, [r7, #28]
   return(result);
 8004044:	69fb      	ldr	r3, [r7, #28]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d1e5      	bne.n	8004016 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800404a:	2300      	movs	r3, #0
}
 800404c:	4618      	mov	r0, r3
 800404e:	3760      	adds	r7, #96	@ 0x60
 8004050:	46bd      	mov	sp, r7
 8004052:	bd80      	pop	{r7, pc}
 8004054:	08003d2f 	.word	0x08003d2f
 8004058:	08003e5b 	.word	0x08003e5b
 800405c:	08003e97 	.word	0x08003e97

08004060 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004060:	b480      	push	{r7}
 8004062:	b089      	sub	sp, #36	@ 0x24
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	330c      	adds	r3, #12
 800406e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	e853 3f00 	ldrex	r3, [r3]
 8004076:	60bb      	str	r3, [r7, #8]
   return(result);
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800407e:	61fb      	str	r3, [r7, #28]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	330c      	adds	r3, #12
 8004086:	69fa      	ldr	r2, [r7, #28]
 8004088:	61ba      	str	r2, [r7, #24]
 800408a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800408c:	6979      	ldr	r1, [r7, #20]
 800408e:	69ba      	ldr	r2, [r7, #24]
 8004090:	e841 2300 	strex	r3, r2, [r1]
 8004094:	613b      	str	r3, [r7, #16]
   return(result);
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d1e5      	bne.n	8004068 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2220      	movs	r2, #32
 80040a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 80040a4:	bf00      	nop
 80040a6:	3724      	adds	r7, #36	@ 0x24
 80040a8:	46bd      	mov	sp, r7
 80040aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ae:	4770      	bx	lr

080040b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b095      	sub	sp, #84	@ 0x54
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	330c      	adds	r3, #12
 80040be:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040c2:	e853 3f00 	ldrex	r3, [r3]
 80040c6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80040c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040ca:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80040ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	330c      	adds	r3, #12
 80040d6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80040d8:	643a      	str	r2, [r7, #64]	@ 0x40
 80040da:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040dc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80040de:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80040e0:	e841 2300 	strex	r3, r2, [r1]
 80040e4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80040e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d1e5      	bne.n	80040b8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	3314      	adds	r3, #20
 80040f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040f4:	6a3b      	ldr	r3, [r7, #32]
 80040f6:	e853 3f00 	ldrex	r3, [r3]
 80040fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80040fc:	69fb      	ldr	r3, [r7, #28]
 80040fe:	f023 0301 	bic.w	r3, r3, #1
 8004102:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	3314      	adds	r3, #20
 800410a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800410c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800410e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004110:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004112:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004114:	e841 2300 	strex	r3, r2, [r1]
 8004118:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800411a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800411c:	2b00      	cmp	r3, #0
 800411e:	d1e5      	bne.n	80040ec <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004124:	2b01      	cmp	r3, #1
 8004126:	d119      	bne.n	800415c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	330c      	adds	r3, #12
 800412e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	e853 3f00 	ldrex	r3, [r3]
 8004136:	60bb      	str	r3, [r7, #8]
   return(result);
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	f023 0310 	bic.w	r3, r3, #16
 800413e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	330c      	adds	r3, #12
 8004146:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004148:	61ba      	str	r2, [r7, #24]
 800414a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800414c:	6979      	ldr	r1, [r7, #20]
 800414e:	69ba      	ldr	r2, [r7, #24]
 8004150:	e841 2300 	strex	r3, r2, [r1]
 8004154:	613b      	str	r3, [r7, #16]
   return(result);
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d1e5      	bne.n	8004128 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2220      	movs	r2, #32
 8004160:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2200      	movs	r2, #0
 8004168:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800416a:	bf00      	nop
 800416c:	3754      	adds	r7, #84	@ 0x54
 800416e:	46bd      	mov	sp, r7
 8004170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004174:	4770      	bx	lr
	...

08004178 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004178:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800417c:	b0c0      	sub	sp, #256	@ 0x100
 800417e:	af00      	add	r7, sp, #0
 8004180:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	691b      	ldr	r3, [r3, #16]
 800418c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004194:	68d9      	ldr	r1, [r3, #12]
 8004196:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	ea40 0301 	orr.w	r3, r0, r1
 80041a0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80041a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041a6:	689a      	ldr	r2, [r3, #8]
 80041a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041ac:	691b      	ldr	r3, [r3, #16]
 80041ae:	431a      	orrs	r2, r3
 80041b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041b4:	695b      	ldr	r3, [r3, #20]
 80041b6:	431a      	orrs	r2, r3
 80041b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041bc:	69db      	ldr	r3, [r3, #28]
 80041be:	4313      	orrs	r3, r2
 80041c0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80041c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	68db      	ldr	r3, [r3, #12]
 80041cc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80041d0:	f021 010c 	bic.w	r1, r1, #12
 80041d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80041de:	430b      	orrs	r3, r1
 80041e0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80041e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	695b      	ldr	r3, [r3, #20]
 80041ea:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80041ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041f2:	6999      	ldr	r1, [r3, #24]
 80041f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	ea40 0301 	orr.w	r3, r0, r1
 80041fe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004200:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	4b8f      	ldr	r3, [pc, #572]	@ (8004444 <UART_SetConfig+0x2cc>)
 8004208:	429a      	cmp	r2, r3
 800420a:	d005      	beq.n	8004218 <UART_SetConfig+0xa0>
 800420c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004210:	681a      	ldr	r2, [r3, #0]
 8004212:	4b8d      	ldr	r3, [pc, #564]	@ (8004448 <UART_SetConfig+0x2d0>)
 8004214:	429a      	cmp	r2, r3
 8004216:	d104      	bne.n	8004222 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004218:	f7fe fdfc 	bl	8002e14 <HAL_RCC_GetPCLK2Freq>
 800421c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004220:	e003      	b.n	800422a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004222:	f7fe fde3 	bl	8002dec <HAL_RCC_GetPCLK1Freq>
 8004226:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800422a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800422e:	69db      	ldr	r3, [r3, #28]
 8004230:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004234:	f040 810c 	bne.w	8004450 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004238:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800423c:	2200      	movs	r2, #0
 800423e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004242:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004246:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800424a:	4622      	mov	r2, r4
 800424c:	462b      	mov	r3, r5
 800424e:	1891      	adds	r1, r2, r2
 8004250:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004252:	415b      	adcs	r3, r3
 8004254:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004256:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800425a:	4621      	mov	r1, r4
 800425c:	eb12 0801 	adds.w	r8, r2, r1
 8004260:	4629      	mov	r1, r5
 8004262:	eb43 0901 	adc.w	r9, r3, r1
 8004266:	f04f 0200 	mov.w	r2, #0
 800426a:	f04f 0300 	mov.w	r3, #0
 800426e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004272:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004276:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800427a:	4690      	mov	r8, r2
 800427c:	4699      	mov	r9, r3
 800427e:	4623      	mov	r3, r4
 8004280:	eb18 0303 	adds.w	r3, r8, r3
 8004284:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004288:	462b      	mov	r3, r5
 800428a:	eb49 0303 	adc.w	r3, r9, r3
 800428e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004292:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	2200      	movs	r2, #0
 800429a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800429e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80042a2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80042a6:	460b      	mov	r3, r1
 80042a8:	18db      	adds	r3, r3, r3
 80042aa:	653b      	str	r3, [r7, #80]	@ 0x50
 80042ac:	4613      	mov	r3, r2
 80042ae:	eb42 0303 	adc.w	r3, r2, r3
 80042b2:	657b      	str	r3, [r7, #84]	@ 0x54
 80042b4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80042b8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80042bc:	f7fb ff90 	bl	80001e0 <__aeabi_uldivmod>
 80042c0:	4602      	mov	r2, r0
 80042c2:	460b      	mov	r3, r1
 80042c4:	4b61      	ldr	r3, [pc, #388]	@ (800444c <UART_SetConfig+0x2d4>)
 80042c6:	fba3 2302 	umull	r2, r3, r3, r2
 80042ca:	095b      	lsrs	r3, r3, #5
 80042cc:	011c      	lsls	r4, r3, #4
 80042ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80042d2:	2200      	movs	r2, #0
 80042d4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80042d8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80042dc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80042e0:	4642      	mov	r2, r8
 80042e2:	464b      	mov	r3, r9
 80042e4:	1891      	adds	r1, r2, r2
 80042e6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80042e8:	415b      	adcs	r3, r3
 80042ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80042ec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80042f0:	4641      	mov	r1, r8
 80042f2:	eb12 0a01 	adds.w	sl, r2, r1
 80042f6:	4649      	mov	r1, r9
 80042f8:	eb43 0b01 	adc.w	fp, r3, r1
 80042fc:	f04f 0200 	mov.w	r2, #0
 8004300:	f04f 0300 	mov.w	r3, #0
 8004304:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004308:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800430c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004310:	4692      	mov	sl, r2
 8004312:	469b      	mov	fp, r3
 8004314:	4643      	mov	r3, r8
 8004316:	eb1a 0303 	adds.w	r3, sl, r3
 800431a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800431e:	464b      	mov	r3, r9
 8004320:	eb4b 0303 	adc.w	r3, fp, r3
 8004324:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004328:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	2200      	movs	r2, #0
 8004330:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004334:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004338:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800433c:	460b      	mov	r3, r1
 800433e:	18db      	adds	r3, r3, r3
 8004340:	643b      	str	r3, [r7, #64]	@ 0x40
 8004342:	4613      	mov	r3, r2
 8004344:	eb42 0303 	adc.w	r3, r2, r3
 8004348:	647b      	str	r3, [r7, #68]	@ 0x44
 800434a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800434e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004352:	f7fb ff45 	bl	80001e0 <__aeabi_uldivmod>
 8004356:	4602      	mov	r2, r0
 8004358:	460b      	mov	r3, r1
 800435a:	4611      	mov	r1, r2
 800435c:	4b3b      	ldr	r3, [pc, #236]	@ (800444c <UART_SetConfig+0x2d4>)
 800435e:	fba3 2301 	umull	r2, r3, r3, r1
 8004362:	095b      	lsrs	r3, r3, #5
 8004364:	2264      	movs	r2, #100	@ 0x64
 8004366:	fb02 f303 	mul.w	r3, r2, r3
 800436a:	1acb      	subs	r3, r1, r3
 800436c:	00db      	lsls	r3, r3, #3
 800436e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004372:	4b36      	ldr	r3, [pc, #216]	@ (800444c <UART_SetConfig+0x2d4>)
 8004374:	fba3 2302 	umull	r2, r3, r3, r2
 8004378:	095b      	lsrs	r3, r3, #5
 800437a:	005b      	lsls	r3, r3, #1
 800437c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004380:	441c      	add	r4, r3
 8004382:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004386:	2200      	movs	r2, #0
 8004388:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800438c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004390:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004394:	4642      	mov	r2, r8
 8004396:	464b      	mov	r3, r9
 8004398:	1891      	adds	r1, r2, r2
 800439a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800439c:	415b      	adcs	r3, r3
 800439e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80043a0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80043a4:	4641      	mov	r1, r8
 80043a6:	1851      	adds	r1, r2, r1
 80043a8:	6339      	str	r1, [r7, #48]	@ 0x30
 80043aa:	4649      	mov	r1, r9
 80043ac:	414b      	adcs	r3, r1
 80043ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80043b0:	f04f 0200 	mov.w	r2, #0
 80043b4:	f04f 0300 	mov.w	r3, #0
 80043b8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80043bc:	4659      	mov	r1, fp
 80043be:	00cb      	lsls	r3, r1, #3
 80043c0:	4651      	mov	r1, sl
 80043c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043c6:	4651      	mov	r1, sl
 80043c8:	00ca      	lsls	r2, r1, #3
 80043ca:	4610      	mov	r0, r2
 80043cc:	4619      	mov	r1, r3
 80043ce:	4603      	mov	r3, r0
 80043d0:	4642      	mov	r2, r8
 80043d2:	189b      	adds	r3, r3, r2
 80043d4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80043d8:	464b      	mov	r3, r9
 80043da:	460a      	mov	r2, r1
 80043dc:	eb42 0303 	adc.w	r3, r2, r3
 80043e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80043e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	2200      	movs	r2, #0
 80043ec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80043f0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80043f4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80043f8:	460b      	mov	r3, r1
 80043fa:	18db      	adds	r3, r3, r3
 80043fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80043fe:	4613      	mov	r3, r2
 8004400:	eb42 0303 	adc.w	r3, r2, r3
 8004404:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004406:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800440a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800440e:	f7fb fee7 	bl	80001e0 <__aeabi_uldivmod>
 8004412:	4602      	mov	r2, r0
 8004414:	460b      	mov	r3, r1
 8004416:	4b0d      	ldr	r3, [pc, #52]	@ (800444c <UART_SetConfig+0x2d4>)
 8004418:	fba3 1302 	umull	r1, r3, r3, r2
 800441c:	095b      	lsrs	r3, r3, #5
 800441e:	2164      	movs	r1, #100	@ 0x64
 8004420:	fb01 f303 	mul.w	r3, r1, r3
 8004424:	1ad3      	subs	r3, r2, r3
 8004426:	00db      	lsls	r3, r3, #3
 8004428:	3332      	adds	r3, #50	@ 0x32
 800442a:	4a08      	ldr	r2, [pc, #32]	@ (800444c <UART_SetConfig+0x2d4>)
 800442c:	fba2 2303 	umull	r2, r3, r2, r3
 8004430:	095b      	lsrs	r3, r3, #5
 8004432:	f003 0207 	and.w	r2, r3, #7
 8004436:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4422      	add	r2, r4
 800443e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004440:	e106      	b.n	8004650 <UART_SetConfig+0x4d8>
 8004442:	bf00      	nop
 8004444:	40011000 	.word	0x40011000
 8004448:	40011400 	.word	0x40011400
 800444c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004450:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004454:	2200      	movs	r2, #0
 8004456:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800445a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800445e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004462:	4642      	mov	r2, r8
 8004464:	464b      	mov	r3, r9
 8004466:	1891      	adds	r1, r2, r2
 8004468:	6239      	str	r1, [r7, #32]
 800446a:	415b      	adcs	r3, r3
 800446c:	627b      	str	r3, [r7, #36]	@ 0x24
 800446e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004472:	4641      	mov	r1, r8
 8004474:	1854      	adds	r4, r2, r1
 8004476:	4649      	mov	r1, r9
 8004478:	eb43 0501 	adc.w	r5, r3, r1
 800447c:	f04f 0200 	mov.w	r2, #0
 8004480:	f04f 0300 	mov.w	r3, #0
 8004484:	00eb      	lsls	r3, r5, #3
 8004486:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800448a:	00e2      	lsls	r2, r4, #3
 800448c:	4614      	mov	r4, r2
 800448e:	461d      	mov	r5, r3
 8004490:	4643      	mov	r3, r8
 8004492:	18e3      	adds	r3, r4, r3
 8004494:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004498:	464b      	mov	r3, r9
 800449a:	eb45 0303 	adc.w	r3, r5, r3
 800449e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80044a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	2200      	movs	r2, #0
 80044aa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80044ae:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80044b2:	f04f 0200 	mov.w	r2, #0
 80044b6:	f04f 0300 	mov.w	r3, #0
 80044ba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80044be:	4629      	mov	r1, r5
 80044c0:	008b      	lsls	r3, r1, #2
 80044c2:	4621      	mov	r1, r4
 80044c4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80044c8:	4621      	mov	r1, r4
 80044ca:	008a      	lsls	r2, r1, #2
 80044cc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80044d0:	f7fb fe86 	bl	80001e0 <__aeabi_uldivmod>
 80044d4:	4602      	mov	r2, r0
 80044d6:	460b      	mov	r3, r1
 80044d8:	4b60      	ldr	r3, [pc, #384]	@ (800465c <UART_SetConfig+0x4e4>)
 80044da:	fba3 2302 	umull	r2, r3, r3, r2
 80044de:	095b      	lsrs	r3, r3, #5
 80044e0:	011c      	lsls	r4, r3, #4
 80044e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80044e6:	2200      	movs	r2, #0
 80044e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80044ec:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80044f0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80044f4:	4642      	mov	r2, r8
 80044f6:	464b      	mov	r3, r9
 80044f8:	1891      	adds	r1, r2, r2
 80044fa:	61b9      	str	r1, [r7, #24]
 80044fc:	415b      	adcs	r3, r3
 80044fe:	61fb      	str	r3, [r7, #28]
 8004500:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004504:	4641      	mov	r1, r8
 8004506:	1851      	adds	r1, r2, r1
 8004508:	6139      	str	r1, [r7, #16]
 800450a:	4649      	mov	r1, r9
 800450c:	414b      	adcs	r3, r1
 800450e:	617b      	str	r3, [r7, #20]
 8004510:	f04f 0200 	mov.w	r2, #0
 8004514:	f04f 0300 	mov.w	r3, #0
 8004518:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800451c:	4659      	mov	r1, fp
 800451e:	00cb      	lsls	r3, r1, #3
 8004520:	4651      	mov	r1, sl
 8004522:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004526:	4651      	mov	r1, sl
 8004528:	00ca      	lsls	r2, r1, #3
 800452a:	4610      	mov	r0, r2
 800452c:	4619      	mov	r1, r3
 800452e:	4603      	mov	r3, r0
 8004530:	4642      	mov	r2, r8
 8004532:	189b      	adds	r3, r3, r2
 8004534:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004538:	464b      	mov	r3, r9
 800453a:	460a      	mov	r2, r1
 800453c:	eb42 0303 	adc.w	r3, r2, r3
 8004540:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004544:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	2200      	movs	r2, #0
 800454c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800454e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004550:	f04f 0200 	mov.w	r2, #0
 8004554:	f04f 0300 	mov.w	r3, #0
 8004558:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800455c:	4649      	mov	r1, r9
 800455e:	008b      	lsls	r3, r1, #2
 8004560:	4641      	mov	r1, r8
 8004562:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004566:	4641      	mov	r1, r8
 8004568:	008a      	lsls	r2, r1, #2
 800456a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800456e:	f7fb fe37 	bl	80001e0 <__aeabi_uldivmod>
 8004572:	4602      	mov	r2, r0
 8004574:	460b      	mov	r3, r1
 8004576:	4611      	mov	r1, r2
 8004578:	4b38      	ldr	r3, [pc, #224]	@ (800465c <UART_SetConfig+0x4e4>)
 800457a:	fba3 2301 	umull	r2, r3, r3, r1
 800457e:	095b      	lsrs	r3, r3, #5
 8004580:	2264      	movs	r2, #100	@ 0x64
 8004582:	fb02 f303 	mul.w	r3, r2, r3
 8004586:	1acb      	subs	r3, r1, r3
 8004588:	011b      	lsls	r3, r3, #4
 800458a:	3332      	adds	r3, #50	@ 0x32
 800458c:	4a33      	ldr	r2, [pc, #204]	@ (800465c <UART_SetConfig+0x4e4>)
 800458e:	fba2 2303 	umull	r2, r3, r2, r3
 8004592:	095b      	lsrs	r3, r3, #5
 8004594:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004598:	441c      	add	r4, r3
 800459a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800459e:	2200      	movs	r2, #0
 80045a0:	673b      	str	r3, [r7, #112]	@ 0x70
 80045a2:	677a      	str	r2, [r7, #116]	@ 0x74
 80045a4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80045a8:	4642      	mov	r2, r8
 80045aa:	464b      	mov	r3, r9
 80045ac:	1891      	adds	r1, r2, r2
 80045ae:	60b9      	str	r1, [r7, #8]
 80045b0:	415b      	adcs	r3, r3
 80045b2:	60fb      	str	r3, [r7, #12]
 80045b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80045b8:	4641      	mov	r1, r8
 80045ba:	1851      	adds	r1, r2, r1
 80045bc:	6039      	str	r1, [r7, #0]
 80045be:	4649      	mov	r1, r9
 80045c0:	414b      	adcs	r3, r1
 80045c2:	607b      	str	r3, [r7, #4]
 80045c4:	f04f 0200 	mov.w	r2, #0
 80045c8:	f04f 0300 	mov.w	r3, #0
 80045cc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80045d0:	4659      	mov	r1, fp
 80045d2:	00cb      	lsls	r3, r1, #3
 80045d4:	4651      	mov	r1, sl
 80045d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80045da:	4651      	mov	r1, sl
 80045dc:	00ca      	lsls	r2, r1, #3
 80045de:	4610      	mov	r0, r2
 80045e0:	4619      	mov	r1, r3
 80045e2:	4603      	mov	r3, r0
 80045e4:	4642      	mov	r2, r8
 80045e6:	189b      	adds	r3, r3, r2
 80045e8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80045ea:	464b      	mov	r3, r9
 80045ec:	460a      	mov	r2, r1
 80045ee:	eb42 0303 	adc.w	r3, r2, r3
 80045f2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80045f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	2200      	movs	r2, #0
 80045fc:	663b      	str	r3, [r7, #96]	@ 0x60
 80045fe:	667a      	str	r2, [r7, #100]	@ 0x64
 8004600:	f04f 0200 	mov.w	r2, #0
 8004604:	f04f 0300 	mov.w	r3, #0
 8004608:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800460c:	4649      	mov	r1, r9
 800460e:	008b      	lsls	r3, r1, #2
 8004610:	4641      	mov	r1, r8
 8004612:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004616:	4641      	mov	r1, r8
 8004618:	008a      	lsls	r2, r1, #2
 800461a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800461e:	f7fb fddf 	bl	80001e0 <__aeabi_uldivmod>
 8004622:	4602      	mov	r2, r0
 8004624:	460b      	mov	r3, r1
 8004626:	4b0d      	ldr	r3, [pc, #52]	@ (800465c <UART_SetConfig+0x4e4>)
 8004628:	fba3 1302 	umull	r1, r3, r3, r2
 800462c:	095b      	lsrs	r3, r3, #5
 800462e:	2164      	movs	r1, #100	@ 0x64
 8004630:	fb01 f303 	mul.w	r3, r1, r3
 8004634:	1ad3      	subs	r3, r2, r3
 8004636:	011b      	lsls	r3, r3, #4
 8004638:	3332      	adds	r3, #50	@ 0x32
 800463a:	4a08      	ldr	r2, [pc, #32]	@ (800465c <UART_SetConfig+0x4e4>)
 800463c:	fba2 2303 	umull	r2, r3, r2, r3
 8004640:	095b      	lsrs	r3, r3, #5
 8004642:	f003 020f 	and.w	r2, r3, #15
 8004646:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4422      	add	r2, r4
 800464e:	609a      	str	r2, [r3, #8]
}
 8004650:	bf00      	nop
 8004652:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004656:	46bd      	mov	sp, r7
 8004658:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800465c:	51eb851f 	.word	0x51eb851f

08004660 <__NVIC_SetPriority>:
{
 8004660:	b480      	push	{r7}
 8004662:	b083      	sub	sp, #12
 8004664:	af00      	add	r7, sp, #0
 8004666:	4603      	mov	r3, r0
 8004668:	6039      	str	r1, [r7, #0]
 800466a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800466c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004670:	2b00      	cmp	r3, #0
 8004672:	db0a      	blt.n	800468a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	b2da      	uxtb	r2, r3
 8004678:	490c      	ldr	r1, [pc, #48]	@ (80046ac <__NVIC_SetPriority+0x4c>)
 800467a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800467e:	0112      	lsls	r2, r2, #4
 8004680:	b2d2      	uxtb	r2, r2
 8004682:	440b      	add	r3, r1
 8004684:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004688:	e00a      	b.n	80046a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	b2da      	uxtb	r2, r3
 800468e:	4908      	ldr	r1, [pc, #32]	@ (80046b0 <__NVIC_SetPriority+0x50>)
 8004690:	79fb      	ldrb	r3, [r7, #7]
 8004692:	f003 030f 	and.w	r3, r3, #15
 8004696:	3b04      	subs	r3, #4
 8004698:	0112      	lsls	r2, r2, #4
 800469a:	b2d2      	uxtb	r2, r2
 800469c:	440b      	add	r3, r1
 800469e:	761a      	strb	r2, [r3, #24]
}
 80046a0:	bf00      	nop
 80046a2:	370c      	adds	r7, #12
 80046a4:	46bd      	mov	sp, r7
 80046a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046aa:	4770      	bx	lr
 80046ac:	e000e100 	.word	0xe000e100
 80046b0:	e000ed00 	.word	0xe000ed00

080046b4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80046b4:	b580      	push	{r7, lr}
 80046b6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80046b8:	4b05      	ldr	r3, [pc, #20]	@ (80046d0 <SysTick_Handler+0x1c>)
 80046ba:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80046bc:	f001 fd46 	bl	800614c <xTaskGetSchedulerState>
 80046c0:	4603      	mov	r3, r0
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d001      	beq.n	80046ca <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80046c6:	f002 fb3f 	bl	8006d48 <xPortSysTickHandler>
  }
}
 80046ca:	bf00      	nop
 80046cc:	bd80      	pop	{r7, pc}
 80046ce:	bf00      	nop
 80046d0:	e000e010 	.word	0xe000e010

080046d4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80046d4:	b580      	push	{r7, lr}
 80046d6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80046d8:	2100      	movs	r1, #0
 80046da:	f06f 0004 	mvn.w	r0, #4
 80046de:	f7ff ffbf 	bl	8004660 <__NVIC_SetPriority>
#endif
}
 80046e2:	bf00      	nop
 80046e4:	bd80      	pop	{r7, pc}
	...

080046e8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80046e8:	b480      	push	{r7}
 80046ea:	b083      	sub	sp, #12
 80046ec:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80046ee:	f3ef 8305 	mrs	r3, IPSR
 80046f2:	603b      	str	r3, [r7, #0]
  return(result);
 80046f4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d003      	beq.n	8004702 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80046fa:	f06f 0305 	mvn.w	r3, #5
 80046fe:	607b      	str	r3, [r7, #4]
 8004700:	e00c      	b.n	800471c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004702:	4b0a      	ldr	r3, [pc, #40]	@ (800472c <osKernelInitialize+0x44>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d105      	bne.n	8004716 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800470a:	4b08      	ldr	r3, [pc, #32]	@ (800472c <osKernelInitialize+0x44>)
 800470c:	2201      	movs	r2, #1
 800470e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004710:	2300      	movs	r3, #0
 8004712:	607b      	str	r3, [r7, #4]
 8004714:	e002      	b.n	800471c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004716:	f04f 33ff 	mov.w	r3, #4294967295
 800471a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800471c:	687b      	ldr	r3, [r7, #4]
}
 800471e:	4618      	mov	r0, r3
 8004720:	370c      	adds	r7, #12
 8004722:	46bd      	mov	sp, r7
 8004724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004728:	4770      	bx	lr
 800472a:	bf00      	nop
 800472c:	20000314 	.word	0x20000314

08004730 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004730:	b580      	push	{r7, lr}
 8004732:	b082      	sub	sp, #8
 8004734:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004736:	f3ef 8305 	mrs	r3, IPSR
 800473a:	603b      	str	r3, [r7, #0]
  return(result);
 800473c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800473e:	2b00      	cmp	r3, #0
 8004740:	d003      	beq.n	800474a <osKernelStart+0x1a>
    stat = osErrorISR;
 8004742:	f06f 0305 	mvn.w	r3, #5
 8004746:	607b      	str	r3, [r7, #4]
 8004748:	e010      	b.n	800476c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800474a:	4b0b      	ldr	r3, [pc, #44]	@ (8004778 <osKernelStart+0x48>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	2b01      	cmp	r3, #1
 8004750:	d109      	bne.n	8004766 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004752:	f7ff ffbf 	bl	80046d4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004756:	4b08      	ldr	r3, [pc, #32]	@ (8004778 <osKernelStart+0x48>)
 8004758:	2202      	movs	r2, #2
 800475a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800475c:	f001 f892 	bl	8005884 <vTaskStartScheduler>
      stat = osOK;
 8004760:	2300      	movs	r3, #0
 8004762:	607b      	str	r3, [r7, #4]
 8004764:	e002      	b.n	800476c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004766:	f04f 33ff 	mov.w	r3, #4294967295
 800476a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800476c:	687b      	ldr	r3, [r7, #4]
}
 800476e:	4618      	mov	r0, r3
 8004770:	3708      	adds	r7, #8
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}
 8004776:	bf00      	nop
 8004778:	20000314 	.word	0x20000314

0800477c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800477c:	b580      	push	{r7, lr}
 800477e:	b08e      	sub	sp, #56	@ 0x38
 8004780:	af04      	add	r7, sp, #16
 8004782:	60f8      	str	r0, [r7, #12]
 8004784:	60b9      	str	r1, [r7, #8]
 8004786:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004788:	2300      	movs	r3, #0
 800478a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800478c:	f3ef 8305 	mrs	r3, IPSR
 8004790:	617b      	str	r3, [r7, #20]
  return(result);
 8004792:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004794:	2b00      	cmp	r3, #0
 8004796:	d17e      	bne.n	8004896 <osThreadNew+0x11a>
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d07b      	beq.n	8004896 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800479e:	2380      	movs	r3, #128	@ 0x80
 80047a0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80047a2:	2318      	movs	r3, #24
 80047a4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80047a6:	2300      	movs	r3, #0
 80047a8:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80047aa:	f04f 33ff 	mov.w	r3, #4294967295
 80047ae:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d045      	beq.n	8004842 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d002      	beq.n	80047c4 <osThreadNew+0x48>
        name = attr->name;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	699b      	ldr	r3, [r3, #24]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d002      	beq.n	80047d2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	699b      	ldr	r3, [r3, #24]
 80047d0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80047d2:	69fb      	ldr	r3, [r7, #28]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d008      	beq.n	80047ea <osThreadNew+0x6e>
 80047d8:	69fb      	ldr	r3, [r7, #28]
 80047da:	2b38      	cmp	r3, #56	@ 0x38
 80047dc:	d805      	bhi.n	80047ea <osThreadNew+0x6e>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	f003 0301 	and.w	r3, r3, #1
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d001      	beq.n	80047ee <osThreadNew+0x72>
        return (NULL);
 80047ea:	2300      	movs	r3, #0
 80047ec:	e054      	b.n	8004898 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	695b      	ldr	r3, [r3, #20]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d003      	beq.n	80047fe <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	695b      	ldr	r3, [r3, #20]
 80047fa:	089b      	lsrs	r3, r3, #2
 80047fc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d00e      	beq.n	8004824 <osThreadNew+0xa8>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	68db      	ldr	r3, [r3, #12]
 800480a:	2ba7      	cmp	r3, #167	@ 0xa7
 800480c:	d90a      	bls.n	8004824 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004812:	2b00      	cmp	r3, #0
 8004814:	d006      	beq.n	8004824 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	695b      	ldr	r3, [r3, #20]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d002      	beq.n	8004824 <osThreadNew+0xa8>
        mem = 1;
 800481e:	2301      	movs	r3, #1
 8004820:	61bb      	str	r3, [r7, #24]
 8004822:	e010      	b.n	8004846 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d10c      	bne.n	8004846 <osThreadNew+0xca>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	68db      	ldr	r3, [r3, #12]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d108      	bne.n	8004846 <osThreadNew+0xca>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	691b      	ldr	r3, [r3, #16]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d104      	bne.n	8004846 <osThreadNew+0xca>
          mem = 0;
 800483c:	2300      	movs	r3, #0
 800483e:	61bb      	str	r3, [r7, #24]
 8004840:	e001      	b.n	8004846 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004842:	2300      	movs	r3, #0
 8004844:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004846:	69bb      	ldr	r3, [r7, #24]
 8004848:	2b01      	cmp	r3, #1
 800484a:	d110      	bne.n	800486e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004850:	687a      	ldr	r2, [r7, #4]
 8004852:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004854:	9202      	str	r2, [sp, #8]
 8004856:	9301      	str	r3, [sp, #4]
 8004858:	69fb      	ldr	r3, [r7, #28]
 800485a:	9300      	str	r3, [sp, #0]
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	6a3a      	ldr	r2, [r7, #32]
 8004860:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004862:	68f8      	ldr	r0, [r7, #12]
 8004864:	f000 fe1a 	bl	800549c <xTaskCreateStatic>
 8004868:	4603      	mov	r3, r0
 800486a:	613b      	str	r3, [r7, #16]
 800486c:	e013      	b.n	8004896 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800486e:	69bb      	ldr	r3, [r7, #24]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d110      	bne.n	8004896 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004874:	6a3b      	ldr	r3, [r7, #32]
 8004876:	b29a      	uxth	r2, r3
 8004878:	f107 0310 	add.w	r3, r7, #16
 800487c:	9301      	str	r3, [sp, #4]
 800487e:	69fb      	ldr	r3, [r7, #28]
 8004880:	9300      	str	r3, [sp, #0]
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004886:	68f8      	ldr	r0, [r7, #12]
 8004888:	f000 fe68 	bl	800555c <xTaskCreate>
 800488c:	4603      	mov	r3, r0
 800488e:	2b01      	cmp	r3, #1
 8004890:	d001      	beq.n	8004896 <osThreadNew+0x11a>
            hTask = NULL;
 8004892:	2300      	movs	r3, #0
 8004894:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004896:	693b      	ldr	r3, [r7, #16]
}
 8004898:	4618      	mov	r0, r3
 800489a:	3728      	adds	r7, #40	@ 0x28
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}

080048a0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b084      	sub	sp, #16
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80048a8:	f3ef 8305 	mrs	r3, IPSR
 80048ac:	60bb      	str	r3, [r7, #8]
  return(result);
 80048ae:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d003      	beq.n	80048bc <osDelay+0x1c>
    stat = osErrorISR;
 80048b4:	f06f 0305 	mvn.w	r3, #5
 80048b8:	60fb      	str	r3, [r7, #12]
 80048ba:	e007      	b.n	80048cc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80048bc:	2300      	movs	r3, #0
 80048be:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d002      	beq.n	80048cc <osDelay+0x2c>
      vTaskDelay(ticks);
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f000 ffa6 	bl	8005818 <vTaskDelay>
    }
  }

  return (stat);
 80048cc:	68fb      	ldr	r3, [r7, #12]
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	3710      	adds	r7, #16
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}
	...

080048d8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80048d8:	b480      	push	{r7}
 80048da:	b085      	sub	sp, #20
 80048dc:	af00      	add	r7, sp, #0
 80048de:	60f8      	str	r0, [r7, #12]
 80048e0:	60b9      	str	r1, [r7, #8]
 80048e2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	4a07      	ldr	r2, [pc, #28]	@ (8004904 <vApplicationGetIdleTaskMemory+0x2c>)
 80048e8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	4a06      	ldr	r2, [pc, #24]	@ (8004908 <vApplicationGetIdleTaskMemory+0x30>)
 80048ee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2280      	movs	r2, #128	@ 0x80
 80048f4:	601a      	str	r2, [r3, #0]
}
 80048f6:	bf00      	nop
 80048f8:	3714      	adds	r7, #20
 80048fa:	46bd      	mov	sp, r7
 80048fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004900:	4770      	bx	lr
 8004902:	bf00      	nop
 8004904:	20000318 	.word	0x20000318
 8004908:	200003c0 	.word	0x200003c0

0800490c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800490c:	b480      	push	{r7}
 800490e:	b085      	sub	sp, #20
 8004910:	af00      	add	r7, sp, #0
 8004912:	60f8      	str	r0, [r7, #12]
 8004914:	60b9      	str	r1, [r7, #8]
 8004916:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	4a07      	ldr	r2, [pc, #28]	@ (8004938 <vApplicationGetTimerTaskMemory+0x2c>)
 800491c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	4a06      	ldr	r2, [pc, #24]	@ (800493c <vApplicationGetTimerTaskMemory+0x30>)
 8004922:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800492a:	601a      	str	r2, [r3, #0]
}
 800492c:	bf00      	nop
 800492e:	3714      	adds	r7, #20
 8004930:	46bd      	mov	sp, r7
 8004932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004936:	4770      	bx	lr
 8004938:	200005c0 	.word	0x200005c0
 800493c:	20000668 	.word	0x20000668

08004940 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004940:	b480      	push	{r7}
 8004942:	b083      	sub	sp, #12
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	f103 0208 	add.w	r2, r3, #8
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	f04f 32ff 	mov.w	r2, #4294967295
 8004958:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	f103 0208 	add.w	r2, r3, #8
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	f103 0208 	add.w	r2, r3, #8
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2200      	movs	r2, #0
 8004972:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004974:	bf00      	nop
 8004976:	370c      	adds	r7, #12
 8004978:	46bd      	mov	sp, r7
 800497a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497e:	4770      	bx	lr

08004980 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004980:	b480      	push	{r7}
 8004982:	b083      	sub	sp, #12
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2200      	movs	r2, #0
 800498c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800498e:	bf00      	nop
 8004990:	370c      	adds	r7, #12
 8004992:	46bd      	mov	sp, r7
 8004994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004998:	4770      	bx	lr

0800499a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800499a:	b480      	push	{r7}
 800499c:	b085      	sub	sp, #20
 800499e:	af00      	add	r7, sp, #0
 80049a0:	6078      	str	r0, [r7, #4]
 80049a2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	68fa      	ldr	r2, [r7, #12]
 80049ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	689a      	ldr	r2, [r3, #8]
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	683a      	ldr	r2, [r7, #0]
 80049be:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	683a      	ldr	r2, [r7, #0]
 80049c4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	687a      	ldr	r2, [r7, #4]
 80049ca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	1c5a      	adds	r2, r3, #1
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	601a      	str	r2, [r3, #0]
}
 80049d6:	bf00      	nop
 80049d8:	3714      	adds	r7, #20
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr

080049e2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80049e2:	b480      	push	{r7}
 80049e4:	b085      	sub	sp, #20
 80049e6:	af00      	add	r7, sp, #0
 80049e8:	6078      	str	r0, [r7, #4]
 80049ea:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049f8:	d103      	bne.n	8004a02 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	691b      	ldr	r3, [r3, #16]
 80049fe:	60fb      	str	r3, [r7, #12]
 8004a00:	e00c      	b.n	8004a1c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	3308      	adds	r3, #8
 8004a06:	60fb      	str	r3, [r7, #12]
 8004a08:	e002      	b.n	8004a10 <vListInsert+0x2e>
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	60fb      	str	r3, [r7, #12]
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	68ba      	ldr	r2, [r7, #8]
 8004a18:	429a      	cmp	r2, r3
 8004a1a:	d2f6      	bcs.n	8004a0a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	685a      	ldr	r2, [r3, #4]
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	683a      	ldr	r2, [r7, #0]
 8004a2a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	68fa      	ldr	r2, [r7, #12]
 8004a30:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	683a      	ldr	r2, [r7, #0]
 8004a36:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	687a      	ldr	r2, [r7, #4]
 8004a3c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	1c5a      	adds	r2, r3, #1
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	601a      	str	r2, [r3, #0]
}
 8004a48:	bf00      	nop
 8004a4a:	3714      	adds	r7, #20
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr

08004a54 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004a54:	b480      	push	{r7}
 8004a56:	b085      	sub	sp, #20
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	691b      	ldr	r3, [r3, #16]
 8004a60:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	687a      	ldr	r2, [r7, #4]
 8004a68:	6892      	ldr	r2, [r2, #8]
 8004a6a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	687a      	ldr	r2, [r7, #4]
 8004a72:	6852      	ldr	r2, [r2, #4]
 8004a74:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	687a      	ldr	r2, [r7, #4]
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d103      	bne.n	8004a88 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	689a      	ldr	r2, [r3, #8]
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	1e5a      	subs	r2, r3, #1
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	3714      	adds	r7, #20
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa6:	4770      	bx	lr

08004aa8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b084      	sub	sp, #16
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
 8004ab0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d10b      	bne.n	8004ad4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004abc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ac0:	f383 8811 	msr	BASEPRI, r3
 8004ac4:	f3bf 8f6f 	isb	sy
 8004ac8:	f3bf 8f4f 	dsb	sy
 8004acc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004ace:	bf00      	nop
 8004ad0:	bf00      	nop
 8004ad2:	e7fd      	b.n	8004ad0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004ad4:	f002 f8a8 	bl	8006c28 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681a      	ldr	r2, [r3, #0]
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ae0:	68f9      	ldr	r1, [r7, #12]
 8004ae2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004ae4:	fb01 f303 	mul.w	r3, r1, r3
 8004ae8:	441a      	add	r2, r3
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2200      	movs	r2, #0
 8004af2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681a      	ldr	r2, [r3, #0]
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b04:	3b01      	subs	r3, #1
 8004b06:	68f9      	ldr	r1, [r7, #12]
 8004b08:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004b0a:	fb01 f303 	mul.w	r3, r1, r3
 8004b0e:	441a      	add	r2, r3
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	22ff      	movs	r2, #255	@ 0xff
 8004b18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	22ff      	movs	r2, #255	@ 0xff
 8004b20:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d114      	bne.n	8004b54 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	691b      	ldr	r3, [r3, #16]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d01a      	beq.n	8004b68 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	3310      	adds	r3, #16
 8004b36:	4618      	mov	r0, r3
 8004b38:	f001 f942 	bl	8005dc0 <xTaskRemoveFromEventList>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d012      	beq.n	8004b68 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004b42:	4b0d      	ldr	r3, [pc, #52]	@ (8004b78 <xQueueGenericReset+0xd0>)
 8004b44:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b48:	601a      	str	r2, [r3, #0]
 8004b4a:	f3bf 8f4f 	dsb	sy
 8004b4e:	f3bf 8f6f 	isb	sy
 8004b52:	e009      	b.n	8004b68 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	3310      	adds	r3, #16
 8004b58:	4618      	mov	r0, r3
 8004b5a:	f7ff fef1 	bl	8004940 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	3324      	adds	r3, #36	@ 0x24
 8004b62:	4618      	mov	r0, r3
 8004b64:	f7ff feec 	bl	8004940 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004b68:	f002 f890 	bl	8006c8c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004b6c:	2301      	movs	r3, #1
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	3710      	adds	r7, #16
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}
 8004b76:	bf00      	nop
 8004b78:	e000ed04 	.word	0xe000ed04

08004b7c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b08e      	sub	sp, #56	@ 0x38
 8004b80:	af02      	add	r7, sp, #8
 8004b82:	60f8      	str	r0, [r7, #12]
 8004b84:	60b9      	str	r1, [r7, #8]
 8004b86:	607a      	str	r2, [r7, #4]
 8004b88:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d10b      	bne.n	8004ba8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004b90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b94:	f383 8811 	msr	BASEPRI, r3
 8004b98:	f3bf 8f6f 	isb	sy
 8004b9c:	f3bf 8f4f 	dsb	sy
 8004ba0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004ba2:	bf00      	nop
 8004ba4:	bf00      	nop
 8004ba6:	e7fd      	b.n	8004ba4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d10b      	bne.n	8004bc6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004bae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bb2:	f383 8811 	msr	BASEPRI, r3
 8004bb6:	f3bf 8f6f 	isb	sy
 8004bba:	f3bf 8f4f 	dsb	sy
 8004bbe:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004bc0:	bf00      	nop
 8004bc2:	bf00      	nop
 8004bc4:	e7fd      	b.n	8004bc2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d002      	beq.n	8004bd2 <xQueueGenericCreateStatic+0x56>
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d001      	beq.n	8004bd6 <xQueueGenericCreateStatic+0x5a>
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e000      	b.n	8004bd8 <xQueueGenericCreateStatic+0x5c>
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d10b      	bne.n	8004bf4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004bdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004be0:	f383 8811 	msr	BASEPRI, r3
 8004be4:	f3bf 8f6f 	isb	sy
 8004be8:	f3bf 8f4f 	dsb	sy
 8004bec:	623b      	str	r3, [r7, #32]
}
 8004bee:	bf00      	nop
 8004bf0:	bf00      	nop
 8004bf2:	e7fd      	b.n	8004bf0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d102      	bne.n	8004c00 <xQueueGenericCreateStatic+0x84>
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d101      	bne.n	8004c04 <xQueueGenericCreateStatic+0x88>
 8004c00:	2301      	movs	r3, #1
 8004c02:	e000      	b.n	8004c06 <xQueueGenericCreateStatic+0x8a>
 8004c04:	2300      	movs	r3, #0
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d10b      	bne.n	8004c22 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8004c0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c0e:	f383 8811 	msr	BASEPRI, r3
 8004c12:	f3bf 8f6f 	isb	sy
 8004c16:	f3bf 8f4f 	dsb	sy
 8004c1a:	61fb      	str	r3, [r7, #28]
}
 8004c1c:	bf00      	nop
 8004c1e:	bf00      	nop
 8004c20:	e7fd      	b.n	8004c1e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004c22:	2350      	movs	r3, #80	@ 0x50
 8004c24:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	2b50      	cmp	r3, #80	@ 0x50
 8004c2a:	d00b      	beq.n	8004c44 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004c2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c30:	f383 8811 	msr	BASEPRI, r3
 8004c34:	f3bf 8f6f 	isb	sy
 8004c38:	f3bf 8f4f 	dsb	sy
 8004c3c:	61bb      	str	r3, [r7, #24]
}
 8004c3e:	bf00      	nop
 8004c40:	bf00      	nop
 8004c42:	e7fd      	b.n	8004c40 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004c44:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004c4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d00d      	beq.n	8004c6c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004c50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c52:	2201      	movs	r2, #1
 8004c54:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004c58:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004c5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c5e:	9300      	str	r3, [sp, #0]
 8004c60:	4613      	mov	r3, r2
 8004c62:	687a      	ldr	r2, [r7, #4]
 8004c64:	68b9      	ldr	r1, [r7, #8]
 8004c66:	68f8      	ldr	r0, [r7, #12]
 8004c68:	f000 f805 	bl	8004c76 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004c6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3730      	adds	r7, #48	@ 0x30
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}

08004c76 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004c76:	b580      	push	{r7, lr}
 8004c78:	b084      	sub	sp, #16
 8004c7a:	af00      	add	r7, sp, #0
 8004c7c:	60f8      	str	r0, [r7, #12]
 8004c7e:	60b9      	str	r1, [r7, #8]
 8004c80:	607a      	str	r2, [r7, #4]
 8004c82:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d103      	bne.n	8004c92 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004c8a:	69bb      	ldr	r3, [r7, #24]
 8004c8c:	69ba      	ldr	r2, [r7, #24]
 8004c8e:	601a      	str	r2, [r3, #0]
 8004c90:	e002      	b.n	8004c98 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004c92:	69bb      	ldr	r3, [r7, #24]
 8004c94:	687a      	ldr	r2, [r7, #4]
 8004c96:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004c98:	69bb      	ldr	r3, [r7, #24]
 8004c9a:	68fa      	ldr	r2, [r7, #12]
 8004c9c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004c9e:	69bb      	ldr	r3, [r7, #24]
 8004ca0:	68ba      	ldr	r2, [r7, #8]
 8004ca2:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004ca4:	2101      	movs	r1, #1
 8004ca6:	69b8      	ldr	r0, [r7, #24]
 8004ca8:	f7ff fefe 	bl	8004aa8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004cac:	69bb      	ldr	r3, [r7, #24]
 8004cae:	78fa      	ldrb	r2, [r7, #3]
 8004cb0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004cb4:	bf00      	nop
 8004cb6:	3710      	adds	r7, #16
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}

08004cbc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b08e      	sub	sp, #56	@ 0x38
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	60f8      	str	r0, [r7, #12]
 8004cc4:	60b9      	str	r1, [r7, #8]
 8004cc6:	607a      	str	r2, [r7, #4]
 8004cc8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004cca:	2300      	movs	r3, #0
 8004ccc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004cd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d10b      	bne.n	8004cf0 <xQueueGenericSend+0x34>
	__asm volatile
 8004cd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cdc:	f383 8811 	msr	BASEPRI, r3
 8004ce0:	f3bf 8f6f 	isb	sy
 8004ce4:	f3bf 8f4f 	dsb	sy
 8004ce8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004cea:	bf00      	nop
 8004cec:	bf00      	nop
 8004cee:	e7fd      	b.n	8004cec <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d103      	bne.n	8004cfe <xQueueGenericSend+0x42>
 8004cf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d101      	bne.n	8004d02 <xQueueGenericSend+0x46>
 8004cfe:	2301      	movs	r3, #1
 8004d00:	e000      	b.n	8004d04 <xQueueGenericSend+0x48>
 8004d02:	2300      	movs	r3, #0
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d10b      	bne.n	8004d20 <xQueueGenericSend+0x64>
	__asm volatile
 8004d08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d0c:	f383 8811 	msr	BASEPRI, r3
 8004d10:	f3bf 8f6f 	isb	sy
 8004d14:	f3bf 8f4f 	dsb	sy
 8004d18:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004d1a:	bf00      	nop
 8004d1c:	bf00      	nop
 8004d1e:	e7fd      	b.n	8004d1c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	2b02      	cmp	r3, #2
 8004d24:	d103      	bne.n	8004d2e <xQueueGenericSend+0x72>
 8004d26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d2a:	2b01      	cmp	r3, #1
 8004d2c:	d101      	bne.n	8004d32 <xQueueGenericSend+0x76>
 8004d2e:	2301      	movs	r3, #1
 8004d30:	e000      	b.n	8004d34 <xQueueGenericSend+0x78>
 8004d32:	2300      	movs	r3, #0
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d10b      	bne.n	8004d50 <xQueueGenericSend+0x94>
	__asm volatile
 8004d38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d3c:	f383 8811 	msr	BASEPRI, r3
 8004d40:	f3bf 8f6f 	isb	sy
 8004d44:	f3bf 8f4f 	dsb	sy
 8004d48:	623b      	str	r3, [r7, #32]
}
 8004d4a:	bf00      	nop
 8004d4c:	bf00      	nop
 8004d4e:	e7fd      	b.n	8004d4c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004d50:	f001 f9fc 	bl	800614c <xTaskGetSchedulerState>
 8004d54:	4603      	mov	r3, r0
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d102      	bne.n	8004d60 <xQueueGenericSend+0xa4>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d101      	bne.n	8004d64 <xQueueGenericSend+0xa8>
 8004d60:	2301      	movs	r3, #1
 8004d62:	e000      	b.n	8004d66 <xQueueGenericSend+0xaa>
 8004d64:	2300      	movs	r3, #0
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d10b      	bne.n	8004d82 <xQueueGenericSend+0xc6>
	__asm volatile
 8004d6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d6e:	f383 8811 	msr	BASEPRI, r3
 8004d72:	f3bf 8f6f 	isb	sy
 8004d76:	f3bf 8f4f 	dsb	sy
 8004d7a:	61fb      	str	r3, [r7, #28]
}
 8004d7c:	bf00      	nop
 8004d7e:	bf00      	nop
 8004d80:	e7fd      	b.n	8004d7e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004d82:	f001 ff51 	bl	8006c28 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004d86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d88:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004d8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d8e:	429a      	cmp	r2, r3
 8004d90:	d302      	bcc.n	8004d98 <xQueueGenericSend+0xdc>
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	2b02      	cmp	r3, #2
 8004d96:	d129      	bne.n	8004dec <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004d98:	683a      	ldr	r2, [r7, #0]
 8004d9a:	68b9      	ldr	r1, [r7, #8]
 8004d9c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004d9e:	f000 fa0f 	bl	80051c0 <prvCopyDataToQueue>
 8004da2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004da4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004da6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d010      	beq.n	8004dce <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004dac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dae:	3324      	adds	r3, #36	@ 0x24
 8004db0:	4618      	mov	r0, r3
 8004db2:	f001 f805 	bl	8005dc0 <xTaskRemoveFromEventList>
 8004db6:	4603      	mov	r3, r0
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d013      	beq.n	8004de4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004dbc:	4b3f      	ldr	r3, [pc, #252]	@ (8004ebc <xQueueGenericSend+0x200>)
 8004dbe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004dc2:	601a      	str	r2, [r3, #0]
 8004dc4:	f3bf 8f4f 	dsb	sy
 8004dc8:	f3bf 8f6f 	isb	sy
 8004dcc:	e00a      	b.n	8004de4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004dce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d007      	beq.n	8004de4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004dd4:	4b39      	ldr	r3, [pc, #228]	@ (8004ebc <xQueueGenericSend+0x200>)
 8004dd6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004dda:	601a      	str	r2, [r3, #0]
 8004ddc:	f3bf 8f4f 	dsb	sy
 8004de0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004de4:	f001 ff52 	bl	8006c8c <vPortExitCritical>
				return pdPASS;
 8004de8:	2301      	movs	r3, #1
 8004dea:	e063      	b.n	8004eb4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d103      	bne.n	8004dfa <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004df2:	f001 ff4b 	bl	8006c8c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004df6:	2300      	movs	r3, #0
 8004df8:	e05c      	b.n	8004eb4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004dfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d106      	bne.n	8004e0e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004e00:	f107 0314 	add.w	r3, r7, #20
 8004e04:	4618      	mov	r0, r3
 8004e06:	f001 f83f 	bl	8005e88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004e0e:	f001 ff3d 	bl	8006c8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004e12:	f000 fda7 	bl	8005964 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004e16:	f001 ff07 	bl	8006c28 <vPortEnterCritical>
 8004e1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e1c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004e20:	b25b      	sxtb	r3, r3
 8004e22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e26:	d103      	bne.n	8004e30 <xQueueGenericSend+0x174>
 8004e28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004e30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e32:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004e36:	b25b      	sxtb	r3, r3
 8004e38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e3c:	d103      	bne.n	8004e46 <xQueueGenericSend+0x18a>
 8004e3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e40:	2200      	movs	r2, #0
 8004e42:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004e46:	f001 ff21 	bl	8006c8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004e4a:	1d3a      	adds	r2, r7, #4
 8004e4c:	f107 0314 	add.w	r3, r7, #20
 8004e50:	4611      	mov	r1, r2
 8004e52:	4618      	mov	r0, r3
 8004e54:	f001 f82e 	bl	8005eb4 <xTaskCheckForTimeOut>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d124      	bne.n	8004ea8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004e5e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004e60:	f000 faa6 	bl	80053b0 <prvIsQueueFull>
 8004e64:	4603      	mov	r3, r0
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d018      	beq.n	8004e9c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004e6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e6c:	3310      	adds	r3, #16
 8004e6e:	687a      	ldr	r2, [r7, #4]
 8004e70:	4611      	mov	r1, r2
 8004e72:	4618      	mov	r0, r3
 8004e74:	f000 ff52 	bl	8005d1c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004e78:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004e7a:	f000 fa31 	bl	80052e0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004e7e:	f000 fd7f 	bl	8005980 <xTaskResumeAll>
 8004e82:	4603      	mov	r3, r0
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	f47f af7c 	bne.w	8004d82 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8004e8a:	4b0c      	ldr	r3, [pc, #48]	@ (8004ebc <xQueueGenericSend+0x200>)
 8004e8c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e90:	601a      	str	r2, [r3, #0]
 8004e92:	f3bf 8f4f 	dsb	sy
 8004e96:	f3bf 8f6f 	isb	sy
 8004e9a:	e772      	b.n	8004d82 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004e9c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004e9e:	f000 fa1f 	bl	80052e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004ea2:	f000 fd6d 	bl	8005980 <xTaskResumeAll>
 8004ea6:	e76c      	b.n	8004d82 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004ea8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004eaa:	f000 fa19 	bl	80052e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004eae:	f000 fd67 	bl	8005980 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004eb2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	3738      	adds	r7, #56	@ 0x38
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}
 8004ebc:	e000ed04 	.word	0xe000ed04

08004ec0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b090      	sub	sp, #64	@ 0x40
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	60f8      	str	r0, [r7, #12]
 8004ec8:	60b9      	str	r1, [r7, #8]
 8004eca:	607a      	str	r2, [r7, #4]
 8004ecc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8004ed2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d10b      	bne.n	8004ef0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004ed8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004edc:	f383 8811 	msr	BASEPRI, r3
 8004ee0:	f3bf 8f6f 	isb	sy
 8004ee4:	f3bf 8f4f 	dsb	sy
 8004ee8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004eea:	bf00      	nop
 8004eec:	bf00      	nop
 8004eee:	e7fd      	b.n	8004eec <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d103      	bne.n	8004efe <xQueueGenericSendFromISR+0x3e>
 8004ef6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d101      	bne.n	8004f02 <xQueueGenericSendFromISR+0x42>
 8004efe:	2301      	movs	r3, #1
 8004f00:	e000      	b.n	8004f04 <xQueueGenericSendFromISR+0x44>
 8004f02:	2300      	movs	r3, #0
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d10b      	bne.n	8004f20 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004f08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f0c:	f383 8811 	msr	BASEPRI, r3
 8004f10:	f3bf 8f6f 	isb	sy
 8004f14:	f3bf 8f4f 	dsb	sy
 8004f18:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004f1a:	bf00      	nop
 8004f1c:	bf00      	nop
 8004f1e:	e7fd      	b.n	8004f1c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	2b02      	cmp	r3, #2
 8004f24:	d103      	bne.n	8004f2e <xQueueGenericSendFromISR+0x6e>
 8004f26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f2a:	2b01      	cmp	r3, #1
 8004f2c:	d101      	bne.n	8004f32 <xQueueGenericSendFromISR+0x72>
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e000      	b.n	8004f34 <xQueueGenericSendFromISR+0x74>
 8004f32:	2300      	movs	r3, #0
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d10b      	bne.n	8004f50 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004f38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f3c:	f383 8811 	msr	BASEPRI, r3
 8004f40:	f3bf 8f6f 	isb	sy
 8004f44:	f3bf 8f4f 	dsb	sy
 8004f48:	623b      	str	r3, [r7, #32]
}
 8004f4a:	bf00      	nop
 8004f4c:	bf00      	nop
 8004f4e:	e7fd      	b.n	8004f4c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004f50:	f001 ff4a 	bl	8006de8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004f54:	f3ef 8211 	mrs	r2, BASEPRI
 8004f58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f5c:	f383 8811 	msr	BASEPRI, r3
 8004f60:	f3bf 8f6f 	isb	sy
 8004f64:	f3bf 8f4f 	dsb	sy
 8004f68:	61fa      	str	r2, [r7, #28]
 8004f6a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004f6c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004f6e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004f70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f72:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004f74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f78:	429a      	cmp	r2, r3
 8004f7a:	d302      	bcc.n	8004f82 <xQueueGenericSendFromISR+0xc2>
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	2b02      	cmp	r3, #2
 8004f80:	d12f      	bne.n	8004fe2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004f82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f84:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004f88:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004f8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f90:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004f92:	683a      	ldr	r2, [r7, #0]
 8004f94:	68b9      	ldr	r1, [r7, #8]
 8004f96:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004f98:	f000 f912 	bl	80051c0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004f9c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8004fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fa4:	d112      	bne.n	8004fcc <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004fa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d016      	beq.n	8004fdc <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004fae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fb0:	3324      	adds	r3, #36	@ 0x24
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	f000 ff04 	bl	8005dc0 <xTaskRemoveFromEventList>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d00e      	beq.n	8004fdc <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d00b      	beq.n	8004fdc <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	601a      	str	r2, [r3, #0]
 8004fca:	e007      	b.n	8004fdc <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004fcc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004fd0:	3301      	adds	r3, #1
 8004fd2:	b2db      	uxtb	r3, r3
 8004fd4:	b25a      	sxtb	r2, r3
 8004fd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fd8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8004fe0:	e001      	b.n	8004fe6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004fe6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fe8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004ff0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004ff2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	3740      	adds	r7, #64	@ 0x40
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}

08004ffc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b08c      	sub	sp, #48	@ 0x30
 8005000:	af00      	add	r7, sp, #0
 8005002:	60f8      	str	r0, [r7, #12]
 8005004:	60b9      	str	r1, [r7, #8]
 8005006:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005008:	2300      	movs	r3, #0
 800500a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005010:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005012:	2b00      	cmp	r3, #0
 8005014:	d10b      	bne.n	800502e <xQueueReceive+0x32>
	__asm volatile
 8005016:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800501a:	f383 8811 	msr	BASEPRI, r3
 800501e:	f3bf 8f6f 	isb	sy
 8005022:	f3bf 8f4f 	dsb	sy
 8005026:	623b      	str	r3, [r7, #32]
}
 8005028:	bf00      	nop
 800502a:	bf00      	nop
 800502c:	e7fd      	b.n	800502a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d103      	bne.n	800503c <xQueueReceive+0x40>
 8005034:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005036:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005038:	2b00      	cmp	r3, #0
 800503a:	d101      	bne.n	8005040 <xQueueReceive+0x44>
 800503c:	2301      	movs	r3, #1
 800503e:	e000      	b.n	8005042 <xQueueReceive+0x46>
 8005040:	2300      	movs	r3, #0
 8005042:	2b00      	cmp	r3, #0
 8005044:	d10b      	bne.n	800505e <xQueueReceive+0x62>
	__asm volatile
 8005046:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800504a:	f383 8811 	msr	BASEPRI, r3
 800504e:	f3bf 8f6f 	isb	sy
 8005052:	f3bf 8f4f 	dsb	sy
 8005056:	61fb      	str	r3, [r7, #28]
}
 8005058:	bf00      	nop
 800505a:	bf00      	nop
 800505c:	e7fd      	b.n	800505a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800505e:	f001 f875 	bl	800614c <xTaskGetSchedulerState>
 8005062:	4603      	mov	r3, r0
 8005064:	2b00      	cmp	r3, #0
 8005066:	d102      	bne.n	800506e <xQueueReceive+0x72>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d101      	bne.n	8005072 <xQueueReceive+0x76>
 800506e:	2301      	movs	r3, #1
 8005070:	e000      	b.n	8005074 <xQueueReceive+0x78>
 8005072:	2300      	movs	r3, #0
 8005074:	2b00      	cmp	r3, #0
 8005076:	d10b      	bne.n	8005090 <xQueueReceive+0x94>
	__asm volatile
 8005078:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800507c:	f383 8811 	msr	BASEPRI, r3
 8005080:	f3bf 8f6f 	isb	sy
 8005084:	f3bf 8f4f 	dsb	sy
 8005088:	61bb      	str	r3, [r7, #24]
}
 800508a:	bf00      	nop
 800508c:	bf00      	nop
 800508e:	e7fd      	b.n	800508c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005090:	f001 fdca 	bl	8006c28 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005094:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005096:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005098:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800509a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800509c:	2b00      	cmp	r3, #0
 800509e:	d01f      	beq.n	80050e0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80050a0:	68b9      	ldr	r1, [r7, #8]
 80050a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80050a4:	f000 f8f6 	bl	8005294 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80050a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050aa:	1e5a      	subs	r2, r3, #1
 80050ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050ae:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80050b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050b2:	691b      	ldr	r3, [r3, #16]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d00f      	beq.n	80050d8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80050b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050ba:	3310      	adds	r3, #16
 80050bc:	4618      	mov	r0, r3
 80050be:	f000 fe7f 	bl	8005dc0 <xTaskRemoveFromEventList>
 80050c2:	4603      	mov	r3, r0
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d007      	beq.n	80050d8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80050c8:	4b3c      	ldr	r3, [pc, #240]	@ (80051bc <xQueueReceive+0x1c0>)
 80050ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80050ce:	601a      	str	r2, [r3, #0]
 80050d0:	f3bf 8f4f 	dsb	sy
 80050d4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80050d8:	f001 fdd8 	bl	8006c8c <vPortExitCritical>
				return pdPASS;
 80050dc:	2301      	movs	r3, #1
 80050de:	e069      	b.n	80051b4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d103      	bne.n	80050ee <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80050e6:	f001 fdd1 	bl	8006c8c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80050ea:	2300      	movs	r3, #0
 80050ec:	e062      	b.n	80051b4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80050ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d106      	bne.n	8005102 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80050f4:	f107 0310 	add.w	r3, r7, #16
 80050f8:	4618      	mov	r0, r3
 80050fa:	f000 fec5 	bl	8005e88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80050fe:	2301      	movs	r3, #1
 8005100:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005102:	f001 fdc3 	bl	8006c8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005106:	f000 fc2d 	bl	8005964 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800510a:	f001 fd8d 	bl	8006c28 <vPortEnterCritical>
 800510e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005110:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005114:	b25b      	sxtb	r3, r3
 8005116:	f1b3 3fff 	cmp.w	r3, #4294967295
 800511a:	d103      	bne.n	8005124 <xQueueReceive+0x128>
 800511c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800511e:	2200      	movs	r2, #0
 8005120:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005124:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005126:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800512a:	b25b      	sxtb	r3, r3
 800512c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005130:	d103      	bne.n	800513a <xQueueReceive+0x13e>
 8005132:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005134:	2200      	movs	r2, #0
 8005136:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800513a:	f001 fda7 	bl	8006c8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800513e:	1d3a      	adds	r2, r7, #4
 8005140:	f107 0310 	add.w	r3, r7, #16
 8005144:	4611      	mov	r1, r2
 8005146:	4618      	mov	r0, r3
 8005148:	f000 feb4 	bl	8005eb4 <xTaskCheckForTimeOut>
 800514c:	4603      	mov	r3, r0
 800514e:	2b00      	cmp	r3, #0
 8005150:	d123      	bne.n	800519a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005152:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005154:	f000 f916 	bl	8005384 <prvIsQueueEmpty>
 8005158:	4603      	mov	r3, r0
 800515a:	2b00      	cmp	r3, #0
 800515c:	d017      	beq.n	800518e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800515e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005160:	3324      	adds	r3, #36	@ 0x24
 8005162:	687a      	ldr	r2, [r7, #4]
 8005164:	4611      	mov	r1, r2
 8005166:	4618      	mov	r0, r3
 8005168:	f000 fdd8 	bl	8005d1c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800516c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800516e:	f000 f8b7 	bl	80052e0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005172:	f000 fc05 	bl	8005980 <xTaskResumeAll>
 8005176:	4603      	mov	r3, r0
 8005178:	2b00      	cmp	r3, #0
 800517a:	d189      	bne.n	8005090 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800517c:	4b0f      	ldr	r3, [pc, #60]	@ (80051bc <xQueueReceive+0x1c0>)
 800517e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005182:	601a      	str	r2, [r3, #0]
 8005184:	f3bf 8f4f 	dsb	sy
 8005188:	f3bf 8f6f 	isb	sy
 800518c:	e780      	b.n	8005090 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800518e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005190:	f000 f8a6 	bl	80052e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005194:	f000 fbf4 	bl	8005980 <xTaskResumeAll>
 8005198:	e77a      	b.n	8005090 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800519a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800519c:	f000 f8a0 	bl	80052e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80051a0:	f000 fbee 	bl	8005980 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80051a4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80051a6:	f000 f8ed 	bl	8005384 <prvIsQueueEmpty>
 80051aa:	4603      	mov	r3, r0
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	f43f af6f 	beq.w	8005090 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80051b2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	3730      	adds	r7, #48	@ 0x30
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd80      	pop	{r7, pc}
 80051bc:	e000ed04 	.word	0xe000ed04

080051c0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b086      	sub	sp, #24
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	60f8      	str	r0, [r7, #12]
 80051c8:	60b9      	str	r1, [r7, #8]
 80051ca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80051cc:	2300      	movs	r3, #0
 80051ce:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051d4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d10d      	bne.n	80051fa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d14d      	bne.n	8005282 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	4618      	mov	r0, r3
 80051ec:	f000 ffcc 	bl	8006188 <xTaskPriorityDisinherit>
 80051f0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2200      	movs	r2, #0
 80051f6:	609a      	str	r2, [r3, #8]
 80051f8:	e043      	b.n	8005282 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d119      	bne.n	8005234 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	6858      	ldr	r0, [r3, #4]
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005208:	461a      	mov	r2, r3
 800520a:	68b9      	ldr	r1, [r7, #8]
 800520c:	f002 fa16 	bl	800763c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	685a      	ldr	r2, [r3, #4]
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005218:	441a      	add	r2, r3
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	685a      	ldr	r2, [r3, #4]
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	689b      	ldr	r3, [r3, #8]
 8005226:	429a      	cmp	r2, r3
 8005228:	d32b      	bcc.n	8005282 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681a      	ldr	r2, [r3, #0]
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	605a      	str	r2, [r3, #4]
 8005232:	e026      	b.n	8005282 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	68d8      	ldr	r0, [r3, #12]
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800523c:	461a      	mov	r2, r3
 800523e:	68b9      	ldr	r1, [r7, #8]
 8005240:	f002 f9fc 	bl	800763c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	68da      	ldr	r2, [r3, #12]
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800524c:	425b      	negs	r3, r3
 800524e:	441a      	add	r2, r3
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	68da      	ldr	r2, [r3, #12]
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	429a      	cmp	r2, r3
 800525e:	d207      	bcs.n	8005270 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	689a      	ldr	r2, [r3, #8]
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005268:	425b      	negs	r3, r3
 800526a:	441a      	add	r2, r3
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2b02      	cmp	r3, #2
 8005274:	d105      	bne.n	8005282 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d002      	beq.n	8005282 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	3b01      	subs	r3, #1
 8005280:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	1c5a      	adds	r2, r3, #1
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800528a:	697b      	ldr	r3, [r7, #20]
}
 800528c:	4618      	mov	r0, r3
 800528e:	3718      	adds	r7, #24
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}

08005294 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b082      	sub	sp, #8
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
 800529c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d018      	beq.n	80052d8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	68da      	ldr	r2, [r3, #12]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052ae:	441a      	add	r2, r3
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	68da      	ldr	r2, [r3, #12]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	429a      	cmp	r2, r3
 80052be:	d303      	bcc.n	80052c8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681a      	ldr	r2, [r3, #0]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	68d9      	ldr	r1, [r3, #12]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052d0:	461a      	mov	r2, r3
 80052d2:	6838      	ldr	r0, [r7, #0]
 80052d4:	f002 f9b2 	bl	800763c <memcpy>
	}
}
 80052d8:	bf00      	nop
 80052da:	3708      	adds	r7, #8
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}

080052e0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b084      	sub	sp, #16
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80052e8:	f001 fc9e 	bl	8006c28 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80052f2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80052f4:	e011      	b.n	800531a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d012      	beq.n	8005324 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	3324      	adds	r3, #36	@ 0x24
 8005302:	4618      	mov	r0, r3
 8005304:	f000 fd5c 	bl	8005dc0 <xTaskRemoveFromEventList>
 8005308:	4603      	mov	r3, r0
 800530a:	2b00      	cmp	r3, #0
 800530c:	d001      	beq.n	8005312 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800530e:	f000 fe35 	bl	8005f7c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005312:	7bfb      	ldrb	r3, [r7, #15]
 8005314:	3b01      	subs	r3, #1
 8005316:	b2db      	uxtb	r3, r3
 8005318:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800531a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800531e:	2b00      	cmp	r3, #0
 8005320:	dce9      	bgt.n	80052f6 <prvUnlockQueue+0x16>
 8005322:	e000      	b.n	8005326 <prvUnlockQueue+0x46>
					break;
 8005324:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	22ff      	movs	r2, #255	@ 0xff
 800532a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800532e:	f001 fcad 	bl	8006c8c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005332:	f001 fc79 	bl	8006c28 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800533c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800533e:	e011      	b.n	8005364 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	691b      	ldr	r3, [r3, #16]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d012      	beq.n	800536e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	3310      	adds	r3, #16
 800534c:	4618      	mov	r0, r3
 800534e:	f000 fd37 	bl	8005dc0 <xTaskRemoveFromEventList>
 8005352:	4603      	mov	r3, r0
 8005354:	2b00      	cmp	r3, #0
 8005356:	d001      	beq.n	800535c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005358:	f000 fe10 	bl	8005f7c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800535c:	7bbb      	ldrb	r3, [r7, #14]
 800535e:	3b01      	subs	r3, #1
 8005360:	b2db      	uxtb	r3, r3
 8005362:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005364:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005368:	2b00      	cmp	r3, #0
 800536a:	dce9      	bgt.n	8005340 <prvUnlockQueue+0x60>
 800536c:	e000      	b.n	8005370 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800536e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	22ff      	movs	r2, #255	@ 0xff
 8005374:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005378:	f001 fc88 	bl	8006c8c <vPortExitCritical>
}
 800537c:	bf00      	nop
 800537e:	3710      	adds	r7, #16
 8005380:	46bd      	mov	sp, r7
 8005382:	bd80      	pop	{r7, pc}

08005384 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b084      	sub	sp, #16
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800538c:	f001 fc4c 	bl	8006c28 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005394:	2b00      	cmp	r3, #0
 8005396:	d102      	bne.n	800539e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005398:	2301      	movs	r3, #1
 800539a:	60fb      	str	r3, [r7, #12]
 800539c:	e001      	b.n	80053a2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800539e:	2300      	movs	r3, #0
 80053a0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80053a2:	f001 fc73 	bl	8006c8c <vPortExitCritical>

	return xReturn;
 80053a6:	68fb      	ldr	r3, [r7, #12]
}
 80053a8:	4618      	mov	r0, r3
 80053aa:	3710      	adds	r7, #16
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bd80      	pop	{r7, pc}

080053b0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b084      	sub	sp, #16
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80053b8:	f001 fc36 	bl	8006c28 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053c4:	429a      	cmp	r2, r3
 80053c6:	d102      	bne.n	80053ce <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80053c8:	2301      	movs	r3, #1
 80053ca:	60fb      	str	r3, [r7, #12]
 80053cc:	e001      	b.n	80053d2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80053ce:	2300      	movs	r3, #0
 80053d0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80053d2:	f001 fc5b 	bl	8006c8c <vPortExitCritical>

	return xReturn;
 80053d6:	68fb      	ldr	r3, [r7, #12]
}
 80053d8:	4618      	mov	r0, r3
 80053da:	3710      	adds	r7, #16
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}

080053e0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80053e0:	b480      	push	{r7}
 80053e2:	b085      	sub	sp, #20
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
 80053e8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80053ea:	2300      	movs	r3, #0
 80053ec:	60fb      	str	r3, [r7, #12]
 80053ee:	e014      	b.n	800541a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80053f0:	4a0f      	ldr	r2, [pc, #60]	@ (8005430 <vQueueAddToRegistry+0x50>)
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d10b      	bne.n	8005414 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80053fc:	490c      	ldr	r1, [pc, #48]	@ (8005430 <vQueueAddToRegistry+0x50>)
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	683a      	ldr	r2, [r7, #0]
 8005402:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005406:	4a0a      	ldr	r2, [pc, #40]	@ (8005430 <vQueueAddToRegistry+0x50>)
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	00db      	lsls	r3, r3, #3
 800540c:	4413      	add	r3, r2
 800540e:	687a      	ldr	r2, [r7, #4]
 8005410:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005412:	e006      	b.n	8005422 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	3301      	adds	r3, #1
 8005418:	60fb      	str	r3, [r7, #12]
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	2b07      	cmp	r3, #7
 800541e:	d9e7      	bls.n	80053f0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005420:	bf00      	nop
 8005422:	bf00      	nop
 8005424:	3714      	adds	r7, #20
 8005426:	46bd      	mov	sp, r7
 8005428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542c:	4770      	bx	lr
 800542e:	bf00      	nop
 8005430:	20000a68 	.word	0x20000a68

08005434 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005434:	b580      	push	{r7, lr}
 8005436:	b086      	sub	sp, #24
 8005438:	af00      	add	r7, sp, #0
 800543a:	60f8      	str	r0, [r7, #12]
 800543c:	60b9      	str	r1, [r7, #8]
 800543e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005444:	f001 fbf0 	bl	8006c28 <vPortEnterCritical>
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800544e:	b25b      	sxtb	r3, r3
 8005450:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005454:	d103      	bne.n	800545e <vQueueWaitForMessageRestricted+0x2a>
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	2200      	movs	r2, #0
 800545a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005464:	b25b      	sxtb	r3, r3
 8005466:	f1b3 3fff 	cmp.w	r3, #4294967295
 800546a:	d103      	bne.n	8005474 <vQueueWaitForMessageRestricted+0x40>
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	2200      	movs	r2, #0
 8005470:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005474:	f001 fc0a 	bl	8006c8c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800547c:	2b00      	cmp	r3, #0
 800547e:	d106      	bne.n	800548e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	3324      	adds	r3, #36	@ 0x24
 8005484:	687a      	ldr	r2, [r7, #4]
 8005486:	68b9      	ldr	r1, [r7, #8]
 8005488:	4618      	mov	r0, r3
 800548a:	f000 fc6d 	bl	8005d68 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800548e:	6978      	ldr	r0, [r7, #20]
 8005490:	f7ff ff26 	bl	80052e0 <prvUnlockQueue>
	}
 8005494:	bf00      	nop
 8005496:	3718      	adds	r7, #24
 8005498:	46bd      	mov	sp, r7
 800549a:	bd80      	pop	{r7, pc}

0800549c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800549c:	b580      	push	{r7, lr}
 800549e:	b08e      	sub	sp, #56	@ 0x38
 80054a0:	af04      	add	r7, sp, #16
 80054a2:	60f8      	str	r0, [r7, #12]
 80054a4:	60b9      	str	r1, [r7, #8]
 80054a6:	607a      	str	r2, [r7, #4]
 80054a8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80054aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d10b      	bne.n	80054c8 <xTaskCreateStatic+0x2c>
	__asm volatile
 80054b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054b4:	f383 8811 	msr	BASEPRI, r3
 80054b8:	f3bf 8f6f 	isb	sy
 80054bc:	f3bf 8f4f 	dsb	sy
 80054c0:	623b      	str	r3, [r7, #32]
}
 80054c2:	bf00      	nop
 80054c4:	bf00      	nop
 80054c6:	e7fd      	b.n	80054c4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80054c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d10b      	bne.n	80054e6 <xTaskCreateStatic+0x4a>
	__asm volatile
 80054ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054d2:	f383 8811 	msr	BASEPRI, r3
 80054d6:	f3bf 8f6f 	isb	sy
 80054da:	f3bf 8f4f 	dsb	sy
 80054de:	61fb      	str	r3, [r7, #28]
}
 80054e0:	bf00      	nop
 80054e2:	bf00      	nop
 80054e4:	e7fd      	b.n	80054e2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80054e6:	23a8      	movs	r3, #168	@ 0xa8
 80054e8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	2ba8      	cmp	r3, #168	@ 0xa8
 80054ee:	d00b      	beq.n	8005508 <xTaskCreateStatic+0x6c>
	__asm volatile
 80054f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054f4:	f383 8811 	msr	BASEPRI, r3
 80054f8:	f3bf 8f6f 	isb	sy
 80054fc:	f3bf 8f4f 	dsb	sy
 8005500:	61bb      	str	r3, [r7, #24]
}
 8005502:	bf00      	nop
 8005504:	bf00      	nop
 8005506:	e7fd      	b.n	8005504 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005508:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800550a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800550c:	2b00      	cmp	r3, #0
 800550e:	d01e      	beq.n	800554e <xTaskCreateStatic+0xb2>
 8005510:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005512:	2b00      	cmp	r3, #0
 8005514:	d01b      	beq.n	800554e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005516:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005518:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800551a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800551c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800551e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005522:	2202      	movs	r2, #2
 8005524:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005528:	2300      	movs	r3, #0
 800552a:	9303      	str	r3, [sp, #12]
 800552c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800552e:	9302      	str	r3, [sp, #8]
 8005530:	f107 0314 	add.w	r3, r7, #20
 8005534:	9301      	str	r3, [sp, #4]
 8005536:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005538:	9300      	str	r3, [sp, #0]
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	687a      	ldr	r2, [r7, #4]
 800553e:	68b9      	ldr	r1, [r7, #8]
 8005540:	68f8      	ldr	r0, [r7, #12]
 8005542:	f000 f851 	bl	80055e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005546:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005548:	f000 f8f6 	bl	8005738 <prvAddNewTaskToReadyList>
 800554c:	e001      	b.n	8005552 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800554e:	2300      	movs	r3, #0
 8005550:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005552:	697b      	ldr	r3, [r7, #20]
	}
 8005554:	4618      	mov	r0, r3
 8005556:	3728      	adds	r7, #40	@ 0x28
 8005558:	46bd      	mov	sp, r7
 800555a:	bd80      	pop	{r7, pc}

0800555c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800555c:	b580      	push	{r7, lr}
 800555e:	b08c      	sub	sp, #48	@ 0x30
 8005560:	af04      	add	r7, sp, #16
 8005562:	60f8      	str	r0, [r7, #12]
 8005564:	60b9      	str	r1, [r7, #8]
 8005566:	603b      	str	r3, [r7, #0]
 8005568:	4613      	mov	r3, r2
 800556a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800556c:	88fb      	ldrh	r3, [r7, #6]
 800556e:	009b      	lsls	r3, r3, #2
 8005570:	4618      	mov	r0, r3
 8005572:	f001 fc7b 	bl	8006e6c <pvPortMalloc>
 8005576:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d00e      	beq.n	800559c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800557e:	20a8      	movs	r0, #168	@ 0xa8
 8005580:	f001 fc74 	bl	8006e6c <pvPortMalloc>
 8005584:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005586:	69fb      	ldr	r3, [r7, #28]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d003      	beq.n	8005594 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800558c:	69fb      	ldr	r3, [r7, #28]
 800558e:	697a      	ldr	r2, [r7, #20]
 8005590:	631a      	str	r2, [r3, #48]	@ 0x30
 8005592:	e005      	b.n	80055a0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005594:	6978      	ldr	r0, [r7, #20]
 8005596:	f001 fd37 	bl	8007008 <vPortFree>
 800559a:	e001      	b.n	80055a0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800559c:	2300      	movs	r3, #0
 800559e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80055a0:	69fb      	ldr	r3, [r7, #28]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d017      	beq.n	80055d6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80055a6:	69fb      	ldr	r3, [r7, #28]
 80055a8:	2200      	movs	r2, #0
 80055aa:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80055ae:	88fa      	ldrh	r2, [r7, #6]
 80055b0:	2300      	movs	r3, #0
 80055b2:	9303      	str	r3, [sp, #12]
 80055b4:	69fb      	ldr	r3, [r7, #28]
 80055b6:	9302      	str	r3, [sp, #8]
 80055b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055ba:	9301      	str	r3, [sp, #4]
 80055bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055be:	9300      	str	r3, [sp, #0]
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	68b9      	ldr	r1, [r7, #8]
 80055c4:	68f8      	ldr	r0, [r7, #12]
 80055c6:	f000 f80f 	bl	80055e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80055ca:	69f8      	ldr	r0, [r7, #28]
 80055cc:	f000 f8b4 	bl	8005738 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80055d0:	2301      	movs	r3, #1
 80055d2:	61bb      	str	r3, [r7, #24]
 80055d4:	e002      	b.n	80055dc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80055d6:	f04f 33ff 	mov.w	r3, #4294967295
 80055da:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80055dc:	69bb      	ldr	r3, [r7, #24]
	}
 80055de:	4618      	mov	r0, r3
 80055e0:	3720      	adds	r7, #32
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}
	...

080055e8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b088      	sub	sp, #32
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	60f8      	str	r0, [r7, #12]
 80055f0:	60b9      	str	r1, [r7, #8]
 80055f2:	607a      	str	r2, [r7, #4]
 80055f4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80055f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055f8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	009b      	lsls	r3, r3, #2
 80055fe:	461a      	mov	r2, r3
 8005600:	21a5      	movs	r1, #165	@ 0xa5
 8005602:	f001 ff97 	bl	8007534 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005606:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005608:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005610:	3b01      	subs	r3, #1
 8005612:	009b      	lsls	r3, r3, #2
 8005614:	4413      	add	r3, r2
 8005616:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005618:	69bb      	ldr	r3, [r7, #24]
 800561a:	f023 0307 	bic.w	r3, r3, #7
 800561e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005620:	69bb      	ldr	r3, [r7, #24]
 8005622:	f003 0307 	and.w	r3, r3, #7
 8005626:	2b00      	cmp	r3, #0
 8005628:	d00b      	beq.n	8005642 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800562a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800562e:	f383 8811 	msr	BASEPRI, r3
 8005632:	f3bf 8f6f 	isb	sy
 8005636:	f3bf 8f4f 	dsb	sy
 800563a:	617b      	str	r3, [r7, #20]
}
 800563c:	bf00      	nop
 800563e:	bf00      	nop
 8005640:	e7fd      	b.n	800563e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d01f      	beq.n	8005688 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005648:	2300      	movs	r3, #0
 800564a:	61fb      	str	r3, [r7, #28]
 800564c:	e012      	b.n	8005674 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800564e:	68ba      	ldr	r2, [r7, #8]
 8005650:	69fb      	ldr	r3, [r7, #28]
 8005652:	4413      	add	r3, r2
 8005654:	7819      	ldrb	r1, [r3, #0]
 8005656:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005658:	69fb      	ldr	r3, [r7, #28]
 800565a:	4413      	add	r3, r2
 800565c:	3334      	adds	r3, #52	@ 0x34
 800565e:	460a      	mov	r2, r1
 8005660:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005662:	68ba      	ldr	r2, [r7, #8]
 8005664:	69fb      	ldr	r3, [r7, #28]
 8005666:	4413      	add	r3, r2
 8005668:	781b      	ldrb	r3, [r3, #0]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d006      	beq.n	800567c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800566e:	69fb      	ldr	r3, [r7, #28]
 8005670:	3301      	adds	r3, #1
 8005672:	61fb      	str	r3, [r7, #28]
 8005674:	69fb      	ldr	r3, [r7, #28]
 8005676:	2b0f      	cmp	r3, #15
 8005678:	d9e9      	bls.n	800564e <prvInitialiseNewTask+0x66>
 800567a:	e000      	b.n	800567e <prvInitialiseNewTask+0x96>
			{
				break;
 800567c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800567e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005680:	2200      	movs	r2, #0
 8005682:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005686:	e003      	b.n	8005690 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005688:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800568a:	2200      	movs	r2, #0
 800568c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005690:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005692:	2b37      	cmp	r3, #55	@ 0x37
 8005694:	d901      	bls.n	800569a <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005696:	2337      	movs	r3, #55	@ 0x37
 8005698:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800569a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800569c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800569e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80056a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056a2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80056a4:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80056a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056a8:	2200      	movs	r2, #0
 80056aa:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80056ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056ae:	3304      	adds	r3, #4
 80056b0:	4618      	mov	r0, r3
 80056b2:	f7ff f965 	bl	8004980 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80056b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056b8:	3318      	adds	r3, #24
 80056ba:	4618      	mov	r0, r3
 80056bc:	f7ff f960 	bl	8004980 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80056c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80056c4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056c8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80056cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056ce:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80056d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80056d4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80056d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056d8:	2200      	movs	r2, #0
 80056da:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80056de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056e0:	2200      	movs	r2, #0
 80056e2:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80056e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056e8:	3354      	adds	r3, #84	@ 0x54
 80056ea:	224c      	movs	r2, #76	@ 0x4c
 80056ec:	2100      	movs	r1, #0
 80056ee:	4618      	mov	r0, r3
 80056f0:	f001 ff20 	bl	8007534 <memset>
 80056f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056f6:	4a0d      	ldr	r2, [pc, #52]	@ (800572c <prvInitialiseNewTask+0x144>)
 80056f8:	659a      	str	r2, [r3, #88]	@ 0x58
 80056fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056fc:	4a0c      	ldr	r2, [pc, #48]	@ (8005730 <prvInitialiseNewTask+0x148>)
 80056fe:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005700:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005702:	4a0c      	ldr	r2, [pc, #48]	@ (8005734 <prvInitialiseNewTask+0x14c>)
 8005704:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005706:	683a      	ldr	r2, [r7, #0]
 8005708:	68f9      	ldr	r1, [r7, #12]
 800570a:	69b8      	ldr	r0, [r7, #24]
 800570c:	f001 f95a 	bl	80069c4 <pxPortInitialiseStack>
 8005710:	4602      	mov	r2, r0
 8005712:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005714:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005716:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005718:	2b00      	cmp	r3, #0
 800571a:	d002      	beq.n	8005722 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800571c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800571e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005720:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005722:	bf00      	nop
 8005724:	3720      	adds	r7, #32
 8005726:	46bd      	mov	sp, r7
 8005728:	bd80      	pop	{r7, pc}
 800572a:	bf00      	nop
 800572c:	20004d04 	.word	0x20004d04
 8005730:	20004d6c 	.word	0x20004d6c
 8005734:	20004dd4 	.word	0x20004dd4

08005738 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b082      	sub	sp, #8
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005740:	f001 fa72 	bl	8006c28 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005744:	4b2d      	ldr	r3, [pc, #180]	@ (80057fc <prvAddNewTaskToReadyList+0xc4>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	3301      	adds	r3, #1
 800574a:	4a2c      	ldr	r2, [pc, #176]	@ (80057fc <prvAddNewTaskToReadyList+0xc4>)
 800574c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800574e:	4b2c      	ldr	r3, [pc, #176]	@ (8005800 <prvAddNewTaskToReadyList+0xc8>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d109      	bne.n	800576a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005756:	4a2a      	ldr	r2, [pc, #168]	@ (8005800 <prvAddNewTaskToReadyList+0xc8>)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800575c:	4b27      	ldr	r3, [pc, #156]	@ (80057fc <prvAddNewTaskToReadyList+0xc4>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	2b01      	cmp	r3, #1
 8005762:	d110      	bne.n	8005786 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005764:	f000 fc2e 	bl	8005fc4 <prvInitialiseTaskLists>
 8005768:	e00d      	b.n	8005786 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800576a:	4b26      	ldr	r3, [pc, #152]	@ (8005804 <prvAddNewTaskToReadyList+0xcc>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d109      	bne.n	8005786 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005772:	4b23      	ldr	r3, [pc, #140]	@ (8005800 <prvAddNewTaskToReadyList+0xc8>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800577c:	429a      	cmp	r2, r3
 800577e:	d802      	bhi.n	8005786 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005780:	4a1f      	ldr	r2, [pc, #124]	@ (8005800 <prvAddNewTaskToReadyList+0xc8>)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005786:	4b20      	ldr	r3, [pc, #128]	@ (8005808 <prvAddNewTaskToReadyList+0xd0>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	3301      	adds	r3, #1
 800578c:	4a1e      	ldr	r2, [pc, #120]	@ (8005808 <prvAddNewTaskToReadyList+0xd0>)
 800578e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005790:	4b1d      	ldr	r3, [pc, #116]	@ (8005808 <prvAddNewTaskToReadyList+0xd0>)
 8005792:	681a      	ldr	r2, [r3, #0]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800579c:	4b1b      	ldr	r3, [pc, #108]	@ (800580c <prvAddNewTaskToReadyList+0xd4>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	429a      	cmp	r2, r3
 80057a2:	d903      	bls.n	80057ac <prvAddNewTaskToReadyList+0x74>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057a8:	4a18      	ldr	r2, [pc, #96]	@ (800580c <prvAddNewTaskToReadyList+0xd4>)
 80057aa:	6013      	str	r3, [r2, #0]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057b0:	4613      	mov	r3, r2
 80057b2:	009b      	lsls	r3, r3, #2
 80057b4:	4413      	add	r3, r2
 80057b6:	009b      	lsls	r3, r3, #2
 80057b8:	4a15      	ldr	r2, [pc, #84]	@ (8005810 <prvAddNewTaskToReadyList+0xd8>)
 80057ba:	441a      	add	r2, r3
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	3304      	adds	r3, #4
 80057c0:	4619      	mov	r1, r3
 80057c2:	4610      	mov	r0, r2
 80057c4:	f7ff f8e9 	bl	800499a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80057c8:	f001 fa60 	bl	8006c8c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80057cc:	4b0d      	ldr	r3, [pc, #52]	@ (8005804 <prvAddNewTaskToReadyList+0xcc>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d00e      	beq.n	80057f2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80057d4:	4b0a      	ldr	r3, [pc, #40]	@ (8005800 <prvAddNewTaskToReadyList+0xc8>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057de:	429a      	cmp	r2, r3
 80057e0:	d207      	bcs.n	80057f2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80057e2:	4b0c      	ldr	r3, [pc, #48]	@ (8005814 <prvAddNewTaskToReadyList+0xdc>)
 80057e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80057e8:	601a      	str	r2, [r3, #0]
 80057ea:	f3bf 8f4f 	dsb	sy
 80057ee:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80057f2:	bf00      	nop
 80057f4:	3708      	adds	r7, #8
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}
 80057fa:	bf00      	nop
 80057fc:	20000f7c 	.word	0x20000f7c
 8005800:	20000aa8 	.word	0x20000aa8
 8005804:	20000f88 	.word	0x20000f88
 8005808:	20000f98 	.word	0x20000f98
 800580c:	20000f84 	.word	0x20000f84
 8005810:	20000aac 	.word	0x20000aac
 8005814:	e000ed04 	.word	0xe000ed04

08005818 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005818:	b580      	push	{r7, lr}
 800581a:	b084      	sub	sp, #16
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005820:	2300      	movs	r3, #0
 8005822:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d018      	beq.n	800585c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800582a:	4b14      	ldr	r3, [pc, #80]	@ (800587c <vTaskDelay+0x64>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d00b      	beq.n	800584a <vTaskDelay+0x32>
	__asm volatile
 8005832:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005836:	f383 8811 	msr	BASEPRI, r3
 800583a:	f3bf 8f6f 	isb	sy
 800583e:	f3bf 8f4f 	dsb	sy
 8005842:	60bb      	str	r3, [r7, #8]
}
 8005844:	bf00      	nop
 8005846:	bf00      	nop
 8005848:	e7fd      	b.n	8005846 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800584a:	f000 f88b 	bl	8005964 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800584e:	2100      	movs	r1, #0
 8005850:	6878      	ldr	r0, [r7, #4]
 8005852:	f000 fd09 	bl	8006268 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005856:	f000 f893 	bl	8005980 <xTaskResumeAll>
 800585a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d107      	bne.n	8005872 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005862:	4b07      	ldr	r3, [pc, #28]	@ (8005880 <vTaskDelay+0x68>)
 8005864:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005868:	601a      	str	r2, [r3, #0]
 800586a:	f3bf 8f4f 	dsb	sy
 800586e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005872:	bf00      	nop
 8005874:	3710      	adds	r7, #16
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}
 800587a:	bf00      	nop
 800587c:	20000fa4 	.word	0x20000fa4
 8005880:	e000ed04 	.word	0xe000ed04

08005884 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b08a      	sub	sp, #40	@ 0x28
 8005888:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800588a:	2300      	movs	r3, #0
 800588c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800588e:	2300      	movs	r3, #0
 8005890:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005892:	463a      	mov	r2, r7
 8005894:	1d39      	adds	r1, r7, #4
 8005896:	f107 0308 	add.w	r3, r7, #8
 800589a:	4618      	mov	r0, r3
 800589c:	f7ff f81c 	bl	80048d8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80058a0:	6839      	ldr	r1, [r7, #0]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	68ba      	ldr	r2, [r7, #8]
 80058a6:	9202      	str	r2, [sp, #8]
 80058a8:	9301      	str	r3, [sp, #4]
 80058aa:	2300      	movs	r3, #0
 80058ac:	9300      	str	r3, [sp, #0]
 80058ae:	2300      	movs	r3, #0
 80058b0:	460a      	mov	r2, r1
 80058b2:	4924      	ldr	r1, [pc, #144]	@ (8005944 <vTaskStartScheduler+0xc0>)
 80058b4:	4824      	ldr	r0, [pc, #144]	@ (8005948 <vTaskStartScheduler+0xc4>)
 80058b6:	f7ff fdf1 	bl	800549c <xTaskCreateStatic>
 80058ba:	4603      	mov	r3, r0
 80058bc:	4a23      	ldr	r2, [pc, #140]	@ (800594c <vTaskStartScheduler+0xc8>)
 80058be:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80058c0:	4b22      	ldr	r3, [pc, #136]	@ (800594c <vTaskStartScheduler+0xc8>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d002      	beq.n	80058ce <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80058c8:	2301      	movs	r3, #1
 80058ca:	617b      	str	r3, [r7, #20]
 80058cc:	e001      	b.n	80058d2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80058ce:	2300      	movs	r3, #0
 80058d0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	2b01      	cmp	r3, #1
 80058d6:	d102      	bne.n	80058de <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80058d8:	f000 fd1a 	bl	8006310 <xTimerCreateTimerTask>
 80058dc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	2b01      	cmp	r3, #1
 80058e2:	d11b      	bne.n	800591c <vTaskStartScheduler+0x98>
	__asm volatile
 80058e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058e8:	f383 8811 	msr	BASEPRI, r3
 80058ec:	f3bf 8f6f 	isb	sy
 80058f0:	f3bf 8f4f 	dsb	sy
 80058f4:	613b      	str	r3, [r7, #16]
}
 80058f6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80058f8:	4b15      	ldr	r3, [pc, #84]	@ (8005950 <vTaskStartScheduler+0xcc>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	3354      	adds	r3, #84	@ 0x54
 80058fe:	4a15      	ldr	r2, [pc, #84]	@ (8005954 <vTaskStartScheduler+0xd0>)
 8005900:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005902:	4b15      	ldr	r3, [pc, #84]	@ (8005958 <vTaskStartScheduler+0xd4>)
 8005904:	f04f 32ff 	mov.w	r2, #4294967295
 8005908:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800590a:	4b14      	ldr	r3, [pc, #80]	@ (800595c <vTaskStartScheduler+0xd8>)
 800590c:	2201      	movs	r2, #1
 800590e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005910:	4b13      	ldr	r3, [pc, #76]	@ (8005960 <vTaskStartScheduler+0xdc>)
 8005912:	2200      	movs	r2, #0
 8005914:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005916:	f001 f8e3 	bl	8006ae0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800591a:	e00f      	b.n	800593c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005922:	d10b      	bne.n	800593c <vTaskStartScheduler+0xb8>
	__asm volatile
 8005924:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005928:	f383 8811 	msr	BASEPRI, r3
 800592c:	f3bf 8f6f 	isb	sy
 8005930:	f3bf 8f4f 	dsb	sy
 8005934:	60fb      	str	r3, [r7, #12]
}
 8005936:	bf00      	nop
 8005938:	bf00      	nop
 800593a:	e7fd      	b.n	8005938 <vTaskStartScheduler+0xb4>
}
 800593c:	bf00      	nop
 800593e:	3718      	adds	r7, #24
 8005940:	46bd      	mov	sp, r7
 8005942:	bd80      	pop	{r7, pc}
 8005944:	08007734 	.word	0x08007734
 8005948:	08005f95 	.word	0x08005f95
 800594c:	20000fa0 	.word	0x20000fa0
 8005950:	20000aa8 	.word	0x20000aa8
 8005954:	20000010 	.word	0x20000010
 8005958:	20000f9c 	.word	0x20000f9c
 800595c:	20000f88 	.word	0x20000f88
 8005960:	20000f80 	.word	0x20000f80

08005964 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005964:	b480      	push	{r7}
 8005966:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005968:	4b04      	ldr	r3, [pc, #16]	@ (800597c <vTaskSuspendAll+0x18>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	3301      	adds	r3, #1
 800596e:	4a03      	ldr	r2, [pc, #12]	@ (800597c <vTaskSuspendAll+0x18>)
 8005970:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005972:	bf00      	nop
 8005974:	46bd      	mov	sp, r7
 8005976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597a:	4770      	bx	lr
 800597c:	20000fa4 	.word	0x20000fa4

08005980 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b084      	sub	sp, #16
 8005984:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005986:	2300      	movs	r3, #0
 8005988:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800598a:	2300      	movs	r3, #0
 800598c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800598e:	4b42      	ldr	r3, [pc, #264]	@ (8005a98 <xTaskResumeAll+0x118>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d10b      	bne.n	80059ae <xTaskResumeAll+0x2e>
	__asm volatile
 8005996:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800599a:	f383 8811 	msr	BASEPRI, r3
 800599e:	f3bf 8f6f 	isb	sy
 80059a2:	f3bf 8f4f 	dsb	sy
 80059a6:	603b      	str	r3, [r7, #0]
}
 80059a8:	bf00      	nop
 80059aa:	bf00      	nop
 80059ac:	e7fd      	b.n	80059aa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80059ae:	f001 f93b 	bl	8006c28 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80059b2:	4b39      	ldr	r3, [pc, #228]	@ (8005a98 <xTaskResumeAll+0x118>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	3b01      	subs	r3, #1
 80059b8:	4a37      	ldr	r2, [pc, #220]	@ (8005a98 <xTaskResumeAll+0x118>)
 80059ba:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80059bc:	4b36      	ldr	r3, [pc, #216]	@ (8005a98 <xTaskResumeAll+0x118>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d162      	bne.n	8005a8a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80059c4:	4b35      	ldr	r3, [pc, #212]	@ (8005a9c <xTaskResumeAll+0x11c>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d05e      	beq.n	8005a8a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80059cc:	e02f      	b.n	8005a2e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059ce:	4b34      	ldr	r3, [pc, #208]	@ (8005aa0 <xTaskResumeAll+0x120>)
 80059d0:	68db      	ldr	r3, [r3, #12]
 80059d2:	68db      	ldr	r3, [r3, #12]
 80059d4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	3318      	adds	r3, #24
 80059da:	4618      	mov	r0, r3
 80059dc:	f7ff f83a 	bl	8004a54 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	3304      	adds	r3, #4
 80059e4:	4618      	mov	r0, r3
 80059e6:	f7ff f835 	bl	8004a54 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059ee:	4b2d      	ldr	r3, [pc, #180]	@ (8005aa4 <xTaskResumeAll+0x124>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	429a      	cmp	r2, r3
 80059f4:	d903      	bls.n	80059fe <xTaskResumeAll+0x7e>
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059fa:	4a2a      	ldr	r2, [pc, #168]	@ (8005aa4 <xTaskResumeAll+0x124>)
 80059fc:	6013      	str	r3, [r2, #0]
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a02:	4613      	mov	r3, r2
 8005a04:	009b      	lsls	r3, r3, #2
 8005a06:	4413      	add	r3, r2
 8005a08:	009b      	lsls	r3, r3, #2
 8005a0a:	4a27      	ldr	r2, [pc, #156]	@ (8005aa8 <xTaskResumeAll+0x128>)
 8005a0c:	441a      	add	r2, r3
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	3304      	adds	r3, #4
 8005a12:	4619      	mov	r1, r3
 8005a14:	4610      	mov	r0, r2
 8005a16:	f7fe ffc0 	bl	800499a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a1e:	4b23      	ldr	r3, [pc, #140]	@ (8005aac <xTaskResumeAll+0x12c>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a24:	429a      	cmp	r2, r3
 8005a26:	d302      	bcc.n	8005a2e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8005a28:	4b21      	ldr	r3, [pc, #132]	@ (8005ab0 <xTaskResumeAll+0x130>)
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005a2e:	4b1c      	ldr	r3, [pc, #112]	@ (8005aa0 <xTaskResumeAll+0x120>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d1cb      	bne.n	80059ce <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d001      	beq.n	8005a40 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005a3c:	f000 fb66 	bl	800610c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005a40:	4b1c      	ldr	r3, [pc, #112]	@ (8005ab4 <xTaskResumeAll+0x134>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d010      	beq.n	8005a6e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005a4c:	f000 f846 	bl	8005adc <xTaskIncrementTick>
 8005a50:	4603      	mov	r3, r0
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d002      	beq.n	8005a5c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8005a56:	4b16      	ldr	r3, [pc, #88]	@ (8005ab0 <xTaskResumeAll+0x130>)
 8005a58:	2201      	movs	r2, #1
 8005a5a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	3b01      	subs	r3, #1
 8005a60:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d1f1      	bne.n	8005a4c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8005a68:	4b12      	ldr	r3, [pc, #72]	@ (8005ab4 <xTaskResumeAll+0x134>)
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005a6e:	4b10      	ldr	r3, [pc, #64]	@ (8005ab0 <xTaskResumeAll+0x130>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d009      	beq.n	8005a8a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005a76:	2301      	movs	r3, #1
 8005a78:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005a7a:	4b0f      	ldr	r3, [pc, #60]	@ (8005ab8 <xTaskResumeAll+0x138>)
 8005a7c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a80:	601a      	str	r2, [r3, #0]
 8005a82:	f3bf 8f4f 	dsb	sy
 8005a86:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005a8a:	f001 f8ff 	bl	8006c8c <vPortExitCritical>

	return xAlreadyYielded;
 8005a8e:	68bb      	ldr	r3, [r7, #8]
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	3710      	adds	r7, #16
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}
 8005a98:	20000fa4 	.word	0x20000fa4
 8005a9c:	20000f7c 	.word	0x20000f7c
 8005aa0:	20000f3c 	.word	0x20000f3c
 8005aa4:	20000f84 	.word	0x20000f84
 8005aa8:	20000aac 	.word	0x20000aac
 8005aac:	20000aa8 	.word	0x20000aa8
 8005ab0:	20000f90 	.word	0x20000f90
 8005ab4:	20000f8c 	.word	0x20000f8c
 8005ab8:	e000ed04 	.word	0xe000ed04

08005abc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005abc:	b480      	push	{r7}
 8005abe:	b083      	sub	sp, #12
 8005ac0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005ac2:	4b05      	ldr	r3, [pc, #20]	@ (8005ad8 <xTaskGetTickCount+0x1c>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005ac8:	687b      	ldr	r3, [r7, #4]
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	370c      	adds	r7, #12
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad4:	4770      	bx	lr
 8005ad6:	bf00      	nop
 8005ad8:	20000f80 	.word	0x20000f80

08005adc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b086      	sub	sp, #24
 8005ae0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ae6:	4b4f      	ldr	r3, [pc, #316]	@ (8005c24 <xTaskIncrementTick+0x148>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	f040 8090 	bne.w	8005c10 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005af0:	4b4d      	ldr	r3, [pc, #308]	@ (8005c28 <xTaskIncrementTick+0x14c>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	3301      	adds	r3, #1
 8005af6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005af8:	4a4b      	ldr	r2, [pc, #300]	@ (8005c28 <xTaskIncrementTick+0x14c>)
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005afe:	693b      	ldr	r3, [r7, #16]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d121      	bne.n	8005b48 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005b04:	4b49      	ldr	r3, [pc, #292]	@ (8005c2c <xTaskIncrementTick+0x150>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d00b      	beq.n	8005b26 <xTaskIncrementTick+0x4a>
	__asm volatile
 8005b0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b12:	f383 8811 	msr	BASEPRI, r3
 8005b16:	f3bf 8f6f 	isb	sy
 8005b1a:	f3bf 8f4f 	dsb	sy
 8005b1e:	603b      	str	r3, [r7, #0]
}
 8005b20:	bf00      	nop
 8005b22:	bf00      	nop
 8005b24:	e7fd      	b.n	8005b22 <xTaskIncrementTick+0x46>
 8005b26:	4b41      	ldr	r3, [pc, #260]	@ (8005c2c <xTaskIncrementTick+0x150>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	60fb      	str	r3, [r7, #12]
 8005b2c:	4b40      	ldr	r3, [pc, #256]	@ (8005c30 <xTaskIncrementTick+0x154>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a3e      	ldr	r2, [pc, #248]	@ (8005c2c <xTaskIncrementTick+0x150>)
 8005b32:	6013      	str	r3, [r2, #0]
 8005b34:	4a3e      	ldr	r2, [pc, #248]	@ (8005c30 <xTaskIncrementTick+0x154>)
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	6013      	str	r3, [r2, #0]
 8005b3a:	4b3e      	ldr	r3, [pc, #248]	@ (8005c34 <xTaskIncrementTick+0x158>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	3301      	adds	r3, #1
 8005b40:	4a3c      	ldr	r2, [pc, #240]	@ (8005c34 <xTaskIncrementTick+0x158>)
 8005b42:	6013      	str	r3, [r2, #0]
 8005b44:	f000 fae2 	bl	800610c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005b48:	4b3b      	ldr	r3, [pc, #236]	@ (8005c38 <xTaskIncrementTick+0x15c>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	693a      	ldr	r2, [r7, #16]
 8005b4e:	429a      	cmp	r2, r3
 8005b50:	d349      	bcc.n	8005be6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b52:	4b36      	ldr	r3, [pc, #216]	@ (8005c2c <xTaskIncrementTick+0x150>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d104      	bne.n	8005b66 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b5c:	4b36      	ldr	r3, [pc, #216]	@ (8005c38 <xTaskIncrementTick+0x15c>)
 8005b5e:	f04f 32ff 	mov.w	r2, #4294967295
 8005b62:	601a      	str	r2, [r3, #0]
					break;
 8005b64:	e03f      	b.n	8005be6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b66:	4b31      	ldr	r3, [pc, #196]	@ (8005c2c <xTaskIncrementTick+0x150>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	68db      	ldr	r3, [r3, #12]
 8005b6c:	68db      	ldr	r3, [r3, #12]
 8005b6e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005b76:	693a      	ldr	r2, [r7, #16]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	429a      	cmp	r2, r3
 8005b7c:	d203      	bcs.n	8005b86 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005b7e:	4a2e      	ldr	r2, [pc, #184]	@ (8005c38 <xTaskIncrementTick+0x15c>)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005b84:	e02f      	b.n	8005be6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	3304      	adds	r3, #4
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	f7fe ff62 	bl	8004a54 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d004      	beq.n	8005ba2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	3318      	adds	r3, #24
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	f7fe ff59 	bl	8004a54 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ba6:	4b25      	ldr	r3, [pc, #148]	@ (8005c3c <xTaskIncrementTick+0x160>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	429a      	cmp	r2, r3
 8005bac:	d903      	bls.n	8005bb6 <xTaskIncrementTick+0xda>
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bb2:	4a22      	ldr	r2, [pc, #136]	@ (8005c3c <xTaskIncrementTick+0x160>)
 8005bb4:	6013      	str	r3, [r2, #0]
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005bba:	4613      	mov	r3, r2
 8005bbc:	009b      	lsls	r3, r3, #2
 8005bbe:	4413      	add	r3, r2
 8005bc0:	009b      	lsls	r3, r3, #2
 8005bc2:	4a1f      	ldr	r2, [pc, #124]	@ (8005c40 <xTaskIncrementTick+0x164>)
 8005bc4:	441a      	add	r2, r3
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	3304      	adds	r3, #4
 8005bca:	4619      	mov	r1, r3
 8005bcc:	4610      	mov	r0, r2
 8005bce:	f7fe fee4 	bl	800499a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005bd6:	4b1b      	ldr	r3, [pc, #108]	@ (8005c44 <xTaskIncrementTick+0x168>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bdc:	429a      	cmp	r2, r3
 8005bde:	d3b8      	bcc.n	8005b52 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005be0:	2301      	movs	r3, #1
 8005be2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005be4:	e7b5      	b.n	8005b52 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005be6:	4b17      	ldr	r3, [pc, #92]	@ (8005c44 <xTaskIncrementTick+0x168>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005bec:	4914      	ldr	r1, [pc, #80]	@ (8005c40 <xTaskIncrementTick+0x164>)
 8005bee:	4613      	mov	r3, r2
 8005bf0:	009b      	lsls	r3, r3, #2
 8005bf2:	4413      	add	r3, r2
 8005bf4:	009b      	lsls	r3, r3, #2
 8005bf6:	440b      	add	r3, r1
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	2b01      	cmp	r3, #1
 8005bfc:	d901      	bls.n	8005c02 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8005bfe:	2301      	movs	r3, #1
 8005c00:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005c02:	4b11      	ldr	r3, [pc, #68]	@ (8005c48 <xTaskIncrementTick+0x16c>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d007      	beq.n	8005c1a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	617b      	str	r3, [r7, #20]
 8005c0e:	e004      	b.n	8005c1a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005c10:	4b0e      	ldr	r3, [pc, #56]	@ (8005c4c <xTaskIncrementTick+0x170>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	3301      	adds	r3, #1
 8005c16:	4a0d      	ldr	r2, [pc, #52]	@ (8005c4c <xTaskIncrementTick+0x170>)
 8005c18:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005c1a:	697b      	ldr	r3, [r7, #20]
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	3718      	adds	r7, #24
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bd80      	pop	{r7, pc}
 8005c24:	20000fa4 	.word	0x20000fa4
 8005c28:	20000f80 	.word	0x20000f80
 8005c2c:	20000f34 	.word	0x20000f34
 8005c30:	20000f38 	.word	0x20000f38
 8005c34:	20000f94 	.word	0x20000f94
 8005c38:	20000f9c 	.word	0x20000f9c
 8005c3c:	20000f84 	.word	0x20000f84
 8005c40:	20000aac 	.word	0x20000aac
 8005c44:	20000aa8 	.word	0x20000aa8
 8005c48:	20000f90 	.word	0x20000f90
 8005c4c:	20000f8c 	.word	0x20000f8c

08005c50 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005c50:	b480      	push	{r7}
 8005c52:	b085      	sub	sp, #20
 8005c54:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005c56:	4b2b      	ldr	r3, [pc, #172]	@ (8005d04 <vTaskSwitchContext+0xb4>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d003      	beq.n	8005c66 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005c5e:	4b2a      	ldr	r3, [pc, #168]	@ (8005d08 <vTaskSwitchContext+0xb8>)
 8005c60:	2201      	movs	r2, #1
 8005c62:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005c64:	e047      	b.n	8005cf6 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8005c66:	4b28      	ldr	r3, [pc, #160]	@ (8005d08 <vTaskSwitchContext+0xb8>)
 8005c68:	2200      	movs	r2, #0
 8005c6a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c6c:	4b27      	ldr	r3, [pc, #156]	@ (8005d0c <vTaskSwitchContext+0xbc>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	60fb      	str	r3, [r7, #12]
 8005c72:	e011      	b.n	8005c98 <vTaskSwitchContext+0x48>
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d10b      	bne.n	8005c92 <vTaskSwitchContext+0x42>
	__asm volatile
 8005c7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c7e:	f383 8811 	msr	BASEPRI, r3
 8005c82:	f3bf 8f6f 	isb	sy
 8005c86:	f3bf 8f4f 	dsb	sy
 8005c8a:	607b      	str	r3, [r7, #4]
}
 8005c8c:	bf00      	nop
 8005c8e:	bf00      	nop
 8005c90:	e7fd      	b.n	8005c8e <vTaskSwitchContext+0x3e>
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	3b01      	subs	r3, #1
 8005c96:	60fb      	str	r3, [r7, #12]
 8005c98:	491d      	ldr	r1, [pc, #116]	@ (8005d10 <vTaskSwitchContext+0xc0>)
 8005c9a:	68fa      	ldr	r2, [r7, #12]
 8005c9c:	4613      	mov	r3, r2
 8005c9e:	009b      	lsls	r3, r3, #2
 8005ca0:	4413      	add	r3, r2
 8005ca2:	009b      	lsls	r3, r3, #2
 8005ca4:	440b      	add	r3, r1
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d0e3      	beq.n	8005c74 <vTaskSwitchContext+0x24>
 8005cac:	68fa      	ldr	r2, [r7, #12]
 8005cae:	4613      	mov	r3, r2
 8005cb0:	009b      	lsls	r3, r3, #2
 8005cb2:	4413      	add	r3, r2
 8005cb4:	009b      	lsls	r3, r3, #2
 8005cb6:	4a16      	ldr	r2, [pc, #88]	@ (8005d10 <vTaskSwitchContext+0xc0>)
 8005cb8:	4413      	add	r3, r2
 8005cba:	60bb      	str	r3, [r7, #8]
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	685a      	ldr	r2, [r3, #4]
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	605a      	str	r2, [r3, #4]
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	685a      	ldr	r2, [r3, #4]
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	3308      	adds	r3, #8
 8005cce:	429a      	cmp	r2, r3
 8005cd0:	d104      	bne.n	8005cdc <vTaskSwitchContext+0x8c>
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	685a      	ldr	r2, [r3, #4]
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	605a      	str	r2, [r3, #4]
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	685b      	ldr	r3, [r3, #4]
 8005ce0:	68db      	ldr	r3, [r3, #12]
 8005ce2:	4a0c      	ldr	r2, [pc, #48]	@ (8005d14 <vTaskSwitchContext+0xc4>)
 8005ce4:	6013      	str	r3, [r2, #0]
 8005ce6:	4a09      	ldr	r2, [pc, #36]	@ (8005d0c <vTaskSwitchContext+0xbc>)
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005cec:	4b09      	ldr	r3, [pc, #36]	@ (8005d14 <vTaskSwitchContext+0xc4>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	3354      	adds	r3, #84	@ 0x54
 8005cf2:	4a09      	ldr	r2, [pc, #36]	@ (8005d18 <vTaskSwitchContext+0xc8>)
 8005cf4:	6013      	str	r3, [r2, #0]
}
 8005cf6:	bf00      	nop
 8005cf8:	3714      	adds	r7, #20
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d00:	4770      	bx	lr
 8005d02:	bf00      	nop
 8005d04:	20000fa4 	.word	0x20000fa4
 8005d08:	20000f90 	.word	0x20000f90
 8005d0c:	20000f84 	.word	0x20000f84
 8005d10:	20000aac 	.word	0x20000aac
 8005d14:	20000aa8 	.word	0x20000aa8
 8005d18:	20000010 	.word	0x20000010

08005d1c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b084      	sub	sp, #16
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
 8005d24:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d10b      	bne.n	8005d44 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005d2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d30:	f383 8811 	msr	BASEPRI, r3
 8005d34:	f3bf 8f6f 	isb	sy
 8005d38:	f3bf 8f4f 	dsb	sy
 8005d3c:	60fb      	str	r3, [r7, #12]
}
 8005d3e:	bf00      	nop
 8005d40:	bf00      	nop
 8005d42:	e7fd      	b.n	8005d40 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005d44:	4b07      	ldr	r3, [pc, #28]	@ (8005d64 <vTaskPlaceOnEventList+0x48>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	3318      	adds	r3, #24
 8005d4a:	4619      	mov	r1, r3
 8005d4c:	6878      	ldr	r0, [r7, #4]
 8005d4e:	f7fe fe48 	bl	80049e2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005d52:	2101      	movs	r1, #1
 8005d54:	6838      	ldr	r0, [r7, #0]
 8005d56:	f000 fa87 	bl	8006268 <prvAddCurrentTaskToDelayedList>
}
 8005d5a:	bf00      	nop
 8005d5c:	3710      	adds	r7, #16
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd80      	pop	{r7, pc}
 8005d62:	bf00      	nop
 8005d64:	20000aa8 	.word	0x20000aa8

08005d68 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b086      	sub	sp, #24
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	60f8      	str	r0, [r7, #12]
 8005d70:	60b9      	str	r1, [r7, #8]
 8005d72:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d10b      	bne.n	8005d92 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8005d7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d7e:	f383 8811 	msr	BASEPRI, r3
 8005d82:	f3bf 8f6f 	isb	sy
 8005d86:	f3bf 8f4f 	dsb	sy
 8005d8a:	617b      	str	r3, [r7, #20]
}
 8005d8c:	bf00      	nop
 8005d8e:	bf00      	nop
 8005d90:	e7fd      	b.n	8005d8e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005d92:	4b0a      	ldr	r3, [pc, #40]	@ (8005dbc <vTaskPlaceOnEventListRestricted+0x54>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	3318      	adds	r3, #24
 8005d98:	4619      	mov	r1, r3
 8005d9a:	68f8      	ldr	r0, [r7, #12]
 8005d9c:	f7fe fdfd 	bl	800499a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d002      	beq.n	8005dac <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8005da6:	f04f 33ff 	mov.w	r3, #4294967295
 8005daa:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005dac:	6879      	ldr	r1, [r7, #4]
 8005dae:	68b8      	ldr	r0, [r7, #8]
 8005db0:	f000 fa5a 	bl	8006268 <prvAddCurrentTaskToDelayedList>
	}
 8005db4:	bf00      	nop
 8005db6:	3718      	adds	r7, #24
 8005db8:	46bd      	mov	sp, r7
 8005dba:	bd80      	pop	{r7, pc}
 8005dbc:	20000aa8 	.word	0x20000aa8

08005dc0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b086      	sub	sp, #24
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	68db      	ldr	r3, [r3, #12]
 8005dcc:	68db      	ldr	r3, [r3, #12]
 8005dce:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005dd0:	693b      	ldr	r3, [r7, #16]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d10b      	bne.n	8005dee <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8005dd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dda:	f383 8811 	msr	BASEPRI, r3
 8005dde:	f3bf 8f6f 	isb	sy
 8005de2:	f3bf 8f4f 	dsb	sy
 8005de6:	60fb      	str	r3, [r7, #12]
}
 8005de8:	bf00      	nop
 8005dea:	bf00      	nop
 8005dec:	e7fd      	b.n	8005dea <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005dee:	693b      	ldr	r3, [r7, #16]
 8005df0:	3318      	adds	r3, #24
 8005df2:	4618      	mov	r0, r3
 8005df4:	f7fe fe2e 	bl	8004a54 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005df8:	4b1d      	ldr	r3, [pc, #116]	@ (8005e70 <xTaskRemoveFromEventList+0xb0>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d11d      	bne.n	8005e3c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	3304      	adds	r3, #4
 8005e04:	4618      	mov	r0, r3
 8005e06:	f7fe fe25 	bl	8004a54 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e0e:	4b19      	ldr	r3, [pc, #100]	@ (8005e74 <xTaskRemoveFromEventList+0xb4>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	429a      	cmp	r2, r3
 8005e14:	d903      	bls.n	8005e1e <xTaskRemoveFromEventList+0x5e>
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e1a:	4a16      	ldr	r2, [pc, #88]	@ (8005e74 <xTaskRemoveFromEventList+0xb4>)
 8005e1c:	6013      	str	r3, [r2, #0]
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e22:	4613      	mov	r3, r2
 8005e24:	009b      	lsls	r3, r3, #2
 8005e26:	4413      	add	r3, r2
 8005e28:	009b      	lsls	r3, r3, #2
 8005e2a:	4a13      	ldr	r2, [pc, #76]	@ (8005e78 <xTaskRemoveFromEventList+0xb8>)
 8005e2c:	441a      	add	r2, r3
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	3304      	adds	r3, #4
 8005e32:	4619      	mov	r1, r3
 8005e34:	4610      	mov	r0, r2
 8005e36:	f7fe fdb0 	bl	800499a <vListInsertEnd>
 8005e3a:	e005      	b.n	8005e48 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	3318      	adds	r3, #24
 8005e40:	4619      	mov	r1, r3
 8005e42:	480e      	ldr	r0, [pc, #56]	@ (8005e7c <xTaskRemoveFromEventList+0xbc>)
 8005e44:	f7fe fda9 	bl	800499a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e4c:	4b0c      	ldr	r3, [pc, #48]	@ (8005e80 <xTaskRemoveFromEventList+0xc0>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e52:	429a      	cmp	r2, r3
 8005e54:	d905      	bls.n	8005e62 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005e56:	2301      	movs	r3, #1
 8005e58:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005e5a:	4b0a      	ldr	r3, [pc, #40]	@ (8005e84 <xTaskRemoveFromEventList+0xc4>)
 8005e5c:	2201      	movs	r2, #1
 8005e5e:	601a      	str	r2, [r3, #0]
 8005e60:	e001      	b.n	8005e66 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8005e62:	2300      	movs	r3, #0
 8005e64:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005e66:	697b      	ldr	r3, [r7, #20]
}
 8005e68:	4618      	mov	r0, r3
 8005e6a:	3718      	adds	r7, #24
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	bd80      	pop	{r7, pc}
 8005e70:	20000fa4 	.word	0x20000fa4
 8005e74:	20000f84 	.word	0x20000f84
 8005e78:	20000aac 	.word	0x20000aac
 8005e7c:	20000f3c 	.word	0x20000f3c
 8005e80:	20000aa8 	.word	0x20000aa8
 8005e84:	20000f90 	.word	0x20000f90

08005e88 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b083      	sub	sp, #12
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005e90:	4b06      	ldr	r3, [pc, #24]	@ (8005eac <vTaskInternalSetTimeOutState+0x24>)
 8005e92:	681a      	ldr	r2, [r3, #0]
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005e98:	4b05      	ldr	r3, [pc, #20]	@ (8005eb0 <vTaskInternalSetTimeOutState+0x28>)
 8005e9a:	681a      	ldr	r2, [r3, #0]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	605a      	str	r2, [r3, #4]
}
 8005ea0:	bf00      	nop
 8005ea2:	370c      	adds	r7, #12
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eaa:	4770      	bx	lr
 8005eac:	20000f94 	.word	0x20000f94
 8005eb0:	20000f80 	.word	0x20000f80

08005eb4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b088      	sub	sp, #32
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
 8005ebc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d10b      	bne.n	8005edc <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005ec4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ec8:	f383 8811 	msr	BASEPRI, r3
 8005ecc:	f3bf 8f6f 	isb	sy
 8005ed0:	f3bf 8f4f 	dsb	sy
 8005ed4:	613b      	str	r3, [r7, #16]
}
 8005ed6:	bf00      	nop
 8005ed8:	bf00      	nop
 8005eda:	e7fd      	b.n	8005ed8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d10b      	bne.n	8005efa <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8005ee2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ee6:	f383 8811 	msr	BASEPRI, r3
 8005eea:	f3bf 8f6f 	isb	sy
 8005eee:	f3bf 8f4f 	dsb	sy
 8005ef2:	60fb      	str	r3, [r7, #12]
}
 8005ef4:	bf00      	nop
 8005ef6:	bf00      	nop
 8005ef8:	e7fd      	b.n	8005ef6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8005efa:	f000 fe95 	bl	8006c28 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005efe:	4b1d      	ldr	r3, [pc, #116]	@ (8005f74 <xTaskCheckForTimeOut+0xc0>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	69ba      	ldr	r2, [r7, #24]
 8005f0a:	1ad3      	subs	r3, r2, r3
 8005f0c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f16:	d102      	bne.n	8005f1e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005f18:	2300      	movs	r3, #0
 8005f1a:	61fb      	str	r3, [r7, #28]
 8005f1c:	e023      	b.n	8005f66 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681a      	ldr	r2, [r3, #0]
 8005f22:	4b15      	ldr	r3, [pc, #84]	@ (8005f78 <xTaskCheckForTimeOut+0xc4>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	429a      	cmp	r2, r3
 8005f28:	d007      	beq.n	8005f3a <xTaskCheckForTimeOut+0x86>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	69ba      	ldr	r2, [r7, #24]
 8005f30:	429a      	cmp	r2, r3
 8005f32:	d302      	bcc.n	8005f3a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005f34:	2301      	movs	r3, #1
 8005f36:	61fb      	str	r3, [r7, #28]
 8005f38:	e015      	b.n	8005f66 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	697a      	ldr	r2, [r7, #20]
 8005f40:	429a      	cmp	r2, r3
 8005f42:	d20b      	bcs.n	8005f5c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	681a      	ldr	r2, [r3, #0]
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	1ad2      	subs	r2, r2, r3
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	f7ff ff99 	bl	8005e88 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005f56:	2300      	movs	r3, #0
 8005f58:	61fb      	str	r3, [r7, #28]
 8005f5a:	e004      	b.n	8005f66 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005f62:	2301      	movs	r3, #1
 8005f64:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005f66:	f000 fe91 	bl	8006c8c <vPortExitCritical>

	return xReturn;
 8005f6a:	69fb      	ldr	r3, [r7, #28]
}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	3720      	adds	r7, #32
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bd80      	pop	{r7, pc}
 8005f74:	20000f80 	.word	0x20000f80
 8005f78:	20000f94 	.word	0x20000f94

08005f7c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005f80:	4b03      	ldr	r3, [pc, #12]	@ (8005f90 <vTaskMissedYield+0x14>)
 8005f82:	2201      	movs	r2, #1
 8005f84:	601a      	str	r2, [r3, #0]
}
 8005f86:	bf00      	nop
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8e:	4770      	bx	lr
 8005f90:	20000f90 	.word	0x20000f90

08005f94 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b082      	sub	sp, #8
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005f9c:	f000 f852 	bl	8006044 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005fa0:	4b06      	ldr	r3, [pc, #24]	@ (8005fbc <prvIdleTask+0x28>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	2b01      	cmp	r3, #1
 8005fa6:	d9f9      	bls.n	8005f9c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005fa8:	4b05      	ldr	r3, [pc, #20]	@ (8005fc0 <prvIdleTask+0x2c>)
 8005faa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005fae:	601a      	str	r2, [r3, #0]
 8005fb0:	f3bf 8f4f 	dsb	sy
 8005fb4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005fb8:	e7f0      	b.n	8005f9c <prvIdleTask+0x8>
 8005fba:	bf00      	nop
 8005fbc:	20000aac 	.word	0x20000aac
 8005fc0:	e000ed04 	.word	0xe000ed04

08005fc4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b082      	sub	sp, #8
 8005fc8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005fca:	2300      	movs	r3, #0
 8005fcc:	607b      	str	r3, [r7, #4]
 8005fce:	e00c      	b.n	8005fea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005fd0:	687a      	ldr	r2, [r7, #4]
 8005fd2:	4613      	mov	r3, r2
 8005fd4:	009b      	lsls	r3, r3, #2
 8005fd6:	4413      	add	r3, r2
 8005fd8:	009b      	lsls	r3, r3, #2
 8005fda:	4a12      	ldr	r2, [pc, #72]	@ (8006024 <prvInitialiseTaskLists+0x60>)
 8005fdc:	4413      	add	r3, r2
 8005fde:	4618      	mov	r0, r3
 8005fe0:	f7fe fcae 	bl	8004940 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	3301      	adds	r3, #1
 8005fe8:	607b      	str	r3, [r7, #4]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2b37      	cmp	r3, #55	@ 0x37
 8005fee:	d9ef      	bls.n	8005fd0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005ff0:	480d      	ldr	r0, [pc, #52]	@ (8006028 <prvInitialiseTaskLists+0x64>)
 8005ff2:	f7fe fca5 	bl	8004940 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005ff6:	480d      	ldr	r0, [pc, #52]	@ (800602c <prvInitialiseTaskLists+0x68>)
 8005ff8:	f7fe fca2 	bl	8004940 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005ffc:	480c      	ldr	r0, [pc, #48]	@ (8006030 <prvInitialiseTaskLists+0x6c>)
 8005ffe:	f7fe fc9f 	bl	8004940 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006002:	480c      	ldr	r0, [pc, #48]	@ (8006034 <prvInitialiseTaskLists+0x70>)
 8006004:	f7fe fc9c 	bl	8004940 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006008:	480b      	ldr	r0, [pc, #44]	@ (8006038 <prvInitialiseTaskLists+0x74>)
 800600a:	f7fe fc99 	bl	8004940 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800600e:	4b0b      	ldr	r3, [pc, #44]	@ (800603c <prvInitialiseTaskLists+0x78>)
 8006010:	4a05      	ldr	r2, [pc, #20]	@ (8006028 <prvInitialiseTaskLists+0x64>)
 8006012:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006014:	4b0a      	ldr	r3, [pc, #40]	@ (8006040 <prvInitialiseTaskLists+0x7c>)
 8006016:	4a05      	ldr	r2, [pc, #20]	@ (800602c <prvInitialiseTaskLists+0x68>)
 8006018:	601a      	str	r2, [r3, #0]
}
 800601a:	bf00      	nop
 800601c:	3708      	adds	r7, #8
 800601e:	46bd      	mov	sp, r7
 8006020:	bd80      	pop	{r7, pc}
 8006022:	bf00      	nop
 8006024:	20000aac 	.word	0x20000aac
 8006028:	20000f0c 	.word	0x20000f0c
 800602c:	20000f20 	.word	0x20000f20
 8006030:	20000f3c 	.word	0x20000f3c
 8006034:	20000f50 	.word	0x20000f50
 8006038:	20000f68 	.word	0x20000f68
 800603c:	20000f34 	.word	0x20000f34
 8006040:	20000f38 	.word	0x20000f38

08006044 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b082      	sub	sp, #8
 8006048:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800604a:	e019      	b.n	8006080 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800604c:	f000 fdec 	bl	8006c28 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006050:	4b10      	ldr	r3, [pc, #64]	@ (8006094 <prvCheckTasksWaitingTermination+0x50>)
 8006052:	68db      	ldr	r3, [r3, #12]
 8006054:	68db      	ldr	r3, [r3, #12]
 8006056:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	3304      	adds	r3, #4
 800605c:	4618      	mov	r0, r3
 800605e:	f7fe fcf9 	bl	8004a54 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006062:	4b0d      	ldr	r3, [pc, #52]	@ (8006098 <prvCheckTasksWaitingTermination+0x54>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	3b01      	subs	r3, #1
 8006068:	4a0b      	ldr	r2, [pc, #44]	@ (8006098 <prvCheckTasksWaitingTermination+0x54>)
 800606a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800606c:	4b0b      	ldr	r3, [pc, #44]	@ (800609c <prvCheckTasksWaitingTermination+0x58>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	3b01      	subs	r3, #1
 8006072:	4a0a      	ldr	r2, [pc, #40]	@ (800609c <prvCheckTasksWaitingTermination+0x58>)
 8006074:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006076:	f000 fe09 	bl	8006c8c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f000 f810 	bl	80060a0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006080:	4b06      	ldr	r3, [pc, #24]	@ (800609c <prvCheckTasksWaitingTermination+0x58>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d1e1      	bne.n	800604c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006088:	bf00      	nop
 800608a:	bf00      	nop
 800608c:	3708      	adds	r7, #8
 800608e:	46bd      	mov	sp, r7
 8006090:	bd80      	pop	{r7, pc}
 8006092:	bf00      	nop
 8006094:	20000f50 	.word	0x20000f50
 8006098:	20000f7c 	.word	0x20000f7c
 800609c:	20000f64 	.word	0x20000f64

080060a0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b084      	sub	sp, #16
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	3354      	adds	r3, #84	@ 0x54
 80060ac:	4618      	mov	r0, r3
 80060ae:	f001 fa49 	bl	8007544 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d108      	bne.n	80060ce <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060c0:	4618      	mov	r0, r3
 80060c2:	f000 ffa1 	bl	8007008 <vPortFree>
				vPortFree( pxTCB );
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f000 ff9e 	bl	8007008 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80060cc:	e019      	b.n	8006102 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80060d4:	2b01      	cmp	r3, #1
 80060d6:	d103      	bne.n	80060e0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80060d8:	6878      	ldr	r0, [r7, #4]
 80060da:	f000 ff95 	bl	8007008 <vPortFree>
	}
 80060de:	e010      	b.n	8006102 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80060e6:	2b02      	cmp	r3, #2
 80060e8:	d00b      	beq.n	8006102 <prvDeleteTCB+0x62>
	__asm volatile
 80060ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060ee:	f383 8811 	msr	BASEPRI, r3
 80060f2:	f3bf 8f6f 	isb	sy
 80060f6:	f3bf 8f4f 	dsb	sy
 80060fa:	60fb      	str	r3, [r7, #12]
}
 80060fc:	bf00      	nop
 80060fe:	bf00      	nop
 8006100:	e7fd      	b.n	80060fe <prvDeleteTCB+0x5e>
	}
 8006102:	bf00      	nop
 8006104:	3710      	adds	r7, #16
 8006106:	46bd      	mov	sp, r7
 8006108:	bd80      	pop	{r7, pc}
	...

0800610c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800610c:	b480      	push	{r7}
 800610e:	b083      	sub	sp, #12
 8006110:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006112:	4b0c      	ldr	r3, [pc, #48]	@ (8006144 <prvResetNextTaskUnblockTime+0x38>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d104      	bne.n	8006126 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800611c:	4b0a      	ldr	r3, [pc, #40]	@ (8006148 <prvResetNextTaskUnblockTime+0x3c>)
 800611e:	f04f 32ff 	mov.w	r2, #4294967295
 8006122:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006124:	e008      	b.n	8006138 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006126:	4b07      	ldr	r3, [pc, #28]	@ (8006144 <prvResetNextTaskUnblockTime+0x38>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	68db      	ldr	r3, [r3, #12]
 800612c:	68db      	ldr	r3, [r3, #12]
 800612e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	4a04      	ldr	r2, [pc, #16]	@ (8006148 <prvResetNextTaskUnblockTime+0x3c>)
 8006136:	6013      	str	r3, [r2, #0]
}
 8006138:	bf00      	nop
 800613a:	370c      	adds	r7, #12
 800613c:	46bd      	mov	sp, r7
 800613e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006142:	4770      	bx	lr
 8006144:	20000f34 	.word	0x20000f34
 8006148:	20000f9c 	.word	0x20000f9c

0800614c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800614c:	b480      	push	{r7}
 800614e:	b083      	sub	sp, #12
 8006150:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006152:	4b0b      	ldr	r3, [pc, #44]	@ (8006180 <xTaskGetSchedulerState+0x34>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d102      	bne.n	8006160 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800615a:	2301      	movs	r3, #1
 800615c:	607b      	str	r3, [r7, #4]
 800615e:	e008      	b.n	8006172 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006160:	4b08      	ldr	r3, [pc, #32]	@ (8006184 <xTaskGetSchedulerState+0x38>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d102      	bne.n	800616e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006168:	2302      	movs	r3, #2
 800616a:	607b      	str	r3, [r7, #4]
 800616c:	e001      	b.n	8006172 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800616e:	2300      	movs	r3, #0
 8006170:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006172:	687b      	ldr	r3, [r7, #4]
	}
 8006174:	4618      	mov	r0, r3
 8006176:	370c      	adds	r7, #12
 8006178:	46bd      	mov	sp, r7
 800617a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617e:	4770      	bx	lr
 8006180:	20000f88 	.word	0x20000f88
 8006184:	20000fa4 	.word	0x20000fa4

08006188 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006188:	b580      	push	{r7, lr}
 800618a:	b086      	sub	sp, #24
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006194:	2300      	movs	r3, #0
 8006196:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d058      	beq.n	8006250 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800619e:	4b2f      	ldr	r3, [pc, #188]	@ (800625c <xTaskPriorityDisinherit+0xd4>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	693a      	ldr	r2, [r7, #16]
 80061a4:	429a      	cmp	r2, r3
 80061a6:	d00b      	beq.n	80061c0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80061a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061ac:	f383 8811 	msr	BASEPRI, r3
 80061b0:	f3bf 8f6f 	isb	sy
 80061b4:	f3bf 8f4f 	dsb	sy
 80061b8:	60fb      	str	r3, [r7, #12]
}
 80061ba:	bf00      	nop
 80061bc:	bf00      	nop
 80061be:	e7fd      	b.n	80061bc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80061c0:	693b      	ldr	r3, [r7, #16]
 80061c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d10b      	bne.n	80061e0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80061c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061cc:	f383 8811 	msr	BASEPRI, r3
 80061d0:	f3bf 8f6f 	isb	sy
 80061d4:	f3bf 8f4f 	dsb	sy
 80061d8:	60bb      	str	r3, [r7, #8]
}
 80061da:	bf00      	nop
 80061dc:	bf00      	nop
 80061de:	e7fd      	b.n	80061dc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80061e0:	693b      	ldr	r3, [r7, #16]
 80061e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80061e4:	1e5a      	subs	r2, r3, #1
 80061e6:	693b      	ldr	r3, [r7, #16]
 80061e8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80061ea:	693b      	ldr	r3, [r7, #16]
 80061ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061ee:	693b      	ldr	r3, [r7, #16]
 80061f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80061f2:	429a      	cmp	r2, r3
 80061f4:	d02c      	beq.n	8006250 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80061f6:	693b      	ldr	r3, [r7, #16]
 80061f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d128      	bne.n	8006250 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80061fe:	693b      	ldr	r3, [r7, #16]
 8006200:	3304      	adds	r3, #4
 8006202:	4618      	mov	r0, r3
 8006204:	f7fe fc26 	bl	8004a54 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006208:	693b      	ldr	r3, [r7, #16]
 800620a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800620c:	693b      	ldr	r3, [r7, #16]
 800620e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006210:	693b      	ldr	r3, [r7, #16]
 8006212:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006214:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006218:	693b      	ldr	r3, [r7, #16]
 800621a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800621c:	693b      	ldr	r3, [r7, #16]
 800621e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006220:	4b0f      	ldr	r3, [pc, #60]	@ (8006260 <xTaskPriorityDisinherit+0xd8>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	429a      	cmp	r2, r3
 8006226:	d903      	bls.n	8006230 <xTaskPriorityDisinherit+0xa8>
 8006228:	693b      	ldr	r3, [r7, #16]
 800622a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800622c:	4a0c      	ldr	r2, [pc, #48]	@ (8006260 <xTaskPriorityDisinherit+0xd8>)
 800622e:	6013      	str	r3, [r2, #0]
 8006230:	693b      	ldr	r3, [r7, #16]
 8006232:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006234:	4613      	mov	r3, r2
 8006236:	009b      	lsls	r3, r3, #2
 8006238:	4413      	add	r3, r2
 800623a:	009b      	lsls	r3, r3, #2
 800623c:	4a09      	ldr	r2, [pc, #36]	@ (8006264 <xTaskPriorityDisinherit+0xdc>)
 800623e:	441a      	add	r2, r3
 8006240:	693b      	ldr	r3, [r7, #16]
 8006242:	3304      	adds	r3, #4
 8006244:	4619      	mov	r1, r3
 8006246:	4610      	mov	r0, r2
 8006248:	f7fe fba7 	bl	800499a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800624c:	2301      	movs	r3, #1
 800624e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006250:	697b      	ldr	r3, [r7, #20]
	}
 8006252:	4618      	mov	r0, r3
 8006254:	3718      	adds	r7, #24
 8006256:	46bd      	mov	sp, r7
 8006258:	bd80      	pop	{r7, pc}
 800625a:	bf00      	nop
 800625c:	20000aa8 	.word	0x20000aa8
 8006260:	20000f84 	.word	0x20000f84
 8006264:	20000aac 	.word	0x20000aac

08006268 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b084      	sub	sp, #16
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
 8006270:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006272:	4b21      	ldr	r3, [pc, #132]	@ (80062f8 <prvAddCurrentTaskToDelayedList+0x90>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006278:	4b20      	ldr	r3, [pc, #128]	@ (80062fc <prvAddCurrentTaskToDelayedList+0x94>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	3304      	adds	r3, #4
 800627e:	4618      	mov	r0, r3
 8006280:	f7fe fbe8 	bl	8004a54 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	f1b3 3fff 	cmp.w	r3, #4294967295
 800628a:	d10a      	bne.n	80062a2 <prvAddCurrentTaskToDelayedList+0x3a>
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d007      	beq.n	80062a2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006292:	4b1a      	ldr	r3, [pc, #104]	@ (80062fc <prvAddCurrentTaskToDelayedList+0x94>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	3304      	adds	r3, #4
 8006298:	4619      	mov	r1, r3
 800629a:	4819      	ldr	r0, [pc, #100]	@ (8006300 <prvAddCurrentTaskToDelayedList+0x98>)
 800629c:	f7fe fb7d 	bl	800499a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80062a0:	e026      	b.n	80062f0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80062a2:	68fa      	ldr	r2, [r7, #12]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	4413      	add	r3, r2
 80062a8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80062aa:	4b14      	ldr	r3, [pc, #80]	@ (80062fc <prvAddCurrentTaskToDelayedList+0x94>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	68ba      	ldr	r2, [r7, #8]
 80062b0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80062b2:	68ba      	ldr	r2, [r7, #8]
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	429a      	cmp	r2, r3
 80062b8:	d209      	bcs.n	80062ce <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80062ba:	4b12      	ldr	r3, [pc, #72]	@ (8006304 <prvAddCurrentTaskToDelayedList+0x9c>)
 80062bc:	681a      	ldr	r2, [r3, #0]
 80062be:	4b0f      	ldr	r3, [pc, #60]	@ (80062fc <prvAddCurrentTaskToDelayedList+0x94>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	3304      	adds	r3, #4
 80062c4:	4619      	mov	r1, r3
 80062c6:	4610      	mov	r0, r2
 80062c8:	f7fe fb8b 	bl	80049e2 <vListInsert>
}
 80062cc:	e010      	b.n	80062f0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80062ce:	4b0e      	ldr	r3, [pc, #56]	@ (8006308 <prvAddCurrentTaskToDelayedList+0xa0>)
 80062d0:	681a      	ldr	r2, [r3, #0]
 80062d2:	4b0a      	ldr	r3, [pc, #40]	@ (80062fc <prvAddCurrentTaskToDelayedList+0x94>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	3304      	adds	r3, #4
 80062d8:	4619      	mov	r1, r3
 80062da:	4610      	mov	r0, r2
 80062dc:	f7fe fb81 	bl	80049e2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80062e0:	4b0a      	ldr	r3, [pc, #40]	@ (800630c <prvAddCurrentTaskToDelayedList+0xa4>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	68ba      	ldr	r2, [r7, #8]
 80062e6:	429a      	cmp	r2, r3
 80062e8:	d202      	bcs.n	80062f0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80062ea:	4a08      	ldr	r2, [pc, #32]	@ (800630c <prvAddCurrentTaskToDelayedList+0xa4>)
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	6013      	str	r3, [r2, #0]
}
 80062f0:	bf00      	nop
 80062f2:	3710      	adds	r7, #16
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bd80      	pop	{r7, pc}
 80062f8:	20000f80 	.word	0x20000f80
 80062fc:	20000aa8 	.word	0x20000aa8
 8006300:	20000f68 	.word	0x20000f68
 8006304:	20000f38 	.word	0x20000f38
 8006308:	20000f34 	.word	0x20000f34
 800630c:	20000f9c 	.word	0x20000f9c

08006310 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b08a      	sub	sp, #40	@ 0x28
 8006314:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006316:	2300      	movs	r3, #0
 8006318:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800631a:	f000 fb13 	bl	8006944 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800631e:	4b1d      	ldr	r3, [pc, #116]	@ (8006394 <xTimerCreateTimerTask+0x84>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d021      	beq.n	800636a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006326:	2300      	movs	r3, #0
 8006328:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800632a:	2300      	movs	r3, #0
 800632c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800632e:	1d3a      	adds	r2, r7, #4
 8006330:	f107 0108 	add.w	r1, r7, #8
 8006334:	f107 030c 	add.w	r3, r7, #12
 8006338:	4618      	mov	r0, r3
 800633a:	f7fe fae7 	bl	800490c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800633e:	6879      	ldr	r1, [r7, #4]
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	68fa      	ldr	r2, [r7, #12]
 8006344:	9202      	str	r2, [sp, #8]
 8006346:	9301      	str	r3, [sp, #4]
 8006348:	2302      	movs	r3, #2
 800634a:	9300      	str	r3, [sp, #0]
 800634c:	2300      	movs	r3, #0
 800634e:	460a      	mov	r2, r1
 8006350:	4911      	ldr	r1, [pc, #68]	@ (8006398 <xTimerCreateTimerTask+0x88>)
 8006352:	4812      	ldr	r0, [pc, #72]	@ (800639c <xTimerCreateTimerTask+0x8c>)
 8006354:	f7ff f8a2 	bl	800549c <xTaskCreateStatic>
 8006358:	4603      	mov	r3, r0
 800635a:	4a11      	ldr	r2, [pc, #68]	@ (80063a0 <xTimerCreateTimerTask+0x90>)
 800635c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800635e:	4b10      	ldr	r3, [pc, #64]	@ (80063a0 <xTimerCreateTimerTask+0x90>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d001      	beq.n	800636a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006366:	2301      	movs	r3, #1
 8006368:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d10b      	bne.n	8006388 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8006370:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006374:	f383 8811 	msr	BASEPRI, r3
 8006378:	f3bf 8f6f 	isb	sy
 800637c:	f3bf 8f4f 	dsb	sy
 8006380:	613b      	str	r3, [r7, #16]
}
 8006382:	bf00      	nop
 8006384:	bf00      	nop
 8006386:	e7fd      	b.n	8006384 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006388:	697b      	ldr	r3, [r7, #20]
}
 800638a:	4618      	mov	r0, r3
 800638c:	3718      	adds	r7, #24
 800638e:	46bd      	mov	sp, r7
 8006390:	bd80      	pop	{r7, pc}
 8006392:	bf00      	nop
 8006394:	20000fd8 	.word	0x20000fd8
 8006398:	0800773c 	.word	0x0800773c
 800639c:	080064dd 	.word	0x080064dd
 80063a0:	20000fdc 	.word	0x20000fdc

080063a4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b08a      	sub	sp, #40	@ 0x28
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	60f8      	str	r0, [r7, #12]
 80063ac:	60b9      	str	r1, [r7, #8]
 80063ae:	607a      	str	r2, [r7, #4]
 80063b0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80063b2:	2300      	movs	r3, #0
 80063b4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d10b      	bne.n	80063d4 <xTimerGenericCommand+0x30>
	__asm volatile
 80063bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063c0:	f383 8811 	msr	BASEPRI, r3
 80063c4:	f3bf 8f6f 	isb	sy
 80063c8:	f3bf 8f4f 	dsb	sy
 80063cc:	623b      	str	r3, [r7, #32]
}
 80063ce:	bf00      	nop
 80063d0:	bf00      	nop
 80063d2:	e7fd      	b.n	80063d0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80063d4:	4b19      	ldr	r3, [pc, #100]	@ (800643c <xTimerGenericCommand+0x98>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d02a      	beq.n	8006432 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	2b05      	cmp	r3, #5
 80063ec:	dc18      	bgt.n	8006420 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80063ee:	f7ff fead 	bl	800614c <xTaskGetSchedulerState>
 80063f2:	4603      	mov	r3, r0
 80063f4:	2b02      	cmp	r3, #2
 80063f6:	d109      	bne.n	800640c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80063f8:	4b10      	ldr	r3, [pc, #64]	@ (800643c <xTimerGenericCommand+0x98>)
 80063fa:	6818      	ldr	r0, [r3, #0]
 80063fc:	f107 0110 	add.w	r1, r7, #16
 8006400:	2300      	movs	r3, #0
 8006402:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006404:	f7fe fc5a 	bl	8004cbc <xQueueGenericSend>
 8006408:	6278      	str	r0, [r7, #36]	@ 0x24
 800640a:	e012      	b.n	8006432 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800640c:	4b0b      	ldr	r3, [pc, #44]	@ (800643c <xTimerGenericCommand+0x98>)
 800640e:	6818      	ldr	r0, [r3, #0]
 8006410:	f107 0110 	add.w	r1, r7, #16
 8006414:	2300      	movs	r3, #0
 8006416:	2200      	movs	r2, #0
 8006418:	f7fe fc50 	bl	8004cbc <xQueueGenericSend>
 800641c:	6278      	str	r0, [r7, #36]	@ 0x24
 800641e:	e008      	b.n	8006432 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006420:	4b06      	ldr	r3, [pc, #24]	@ (800643c <xTimerGenericCommand+0x98>)
 8006422:	6818      	ldr	r0, [r3, #0]
 8006424:	f107 0110 	add.w	r1, r7, #16
 8006428:	2300      	movs	r3, #0
 800642a:	683a      	ldr	r2, [r7, #0]
 800642c:	f7fe fd48 	bl	8004ec0 <xQueueGenericSendFromISR>
 8006430:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006434:	4618      	mov	r0, r3
 8006436:	3728      	adds	r7, #40	@ 0x28
 8006438:	46bd      	mov	sp, r7
 800643a:	bd80      	pop	{r7, pc}
 800643c:	20000fd8 	.word	0x20000fd8

08006440 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b088      	sub	sp, #32
 8006444:	af02      	add	r7, sp, #8
 8006446:	6078      	str	r0, [r7, #4]
 8006448:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800644a:	4b23      	ldr	r3, [pc, #140]	@ (80064d8 <prvProcessExpiredTimer+0x98>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	68db      	ldr	r3, [r3, #12]
 8006450:	68db      	ldr	r3, [r3, #12]
 8006452:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006454:	697b      	ldr	r3, [r7, #20]
 8006456:	3304      	adds	r3, #4
 8006458:	4618      	mov	r0, r3
 800645a:	f7fe fafb 	bl	8004a54 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006464:	f003 0304 	and.w	r3, r3, #4
 8006468:	2b00      	cmp	r3, #0
 800646a:	d023      	beq.n	80064b4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800646c:	697b      	ldr	r3, [r7, #20]
 800646e:	699a      	ldr	r2, [r3, #24]
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	18d1      	adds	r1, r2, r3
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	683a      	ldr	r2, [r7, #0]
 8006478:	6978      	ldr	r0, [r7, #20]
 800647a:	f000 f8d5 	bl	8006628 <prvInsertTimerInActiveList>
 800647e:	4603      	mov	r3, r0
 8006480:	2b00      	cmp	r3, #0
 8006482:	d020      	beq.n	80064c6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006484:	2300      	movs	r3, #0
 8006486:	9300      	str	r3, [sp, #0]
 8006488:	2300      	movs	r3, #0
 800648a:	687a      	ldr	r2, [r7, #4]
 800648c:	2100      	movs	r1, #0
 800648e:	6978      	ldr	r0, [r7, #20]
 8006490:	f7ff ff88 	bl	80063a4 <xTimerGenericCommand>
 8006494:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006496:	693b      	ldr	r3, [r7, #16]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d114      	bne.n	80064c6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800649c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064a0:	f383 8811 	msr	BASEPRI, r3
 80064a4:	f3bf 8f6f 	isb	sy
 80064a8:	f3bf 8f4f 	dsb	sy
 80064ac:	60fb      	str	r3, [r7, #12]
}
 80064ae:	bf00      	nop
 80064b0:	bf00      	nop
 80064b2:	e7fd      	b.n	80064b0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80064b4:	697b      	ldr	r3, [r7, #20]
 80064b6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80064ba:	f023 0301 	bic.w	r3, r3, #1
 80064be:	b2da      	uxtb	r2, r3
 80064c0:	697b      	ldr	r3, [r7, #20]
 80064c2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	6a1b      	ldr	r3, [r3, #32]
 80064ca:	6978      	ldr	r0, [r7, #20]
 80064cc:	4798      	blx	r3
}
 80064ce:	bf00      	nop
 80064d0:	3718      	adds	r7, #24
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}
 80064d6:	bf00      	nop
 80064d8:	20000fd0 	.word	0x20000fd0

080064dc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b084      	sub	sp, #16
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80064e4:	f107 0308 	add.w	r3, r7, #8
 80064e8:	4618      	mov	r0, r3
 80064ea:	f000 f859 	bl	80065a0 <prvGetNextExpireTime>
 80064ee:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	4619      	mov	r1, r3
 80064f4:	68f8      	ldr	r0, [r7, #12]
 80064f6:	f000 f805 	bl	8006504 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80064fa:	f000 f8d7 	bl	80066ac <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80064fe:	bf00      	nop
 8006500:	e7f0      	b.n	80064e4 <prvTimerTask+0x8>
	...

08006504 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b084      	sub	sp, #16
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
 800650c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800650e:	f7ff fa29 	bl	8005964 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006512:	f107 0308 	add.w	r3, r7, #8
 8006516:	4618      	mov	r0, r3
 8006518:	f000 f866 	bl	80065e8 <prvSampleTimeNow>
 800651c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d130      	bne.n	8006586 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d10a      	bne.n	8006540 <prvProcessTimerOrBlockTask+0x3c>
 800652a:	687a      	ldr	r2, [r7, #4]
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	429a      	cmp	r2, r3
 8006530:	d806      	bhi.n	8006540 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006532:	f7ff fa25 	bl	8005980 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006536:	68f9      	ldr	r1, [r7, #12]
 8006538:	6878      	ldr	r0, [r7, #4]
 800653a:	f7ff ff81 	bl	8006440 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800653e:	e024      	b.n	800658a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d008      	beq.n	8006558 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006546:	4b13      	ldr	r3, [pc, #76]	@ (8006594 <prvProcessTimerOrBlockTask+0x90>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d101      	bne.n	8006554 <prvProcessTimerOrBlockTask+0x50>
 8006550:	2301      	movs	r3, #1
 8006552:	e000      	b.n	8006556 <prvProcessTimerOrBlockTask+0x52>
 8006554:	2300      	movs	r3, #0
 8006556:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006558:	4b0f      	ldr	r3, [pc, #60]	@ (8006598 <prvProcessTimerOrBlockTask+0x94>)
 800655a:	6818      	ldr	r0, [r3, #0]
 800655c:	687a      	ldr	r2, [r7, #4]
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	1ad3      	subs	r3, r2, r3
 8006562:	683a      	ldr	r2, [r7, #0]
 8006564:	4619      	mov	r1, r3
 8006566:	f7fe ff65 	bl	8005434 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800656a:	f7ff fa09 	bl	8005980 <xTaskResumeAll>
 800656e:	4603      	mov	r3, r0
 8006570:	2b00      	cmp	r3, #0
 8006572:	d10a      	bne.n	800658a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006574:	4b09      	ldr	r3, [pc, #36]	@ (800659c <prvProcessTimerOrBlockTask+0x98>)
 8006576:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800657a:	601a      	str	r2, [r3, #0]
 800657c:	f3bf 8f4f 	dsb	sy
 8006580:	f3bf 8f6f 	isb	sy
}
 8006584:	e001      	b.n	800658a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006586:	f7ff f9fb 	bl	8005980 <xTaskResumeAll>
}
 800658a:	bf00      	nop
 800658c:	3710      	adds	r7, #16
 800658e:	46bd      	mov	sp, r7
 8006590:	bd80      	pop	{r7, pc}
 8006592:	bf00      	nop
 8006594:	20000fd4 	.word	0x20000fd4
 8006598:	20000fd8 	.word	0x20000fd8
 800659c:	e000ed04 	.word	0xe000ed04

080065a0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80065a0:	b480      	push	{r7}
 80065a2:	b085      	sub	sp, #20
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80065a8:	4b0e      	ldr	r3, [pc, #56]	@ (80065e4 <prvGetNextExpireTime+0x44>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d101      	bne.n	80065b6 <prvGetNextExpireTime+0x16>
 80065b2:	2201      	movs	r2, #1
 80065b4:	e000      	b.n	80065b8 <prvGetNextExpireTime+0x18>
 80065b6:	2200      	movs	r2, #0
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d105      	bne.n	80065d0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80065c4:	4b07      	ldr	r3, [pc, #28]	@ (80065e4 <prvGetNextExpireTime+0x44>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	68db      	ldr	r3, [r3, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	60fb      	str	r3, [r7, #12]
 80065ce:	e001      	b.n	80065d4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80065d0:	2300      	movs	r3, #0
 80065d2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80065d4:	68fb      	ldr	r3, [r7, #12]
}
 80065d6:	4618      	mov	r0, r3
 80065d8:	3714      	adds	r7, #20
 80065da:	46bd      	mov	sp, r7
 80065dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e0:	4770      	bx	lr
 80065e2:	bf00      	nop
 80065e4:	20000fd0 	.word	0x20000fd0

080065e8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b084      	sub	sp, #16
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80065f0:	f7ff fa64 	bl	8005abc <xTaskGetTickCount>
 80065f4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80065f6:	4b0b      	ldr	r3, [pc, #44]	@ (8006624 <prvSampleTimeNow+0x3c>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	68fa      	ldr	r2, [r7, #12]
 80065fc:	429a      	cmp	r2, r3
 80065fe:	d205      	bcs.n	800660c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006600:	f000 f93a 	bl	8006878 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2201      	movs	r2, #1
 8006608:	601a      	str	r2, [r3, #0]
 800660a:	e002      	b.n	8006612 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2200      	movs	r2, #0
 8006610:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006612:	4a04      	ldr	r2, [pc, #16]	@ (8006624 <prvSampleTimeNow+0x3c>)
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006618:	68fb      	ldr	r3, [r7, #12]
}
 800661a:	4618      	mov	r0, r3
 800661c:	3710      	adds	r7, #16
 800661e:	46bd      	mov	sp, r7
 8006620:	bd80      	pop	{r7, pc}
 8006622:	bf00      	nop
 8006624:	20000fe0 	.word	0x20000fe0

08006628 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b086      	sub	sp, #24
 800662c:	af00      	add	r7, sp, #0
 800662e:	60f8      	str	r0, [r7, #12]
 8006630:	60b9      	str	r1, [r7, #8]
 8006632:	607a      	str	r2, [r7, #4]
 8006634:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006636:	2300      	movs	r3, #0
 8006638:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	68ba      	ldr	r2, [r7, #8]
 800663e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	68fa      	ldr	r2, [r7, #12]
 8006644:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006646:	68ba      	ldr	r2, [r7, #8]
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	429a      	cmp	r2, r3
 800664c:	d812      	bhi.n	8006674 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800664e:	687a      	ldr	r2, [r7, #4]
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	1ad2      	subs	r2, r2, r3
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	699b      	ldr	r3, [r3, #24]
 8006658:	429a      	cmp	r2, r3
 800665a:	d302      	bcc.n	8006662 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800665c:	2301      	movs	r3, #1
 800665e:	617b      	str	r3, [r7, #20]
 8006660:	e01b      	b.n	800669a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006662:	4b10      	ldr	r3, [pc, #64]	@ (80066a4 <prvInsertTimerInActiveList+0x7c>)
 8006664:	681a      	ldr	r2, [r3, #0]
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	3304      	adds	r3, #4
 800666a:	4619      	mov	r1, r3
 800666c:	4610      	mov	r0, r2
 800666e:	f7fe f9b8 	bl	80049e2 <vListInsert>
 8006672:	e012      	b.n	800669a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006674:	687a      	ldr	r2, [r7, #4]
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	429a      	cmp	r2, r3
 800667a:	d206      	bcs.n	800668a <prvInsertTimerInActiveList+0x62>
 800667c:	68ba      	ldr	r2, [r7, #8]
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	429a      	cmp	r2, r3
 8006682:	d302      	bcc.n	800668a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006684:	2301      	movs	r3, #1
 8006686:	617b      	str	r3, [r7, #20]
 8006688:	e007      	b.n	800669a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800668a:	4b07      	ldr	r3, [pc, #28]	@ (80066a8 <prvInsertTimerInActiveList+0x80>)
 800668c:	681a      	ldr	r2, [r3, #0]
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	3304      	adds	r3, #4
 8006692:	4619      	mov	r1, r3
 8006694:	4610      	mov	r0, r2
 8006696:	f7fe f9a4 	bl	80049e2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800669a:	697b      	ldr	r3, [r7, #20]
}
 800669c:	4618      	mov	r0, r3
 800669e:	3718      	adds	r7, #24
 80066a0:	46bd      	mov	sp, r7
 80066a2:	bd80      	pop	{r7, pc}
 80066a4:	20000fd4 	.word	0x20000fd4
 80066a8:	20000fd0 	.word	0x20000fd0

080066ac <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b08e      	sub	sp, #56	@ 0x38
 80066b0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80066b2:	e0ce      	b.n	8006852 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	da19      	bge.n	80066ee <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80066ba:	1d3b      	adds	r3, r7, #4
 80066bc:	3304      	adds	r3, #4
 80066be:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80066c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d10b      	bne.n	80066de <prvProcessReceivedCommands+0x32>
	__asm volatile
 80066c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066ca:	f383 8811 	msr	BASEPRI, r3
 80066ce:	f3bf 8f6f 	isb	sy
 80066d2:	f3bf 8f4f 	dsb	sy
 80066d6:	61fb      	str	r3, [r7, #28]
}
 80066d8:	bf00      	nop
 80066da:	bf00      	nop
 80066dc:	e7fd      	b.n	80066da <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80066de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80066e4:	6850      	ldr	r0, [r2, #4]
 80066e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80066e8:	6892      	ldr	r2, [r2, #8]
 80066ea:	4611      	mov	r1, r2
 80066ec:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	f2c0 80ae 	blt.w	8006852 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80066fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066fc:	695b      	ldr	r3, [r3, #20]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d004      	beq.n	800670c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006702:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006704:	3304      	adds	r3, #4
 8006706:	4618      	mov	r0, r3
 8006708:	f7fe f9a4 	bl	8004a54 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800670c:	463b      	mov	r3, r7
 800670e:	4618      	mov	r0, r3
 8006710:	f7ff ff6a 	bl	80065e8 <prvSampleTimeNow>
 8006714:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2b09      	cmp	r3, #9
 800671a:	f200 8097 	bhi.w	800684c <prvProcessReceivedCommands+0x1a0>
 800671e:	a201      	add	r2, pc, #4	@ (adr r2, 8006724 <prvProcessReceivedCommands+0x78>)
 8006720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006724:	0800674d 	.word	0x0800674d
 8006728:	0800674d 	.word	0x0800674d
 800672c:	0800674d 	.word	0x0800674d
 8006730:	080067c3 	.word	0x080067c3
 8006734:	080067d7 	.word	0x080067d7
 8006738:	08006823 	.word	0x08006823
 800673c:	0800674d 	.word	0x0800674d
 8006740:	0800674d 	.word	0x0800674d
 8006744:	080067c3 	.word	0x080067c3
 8006748:	080067d7 	.word	0x080067d7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800674c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800674e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006752:	f043 0301 	orr.w	r3, r3, #1
 8006756:	b2da      	uxtb	r2, r3
 8006758:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800675a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800675e:	68ba      	ldr	r2, [r7, #8]
 8006760:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006762:	699b      	ldr	r3, [r3, #24]
 8006764:	18d1      	adds	r1, r2, r3
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800676a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800676c:	f7ff ff5c 	bl	8006628 <prvInsertTimerInActiveList>
 8006770:	4603      	mov	r3, r0
 8006772:	2b00      	cmp	r3, #0
 8006774:	d06c      	beq.n	8006850 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006776:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006778:	6a1b      	ldr	r3, [r3, #32]
 800677a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800677c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800677e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006780:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006784:	f003 0304 	and.w	r3, r3, #4
 8006788:	2b00      	cmp	r3, #0
 800678a:	d061      	beq.n	8006850 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800678c:	68ba      	ldr	r2, [r7, #8]
 800678e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006790:	699b      	ldr	r3, [r3, #24]
 8006792:	441a      	add	r2, r3
 8006794:	2300      	movs	r3, #0
 8006796:	9300      	str	r3, [sp, #0]
 8006798:	2300      	movs	r3, #0
 800679a:	2100      	movs	r1, #0
 800679c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800679e:	f7ff fe01 	bl	80063a4 <xTimerGenericCommand>
 80067a2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80067a4:	6a3b      	ldr	r3, [r7, #32]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d152      	bne.n	8006850 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80067aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067ae:	f383 8811 	msr	BASEPRI, r3
 80067b2:	f3bf 8f6f 	isb	sy
 80067b6:	f3bf 8f4f 	dsb	sy
 80067ba:	61bb      	str	r3, [r7, #24]
}
 80067bc:	bf00      	nop
 80067be:	bf00      	nop
 80067c0:	e7fd      	b.n	80067be <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80067c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067c4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80067c8:	f023 0301 	bic.w	r3, r3, #1
 80067cc:	b2da      	uxtb	r2, r3
 80067ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067d0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80067d4:	e03d      	b.n	8006852 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80067d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067d8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80067dc:	f043 0301 	orr.w	r3, r3, #1
 80067e0:	b2da      	uxtb	r2, r3
 80067e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067e4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80067e8:	68ba      	ldr	r2, [r7, #8]
 80067ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067ec:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80067ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067f0:	699b      	ldr	r3, [r3, #24]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d10b      	bne.n	800680e <prvProcessReceivedCommands+0x162>
	__asm volatile
 80067f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067fa:	f383 8811 	msr	BASEPRI, r3
 80067fe:	f3bf 8f6f 	isb	sy
 8006802:	f3bf 8f4f 	dsb	sy
 8006806:	617b      	str	r3, [r7, #20]
}
 8006808:	bf00      	nop
 800680a:	bf00      	nop
 800680c:	e7fd      	b.n	800680a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800680e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006810:	699a      	ldr	r2, [r3, #24]
 8006812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006814:	18d1      	adds	r1, r2, r3
 8006816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006818:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800681a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800681c:	f7ff ff04 	bl	8006628 <prvInsertTimerInActiveList>
					break;
 8006820:	e017      	b.n	8006852 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006822:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006824:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006828:	f003 0302 	and.w	r3, r3, #2
 800682c:	2b00      	cmp	r3, #0
 800682e:	d103      	bne.n	8006838 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8006830:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006832:	f000 fbe9 	bl	8007008 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006836:	e00c      	b.n	8006852 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006838:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800683a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800683e:	f023 0301 	bic.w	r3, r3, #1
 8006842:	b2da      	uxtb	r2, r3
 8006844:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006846:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800684a:	e002      	b.n	8006852 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800684c:	bf00      	nop
 800684e:	e000      	b.n	8006852 <prvProcessReceivedCommands+0x1a6>
					break;
 8006850:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006852:	4b08      	ldr	r3, [pc, #32]	@ (8006874 <prvProcessReceivedCommands+0x1c8>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	1d39      	adds	r1, r7, #4
 8006858:	2200      	movs	r2, #0
 800685a:	4618      	mov	r0, r3
 800685c:	f7fe fbce 	bl	8004ffc <xQueueReceive>
 8006860:	4603      	mov	r3, r0
 8006862:	2b00      	cmp	r3, #0
 8006864:	f47f af26 	bne.w	80066b4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006868:	bf00      	nop
 800686a:	bf00      	nop
 800686c:	3730      	adds	r7, #48	@ 0x30
 800686e:	46bd      	mov	sp, r7
 8006870:	bd80      	pop	{r7, pc}
 8006872:	bf00      	nop
 8006874:	20000fd8 	.word	0x20000fd8

08006878 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b088      	sub	sp, #32
 800687c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800687e:	e049      	b.n	8006914 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006880:	4b2e      	ldr	r3, [pc, #184]	@ (800693c <prvSwitchTimerLists+0xc4>)
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	68db      	ldr	r3, [r3, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800688a:	4b2c      	ldr	r3, [pc, #176]	@ (800693c <prvSwitchTimerLists+0xc4>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	68db      	ldr	r3, [r3, #12]
 8006890:	68db      	ldr	r3, [r3, #12]
 8006892:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	3304      	adds	r3, #4
 8006898:	4618      	mov	r0, r3
 800689a:	f7fe f8db 	bl	8004a54 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	6a1b      	ldr	r3, [r3, #32]
 80068a2:	68f8      	ldr	r0, [r7, #12]
 80068a4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80068ac:	f003 0304 	and.w	r3, r3, #4
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d02f      	beq.n	8006914 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	699b      	ldr	r3, [r3, #24]
 80068b8:	693a      	ldr	r2, [r7, #16]
 80068ba:	4413      	add	r3, r2
 80068bc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80068be:	68ba      	ldr	r2, [r7, #8]
 80068c0:	693b      	ldr	r3, [r7, #16]
 80068c2:	429a      	cmp	r2, r3
 80068c4:	d90e      	bls.n	80068e4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	68ba      	ldr	r2, [r7, #8]
 80068ca:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	68fa      	ldr	r2, [r7, #12]
 80068d0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80068d2:	4b1a      	ldr	r3, [pc, #104]	@ (800693c <prvSwitchTimerLists+0xc4>)
 80068d4:	681a      	ldr	r2, [r3, #0]
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	3304      	adds	r3, #4
 80068da:	4619      	mov	r1, r3
 80068dc:	4610      	mov	r0, r2
 80068de:	f7fe f880 	bl	80049e2 <vListInsert>
 80068e2:	e017      	b.n	8006914 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80068e4:	2300      	movs	r3, #0
 80068e6:	9300      	str	r3, [sp, #0]
 80068e8:	2300      	movs	r3, #0
 80068ea:	693a      	ldr	r2, [r7, #16]
 80068ec:	2100      	movs	r1, #0
 80068ee:	68f8      	ldr	r0, [r7, #12]
 80068f0:	f7ff fd58 	bl	80063a4 <xTimerGenericCommand>
 80068f4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d10b      	bne.n	8006914 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80068fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006900:	f383 8811 	msr	BASEPRI, r3
 8006904:	f3bf 8f6f 	isb	sy
 8006908:	f3bf 8f4f 	dsb	sy
 800690c:	603b      	str	r3, [r7, #0]
}
 800690e:	bf00      	nop
 8006910:	bf00      	nop
 8006912:	e7fd      	b.n	8006910 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006914:	4b09      	ldr	r3, [pc, #36]	@ (800693c <prvSwitchTimerLists+0xc4>)
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d1b0      	bne.n	8006880 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800691e:	4b07      	ldr	r3, [pc, #28]	@ (800693c <prvSwitchTimerLists+0xc4>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006924:	4b06      	ldr	r3, [pc, #24]	@ (8006940 <prvSwitchTimerLists+0xc8>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	4a04      	ldr	r2, [pc, #16]	@ (800693c <prvSwitchTimerLists+0xc4>)
 800692a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800692c:	4a04      	ldr	r2, [pc, #16]	@ (8006940 <prvSwitchTimerLists+0xc8>)
 800692e:	697b      	ldr	r3, [r7, #20]
 8006930:	6013      	str	r3, [r2, #0]
}
 8006932:	bf00      	nop
 8006934:	3718      	adds	r7, #24
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}
 800693a:	bf00      	nop
 800693c:	20000fd0 	.word	0x20000fd0
 8006940:	20000fd4 	.word	0x20000fd4

08006944 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b082      	sub	sp, #8
 8006948:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800694a:	f000 f96d 	bl	8006c28 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800694e:	4b15      	ldr	r3, [pc, #84]	@ (80069a4 <prvCheckForValidListAndQueue+0x60>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d120      	bne.n	8006998 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006956:	4814      	ldr	r0, [pc, #80]	@ (80069a8 <prvCheckForValidListAndQueue+0x64>)
 8006958:	f7fd fff2 	bl	8004940 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800695c:	4813      	ldr	r0, [pc, #76]	@ (80069ac <prvCheckForValidListAndQueue+0x68>)
 800695e:	f7fd ffef 	bl	8004940 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006962:	4b13      	ldr	r3, [pc, #76]	@ (80069b0 <prvCheckForValidListAndQueue+0x6c>)
 8006964:	4a10      	ldr	r2, [pc, #64]	@ (80069a8 <prvCheckForValidListAndQueue+0x64>)
 8006966:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006968:	4b12      	ldr	r3, [pc, #72]	@ (80069b4 <prvCheckForValidListAndQueue+0x70>)
 800696a:	4a10      	ldr	r2, [pc, #64]	@ (80069ac <prvCheckForValidListAndQueue+0x68>)
 800696c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800696e:	2300      	movs	r3, #0
 8006970:	9300      	str	r3, [sp, #0]
 8006972:	4b11      	ldr	r3, [pc, #68]	@ (80069b8 <prvCheckForValidListAndQueue+0x74>)
 8006974:	4a11      	ldr	r2, [pc, #68]	@ (80069bc <prvCheckForValidListAndQueue+0x78>)
 8006976:	2110      	movs	r1, #16
 8006978:	200a      	movs	r0, #10
 800697a:	f7fe f8ff 	bl	8004b7c <xQueueGenericCreateStatic>
 800697e:	4603      	mov	r3, r0
 8006980:	4a08      	ldr	r2, [pc, #32]	@ (80069a4 <prvCheckForValidListAndQueue+0x60>)
 8006982:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006984:	4b07      	ldr	r3, [pc, #28]	@ (80069a4 <prvCheckForValidListAndQueue+0x60>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d005      	beq.n	8006998 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800698c:	4b05      	ldr	r3, [pc, #20]	@ (80069a4 <prvCheckForValidListAndQueue+0x60>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	490b      	ldr	r1, [pc, #44]	@ (80069c0 <prvCheckForValidListAndQueue+0x7c>)
 8006992:	4618      	mov	r0, r3
 8006994:	f7fe fd24 	bl	80053e0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006998:	f000 f978 	bl	8006c8c <vPortExitCritical>
}
 800699c:	bf00      	nop
 800699e:	46bd      	mov	sp, r7
 80069a0:	bd80      	pop	{r7, pc}
 80069a2:	bf00      	nop
 80069a4:	20000fd8 	.word	0x20000fd8
 80069a8:	20000fa8 	.word	0x20000fa8
 80069ac:	20000fbc 	.word	0x20000fbc
 80069b0:	20000fd0 	.word	0x20000fd0
 80069b4:	20000fd4 	.word	0x20000fd4
 80069b8:	20001084 	.word	0x20001084
 80069bc:	20000fe4 	.word	0x20000fe4
 80069c0:	08007744 	.word	0x08007744

080069c4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80069c4:	b480      	push	{r7}
 80069c6:	b085      	sub	sp, #20
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	60f8      	str	r0, [r7, #12]
 80069cc:	60b9      	str	r1, [r7, #8]
 80069ce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	3b04      	subs	r3, #4
 80069d4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80069dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	3b04      	subs	r3, #4
 80069e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	f023 0201 	bic.w	r2, r3, #1
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	3b04      	subs	r3, #4
 80069f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80069f4:	4a0c      	ldr	r2, [pc, #48]	@ (8006a28 <pxPortInitialiseStack+0x64>)
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	3b14      	subs	r3, #20
 80069fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006a00:	687a      	ldr	r2, [r7, #4]
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	3b04      	subs	r3, #4
 8006a0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	f06f 0202 	mvn.w	r2, #2
 8006a12:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	3b20      	subs	r3, #32
 8006a18:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
}
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	3714      	adds	r7, #20
 8006a20:	46bd      	mov	sp, r7
 8006a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a26:	4770      	bx	lr
 8006a28:	08006a2d 	.word	0x08006a2d

08006a2c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b085      	sub	sp, #20
 8006a30:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006a32:	2300      	movs	r3, #0
 8006a34:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006a36:	4b13      	ldr	r3, [pc, #76]	@ (8006a84 <prvTaskExitError+0x58>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a3e:	d00b      	beq.n	8006a58 <prvTaskExitError+0x2c>
	__asm volatile
 8006a40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a44:	f383 8811 	msr	BASEPRI, r3
 8006a48:	f3bf 8f6f 	isb	sy
 8006a4c:	f3bf 8f4f 	dsb	sy
 8006a50:	60fb      	str	r3, [r7, #12]
}
 8006a52:	bf00      	nop
 8006a54:	bf00      	nop
 8006a56:	e7fd      	b.n	8006a54 <prvTaskExitError+0x28>
	__asm volatile
 8006a58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a5c:	f383 8811 	msr	BASEPRI, r3
 8006a60:	f3bf 8f6f 	isb	sy
 8006a64:	f3bf 8f4f 	dsb	sy
 8006a68:	60bb      	str	r3, [r7, #8]
}
 8006a6a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006a6c:	bf00      	nop
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d0fc      	beq.n	8006a6e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006a74:	bf00      	nop
 8006a76:	bf00      	nop
 8006a78:	3714      	adds	r7, #20
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a80:	4770      	bx	lr
 8006a82:	bf00      	nop
 8006a84:	2000000c 	.word	0x2000000c
	...

08006a90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006a90:	4b07      	ldr	r3, [pc, #28]	@ (8006ab0 <pxCurrentTCBConst2>)
 8006a92:	6819      	ldr	r1, [r3, #0]
 8006a94:	6808      	ldr	r0, [r1, #0]
 8006a96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a9a:	f380 8809 	msr	PSP, r0
 8006a9e:	f3bf 8f6f 	isb	sy
 8006aa2:	f04f 0000 	mov.w	r0, #0
 8006aa6:	f380 8811 	msr	BASEPRI, r0
 8006aaa:	4770      	bx	lr
 8006aac:	f3af 8000 	nop.w

08006ab0 <pxCurrentTCBConst2>:
 8006ab0:	20000aa8 	.word	0x20000aa8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006ab4:	bf00      	nop
 8006ab6:	bf00      	nop

08006ab8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006ab8:	4808      	ldr	r0, [pc, #32]	@ (8006adc <prvPortStartFirstTask+0x24>)
 8006aba:	6800      	ldr	r0, [r0, #0]
 8006abc:	6800      	ldr	r0, [r0, #0]
 8006abe:	f380 8808 	msr	MSP, r0
 8006ac2:	f04f 0000 	mov.w	r0, #0
 8006ac6:	f380 8814 	msr	CONTROL, r0
 8006aca:	b662      	cpsie	i
 8006acc:	b661      	cpsie	f
 8006ace:	f3bf 8f4f 	dsb	sy
 8006ad2:	f3bf 8f6f 	isb	sy
 8006ad6:	df00      	svc	0
 8006ad8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006ada:	bf00      	nop
 8006adc:	e000ed08 	.word	0xe000ed08

08006ae0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b086      	sub	sp, #24
 8006ae4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006ae6:	4b47      	ldr	r3, [pc, #284]	@ (8006c04 <xPortStartScheduler+0x124>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4a47      	ldr	r2, [pc, #284]	@ (8006c08 <xPortStartScheduler+0x128>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d10b      	bne.n	8006b08 <xPortStartScheduler+0x28>
	__asm volatile
 8006af0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006af4:	f383 8811 	msr	BASEPRI, r3
 8006af8:	f3bf 8f6f 	isb	sy
 8006afc:	f3bf 8f4f 	dsb	sy
 8006b00:	613b      	str	r3, [r7, #16]
}
 8006b02:	bf00      	nop
 8006b04:	bf00      	nop
 8006b06:	e7fd      	b.n	8006b04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006b08:	4b3e      	ldr	r3, [pc, #248]	@ (8006c04 <xPortStartScheduler+0x124>)
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	4a3f      	ldr	r2, [pc, #252]	@ (8006c0c <xPortStartScheduler+0x12c>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d10b      	bne.n	8006b2a <xPortStartScheduler+0x4a>
	__asm volatile
 8006b12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b16:	f383 8811 	msr	BASEPRI, r3
 8006b1a:	f3bf 8f6f 	isb	sy
 8006b1e:	f3bf 8f4f 	dsb	sy
 8006b22:	60fb      	str	r3, [r7, #12]
}
 8006b24:	bf00      	nop
 8006b26:	bf00      	nop
 8006b28:	e7fd      	b.n	8006b26 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006b2a:	4b39      	ldr	r3, [pc, #228]	@ (8006c10 <xPortStartScheduler+0x130>)
 8006b2c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006b2e:	697b      	ldr	r3, [r7, #20]
 8006b30:	781b      	ldrb	r3, [r3, #0]
 8006b32:	b2db      	uxtb	r3, r3
 8006b34:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006b36:	697b      	ldr	r3, [r7, #20]
 8006b38:	22ff      	movs	r2, #255	@ 0xff
 8006b3a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006b3c:	697b      	ldr	r3, [r7, #20]
 8006b3e:	781b      	ldrb	r3, [r3, #0]
 8006b40:	b2db      	uxtb	r3, r3
 8006b42:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006b44:	78fb      	ldrb	r3, [r7, #3]
 8006b46:	b2db      	uxtb	r3, r3
 8006b48:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006b4c:	b2da      	uxtb	r2, r3
 8006b4e:	4b31      	ldr	r3, [pc, #196]	@ (8006c14 <xPortStartScheduler+0x134>)
 8006b50:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006b52:	4b31      	ldr	r3, [pc, #196]	@ (8006c18 <xPortStartScheduler+0x138>)
 8006b54:	2207      	movs	r2, #7
 8006b56:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006b58:	e009      	b.n	8006b6e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8006b5a:	4b2f      	ldr	r3, [pc, #188]	@ (8006c18 <xPortStartScheduler+0x138>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	3b01      	subs	r3, #1
 8006b60:	4a2d      	ldr	r2, [pc, #180]	@ (8006c18 <xPortStartScheduler+0x138>)
 8006b62:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006b64:	78fb      	ldrb	r3, [r7, #3]
 8006b66:	b2db      	uxtb	r3, r3
 8006b68:	005b      	lsls	r3, r3, #1
 8006b6a:	b2db      	uxtb	r3, r3
 8006b6c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006b6e:	78fb      	ldrb	r3, [r7, #3]
 8006b70:	b2db      	uxtb	r3, r3
 8006b72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b76:	2b80      	cmp	r3, #128	@ 0x80
 8006b78:	d0ef      	beq.n	8006b5a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006b7a:	4b27      	ldr	r3, [pc, #156]	@ (8006c18 <xPortStartScheduler+0x138>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f1c3 0307 	rsb	r3, r3, #7
 8006b82:	2b04      	cmp	r3, #4
 8006b84:	d00b      	beq.n	8006b9e <xPortStartScheduler+0xbe>
	__asm volatile
 8006b86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b8a:	f383 8811 	msr	BASEPRI, r3
 8006b8e:	f3bf 8f6f 	isb	sy
 8006b92:	f3bf 8f4f 	dsb	sy
 8006b96:	60bb      	str	r3, [r7, #8]
}
 8006b98:	bf00      	nop
 8006b9a:	bf00      	nop
 8006b9c:	e7fd      	b.n	8006b9a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006b9e:	4b1e      	ldr	r3, [pc, #120]	@ (8006c18 <xPortStartScheduler+0x138>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	021b      	lsls	r3, r3, #8
 8006ba4:	4a1c      	ldr	r2, [pc, #112]	@ (8006c18 <xPortStartScheduler+0x138>)
 8006ba6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006ba8:	4b1b      	ldr	r3, [pc, #108]	@ (8006c18 <xPortStartScheduler+0x138>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006bb0:	4a19      	ldr	r2, [pc, #100]	@ (8006c18 <xPortStartScheduler+0x138>)
 8006bb2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	b2da      	uxtb	r2, r3
 8006bb8:	697b      	ldr	r3, [r7, #20]
 8006bba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006bbc:	4b17      	ldr	r3, [pc, #92]	@ (8006c1c <xPortStartScheduler+0x13c>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	4a16      	ldr	r2, [pc, #88]	@ (8006c1c <xPortStartScheduler+0x13c>)
 8006bc2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006bc6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006bc8:	4b14      	ldr	r3, [pc, #80]	@ (8006c1c <xPortStartScheduler+0x13c>)
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	4a13      	ldr	r2, [pc, #76]	@ (8006c1c <xPortStartScheduler+0x13c>)
 8006bce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006bd2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006bd4:	f000 f8da 	bl	8006d8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006bd8:	4b11      	ldr	r3, [pc, #68]	@ (8006c20 <xPortStartScheduler+0x140>)
 8006bda:	2200      	movs	r2, #0
 8006bdc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006bde:	f000 f8f9 	bl	8006dd4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006be2:	4b10      	ldr	r3, [pc, #64]	@ (8006c24 <xPortStartScheduler+0x144>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	4a0f      	ldr	r2, [pc, #60]	@ (8006c24 <xPortStartScheduler+0x144>)
 8006be8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8006bec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006bee:	f7ff ff63 	bl	8006ab8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006bf2:	f7ff f82d 	bl	8005c50 <vTaskSwitchContext>
	prvTaskExitError();
 8006bf6:	f7ff ff19 	bl	8006a2c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006bfa:	2300      	movs	r3, #0
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	3718      	adds	r7, #24
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bd80      	pop	{r7, pc}
 8006c04:	e000ed00 	.word	0xe000ed00
 8006c08:	410fc271 	.word	0x410fc271
 8006c0c:	410fc270 	.word	0x410fc270
 8006c10:	e000e400 	.word	0xe000e400
 8006c14:	200010d4 	.word	0x200010d4
 8006c18:	200010d8 	.word	0x200010d8
 8006c1c:	e000ed20 	.word	0xe000ed20
 8006c20:	2000000c 	.word	0x2000000c
 8006c24:	e000ef34 	.word	0xe000ef34

08006c28 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006c28:	b480      	push	{r7}
 8006c2a:	b083      	sub	sp, #12
 8006c2c:	af00      	add	r7, sp, #0
	__asm volatile
 8006c2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c32:	f383 8811 	msr	BASEPRI, r3
 8006c36:	f3bf 8f6f 	isb	sy
 8006c3a:	f3bf 8f4f 	dsb	sy
 8006c3e:	607b      	str	r3, [r7, #4]
}
 8006c40:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006c42:	4b10      	ldr	r3, [pc, #64]	@ (8006c84 <vPortEnterCritical+0x5c>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	3301      	adds	r3, #1
 8006c48:	4a0e      	ldr	r2, [pc, #56]	@ (8006c84 <vPortEnterCritical+0x5c>)
 8006c4a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006c4c:	4b0d      	ldr	r3, [pc, #52]	@ (8006c84 <vPortEnterCritical+0x5c>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	2b01      	cmp	r3, #1
 8006c52:	d110      	bne.n	8006c76 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006c54:	4b0c      	ldr	r3, [pc, #48]	@ (8006c88 <vPortEnterCritical+0x60>)
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	b2db      	uxtb	r3, r3
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d00b      	beq.n	8006c76 <vPortEnterCritical+0x4e>
	__asm volatile
 8006c5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c62:	f383 8811 	msr	BASEPRI, r3
 8006c66:	f3bf 8f6f 	isb	sy
 8006c6a:	f3bf 8f4f 	dsb	sy
 8006c6e:	603b      	str	r3, [r7, #0]
}
 8006c70:	bf00      	nop
 8006c72:	bf00      	nop
 8006c74:	e7fd      	b.n	8006c72 <vPortEnterCritical+0x4a>
	}
}
 8006c76:	bf00      	nop
 8006c78:	370c      	adds	r7, #12
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c80:	4770      	bx	lr
 8006c82:	bf00      	nop
 8006c84:	2000000c 	.word	0x2000000c
 8006c88:	e000ed04 	.word	0xe000ed04

08006c8c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b083      	sub	sp, #12
 8006c90:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006c92:	4b12      	ldr	r3, [pc, #72]	@ (8006cdc <vPortExitCritical+0x50>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d10b      	bne.n	8006cb2 <vPortExitCritical+0x26>
	__asm volatile
 8006c9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c9e:	f383 8811 	msr	BASEPRI, r3
 8006ca2:	f3bf 8f6f 	isb	sy
 8006ca6:	f3bf 8f4f 	dsb	sy
 8006caa:	607b      	str	r3, [r7, #4]
}
 8006cac:	bf00      	nop
 8006cae:	bf00      	nop
 8006cb0:	e7fd      	b.n	8006cae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006cb2:	4b0a      	ldr	r3, [pc, #40]	@ (8006cdc <vPortExitCritical+0x50>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	3b01      	subs	r3, #1
 8006cb8:	4a08      	ldr	r2, [pc, #32]	@ (8006cdc <vPortExitCritical+0x50>)
 8006cba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006cbc:	4b07      	ldr	r3, [pc, #28]	@ (8006cdc <vPortExitCritical+0x50>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d105      	bne.n	8006cd0 <vPortExitCritical+0x44>
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	f383 8811 	msr	BASEPRI, r3
}
 8006cce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006cd0:	bf00      	nop
 8006cd2:	370c      	adds	r7, #12
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cda:	4770      	bx	lr
 8006cdc:	2000000c 	.word	0x2000000c

08006ce0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006ce0:	f3ef 8009 	mrs	r0, PSP
 8006ce4:	f3bf 8f6f 	isb	sy
 8006ce8:	4b15      	ldr	r3, [pc, #84]	@ (8006d40 <pxCurrentTCBConst>)
 8006cea:	681a      	ldr	r2, [r3, #0]
 8006cec:	f01e 0f10 	tst.w	lr, #16
 8006cf0:	bf08      	it	eq
 8006cf2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006cf6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cfa:	6010      	str	r0, [r2, #0]
 8006cfc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006d00:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006d04:	f380 8811 	msr	BASEPRI, r0
 8006d08:	f3bf 8f4f 	dsb	sy
 8006d0c:	f3bf 8f6f 	isb	sy
 8006d10:	f7fe ff9e 	bl	8005c50 <vTaskSwitchContext>
 8006d14:	f04f 0000 	mov.w	r0, #0
 8006d18:	f380 8811 	msr	BASEPRI, r0
 8006d1c:	bc09      	pop	{r0, r3}
 8006d1e:	6819      	ldr	r1, [r3, #0]
 8006d20:	6808      	ldr	r0, [r1, #0]
 8006d22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d26:	f01e 0f10 	tst.w	lr, #16
 8006d2a:	bf08      	it	eq
 8006d2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006d30:	f380 8809 	msr	PSP, r0
 8006d34:	f3bf 8f6f 	isb	sy
 8006d38:	4770      	bx	lr
 8006d3a:	bf00      	nop
 8006d3c:	f3af 8000 	nop.w

08006d40 <pxCurrentTCBConst>:
 8006d40:	20000aa8 	.word	0x20000aa8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006d44:	bf00      	nop
 8006d46:	bf00      	nop

08006d48 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b082      	sub	sp, #8
 8006d4c:	af00      	add	r7, sp, #0
	__asm volatile
 8006d4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d52:	f383 8811 	msr	BASEPRI, r3
 8006d56:	f3bf 8f6f 	isb	sy
 8006d5a:	f3bf 8f4f 	dsb	sy
 8006d5e:	607b      	str	r3, [r7, #4]
}
 8006d60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006d62:	f7fe febb 	bl	8005adc <xTaskIncrementTick>
 8006d66:	4603      	mov	r3, r0
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d003      	beq.n	8006d74 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006d6c:	4b06      	ldr	r3, [pc, #24]	@ (8006d88 <xPortSysTickHandler+0x40>)
 8006d6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d72:	601a      	str	r2, [r3, #0]
 8006d74:	2300      	movs	r3, #0
 8006d76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	f383 8811 	msr	BASEPRI, r3
}
 8006d7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006d80:	bf00      	nop
 8006d82:	3708      	adds	r7, #8
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bd80      	pop	{r7, pc}
 8006d88:	e000ed04 	.word	0xe000ed04

08006d8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006d8c:	b480      	push	{r7}
 8006d8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006d90:	4b0b      	ldr	r3, [pc, #44]	@ (8006dc0 <vPortSetupTimerInterrupt+0x34>)
 8006d92:	2200      	movs	r2, #0
 8006d94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006d96:	4b0b      	ldr	r3, [pc, #44]	@ (8006dc4 <vPortSetupTimerInterrupt+0x38>)
 8006d98:	2200      	movs	r2, #0
 8006d9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006d9c:	4b0a      	ldr	r3, [pc, #40]	@ (8006dc8 <vPortSetupTimerInterrupt+0x3c>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4a0a      	ldr	r2, [pc, #40]	@ (8006dcc <vPortSetupTimerInterrupt+0x40>)
 8006da2:	fba2 2303 	umull	r2, r3, r2, r3
 8006da6:	099b      	lsrs	r3, r3, #6
 8006da8:	4a09      	ldr	r2, [pc, #36]	@ (8006dd0 <vPortSetupTimerInterrupt+0x44>)
 8006daa:	3b01      	subs	r3, #1
 8006dac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006dae:	4b04      	ldr	r3, [pc, #16]	@ (8006dc0 <vPortSetupTimerInterrupt+0x34>)
 8006db0:	2207      	movs	r2, #7
 8006db2:	601a      	str	r2, [r3, #0]
}
 8006db4:	bf00      	nop
 8006db6:	46bd      	mov	sp, r7
 8006db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbc:	4770      	bx	lr
 8006dbe:	bf00      	nop
 8006dc0:	e000e010 	.word	0xe000e010
 8006dc4:	e000e018 	.word	0xe000e018
 8006dc8:	20000000 	.word	0x20000000
 8006dcc:	10624dd3 	.word	0x10624dd3
 8006dd0:	e000e014 	.word	0xe000e014

08006dd4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006dd4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006de4 <vPortEnableVFP+0x10>
 8006dd8:	6801      	ldr	r1, [r0, #0]
 8006dda:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8006dde:	6001      	str	r1, [r0, #0]
 8006de0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006de2:	bf00      	nop
 8006de4:	e000ed88 	.word	0xe000ed88

08006de8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006de8:	b480      	push	{r7}
 8006dea:	b085      	sub	sp, #20
 8006dec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006dee:	f3ef 8305 	mrs	r3, IPSR
 8006df2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	2b0f      	cmp	r3, #15
 8006df8:	d915      	bls.n	8006e26 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006dfa:	4a18      	ldr	r2, [pc, #96]	@ (8006e5c <vPortValidateInterruptPriority+0x74>)
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	4413      	add	r3, r2
 8006e00:	781b      	ldrb	r3, [r3, #0]
 8006e02:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006e04:	4b16      	ldr	r3, [pc, #88]	@ (8006e60 <vPortValidateInterruptPriority+0x78>)
 8006e06:	781b      	ldrb	r3, [r3, #0]
 8006e08:	7afa      	ldrb	r2, [r7, #11]
 8006e0a:	429a      	cmp	r2, r3
 8006e0c:	d20b      	bcs.n	8006e26 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8006e0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e12:	f383 8811 	msr	BASEPRI, r3
 8006e16:	f3bf 8f6f 	isb	sy
 8006e1a:	f3bf 8f4f 	dsb	sy
 8006e1e:	607b      	str	r3, [r7, #4]
}
 8006e20:	bf00      	nop
 8006e22:	bf00      	nop
 8006e24:	e7fd      	b.n	8006e22 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006e26:	4b0f      	ldr	r3, [pc, #60]	@ (8006e64 <vPortValidateInterruptPriority+0x7c>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006e2e:	4b0e      	ldr	r3, [pc, #56]	@ (8006e68 <vPortValidateInterruptPriority+0x80>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	429a      	cmp	r2, r3
 8006e34:	d90b      	bls.n	8006e4e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006e36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e3a:	f383 8811 	msr	BASEPRI, r3
 8006e3e:	f3bf 8f6f 	isb	sy
 8006e42:	f3bf 8f4f 	dsb	sy
 8006e46:	603b      	str	r3, [r7, #0]
}
 8006e48:	bf00      	nop
 8006e4a:	bf00      	nop
 8006e4c:	e7fd      	b.n	8006e4a <vPortValidateInterruptPriority+0x62>
	}
 8006e4e:	bf00      	nop
 8006e50:	3714      	adds	r7, #20
 8006e52:	46bd      	mov	sp, r7
 8006e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e58:	4770      	bx	lr
 8006e5a:	bf00      	nop
 8006e5c:	e000e3f0 	.word	0xe000e3f0
 8006e60:	200010d4 	.word	0x200010d4
 8006e64:	e000ed0c 	.word	0xe000ed0c
 8006e68:	200010d8 	.word	0x200010d8

08006e6c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b08a      	sub	sp, #40	@ 0x28
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006e74:	2300      	movs	r3, #0
 8006e76:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006e78:	f7fe fd74 	bl	8005964 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006e7c:	4b5c      	ldr	r3, [pc, #368]	@ (8006ff0 <pvPortMalloc+0x184>)
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d101      	bne.n	8006e88 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006e84:	f000 f924 	bl	80070d0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006e88:	4b5a      	ldr	r3, [pc, #360]	@ (8006ff4 <pvPortMalloc+0x188>)
 8006e8a:	681a      	ldr	r2, [r3, #0]
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	4013      	ands	r3, r2
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	f040 8095 	bne.w	8006fc0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d01e      	beq.n	8006eda <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006e9c:	2208      	movs	r2, #8
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	4413      	add	r3, r2
 8006ea2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	f003 0307 	and.w	r3, r3, #7
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d015      	beq.n	8006eda <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	f023 0307 	bic.w	r3, r3, #7
 8006eb4:	3308      	adds	r3, #8
 8006eb6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f003 0307 	and.w	r3, r3, #7
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d00b      	beq.n	8006eda <pvPortMalloc+0x6e>
	__asm volatile
 8006ec2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ec6:	f383 8811 	msr	BASEPRI, r3
 8006eca:	f3bf 8f6f 	isb	sy
 8006ece:	f3bf 8f4f 	dsb	sy
 8006ed2:	617b      	str	r3, [r7, #20]
}
 8006ed4:	bf00      	nop
 8006ed6:	bf00      	nop
 8006ed8:	e7fd      	b.n	8006ed6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d06f      	beq.n	8006fc0 <pvPortMalloc+0x154>
 8006ee0:	4b45      	ldr	r3, [pc, #276]	@ (8006ff8 <pvPortMalloc+0x18c>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	687a      	ldr	r2, [r7, #4]
 8006ee6:	429a      	cmp	r2, r3
 8006ee8:	d86a      	bhi.n	8006fc0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006eea:	4b44      	ldr	r3, [pc, #272]	@ (8006ffc <pvPortMalloc+0x190>)
 8006eec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006eee:	4b43      	ldr	r3, [pc, #268]	@ (8006ffc <pvPortMalloc+0x190>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006ef4:	e004      	b.n	8006f00 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ef8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f02:	685b      	ldr	r3, [r3, #4]
 8006f04:	687a      	ldr	r2, [r7, #4]
 8006f06:	429a      	cmp	r2, r3
 8006f08:	d903      	bls.n	8006f12 <pvPortMalloc+0xa6>
 8006f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d1f1      	bne.n	8006ef6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006f12:	4b37      	ldr	r3, [pc, #220]	@ (8006ff0 <pvPortMalloc+0x184>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f18:	429a      	cmp	r2, r3
 8006f1a:	d051      	beq.n	8006fc0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006f1c:	6a3b      	ldr	r3, [r7, #32]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	2208      	movs	r2, #8
 8006f22:	4413      	add	r3, r2
 8006f24:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f28:	681a      	ldr	r2, [r3, #0]
 8006f2a:	6a3b      	ldr	r3, [r7, #32]
 8006f2c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f30:	685a      	ldr	r2, [r3, #4]
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	1ad2      	subs	r2, r2, r3
 8006f36:	2308      	movs	r3, #8
 8006f38:	005b      	lsls	r3, r3, #1
 8006f3a:	429a      	cmp	r2, r3
 8006f3c:	d920      	bls.n	8006f80 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006f3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	4413      	add	r3, r2
 8006f44:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006f46:	69bb      	ldr	r3, [r7, #24]
 8006f48:	f003 0307 	and.w	r3, r3, #7
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d00b      	beq.n	8006f68 <pvPortMalloc+0xfc>
	__asm volatile
 8006f50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f54:	f383 8811 	msr	BASEPRI, r3
 8006f58:	f3bf 8f6f 	isb	sy
 8006f5c:	f3bf 8f4f 	dsb	sy
 8006f60:	613b      	str	r3, [r7, #16]
}
 8006f62:	bf00      	nop
 8006f64:	bf00      	nop
 8006f66:	e7fd      	b.n	8006f64 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f6a:	685a      	ldr	r2, [r3, #4]
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	1ad2      	subs	r2, r2, r3
 8006f70:	69bb      	ldr	r3, [r7, #24]
 8006f72:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f76:	687a      	ldr	r2, [r7, #4]
 8006f78:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006f7a:	69b8      	ldr	r0, [r7, #24]
 8006f7c:	f000 f90a 	bl	8007194 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006f80:	4b1d      	ldr	r3, [pc, #116]	@ (8006ff8 <pvPortMalloc+0x18c>)
 8006f82:	681a      	ldr	r2, [r3, #0]
 8006f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f86:	685b      	ldr	r3, [r3, #4]
 8006f88:	1ad3      	subs	r3, r2, r3
 8006f8a:	4a1b      	ldr	r2, [pc, #108]	@ (8006ff8 <pvPortMalloc+0x18c>)
 8006f8c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006f8e:	4b1a      	ldr	r3, [pc, #104]	@ (8006ff8 <pvPortMalloc+0x18c>)
 8006f90:	681a      	ldr	r2, [r3, #0]
 8006f92:	4b1b      	ldr	r3, [pc, #108]	@ (8007000 <pvPortMalloc+0x194>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	429a      	cmp	r2, r3
 8006f98:	d203      	bcs.n	8006fa2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006f9a:	4b17      	ldr	r3, [pc, #92]	@ (8006ff8 <pvPortMalloc+0x18c>)
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4a18      	ldr	r2, [pc, #96]	@ (8007000 <pvPortMalloc+0x194>)
 8006fa0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fa4:	685a      	ldr	r2, [r3, #4]
 8006fa6:	4b13      	ldr	r3, [pc, #76]	@ (8006ff4 <pvPortMalloc+0x188>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	431a      	orrs	r2, r3
 8006fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006fb6:	4b13      	ldr	r3, [pc, #76]	@ (8007004 <pvPortMalloc+0x198>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	3301      	adds	r3, #1
 8006fbc:	4a11      	ldr	r2, [pc, #68]	@ (8007004 <pvPortMalloc+0x198>)
 8006fbe:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006fc0:	f7fe fcde 	bl	8005980 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006fc4:	69fb      	ldr	r3, [r7, #28]
 8006fc6:	f003 0307 	and.w	r3, r3, #7
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d00b      	beq.n	8006fe6 <pvPortMalloc+0x17a>
	__asm volatile
 8006fce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fd2:	f383 8811 	msr	BASEPRI, r3
 8006fd6:	f3bf 8f6f 	isb	sy
 8006fda:	f3bf 8f4f 	dsb	sy
 8006fde:	60fb      	str	r3, [r7, #12]
}
 8006fe0:	bf00      	nop
 8006fe2:	bf00      	nop
 8006fe4:	e7fd      	b.n	8006fe2 <pvPortMalloc+0x176>
	return pvReturn;
 8006fe6:	69fb      	ldr	r3, [r7, #28]
}
 8006fe8:	4618      	mov	r0, r3
 8006fea:	3728      	adds	r7, #40	@ 0x28
 8006fec:	46bd      	mov	sp, r7
 8006fee:	bd80      	pop	{r7, pc}
 8006ff0:	20004ce4 	.word	0x20004ce4
 8006ff4:	20004cf8 	.word	0x20004cf8
 8006ff8:	20004ce8 	.word	0x20004ce8
 8006ffc:	20004cdc 	.word	0x20004cdc
 8007000:	20004cec 	.word	0x20004cec
 8007004:	20004cf0 	.word	0x20004cf0

08007008 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b086      	sub	sp, #24
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d04f      	beq.n	80070ba <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800701a:	2308      	movs	r3, #8
 800701c:	425b      	negs	r3, r3
 800701e:	697a      	ldr	r2, [r7, #20]
 8007020:	4413      	add	r3, r2
 8007022:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007024:	697b      	ldr	r3, [r7, #20]
 8007026:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007028:	693b      	ldr	r3, [r7, #16]
 800702a:	685a      	ldr	r2, [r3, #4]
 800702c:	4b25      	ldr	r3, [pc, #148]	@ (80070c4 <vPortFree+0xbc>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4013      	ands	r3, r2
 8007032:	2b00      	cmp	r3, #0
 8007034:	d10b      	bne.n	800704e <vPortFree+0x46>
	__asm volatile
 8007036:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800703a:	f383 8811 	msr	BASEPRI, r3
 800703e:	f3bf 8f6f 	isb	sy
 8007042:	f3bf 8f4f 	dsb	sy
 8007046:	60fb      	str	r3, [r7, #12]
}
 8007048:	bf00      	nop
 800704a:	bf00      	nop
 800704c:	e7fd      	b.n	800704a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800704e:	693b      	ldr	r3, [r7, #16]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d00b      	beq.n	800706e <vPortFree+0x66>
	__asm volatile
 8007056:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800705a:	f383 8811 	msr	BASEPRI, r3
 800705e:	f3bf 8f6f 	isb	sy
 8007062:	f3bf 8f4f 	dsb	sy
 8007066:	60bb      	str	r3, [r7, #8]
}
 8007068:	bf00      	nop
 800706a:	bf00      	nop
 800706c:	e7fd      	b.n	800706a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800706e:	693b      	ldr	r3, [r7, #16]
 8007070:	685a      	ldr	r2, [r3, #4]
 8007072:	4b14      	ldr	r3, [pc, #80]	@ (80070c4 <vPortFree+0xbc>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	4013      	ands	r3, r2
 8007078:	2b00      	cmp	r3, #0
 800707a:	d01e      	beq.n	80070ba <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800707c:	693b      	ldr	r3, [r7, #16]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d11a      	bne.n	80070ba <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007084:	693b      	ldr	r3, [r7, #16]
 8007086:	685a      	ldr	r2, [r3, #4]
 8007088:	4b0e      	ldr	r3, [pc, #56]	@ (80070c4 <vPortFree+0xbc>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	43db      	mvns	r3, r3
 800708e:	401a      	ands	r2, r3
 8007090:	693b      	ldr	r3, [r7, #16]
 8007092:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007094:	f7fe fc66 	bl	8005964 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007098:	693b      	ldr	r3, [r7, #16]
 800709a:	685a      	ldr	r2, [r3, #4]
 800709c:	4b0a      	ldr	r3, [pc, #40]	@ (80070c8 <vPortFree+0xc0>)
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	4413      	add	r3, r2
 80070a2:	4a09      	ldr	r2, [pc, #36]	@ (80070c8 <vPortFree+0xc0>)
 80070a4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80070a6:	6938      	ldr	r0, [r7, #16]
 80070a8:	f000 f874 	bl	8007194 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80070ac:	4b07      	ldr	r3, [pc, #28]	@ (80070cc <vPortFree+0xc4>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	3301      	adds	r3, #1
 80070b2:	4a06      	ldr	r2, [pc, #24]	@ (80070cc <vPortFree+0xc4>)
 80070b4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80070b6:	f7fe fc63 	bl	8005980 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80070ba:	bf00      	nop
 80070bc:	3718      	adds	r7, #24
 80070be:	46bd      	mov	sp, r7
 80070c0:	bd80      	pop	{r7, pc}
 80070c2:	bf00      	nop
 80070c4:	20004cf8 	.word	0x20004cf8
 80070c8:	20004ce8 	.word	0x20004ce8
 80070cc:	20004cf4 	.word	0x20004cf4

080070d0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80070d0:	b480      	push	{r7}
 80070d2:	b085      	sub	sp, #20
 80070d4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80070d6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80070da:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80070dc:	4b27      	ldr	r3, [pc, #156]	@ (800717c <prvHeapInit+0xac>)
 80070de:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	f003 0307 	and.w	r3, r3, #7
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d00c      	beq.n	8007104 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	3307      	adds	r3, #7
 80070ee:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	f023 0307 	bic.w	r3, r3, #7
 80070f6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80070f8:	68ba      	ldr	r2, [r7, #8]
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	1ad3      	subs	r3, r2, r3
 80070fe:	4a1f      	ldr	r2, [pc, #124]	@ (800717c <prvHeapInit+0xac>)
 8007100:	4413      	add	r3, r2
 8007102:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007108:	4a1d      	ldr	r2, [pc, #116]	@ (8007180 <prvHeapInit+0xb0>)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800710e:	4b1c      	ldr	r3, [pc, #112]	@ (8007180 <prvHeapInit+0xb0>)
 8007110:	2200      	movs	r2, #0
 8007112:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	68ba      	ldr	r2, [r7, #8]
 8007118:	4413      	add	r3, r2
 800711a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800711c:	2208      	movs	r2, #8
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	1a9b      	subs	r3, r3, r2
 8007122:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	f023 0307 	bic.w	r3, r3, #7
 800712a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	4a15      	ldr	r2, [pc, #84]	@ (8007184 <prvHeapInit+0xb4>)
 8007130:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007132:	4b14      	ldr	r3, [pc, #80]	@ (8007184 <prvHeapInit+0xb4>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	2200      	movs	r2, #0
 8007138:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800713a:	4b12      	ldr	r3, [pc, #72]	@ (8007184 <prvHeapInit+0xb4>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	2200      	movs	r2, #0
 8007140:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	68fa      	ldr	r2, [r7, #12]
 800714a:	1ad2      	subs	r2, r2, r3
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007150:	4b0c      	ldr	r3, [pc, #48]	@ (8007184 <prvHeapInit+0xb4>)
 8007152:	681a      	ldr	r2, [r3, #0]
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	685b      	ldr	r3, [r3, #4]
 800715c:	4a0a      	ldr	r2, [pc, #40]	@ (8007188 <prvHeapInit+0xb8>)
 800715e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	685b      	ldr	r3, [r3, #4]
 8007164:	4a09      	ldr	r2, [pc, #36]	@ (800718c <prvHeapInit+0xbc>)
 8007166:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007168:	4b09      	ldr	r3, [pc, #36]	@ (8007190 <prvHeapInit+0xc0>)
 800716a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800716e:	601a      	str	r2, [r3, #0]
}
 8007170:	bf00      	nop
 8007172:	3714      	adds	r7, #20
 8007174:	46bd      	mov	sp, r7
 8007176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717a:	4770      	bx	lr
 800717c:	200010dc 	.word	0x200010dc
 8007180:	20004cdc 	.word	0x20004cdc
 8007184:	20004ce4 	.word	0x20004ce4
 8007188:	20004cec 	.word	0x20004cec
 800718c:	20004ce8 	.word	0x20004ce8
 8007190:	20004cf8 	.word	0x20004cf8

08007194 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007194:	b480      	push	{r7}
 8007196:	b085      	sub	sp, #20
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800719c:	4b28      	ldr	r3, [pc, #160]	@ (8007240 <prvInsertBlockIntoFreeList+0xac>)
 800719e:	60fb      	str	r3, [r7, #12]
 80071a0:	e002      	b.n	80071a8 <prvInsertBlockIntoFreeList+0x14>
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	60fb      	str	r3, [r7, #12]
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	687a      	ldr	r2, [r7, #4]
 80071ae:	429a      	cmp	r2, r3
 80071b0:	d8f7      	bhi.n	80071a2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	685b      	ldr	r3, [r3, #4]
 80071ba:	68ba      	ldr	r2, [r7, #8]
 80071bc:	4413      	add	r3, r2
 80071be:	687a      	ldr	r2, [r7, #4]
 80071c0:	429a      	cmp	r2, r3
 80071c2:	d108      	bne.n	80071d6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	685a      	ldr	r2, [r3, #4]
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	685b      	ldr	r3, [r3, #4]
 80071cc:	441a      	add	r2, r3
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	685b      	ldr	r3, [r3, #4]
 80071de:	68ba      	ldr	r2, [r7, #8]
 80071e0:	441a      	add	r2, r3
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	429a      	cmp	r2, r3
 80071e8:	d118      	bne.n	800721c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681a      	ldr	r2, [r3, #0]
 80071ee:	4b15      	ldr	r3, [pc, #84]	@ (8007244 <prvInsertBlockIntoFreeList+0xb0>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	429a      	cmp	r2, r3
 80071f4:	d00d      	beq.n	8007212 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	685a      	ldr	r2, [r3, #4]
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	685b      	ldr	r3, [r3, #4]
 8007200:	441a      	add	r2, r3
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	681a      	ldr	r2, [r3, #0]
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	601a      	str	r2, [r3, #0]
 8007210:	e008      	b.n	8007224 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007212:	4b0c      	ldr	r3, [pc, #48]	@ (8007244 <prvInsertBlockIntoFreeList+0xb0>)
 8007214:	681a      	ldr	r2, [r3, #0]
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	601a      	str	r2, [r3, #0]
 800721a:	e003      	b.n	8007224 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681a      	ldr	r2, [r3, #0]
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007224:	68fa      	ldr	r2, [r7, #12]
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	429a      	cmp	r2, r3
 800722a:	d002      	beq.n	8007232 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	687a      	ldr	r2, [r7, #4]
 8007230:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007232:	bf00      	nop
 8007234:	3714      	adds	r7, #20
 8007236:	46bd      	mov	sp, r7
 8007238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723c:	4770      	bx	lr
 800723e:	bf00      	nop
 8007240:	20004cdc 	.word	0x20004cdc
 8007244:	20004ce4 	.word	0x20004ce4

08007248 <apInit>:

// Global variables
uint8_t receive_data[1];

// Initialization of app
void apInit() {
 8007248:	b580      	push	{r7, lr}
 800724a:	af00      	add	r7, sp, #0
	// Start PWM
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800724c:	2104      	movs	r1, #4
 800724e:	4804      	ldr	r0, [pc, #16]	@ (8007260 <apInit+0x18>)
 8007250:	f7fb ff32 	bl	80030b8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8007254:	2104      	movs	r1, #4
 8007256:	4803      	ldr	r0, [pc, #12]	@ (8007264 <apInit+0x1c>)
 8007258:	f7fb ff2e 	bl	80030b8 <HAL_TIM_PWM_Start>
}
 800725c:	bf00      	nop
 800725e:	bd80      	pop	{r7, pc}
 8007260:	20000178 	.word	0x20000178
 8007264:	200001c0 	.word	0x200001c0

08007268 <apMain>:

// New Main Functions
void apMain() {
 8007268:	b580      	push	{r7, lr}
 800726a:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(&huart1, receive_data, sizeof(receive_data));
 800726c:	2201      	movs	r2, #1
 800726e:	4904      	ldr	r1, [pc, #16]	@ (8007280 <apMain+0x18>)
 8007270:	4804      	ldr	r0, [pc, #16]	@ (8007284 <apMain+0x1c>)
 8007272:	f7fc fd0d 	bl	8003c90 <HAL_UART_Receive_DMA>

	osKernelStart();
 8007276:	f7fd fa5b 	bl	8004730 <osKernelStart>
}
 800727a:	bf00      	nop
 800727c:	bd80      	pop	{r7, pc}
 800727e:	bf00      	nop
 8007280:	20004cfc 	.word	0x20004cfc
 8007284:	20000208 	.word	0x20000208

08007288 <control_led>:
#include "led.h"

void control_led() {
 8007288:	b580      	push	{r7, lr}
 800728a:	af00      	add	r7, sp, #0
	if(receive_data[0] == 'D' || receive_data[0] == 'A' || receive_data[0] == 'G') {
 800728c:	4b20      	ldr	r3, [pc, #128]	@ (8007310 <control_led+0x88>)
 800728e:	781b      	ldrb	r3, [r3, #0]
 8007290:	2b44      	cmp	r3, #68	@ 0x44
 8007292:	d007      	beq.n	80072a4 <control_led+0x1c>
 8007294:	4b1e      	ldr	r3, [pc, #120]	@ (8007310 <control_led+0x88>)
 8007296:	781b      	ldrb	r3, [r3, #0]
 8007298:	2b41      	cmp	r3, #65	@ 0x41
 800729a:	d003      	beq.n	80072a4 <control_led+0x1c>
 800729c:	4b1c      	ldr	r3, [pc, #112]	@ (8007310 <control_led+0x88>)
 800729e:	781b      	ldrb	r3, [r3, #0]
 80072a0:	2b47      	cmp	r3, #71	@ 0x47
 80072a2:	d10d      	bne.n	80072c0 <control_led+0x38>
		HAL_GPIO_WritePin(RIGHT_LED_PORT, RIGHT_LED_PIN, 0);
 80072a4:	2200      	movs	r2, #0
 80072a6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80072aa:	481a      	ldr	r0, [pc, #104]	@ (8007314 <control_led+0x8c>)
 80072ac:	f7fb f8fa 	bl	80024a4 <HAL_GPIO_WritePin>
		HAL_GPIO_TogglePin(LEFT_LED_PORT, LEFT_LED_PIN);
 80072b0:	2108      	movs	r1, #8
 80072b2:	4818      	ldr	r0, [pc, #96]	@ (8007314 <control_led+0x8c>)
 80072b4:	f7fb f90f 	bl	80024d6 <HAL_GPIO_TogglePin>
		HAL_Delay(200);
 80072b8:	20c8      	movs	r0, #200	@ 0xc8
 80072ba:	f7f9 ff4f 	bl	800115c <HAL_Delay>
 80072be:	e025      	b.n	800730c <control_led+0x84>
	}else if(receive_data[0] == 'F' || receive_data[0] == 'C' || receive_data[0] == 'I') {
 80072c0:	4b13      	ldr	r3, [pc, #76]	@ (8007310 <control_led+0x88>)
 80072c2:	781b      	ldrb	r3, [r3, #0]
 80072c4:	2b46      	cmp	r3, #70	@ 0x46
 80072c6:	d007      	beq.n	80072d8 <control_led+0x50>
 80072c8:	4b11      	ldr	r3, [pc, #68]	@ (8007310 <control_led+0x88>)
 80072ca:	781b      	ldrb	r3, [r3, #0]
 80072cc:	2b43      	cmp	r3, #67	@ 0x43
 80072ce:	d003      	beq.n	80072d8 <control_led+0x50>
 80072d0:	4b0f      	ldr	r3, [pc, #60]	@ (8007310 <control_led+0x88>)
 80072d2:	781b      	ldrb	r3, [r3, #0]
 80072d4:	2b49      	cmp	r3, #73	@ 0x49
 80072d6:	d10d      	bne.n	80072f4 <control_led+0x6c>
		HAL_GPIO_WritePin(LEFT_LED_PORT, LEFT_LED_PIN, 0);
 80072d8:	2200      	movs	r2, #0
 80072da:	2108      	movs	r1, #8
 80072dc:	480d      	ldr	r0, [pc, #52]	@ (8007314 <control_led+0x8c>)
 80072de:	f7fb f8e1 	bl	80024a4 <HAL_GPIO_WritePin>
		HAL_GPIO_TogglePin(RIGHT_LED_PORT, RIGHT_LED_PIN);
 80072e2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80072e6:	480b      	ldr	r0, [pc, #44]	@ (8007314 <control_led+0x8c>)
 80072e8:	f7fb f8f5 	bl	80024d6 <HAL_GPIO_TogglePin>
		HAL_Delay(200);
 80072ec:	20c8      	movs	r0, #200	@ 0xc8
 80072ee:	f7f9 ff35 	bl	800115c <HAL_Delay>
 80072f2:	e00b      	b.n	800730c <control_led+0x84>
	} else {
		HAL_GPIO_WritePin(LEFT_LED_PORT, LEFT_LED_PIN, 0);
 80072f4:	2200      	movs	r2, #0
 80072f6:	2108      	movs	r1, #8
 80072f8:	4806      	ldr	r0, [pc, #24]	@ (8007314 <control_led+0x8c>)
 80072fa:	f7fb f8d3 	bl	80024a4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RIGHT_LED_PORT, RIGHT_LED_PIN, 0);
 80072fe:	2200      	movs	r2, #0
 8007300:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8007304:	4803      	ldr	r0, [pc, #12]	@ (8007314 <control_led+0x8c>)
 8007306:	f7fb f8cd 	bl	80024a4 <HAL_GPIO_WritePin>
	}
}
 800730a:	bf00      	nop
 800730c:	bf00      	nop
 800730e:	bd80      	pop	{r7, pc}
 8007310:	20004cfc 	.word	0x20004cfc
 8007314:	40020400 	.word	0x40020400

08007318 <control_motor>:
static uint8_t IN3_Value = 0;
static uint8_t IN4_Value = 0;


// Control Motor Function
void control_motor() {
 8007318:	b580      	push	{r7, lr}
 800731a:	b082      	sub	sp, #8
 800731c:	af00      	add	r7, sp, #0
	uint8_t left_duty = 0, right_duty = 0;
 800731e:	2300      	movs	r3, #0
 8007320:	71fb      	strb	r3, [r7, #7]
 8007322:	2300      	movs	r3, #0
 8007324:	71bb      	strb	r3, [r7, #6]

	while(1) {
		switch(receive_data[0]) {
 8007326:	4b3f      	ldr	r3, [pc, #252]	@ (8007424 <control_motor+0x10c>)
 8007328:	781b      	ldrb	r3, [r3, #0]
 800732a:	3b41      	subs	r3, #65	@ 0x41
 800732c:	2b08      	cmp	r3, #8
 800732e:	d86f      	bhi.n	8007410 <control_motor+0xf8>
 8007330:	a201      	add	r2, pc, #4	@ (adr r2, 8007338 <control_motor+0x20>)
 8007332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007336:	bf00      	nop
 8007338:	080073c1 	.word	0x080073c1
 800733c:	08007371 	.word	0x08007371
 8007340:	080073d5 	.word	0x080073d5
 8007344:	08007399 	.word	0x08007399
 8007348:	0800735d 	.word	0x0800735d
 800734c:	080073ad 	.word	0x080073ad
 8007350:	080073e9 	.word	0x080073e9
 8007354:	08007385 	.word	0x08007385
 8007358:	080073fd 	.word	0x080073fd
		case 'E':
			left_duty = 0;
 800735c:	2300      	movs	r3, #0
 800735e:	71fb      	strb	r3, [r7, #7]
			right_duty = 0;
 8007360:	2300      	movs	r3, #0
 8007362:	71bb      	strb	r3, [r7, #6]
			control_IN_Value(1, 0, 0);
 8007364:	2200      	movs	r2, #0
 8007366:	2100      	movs	r1, #0
 8007368:	2001      	movs	r0, #1
 800736a:	f000 f861 	bl	8007430 <control_IN_Value>
			break;
 800736e:	e04f      	b.n	8007410 <control_motor+0xf8>
		case 'B':
			left_duty = 100;
 8007370:	2364      	movs	r3, #100	@ 0x64
 8007372:	71fb      	strb	r3, [r7, #7]
			right_duty = 100;
 8007374:	2364      	movs	r3, #100	@ 0x64
 8007376:	71bb      	strb	r3, [r7, #6]
			control_IN_Value(1, 0, 0);
 8007378:	2200      	movs	r2, #0
 800737a:	2100      	movs	r1, #0
 800737c:	2001      	movs	r0, #1
 800737e:	f000 f857 	bl	8007430 <control_IN_Value>
			break;
 8007382:	e045      	b.n	8007410 <control_motor+0xf8>
		case 'H':
			left_duty = 100;
 8007384:	2364      	movs	r3, #100	@ 0x64
 8007386:	71fb      	strb	r3, [r7, #7]
			right_duty = 100;
 8007388:	2364      	movs	r3, #100	@ 0x64
 800738a:	71bb      	strb	r3, [r7, #6]
			control_IN_Value(0, 0, 0);
 800738c:	2200      	movs	r2, #0
 800738e:	2100      	movs	r1, #0
 8007390:	2000      	movs	r0, #0
 8007392:	f000 f84d 	bl	8007430 <control_IN_Value>
			break;
 8007396:	e03b      	b.n	8007410 <control_motor+0xf8>
		case 'D':
			left_duty = 100;
 8007398:	2364      	movs	r3, #100	@ 0x64
 800739a:	71fb      	strb	r3, [r7, #7]
			right_duty = 100;
 800739c:	2364      	movs	r3, #100	@ 0x64
 800739e:	71bb      	strb	r3, [r7, #6]
			control_IN_Value(0, 1, 1);
 80073a0:	2201      	movs	r2, #1
 80073a2:	2101      	movs	r1, #1
 80073a4:	2000      	movs	r0, #0
 80073a6:	f000 f843 	bl	8007430 <control_IN_Value>
			break;
 80073aa:	e031      	b.n	8007410 <control_motor+0xf8>
		case 'F':
			left_duty = 100;
 80073ac:	2364      	movs	r3, #100	@ 0x64
 80073ae:	71fb      	strb	r3, [r7, #7]
			right_duty = 100;
 80073b0:	2364      	movs	r3, #100	@ 0x64
 80073b2:	71bb      	strb	r3, [r7, #6]
			control_IN_Value(0, 0, 1);
 80073b4:	2201      	movs	r2, #1
 80073b6:	2100      	movs	r1, #0
 80073b8:	2000      	movs	r0, #0
 80073ba:	f000 f839 	bl	8007430 <control_IN_Value>
			break;
 80073be:	e027      	b.n	8007410 <control_motor+0xf8>
		case 'A':
			left_duty = 100;
 80073c0:	2364      	movs	r3, #100	@ 0x64
 80073c2:	71fb      	strb	r3, [r7, #7]
			right_duty = 10;
 80073c4:	230a      	movs	r3, #10
 80073c6:	71bb      	strb	r3, [r7, #6]
			control_IN_Value(1, 0, 0);
 80073c8:	2200      	movs	r2, #0
 80073ca:	2100      	movs	r1, #0
 80073cc:	2001      	movs	r0, #1
 80073ce:	f000 f82f 	bl	8007430 <control_IN_Value>
			break;
 80073d2:	e01d      	b.n	8007410 <control_motor+0xf8>
		case 'C':
			left_duty = 10;
 80073d4:	230a      	movs	r3, #10
 80073d6:	71fb      	strb	r3, [r7, #7]
			right_duty = 100;
 80073d8:	2364      	movs	r3, #100	@ 0x64
 80073da:	71bb      	strb	r3, [r7, #6]
			control_IN_Value(1, 0, 0);
 80073dc:	2200      	movs	r2, #0
 80073de:	2100      	movs	r1, #0
 80073e0:	2001      	movs	r0, #1
 80073e2:	f000 f825 	bl	8007430 <control_IN_Value>
			break;
 80073e6:	e013      	b.n	8007410 <control_motor+0xf8>
		case 'G':
			left_duty = 100;
 80073e8:	2364      	movs	r3, #100	@ 0x64
 80073ea:	71fb      	strb	r3, [r7, #7]
			right_duty = 10;
 80073ec:	230a      	movs	r3, #10
 80073ee:	71bb      	strb	r3, [r7, #6]
			control_IN_Value(0, 0, 0);
 80073f0:	2200      	movs	r2, #0
 80073f2:	2100      	movs	r1, #0
 80073f4:	2000      	movs	r0, #0
 80073f6:	f000 f81b 	bl	8007430 <control_IN_Value>
			break;
 80073fa:	e009      	b.n	8007410 <control_motor+0xf8>
		case 'I':
			left_duty = 10;
 80073fc:	230a      	movs	r3, #10
 80073fe:	71fb      	strb	r3, [r7, #7]
			right_duty = 100;
 8007400:	2364      	movs	r3, #100	@ 0x64
 8007402:	71bb      	strb	r3, [r7, #6]
			control_IN_Value(0, 0, 0);
 8007404:	2200      	movs	r2, #0
 8007406:	2100      	movs	r1, #0
 8007408:	2000      	movs	r0, #0
 800740a:	f000 f811 	bl	8007430 <control_IN_Value>
			break;
 800740e:	bf00      	nop
		}

		// Enter values to the input variables.
		enter_IN_values();
 8007410:	f000 f864 	bl	80074dc <enter_IN_values>

		//Drive the motors by sending duty values to each motor.
		TIM1->CCR2 = left_duty;
 8007414:	4a04      	ldr	r2, [pc, #16]	@ (8007428 <control_motor+0x110>)
 8007416:	79fb      	ldrb	r3, [r7, #7]
 8007418:	6393      	str	r3, [r2, #56]	@ 0x38
		TIM3->CCR2 = right_duty;
 800741a:	4a04      	ldr	r2, [pc, #16]	@ (800742c <control_motor+0x114>)
 800741c:	79bb      	ldrb	r3, [r7, #6]
 800741e:	6393      	str	r3, [r2, #56]	@ 0x38
		switch(receive_data[0]) {
 8007420:	e781      	b.n	8007326 <control_motor+0xe>
 8007422:	bf00      	nop
 8007424:	20004cfc 	.word	0x20004cfc
 8007428:	40010000 	.word	0x40010000
 800742c:	40000400 	.word	0x40000400

08007430 <control_IN_Value>:
	}
}


//// Direction Control Function
void control_IN_Value(uint8_t forward_reverse, uint8_t left_right, uint8_t change_dir_enable) {
 8007430:	b480      	push	{r7}
 8007432:	b083      	sub	sp, #12
 8007434:	af00      	add	r7, sp, #0
 8007436:	4603      	mov	r3, r0
 8007438:	71fb      	strb	r3, [r7, #7]
 800743a:	460b      	mov	r3, r1
 800743c:	71bb      	strb	r3, [r7, #6]
 800743e:	4613      	mov	r3, r2
 8007440:	717b      	strb	r3, [r7, #5]
	if(forward_reverse) {
 8007442:	79fb      	ldrb	r3, [r7, #7]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d00c      	beq.n	8007462 <control_IN_Value+0x32>
		// Control Left
		IN1_Value = GPIO_PIN_SET;
 8007448:	4b20      	ldr	r3, [pc, #128]	@ (80074cc <control_IN_Value+0x9c>)
 800744a:	2201      	movs	r2, #1
 800744c:	701a      	strb	r2, [r3, #0]
		IN2_Value = GPIO_PIN_RESET;
 800744e:	4b20      	ldr	r3, [pc, #128]	@ (80074d0 <control_IN_Value+0xa0>)
 8007450:	2200      	movs	r2, #0
 8007452:	701a      	strb	r2, [r3, #0]
		IN3_Value = GPIO_PIN_SET;
 8007454:	4b1f      	ldr	r3, [pc, #124]	@ (80074d4 <control_IN_Value+0xa4>)
 8007456:	2201      	movs	r2, #1
 8007458:	701a      	strb	r2, [r3, #0]
		IN4_Value = GPIO_PIN_RESET;
 800745a:	4b1f      	ldr	r3, [pc, #124]	@ (80074d8 <control_IN_Value+0xa8>)
 800745c:	2200      	movs	r2, #0
 800745e:	701a      	strb	r2, [r3, #0]
 8007460:	e00e      	b.n	8007480 <control_IN_Value+0x50>
	}else if(!forward_reverse) {
 8007462:	79fb      	ldrb	r3, [r7, #7]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d10b      	bne.n	8007480 <control_IN_Value+0x50>
		IN1_Value = GPIO_PIN_RESET;
 8007468:	4b18      	ldr	r3, [pc, #96]	@ (80074cc <control_IN_Value+0x9c>)
 800746a:	2200      	movs	r2, #0
 800746c:	701a      	strb	r2, [r3, #0]
		IN2_Value = GPIO_PIN_SET;
 800746e:	4b18      	ldr	r3, [pc, #96]	@ (80074d0 <control_IN_Value+0xa0>)
 8007470:	2201      	movs	r2, #1
 8007472:	701a      	strb	r2, [r3, #0]
		IN3_Value = GPIO_PIN_RESET;
 8007474:	4b17      	ldr	r3, [pc, #92]	@ (80074d4 <control_IN_Value+0xa4>)
 8007476:	2200      	movs	r2, #0
 8007478:	701a      	strb	r2, [r3, #0]
		IN4_Value = GPIO_PIN_SET;
 800747a:	4b17      	ldr	r3, [pc, #92]	@ (80074d8 <control_IN_Value+0xa8>)
 800747c:	2201      	movs	r2, #1
 800747e:	701a      	strb	r2, [r3, #0]
	}

	if(change_dir_enable) {
 8007480:	797b      	ldrb	r3, [r7, #5]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d01b      	beq.n	80074be <control_IN_Value+0x8e>
		if(left_right) {
 8007486:	79bb      	ldrb	r3, [r7, #6]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d00c      	beq.n	80074a6 <control_IN_Value+0x76>
			IN1_Value = GPIO_PIN_RESET;
 800748c:	4b0f      	ldr	r3, [pc, #60]	@ (80074cc <control_IN_Value+0x9c>)
 800748e:	2200      	movs	r2, #0
 8007490:	701a      	strb	r2, [r3, #0]
			IN2_Value = GPIO_PIN_SET;
 8007492:	4b0f      	ldr	r3, [pc, #60]	@ (80074d0 <control_IN_Value+0xa0>)
 8007494:	2201      	movs	r2, #1
 8007496:	701a      	strb	r2, [r3, #0]
			IN3_Value = GPIO_PIN_SET;
 8007498:	4b0e      	ldr	r3, [pc, #56]	@ (80074d4 <control_IN_Value+0xa4>)
 800749a:	2201      	movs	r2, #1
 800749c:	701a      	strb	r2, [r3, #0]
			IN4_Value = GPIO_PIN_RESET;
 800749e:	4b0e      	ldr	r3, [pc, #56]	@ (80074d8 <control_IN_Value+0xa8>)
 80074a0:	2200      	movs	r2, #0
 80074a2:	701a      	strb	r2, [r3, #0]
			IN2_Value = GPIO_PIN_RESET;
			IN3_Value = GPIO_PIN_RESET;
			IN4_Value = GPIO_PIN_SET;
		}
	}
}
 80074a4:	e00b      	b.n	80074be <control_IN_Value+0x8e>
			IN1_Value = GPIO_PIN_SET;
 80074a6:	4b09      	ldr	r3, [pc, #36]	@ (80074cc <control_IN_Value+0x9c>)
 80074a8:	2201      	movs	r2, #1
 80074aa:	701a      	strb	r2, [r3, #0]
			IN2_Value = GPIO_PIN_RESET;
 80074ac:	4b08      	ldr	r3, [pc, #32]	@ (80074d0 <control_IN_Value+0xa0>)
 80074ae:	2200      	movs	r2, #0
 80074b0:	701a      	strb	r2, [r3, #0]
			IN3_Value = GPIO_PIN_RESET;
 80074b2:	4b08      	ldr	r3, [pc, #32]	@ (80074d4 <control_IN_Value+0xa4>)
 80074b4:	2200      	movs	r2, #0
 80074b6:	701a      	strb	r2, [r3, #0]
			IN4_Value = GPIO_PIN_SET;
 80074b8:	4b07      	ldr	r3, [pc, #28]	@ (80074d8 <control_IN_Value+0xa8>)
 80074ba:	2201      	movs	r2, #1
 80074bc:	701a      	strb	r2, [r3, #0]
}
 80074be:	bf00      	nop
 80074c0:	370c      	adds	r7, #12
 80074c2:	46bd      	mov	sp, r7
 80074c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c8:	4770      	bx	lr
 80074ca:	bf00      	nop
 80074cc:	20004cfd 	.word	0x20004cfd
 80074d0:	20004cfe 	.word	0x20004cfe
 80074d4:	20004cff 	.word	0x20004cff
 80074d8:	20004d00 	.word	0x20004d00

080074dc <enter_IN_values>:


// Enter values to the input variables.
void enter_IN_values() {
 80074dc:	b580      	push	{r7, lr}
 80074de:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(IN1_PORT, IN1_PIN, IN1_Value);
 80074e0:	4b0e      	ldr	r3, [pc, #56]	@ (800751c <enter_IN_values+0x40>)
 80074e2:	781b      	ldrb	r3, [r3, #0]
 80074e4:	461a      	mov	r2, r3
 80074e6:	2120      	movs	r1, #32
 80074e8:	480d      	ldr	r0, [pc, #52]	@ (8007520 <enter_IN_values+0x44>)
 80074ea:	f7fa ffdb 	bl	80024a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN2_PORT, IN2_PIN, IN2_Value);
 80074ee:	4b0d      	ldr	r3, [pc, #52]	@ (8007524 <enter_IN_values+0x48>)
 80074f0:	781b      	ldrb	r3, [r3, #0]
 80074f2:	461a      	mov	r2, r3
 80074f4:	2140      	movs	r1, #64	@ 0x40
 80074f6:	480a      	ldr	r0, [pc, #40]	@ (8007520 <enter_IN_values+0x44>)
 80074f8:	f7fa ffd4 	bl	80024a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN3_PORT, IN3_PIN, IN3_Value);
 80074fc:	4b0a      	ldr	r3, [pc, #40]	@ (8007528 <enter_IN_values+0x4c>)
 80074fe:	781b      	ldrb	r3, [r3, #0]
 8007500:	461a      	mov	r2, r3
 8007502:	2180      	movs	r1, #128	@ 0x80
 8007504:	4806      	ldr	r0, [pc, #24]	@ (8007520 <enter_IN_values+0x44>)
 8007506:	f7fa ffcd 	bl	80024a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN4_PORT, IN4_PIN, IN4_Value);
 800750a:	4b08      	ldr	r3, [pc, #32]	@ (800752c <enter_IN_values+0x50>)
 800750c:	781b      	ldrb	r3, [r3, #0]
 800750e:	461a      	mov	r2, r3
 8007510:	2140      	movs	r1, #64	@ 0x40
 8007512:	4807      	ldr	r0, [pc, #28]	@ (8007530 <enter_IN_values+0x54>)
 8007514:	f7fa ffc6 	bl	80024a4 <HAL_GPIO_WritePin>
}
 8007518:	bf00      	nop
 800751a:	bd80      	pop	{r7, pc}
 800751c:	20004cfd 	.word	0x20004cfd
 8007520:	40020000 	.word	0x40020000
 8007524:	20004cfe 	.word	0x20004cfe
 8007528:	20004cff 	.word	0x20004cff
 800752c:	20004d00 	.word	0x20004d00
 8007530:	40020400 	.word	0x40020400

08007534 <memset>:
 8007534:	4402      	add	r2, r0
 8007536:	4603      	mov	r3, r0
 8007538:	4293      	cmp	r3, r2
 800753a:	d100      	bne.n	800753e <memset+0xa>
 800753c:	4770      	bx	lr
 800753e:	f803 1b01 	strb.w	r1, [r3], #1
 8007542:	e7f9      	b.n	8007538 <memset+0x4>

08007544 <_reclaim_reent>:
 8007544:	4b29      	ldr	r3, [pc, #164]	@ (80075ec <_reclaim_reent+0xa8>)
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	4283      	cmp	r3, r0
 800754a:	b570      	push	{r4, r5, r6, lr}
 800754c:	4604      	mov	r4, r0
 800754e:	d04b      	beq.n	80075e8 <_reclaim_reent+0xa4>
 8007550:	69c3      	ldr	r3, [r0, #28]
 8007552:	b1ab      	cbz	r3, 8007580 <_reclaim_reent+0x3c>
 8007554:	68db      	ldr	r3, [r3, #12]
 8007556:	b16b      	cbz	r3, 8007574 <_reclaim_reent+0x30>
 8007558:	2500      	movs	r5, #0
 800755a:	69e3      	ldr	r3, [r4, #28]
 800755c:	68db      	ldr	r3, [r3, #12]
 800755e:	5959      	ldr	r1, [r3, r5]
 8007560:	2900      	cmp	r1, #0
 8007562:	d13b      	bne.n	80075dc <_reclaim_reent+0x98>
 8007564:	3504      	adds	r5, #4
 8007566:	2d80      	cmp	r5, #128	@ 0x80
 8007568:	d1f7      	bne.n	800755a <_reclaim_reent+0x16>
 800756a:	69e3      	ldr	r3, [r4, #28]
 800756c:	4620      	mov	r0, r4
 800756e:	68d9      	ldr	r1, [r3, #12]
 8007570:	f000 f872 	bl	8007658 <_free_r>
 8007574:	69e3      	ldr	r3, [r4, #28]
 8007576:	6819      	ldr	r1, [r3, #0]
 8007578:	b111      	cbz	r1, 8007580 <_reclaim_reent+0x3c>
 800757a:	4620      	mov	r0, r4
 800757c:	f000 f86c 	bl	8007658 <_free_r>
 8007580:	6961      	ldr	r1, [r4, #20]
 8007582:	b111      	cbz	r1, 800758a <_reclaim_reent+0x46>
 8007584:	4620      	mov	r0, r4
 8007586:	f000 f867 	bl	8007658 <_free_r>
 800758a:	69e1      	ldr	r1, [r4, #28]
 800758c:	b111      	cbz	r1, 8007594 <_reclaim_reent+0x50>
 800758e:	4620      	mov	r0, r4
 8007590:	f000 f862 	bl	8007658 <_free_r>
 8007594:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8007596:	b111      	cbz	r1, 800759e <_reclaim_reent+0x5a>
 8007598:	4620      	mov	r0, r4
 800759a:	f000 f85d 	bl	8007658 <_free_r>
 800759e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80075a0:	b111      	cbz	r1, 80075a8 <_reclaim_reent+0x64>
 80075a2:	4620      	mov	r0, r4
 80075a4:	f000 f858 	bl	8007658 <_free_r>
 80075a8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80075aa:	b111      	cbz	r1, 80075b2 <_reclaim_reent+0x6e>
 80075ac:	4620      	mov	r0, r4
 80075ae:	f000 f853 	bl	8007658 <_free_r>
 80075b2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80075b4:	b111      	cbz	r1, 80075bc <_reclaim_reent+0x78>
 80075b6:	4620      	mov	r0, r4
 80075b8:	f000 f84e 	bl	8007658 <_free_r>
 80075bc:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80075be:	b111      	cbz	r1, 80075c6 <_reclaim_reent+0x82>
 80075c0:	4620      	mov	r0, r4
 80075c2:	f000 f849 	bl	8007658 <_free_r>
 80075c6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80075c8:	b111      	cbz	r1, 80075d0 <_reclaim_reent+0x8c>
 80075ca:	4620      	mov	r0, r4
 80075cc:	f000 f844 	bl	8007658 <_free_r>
 80075d0:	6a23      	ldr	r3, [r4, #32]
 80075d2:	b14b      	cbz	r3, 80075e8 <_reclaim_reent+0xa4>
 80075d4:	4620      	mov	r0, r4
 80075d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80075da:	4718      	bx	r3
 80075dc:	680e      	ldr	r6, [r1, #0]
 80075de:	4620      	mov	r0, r4
 80075e0:	f000 f83a 	bl	8007658 <_free_r>
 80075e4:	4631      	mov	r1, r6
 80075e6:	e7bb      	b.n	8007560 <_reclaim_reent+0x1c>
 80075e8:	bd70      	pop	{r4, r5, r6, pc}
 80075ea:	bf00      	nop
 80075ec:	20000010 	.word	0x20000010

080075f0 <__libc_init_array>:
 80075f0:	b570      	push	{r4, r5, r6, lr}
 80075f2:	4d0d      	ldr	r5, [pc, #52]	@ (8007628 <__libc_init_array+0x38>)
 80075f4:	4c0d      	ldr	r4, [pc, #52]	@ (800762c <__libc_init_array+0x3c>)
 80075f6:	1b64      	subs	r4, r4, r5
 80075f8:	10a4      	asrs	r4, r4, #2
 80075fa:	2600      	movs	r6, #0
 80075fc:	42a6      	cmp	r6, r4
 80075fe:	d109      	bne.n	8007614 <__libc_init_array+0x24>
 8007600:	4d0b      	ldr	r5, [pc, #44]	@ (8007630 <__libc_init_array+0x40>)
 8007602:	4c0c      	ldr	r4, [pc, #48]	@ (8007634 <__libc_init_array+0x44>)
 8007604:	f000 f87e 	bl	8007704 <_init>
 8007608:	1b64      	subs	r4, r4, r5
 800760a:	10a4      	asrs	r4, r4, #2
 800760c:	2600      	movs	r6, #0
 800760e:	42a6      	cmp	r6, r4
 8007610:	d105      	bne.n	800761e <__libc_init_array+0x2e>
 8007612:	bd70      	pop	{r4, r5, r6, pc}
 8007614:	f855 3b04 	ldr.w	r3, [r5], #4
 8007618:	4798      	blx	r3
 800761a:	3601      	adds	r6, #1
 800761c:	e7ee      	b.n	80075fc <__libc_init_array+0xc>
 800761e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007622:	4798      	blx	r3
 8007624:	3601      	adds	r6, #1
 8007626:	e7f2      	b.n	800760e <__libc_init_array+0x1e>
 8007628:	080077e0 	.word	0x080077e0
 800762c:	080077e0 	.word	0x080077e0
 8007630:	080077e0 	.word	0x080077e0
 8007634:	080077e4 	.word	0x080077e4

08007638 <__retarget_lock_acquire_recursive>:
 8007638:	4770      	bx	lr

0800763a <__retarget_lock_release_recursive>:
 800763a:	4770      	bx	lr

0800763c <memcpy>:
 800763c:	440a      	add	r2, r1
 800763e:	4291      	cmp	r1, r2
 8007640:	f100 33ff 	add.w	r3, r0, #4294967295
 8007644:	d100      	bne.n	8007648 <memcpy+0xc>
 8007646:	4770      	bx	lr
 8007648:	b510      	push	{r4, lr}
 800764a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800764e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007652:	4291      	cmp	r1, r2
 8007654:	d1f9      	bne.n	800764a <memcpy+0xe>
 8007656:	bd10      	pop	{r4, pc}

08007658 <_free_r>:
 8007658:	b538      	push	{r3, r4, r5, lr}
 800765a:	4605      	mov	r5, r0
 800765c:	2900      	cmp	r1, #0
 800765e:	d041      	beq.n	80076e4 <_free_r+0x8c>
 8007660:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007664:	1f0c      	subs	r4, r1, #4
 8007666:	2b00      	cmp	r3, #0
 8007668:	bfb8      	it	lt
 800766a:	18e4      	addlt	r4, r4, r3
 800766c:	f000 f83e 	bl	80076ec <__malloc_lock>
 8007670:	4a1d      	ldr	r2, [pc, #116]	@ (80076e8 <_free_r+0x90>)
 8007672:	6813      	ldr	r3, [r2, #0]
 8007674:	b933      	cbnz	r3, 8007684 <_free_r+0x2c>
 8007676:	6063      	str	r3, [r4, #4]
 8007678:	6014      	str	r4, [r2, #0]
 800767a:	4628      	mov	r0, r5
 800767c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007680:	f000 b83a 	b.w	80076f8 <__malloc_unlock>
 8007684:	42a3      	cmp	r3, r4
 8007686:	d908      	bls.n	800769a <_free_r+0x42>
 8007688:	6820      	ldr	r0, [r4, #0]
 800768a:	1821      	adds	r1, r4, r0
 800768c:	428b      	cmp	r3, r1
 800768e:	bf01      	itttt	eq
 8007690:	6819      	ldreq	r1, [r3, #0]
 8007692:	685b      	ldreq	r3, [r3, #4]
 8007694:	1809      	addeq	r1, r1, r0
 8007696:	6021      	streq	r1, [r4, #0]
 8007698:	e7ed      	b.n	8007676 <_free_r+0x1e>
 800769a:	461a      	mov	r2, r3
 800769c:	685b      	ldr	r3, [r3, #4]
 800769e:	b10b      	cbz	r3, 80076a4 <_free_r+0x4c>
 80076a0:	42a3      	cmp	r3, r4
 80076a2:	d9fa      	bls.n	800769a <_free_r+0x42>
 80076a4:	6811      	ldr	r1, [r2, #0]
 80076a6:	1850      	adds	r0, r2, r1
 80076a8:	42a0      	cmp	r0, r4
 80076aa:	d10b      	bne.n	80076c4 <_free_r+0x6c>
 80076ac:	6820      	ldr	r0, [r4, #0]
 80076ae:	4401      	add	r1, r0
 80076b0:	1850      	adds	r0, r2, r1
 80076b2:	4283      	cmp	r3, r0
 80076b4:	6011      	str	r1, [r2, #0]
 80076b6:	d1e0      	bne.n	800767a <_free_r+0x22>
 80076b8:	6818      	ldr	r0, [r3, #0]
 80076ba:	685b      	ldr	r3, [r3, #4]
 80076bc:	6053      	str	r3, [r2, #4]
 80076be:	4408      	add	r0, r1
 80076c0:	6010      	str	r0, [r2, #0]
 80076c2:	e7da      	b.n	800767a <_free_r+0x22>
 80076c4:	d902      	bls.n	80076cc <_free_r+0x74>
 80076c6:	230c      	movs	r3, #12
 80076c8:	602b      	str	r3, [r5, #0]
 80076ca:	e7d6      	b.n	800767a <_free_r+0x22>
 80076cc:	6820      	ldr	r0, [r4, #0]
 80076ce:	1821      	adds	r1, r4, r0
 80076d0:	428b      	cmp	r3, r1
 80076d2:	bf04      	itt	eq
 80076d4:	6819      	ldreq	r1, [r3, #0]
 80076d6:	685b      	ldreq	r3, [r3, #4]
 80076d8:	6063      	str	r3, [r4, #4]
 80076da:	bf04      	itt	eq
 80076dc:	1809      	addeq	r1, r1, r0
 80076de:	6021      	streq	r1, [r4, #0]
 80076e0:	6054      	str	r4, [r2, #4]
 80076e2:	e7ca      	b.n	800767a <_free_r+0x22>
 80076e4:	bd38      	pop	{r3, r4, r5, pc}
 80076e6:	bf00      	nop
 80076e8:	20004e40 	.word	0x20004e40

080076ec <__malloc_lock>:
 80076ec:	4801      	ldr	r0, [pc, #4]	@ (80076f4 <__malloc_lock+0x8>)
 80076ee:	f7ff bfa3 	b.w	8007638 <__retarget_lock_acquire_recursive>
 80076f2:	bf00      	nop
 80076f4:	20004e3c 	.word	0x20004e3c

080076f8 <__malloc_unlock>:
 80076f8:	4801      	ldr	r0, [pc, #4]	@ (8007700 <__malloc_unlock+0x8>)
 80076fa:	f7ff bf9e 	b.w	800763a <__retarget_lock_release_recursive>
 80076fe:	bf00      	nop
 8007700:	20004e3c 	.word	0x20004e3c

08007704 <_init>:
 8007704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007706:	bf00      	nop
 8007708:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800770a:	bc08      	pop	{r3}
 800770c:	469e      	mov	lr, r3
 800770e:	4770      	bx	lr

08007710 <_fini>:
 8007710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007712:	bf00      	nop
 8007714:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007716:	bc08      	pop	{r3}
 8007718:	469e      	mov	lr, r3
 800771a:	4770      	bx	lr
