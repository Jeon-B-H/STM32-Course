
12_I2C_LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c4c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08003dec  08003dec  00004dec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e5c  08003e5c  0000505c  2**0
                  CONTENTS
  4 .ARM          00000008  08003e5c  08003e5c  00004e5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003e64  08003e64  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e64  08003e64  00004e64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003e68  08003e68  00004e68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08003e6c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000208  2000005c  08003ec8  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000264  08003ec8  00005264  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b6a9  00000000  00000000  0000508c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f58  00000000  00000000  00010735  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a28  00000000  00000000  00012690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007dc  00000000  00000000  000130b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001656f  00000000  00000000  00013894  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000eac1  00000000  00000000  00029e03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000884e8  00000000  00000000  000388c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c0dac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e04  00000000  00000000  000c0df0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  000c3bf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003dd4 	.word	0x08003dd4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08003dd4 	.word	0x08003dd4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000580:	b480      	push	{r7}
 8000582:	b085      	sub	sp, #20
 8000584:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000586:	2300      	movs	r3, #0
 8000588:	60fb      	str	r3, [r7, #12]
 800058a:	4b17      	ldr	r3, [pc, #92]	@ (80005e8 <MX_GPIO_Init+0x68>)
 800058c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800058e:	4a16      	ldr	r2, [pc, #88]	@ (80005e8 <MX_GPIO_Init+0x68>)
 8000590:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000594:	6313      	str	r3, [r2, #48]	@ 0x30
 8000596:	4b14      	ldr	r3, [pc, #80]	@ (80005e8 <MX_GPIO_Init+0x68>)
 8000598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800059a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800059e:	60fb      	str	r3, [r7, #12]
 80005a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005a2:	2300      	movs	r3, #0
 80005a4:	60bb      	str	r3, [r7, #8]
 80005a6:	4b10      	ldr	r3, [pc, #64]	@ (80005e8 <MX_GPIO_Init+0x68>)
 80005a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005aa:	4a0f      	ldr	r2, [pc, #60]	@ (80005e8 <MX_GPIO_Init+0x68>)
 80005ac:	f043 0301 	orr.w	r3, r3, #1
 80005b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005b2:	4b0d      	ldr	r3, [pc, #52]	@ (80005e8 <MX_GPIO_Init+0x68>)
 80005b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005b6:	f003 0301 	and.w	r3, r3, #1
 80005ba:	60bb      	str	r3, [r7, #8]
 80005bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005be:	2300      	movs	r3, #0
 80005c0:	607b      	str	r3, [r7, #4]
 80005c2:	4b09      	ldr	r3, [pc, #36]	@ (80005e8 <MX_GPIO_Init+0x68>)
 80005c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005c6:	4a08      	ldr	r2, [pc, #32]	@ (80005e8 <MX_GPIO_Init+0x68>)
 80005c8:	f043 0302 	orr.w	r3, r3, #2
 80005cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80005ce:	4b06      	ldr	r3, [pc, #24]	@ (80005e8 <MX_GPIO_Init+0x68>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005d2:	f003 0302 	and.w	r3, r3, #2
 80005d6:	607b      	str	r3, [r7, #4]
 80005d8:	687b      	ldr	r3, [r7, #4]

}
 80005da:	bf00      	nop
 80005dc:	3714      	adds	r7, #20
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	40023800 	.word	0x40023800

080005ec <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005f0:	4b12      	ldr	r3, [pc, #72]	@ (800063c <MX_I2C1_Init+0x50>)
 80005f2:	4a13      	ldr	r2, [pc, #76]	@ (8000640 <MX_I2C1_Init+0x54>)
 80005f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80005f6:	4b11      	ldr	r3, [pc, #68]	@ (800063c <MX_I2C1_Init+0x50>)
 80005f8:	4a12      	ldr	r2, [pc, #72]	@ (8000644 <MX_I2C1_Init+0x58>)
 80005fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005fc:	4b0f      	ldr	r3, [pc, #60]	@ (800063c <MX_I2C1_Init+0x50>)
 80005fe:	2200      	movs	r2, #0
 8000600:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000602:	4b0e      	ldr	r3, [pc, #56]	@ (800063c <MX_I2C1_Init+0x50>)
 8000604:	2200      	movs	r2, #0
 8000606:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000608:	4b0c      	ldr	r3, [pc, #48]	@ (800063c <MX_I2C1_Init+0x50>)
 800060a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800060e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000610:	4b0a      	ldr	r3, [pc, #40]	@ (800063c <MX_I2C1_Init+0x50>)
 8000612:	2200      	movs	r2, #0
 8000614:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000616:	4b09      	ldr	r3, [pc, #36]	@ (800063c <MX_I2C1_Init+0x50>)
 8000618:	2200      	movs	r2, #0
 800061a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800061c:	4b07      	ldr	r3, [pc, #28]	@ (800063c <MX_I2C1_Init+0x50>)
 800061e:	2200      	movs	r2, #0
 8000620:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000622:	4b06      	ldr	r3, [pc, #24]	@ (800063c <MX_I2C1_Init+0x50>)
 8000624:	2200      	movs	r2, #0
 8000626:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000628:	4804      	ldr	r0, [pc, #16]	@ (800063c <MX_I2C1_Init+0x50>)
 800062a:	f000 fecb 	bl	80013c4 <HAL_I2C_Init>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000634:	f000 f9b4 	bl	80009a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000638:	bf00      	nop
 800063a:	bd80      	pop	{r7, pc}
 800063c:	20000078 	.word	0x20000078
 8000640:	40005400 	.word	0x40005400
 8000644:	000186a0 	.word	0x000186a0

08000648 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b08a      	sub	sp, #40	@ 0x28
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000650:	f107 0314 	add.w	r3, r7, #20
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
 8000658:	605a      	str	r2, [r3, #4]
 800065a:	609a      	str	r2, [r3, #8]
 800065c:	60da      	str	r2, [r3, #12]
 800065e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a19      	ldr	r2, [pc, #100]	@ (80006cc <HAL_I2C_MspInit+0x84>)
 8000666:	4293      	cmp	r3, r2
 8000668:	d12b      	bne.n	80006c2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800066a:	2300      	movs	r3, #0
 800066c:	613b      	str	r3, [r7, #16]
 800066e:	4b18      	ldr	r3, [pc, #96]	@ (80006d0 <HAL_I2C_MspInit+0x88>)
 8000670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000672:	4a17      	ldr	r2, [pc, #92]	@ (80006d0 <HAL_I2C_MspInit+0x88>)
 8000674:	f043 0302 	orr.w	r3, r3, #2
 8000678:	6313      	str	r3, [r2, #48]	@ 0x30
 800067a:	4b15      	ldr	r3, [pc, #84]	@ (80006d0 <HAL_I2C_MspInit+0x88>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800067e:	f003 0302 	and.w	r3, r3, #2
 8000682:	613b      	str	r3, [r7, #16]
 8000684:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000686:	23c0      	movs	r3, #192	@ 0xc0
 8000688:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800068a:	2312      	movs	r3, #18
 800068c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068e:	2300      	movs	r3, #0
 8000690:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000692:	2303      	movs	r3, #3
 8000694:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000696:	2304      	movs	r3, #4
 8000698:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800069a:	f107 0314 	add.w	r3, r7, #20
 800069e:	4619      	mov	r1, r3
 80006a0:	480c      	ldr	r0, [pc, #48]	@ (80006d4 <HAL_I2C_MspInit+0x8c>)
 80006a2:	f000 fd0b 	bl	80010bc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80006a6:	2300      	movs	r3, #0
 80006a8:	60fb      	str	r3, [r7, #12]
 80006aa:	4b09      	ldr	r3, [pc, #36]	@ (80006d0 <HAL_I2C_MspInit+0x88>)
 80006ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006ae:	4a08      	ldr	r2, [pc, #32]	@ (80006d0 <HAL_I2C_MspInit+0x88>)
 80006b0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80006b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80006b6:	4b06      	ldr	r3, [pc, #24]	@ (80006d0 <HAL_I2C_MspInit+0x88>)
 80006b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006ba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80006be:	60fb      	str	r3, [r7, #12]
 80006c0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80006c2:	bf00      	nop
 80006c4:	3728      	adds	r7, #40	@ 0x28
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	40005400 	.word	0x40005400
 80006d0:	40023800 	.word	0x40023800
 80006d4:	40020400 	.word	0x40020400

080006d8 <lcd_command>:

#include "i2c_lcd.h"
extern I2C_HandleTypeDef hi2c1;


void lcd_command(uint8_t command) {
 80006d8:	b580      	push	{r7, lr}
 80006da:	b086      	sub	sp, #24
 80006dc:	af02      	add	r7, sp, #8
 80006de:	4603      	mov	r3, r0
 80006e0:	71fb      	strb	r3, [r7, #7]
	uint8_t high_nibble, low_nibble;
	uint8_t i2c_buffer[4];

	high_nibble = command & 0xf0;
 80006e2:	79fb      	ldrb	r3, [r7, #7]
 80006e4:	f023 030f 	bic.w	r3, r3, #15
 80006e8:	73fb      	strb	r3, [r7, #15]
	low_nibble = (command<< 4) & 0xf0;
 80006ea:	79fb      	ldrb	r3, [r7, #7]
 80006ec:	011b      	lsls	r3, r3, #4
 80006ee:	73bb      	strb	r3, [r7, #14]

	i2c_buffer[0] = high_nibble | 0x04 | 0x08;  // enable = 1, rs = 0, rw = 0, backlight = 1;
 80006f0:	7bfb      	ldrb	r3, [r7, #15]
 80006f2:	f043 030c 	orr.w	r3, r3, #12
 80006f6:	b2db      	uxtb	r3, r3
 80006f8:	723b      	strb	r3, [r7, #8]
	i2c_buffer[1] = high_nibble | 0x00 | 0x08;  // enable = 0, rs = 0, rw = 0, backlight = 1;
 80006fa:	7bfb      	ldrb	r3, [r7, #15]
 80006fc:	f043 0308 	orr.w	r3, r3, #8
 8000700:	b2db      	uxtb	r3, r3
 8000702:	727b      	strb	r3, [r7, #9]
	i2c_buffer[2] = low_nibble | 0x04 | 0x08;  // enable = 1, rs = 0, rw = 0, backlight = 1;
 8000704:	7bbb      	ldrb	r3, [r7, #14]
 8000706:	f043 030c 	orr.w	r3, r3, #12
 800070a:	b2db      	uxtb	r3, r3
 800070c:	72bb      	strb	r3, [r7, #10]
	i2c_buffer[3] = low_nibble | 0x00 | 0x08;  // enable = 0, rs = 0, rw = 0, backlight = 1;
 800070e:	7bbb      	ldrb	r3, [r7, #14]
 8000710:	f043 0308 	orr.w	r3, r3, #8
 8000714:	b2db      	uxtb	r3, r3
 8000716:	72fb      	strb	r3, [r7, #11]

	// Waiting for Transmit
	while(HAL_I2C_Master_Transmit(&hi2c1,I2C_LCD_ADDRESS, i2c_buffer, 4, 100) != HAL_OK) {
 8000718:	bf00      	nop
 800071a:	f107 0208 	add.w	r2, r7, #8
 800071e:	2364      	movs	r3, #100	@ 0x64
 8000720:	9300      	str	r3, [sp, #0]
 8000722:	2304      	movs	r3, #4
 8000724:	214e      	movs	r1, #78	@ 0x4e
 8000726:	4805      	ldr	r0, [pc, #20]	@ (800073c <lcd_command+0x64>)
 8000728:	f000 ff90 	bl	800164c <HAL_I2C_Master_Transmit>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d1f3      	bne.n	800071a <lcd_command+0x42>
		// HAL_DELAY(1);
	}
}
 8000732:	bf00      	nop
 8000734:	bf00      	nop
 8000736:	3710      	adds	r7, #16
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	20000078 	.word	0x20000078

08000740 <lcd_data>:



void lcd_data(uint8_t data) {
 8000740:	b580      	push	{r7, lr}
 8000742:	b086      	sub	sp, #24
 8000744:	af02      	add	r7, sp, #8
 8000746:	4603      	mov	r3, r0
 8000748:	71fb      	strb	r3, [r7, #7]
	uint8_t high_nibble, low_nibble;
	uint8_t i2c_buffer[4];

	high_nibble = data & 0xf0;
 800074a:	79fb      	ldrb	r3, [r7, #7]
 800074c:	f023 030f 	bic.w	r3, r3, #15
 8000750:	73fb      	strb	r3, [r7, #15]
	low_nibble = (data<< 4) & 0xf0;
 8000752:	79fb      	ldrb	r3, [r7, #7]
 8000754:	011b      	lsls	r3, r3, #4
 8000756:	73bb      	strb	r3, [r7, #14]

	i2c_buffer[0] = high_nibble | 0x05 | 0x08;  // enable = 1, rs = 1, rw = 0, backlight = 1;
 8000758:	7bfb      	ldrb	r3, [r7, #15]
 800075a:	f043 030d 	orr.w	r3, r3, #13
 800075e:	b2db      	uxtb	r3, r3
 8000760:	723b      	strb	r3, [r7, #8]
	i2c_buffer[1] = high_nibble | 0x01 | 0x08;  // enable = 0, rs = 1, rw = 0, backlight = 1;
 8000762:	7bfb      	ldrb	r3, [r7, #15]
 8000764:	f043 0309 	orr.w	r3, r3, #9
 8000768:	b2db      	uxtb	r3, r3
 800076a:	727b      	strb	r3, [r7, #9]
	i2c_buffer[2] = low_nibble | 0x05 | 0x08;  // enable = 1, rs = 1, rw = 0, backlight = 1;
 800076c:	7bbb      	ldrb	r3, [r7, #14]
 800076e:	f043 030d 	orr.w	r3, r3, #13
 8000772:	b2db      	uxtb	r3, r3
 8000774:	72bb      	strb	r3, [r7, #10]
	i2c_buffer[3] = low_nibble | 0x01 | 0x08;  // enable = 0, rs = 1, rw = 0, backlight = 1;
 8000776:	7bbb      	ldrb	r3, [r7, #14]
 8000778:	f043 0309 	orr.w	r3, r3, #9
 800077c:	b2db      	uxtb	r3, r3
 800077e:	72fb      	strb	r3, [r7, #11]

	// Waiting for Transmit
	while(HAL_I2C_Master_Transmit(&hi2c1,I2C_LCD_ADDRESS, i2c_buffer, 4, 100) != HAL_OK) {
 8000780:	bf00      	nop
 8000782:	f107 0208 	add.w	r2, r7, #8
 8000786:	2364      	movs	r3, #100	@ 0x64
 8000788:	9300      	str	r3, [sp, #0]
 800078a:	2304      	movs	r3, #4
 800078c:	214e      	movs	r1, #78	@ 0x4e
 800078e:	4805      	ldr	r0, [pc, #20]	@ (80007a4 <lcd_data+0x64>)
 8000790:	f000 ff5c 	bl	800164c <HAL_I2C_Master_Transmit>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d1f3      	bne.n	8000782 <lcd_data+0x42>
		// HAL_DELAY(1);
	}
}
 800079a:	bf00      	nop
 800079c:	bf00      	nop
 800079e:	3710      	adds	r7, #16
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	20000078 	.word	0x20000078

080007a8 <i2c_lcd_init>:


void i2c_lcd_init(void) {
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
	HAL_Delay(50);
 80007ac:	2032      	movs	r0, #50	@ 0x32
 80007ae:	f000 fabd 	bl	8000d2c <HAL_Delay>
	lcd_command(0x33);
 80007b2:	2033      	movs	r0, #51	@ 0x33
 80007b4:	f7ff ff90 	bl	80006d8 <lcd_command>
	HAL_Delay(5);
 80007b8:	2005      	movs	r0, #5
 80007ba:	f000 fab7 	bl	8000d2c <HAL_Delay>
	lcd_command(0x32);
 80007be:	2032      	movs	r0, #50	@ 0x32
 80007c0:	f7ff ff8a 	bl	80006d8 <lcd_command>
	HAL_Delay(5);
 80007c4:	2005      	movs	r0, #5
 80007c6:	f000 fab1 	bl	8000d2c <HAL_Delay>
	lcd_command(0x28);
 80007ca:	2028      	movs	r0, #40	@ 0x28
 80007cc:	f7ff ff84 	bl	80006d8 <lcd_command>
	HAL_Delay(5);
 80007d0:	2005      	movs	r0, #5
 80007d2:	f000 faab 	bl	8000d2c <HAL_Delay>
	lcd_command(DISPLAY_ON);
 80007d6:	200c      	movs	r0, #12
 80007d8:	f7ff ff7e 	bl	80006d8 <lcd_command>
	HAL_Delay(5);
 80007dc:	2005      	movs	r0, #5
 80007de:	f000 faa5 	bl	8000d2c <HAL_Delay>
	lcd_command(0x06);
 80007e2:	2006      	movs	r0, #6
 80007e4:	f7ff ff78 	bl	80006d8 <lcd_command>
	HAL_Delay(5);
 80007e8:	2005      	movs	r0, #5
 80007ea:	f000 fa9f 	bl	8000d2c <HAL_Delay>
	lcd_command(CLEAR_DISPLAY);
 80007ee:	2001      	movs	r0, #1
 80007f0:	f7ff ff72 	bl	80006d8 <lcd_command>
	HAL_Delay(2);
 80007f4:	2002      	movs	r0, #2
 80007f6:	f000 fa99 	bl	8000d2c <HAL_Delay>
}
 80007fa:	bf00      	nop
 80007fc:	bd80      	pop	{r7, pc}

080007fe <lcd_string>:


void lcd_string(char* str) {
 80007fe:	b580      	push	{r7, lr}
 8000800:	b084      	sub	sp, #16
 8000802:	af00      	add	r7, sp, #0
 8000804:	6078      	str	r0, [r7, #4]
	uint8_t string_length = strlen(str);
 8000806:	6878      	ldr	r0, [r7, #4]
 8000808:	f7ff fcea 	bl	80001e0 <strlen>
 800080c:	4603      	mov	r3, r0
 800080e:	73bb      	strb	r3, [r7, #14]

	for(uint8_t i=0; i<string_length; i++)
 8000810:	2300      	movs	r3, #0
 8000812:	73fb      	strb	r3, [r7, #15]
 8000814:	e009      	b.n	800082a <lcd_string+0x2c>
		lcd_data(str[i]);
 8000816:	7bfb      	ldrb	r3, [r7, #15]
 8000818:	687a      	ldr	r2, [r7, #4]
 800081a:	4413      	add	r3, r2
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	4618      	mov	r0, r3
 8000820:	f7ff ff8e 	bl	8000740 <lcd_data>
	for(uint8_t i=0; i<string_length; i++)
 8000824:	7bfb      	ldrb	r3, [r7, #15]
 8000826:	3301      	adds	r3, #1
 8000828:	73fb      	strb	r3, [r7, #15]
 800082a:	7bfa      	ldrb	r2, [r7, #15]
 800082c:	7bbb      	ldrb	r3, [r7, #14]
 800082e:	429a      	cmp	r2, r3
 8000830:	d3f1      	bcc.n	8000816 <lcd_string+0x18>
}
 8000832:	bf00      	nop
 8000834:	bf00      	nop
 8000836:	3710      	adds	r7, #16
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}

0800083c <move_cursor>:


void move_cursor(uint8_t row, uint8_t col) {
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
 8000842:	4603      	mov	r3, r0
 8000844:	460a      	mov	r2, r1
 8000846:	71fb      	strb	r3, [r7, #7]
 8000848:	4613      	mov	r3, r2
 800084a:	71bb      	strb	r3, [r7, #6]
	lcd_command(0x80 | row<<6 | col);
 800084c:	79fb      	ldrb	r3, [r7, #7]
 800084e:	019b      	lsls	r3, r3, #6
 8000850:	b2da      	uxtb	r2, r3
 8000852:	79bb      	ldrb	r3, [r7, #6]
 8000854:	4313      	orrs	r3, r2
 8000856:	b2db      	uxtb	r3, r3
 8000858:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800085c:	b2db      	uxtb	r3, r3
 800085e:	4618      	mov	r0, r3
 8000860:	f7ff ff3a 	bl	80006d8 <lcd_command>
}
 8000864:	bf00      	nop
 8000866:	3708      	adds	r7, #8
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}

0800086c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b088      	sub	sp, #32
 8000870:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000872:	f000 f9e9 	bl	8000c48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000876:	f000 f82b 	bl	80008d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800087a:	f7ff fe81 	bl	8000580 <MX_GPIO_Init>
  MX_I2C1_Init();
 800087e:	f7ff feb5 	bl	80005ec <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000882:	f000 f93d 	bl	8000b00 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  i2c_lcd_init();
 8000886:	f7ff ff8f 	bl	80007a8 <i2c_lcd_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t result [30];
  uint8_t count_data = 0;
 800088a:	2300      	movs	r3, #0
 800088c:	77fb      	strb	r3, [r7, #31]

  while (1)
  {
	  move_cursor(0, 0);
 800088e:	2100      	movs	r1, #0
 8000890:	2000      	movs	r0, #0
 8000892:	f7ff ffd3 	bl	800083c <move_cursor>
	  lcd_string("Let's Counting");
 8000896:	480c      	ldr	r0, [pc, #48]	@ (80008c8 <main+0x5c>)
 8000898:	f7ff ffb1 	bl	80007fe <lcd_string>
	  move_cursor(1, 0);
 800089c:	2100      	movs	r1, #0
 800089e:	2001      	movs	r0, #1
 80008a0:	f7ff ffcc 	bl	800083c <move_cursor>
	  snprintf(result, sizeof(result), "Count Value = %4d", count_data++);
 80008a4:	7ffb      	ldrb	r3, [r7, #31]
 80008a6:	1c5a      	adds	r2, r3, #1
 80008a8:	77fa      	strb	r2, [r7, #31]
 80008aa:	4638      	mov	r0, r7
 80008ac:	4a07      	ldr	r2, [pc, #28]	@ (80008cc <main+0x60>)
 80008ae:	211e      	movs	r1, #30
 80008b0:	f002 fddc 	bl	800346c <sniprintf>
	  lcd_string(result);
 80008b4:	463b      	mov	r3, r7
 80008b6:	4618      	mov	r0, r3
 80008b8:	f7ff ffa1 	bl	80007fe <lcd_string>
	  HAL_Delay(5000);
 80008bc:	f241 3088 	movw	r0, #5000	@ 0x1388
 80008c0:	f000 fa34 	bl	8000d2c <HAL_Delay>
  {
 80008c4:	bf00      	nop
 80008c6:	e7e2      	b.n	800088e <main+0x22>
 80008c8:	08003dec 	.word	0x08003dec
 80008cc:	08003dfc 	.word	0x08003dfc

080008d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b094      	sub	sp, #80	@ 0x50
 80008d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008d6:	f107 0320 	add.w	r3, r7, #32
 80008da:	2230      	movs	r2, #48	@ 0x30
 80008dc:	2100      	movs	r1, #0
 80008de:	4618      	mov	r0, r3
 80008e0:	f002 fdf8 	bl	80034d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008e4:	f107 030c 	add.w	r3, r7, #12
 80008e8:	2200      	movs	r2, #0
 80008ea:	601a      	str	r2, [r3, #0]
 80008ec:	605a      	str	r2, [r3, #4]
 80008ee:	609a      	str	r2, [r3, #8]
 80008f0:	60da      	str	r2, [r3, #12]
 80008f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008f4:	2300      	movs	r3, #0
 80008f6:	60bb      	str	r3, [r7, #8]
 80008f8:	4b27      	ldr	r3, [pc, #156]	@ (8000998 <SystemClock_Config+0xc8>)
 80008fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008fc:	4a26      	ldr	r2, [pc, #152]	@ (8000998 <SystemClock_Config+0xc8>)
 80008fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000902:	6413      	str	r3, [r2, #64]	@ 0x40
 8000904:	4b24      	ldr	r3, [pc, #144]	@ (8000998 <SystemClock_Config+0xc8>)
 8000906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000908:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800090c:	60bb      	str	r3, [r7, #8]
 800090e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000910:	2300      	movs	r3, #0
 8000912:	607b      	str	r3, [r7, #4]
 8000914:	4b21      	ldr	r3, [pc, #132]	@ (800099c <SystemClock_Config+0xcc>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4a20      	ldr	r2, [pc, #128]	@ (800099c <SystemClock_Config+0xcc>)
 800091a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800091e:	6013      	str	r3, [r2, #0]
 8000920:	4b1e      	ldr	r3, [pc, #120]	@ (800099c <SystemClock_Config+0xcc>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000928:	607b      	str	r3, [r7, #4]
 800092a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800092c:	2301      	movs	r3, #1
 800092e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000930:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000934:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000936:	2302      	movs	r3, #2
 8000938:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800093a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800093e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000940:	2304      	movs	r3, #4
 8000942:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000944:	2364      	movs	r3, #100	@ 0x64
 8000946:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000948:	2302      	movs	r3, #2
 800094a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800094c:	2304      	movs	r3, #4
 800094e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000950:	f107 0320 	add.w	r3, r7, #32
 8000954:	4618      	mov	r0, r3
 8000956:	f001 f9d3 	bl	8001d00 <HAL_RCC_OscConfig>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000960:	f000 f81e 	bl	80009a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000964:	230f      	movs	r3, #15
 8000966:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000968:	2302      	movs	r3, #2
 800096a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800096c:	2300      	movs	r3, #0
 800096e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000970:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000974:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000976:	2300      	movs	r3, #0
 8000978:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800097a:	f107 030c 	add.w	r3, r7, #12
 800097e:	2103      	movs	r1, #3
 8000980:	4618      	mov	r0, r3
 8000982:	f001 fc35 	bl	80021f0 <HAL_RCC_ClockConfig>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800098c:	f000 f808 	bl	80009a0 <Error_Handler>
  }
}
 8000990:	bf00      	nop
 8000992:	3750      	adds	r7, #80	@ 0x50
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	40023800 	.word	0x40023800
 800099c:	40007000 	.word	0x40007000

080009a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009a4:	b672      	cpsid	i
}
 80009a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009a8:	bf00      	nop
 80009aa:	e7fd      	b.n	80009a8 <Error_Handler+0x8>

080009ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b083      	sub	sp, #12
 80009b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009b2:	2300      	movs	r3, #0
 80009b4:	607b      	str	r3, [r7, #4]
 80009b6:	4b10      	ldr	r3, [pc, #64]	@ (80009f8 <HAL_MspInit+0x4c>)
 80009b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009ba:	4a0f      	ldr	r2, [pc, #60]	@ (80009f8 <HAL_MspInit+0x4c>)
 80009bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80009c2:	4b0d      	ldr	r3, [pc, #52]	@ (80009f8 <HAL_MspInit+0x4c>)
 80009c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009ca:	607b      	str	r3, [r7, #4]
 80009cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ce:	2300      	movs	r3, #0
 80009d0:	603b      	str	r3, [r7, #0]
 80009d2:	4b09      	ldr	r3, [pc, #36]	@ (80009f8 <HAL_MspInit+0x4c>)
 80009d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009d6:	4a08      	ldr	r2, [pc, #32]	@ (80009f8 <HAL_MspInit+0x4c>)
 80009d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80009de:	4b06      	ldr	r3, [pc, #24]	@ (80009f8 <HAL_MspInit+0x4c>)
 80009e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009e6:	603b      	str	r3, [r7, #0]
 80009e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ea:	bf00      	nop
 80009ec:	370c      	adds	r7, #12
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop
 80009f8:	40023800 	.word	0x40023800

080009fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a00:	bf00      	nop
 8000a02:	e7fd      	b.n	8000a00 <NMI_Handler+0x4>

08000a04 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a08:	bf00      	nop
 8000a0a:	e7fd      	b.n	8000a08 <HardFault_Handler+0x4>

08000a0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a10:	bf00      	nop
 8000a12:	e7fd      	b.n	8000a10 <MemManage_Handler+0x4>

08000a14 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a18:	bf00      	nop
 8000a1a:	e7fd      	b.n	8000a18 <BusFault_Handler+0x4>

08000a1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a20:	bf00      	nop
 8000a22:	e7fd      	b.n	8000a20 <UsageFault_Handler+0x4>

08000a24 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a28:	bf00      	nop
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr

08000a32 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a32:	b480      	push	{r7}
 8000a34:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a36:	bf00      	nop
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr

08000a40 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a44:	bf00      	nop
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr

08000a4e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a4e:	b580      	push	{r7, lr}
 8000a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a52:	f000 f94b 	bl	8000cec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a56:	bf00      	nop
 8000a58:	bd80      	pop	{r7, pc}
	...

08000a5c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000a60:	4802      	ldr	r0, [pc, #8]	@ (8000a6c <USART2_IRQHandler+0x10>)
 8000a62:	f001 fe35 	bl	80026d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000a66:	bf00      	nop
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	200000d0 	.word	0x200000d0

08000a70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b086      	sub	sp, #24
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a78:	4a14      	ldr	r2, [pc, #80]	@ (8000acc <_sbrk+0x5c>)
 8000a7a:	4b15      	ldr	r3, [pc, #84]	@ (8000ad0 <_sbrk+0x60>)
 8000a7c:	1ad3      	subs	r3, r2, r3
 8000a7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a80:	697b      	ldr	r3, [r7, #20]
 8000a82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a84:	4b13      	ldr	r3, [pc, #76]	@ (8000ad4 <_sbrk+0x64>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d102      	bne.n	8000a92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a8c:	4b11      	ldr	r3, [pc, #68]	@ (8000ad4 <_sbrk+0x64>)
 8000a8e:	4a12      	ldr	r2, [pc, #72]	@ (8000ad8 <_sbrk+0x68>)
 8000a90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a92:	4b10      	ldr	r3, [pc, #64]	@ (8000ad4 <_sbrk+0x64>)
 8000a94:	681a      	ldr	r2, [r3, #0]
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	4413      	add	r3, r2
 8000a9a:	693a      	ldr	r2, [r7, #16]
 8000a9c:	429a      	cmp	r2, r3
 8000a9e:	d207      	bcs.n	8000ab0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000aa0:	f002 fd20 	bl	80034e4 <__errno>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	220c      	movs	r2, #12
 8000aa8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000aaa:	f04f 33ff 	mov.w	r3, #4294967295
 8000aae:	e009      	b.n	8000ac4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ab0:	4b08      	ldr	r3, [pc, #32]	@ (8000ad4 <_sbrk+0x64>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ab6:	4b07      	ldr	r3, [pc, #28]	@ (8000ad4 <_sbrk+0x64>)
 8000ab8:	681a      	ldr	r2, [r3, #0]
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	4413      	add	r3, r2
 8000abe:	4a05      	ldr	r2, [pc, #20]	@ (8000ad4 <_sbrk+0x64>)
 8000ac0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ac2:	68fb      	ldr	r3, [r7, #12]
}
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	3718      	adds	r7, #24
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	20020000 	.word	0x20020000
 8000ad0:	00000400 	.word	0x00000400
 8000ad4:	200000cc 	.word	0x200000cc
 8000ad8:	20000268 	.word	0x20000268

08000adc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ae0:	4b06      	ldr	r3, [pc, #24]	@ (8000afc <SystemInit+0x20>)
 8000ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ae6:	4a05      	ldr	r2, [pc, #20]	@ (8000afc <SystemInit+0x20>)
 8000ae8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000aec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000af0:	bf00      	nop
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	e000ed00 	.word	0xe000ed00

08000b00 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b04:	4b11      	ldr	r3, [pc, #68]	@ (8000b4c <MX_USART2_UART_Init+0x4c>)
 8000b06:	4a12      	ldr	r2, [pc, #72]	@ (8000b50 <MX_USART2_UART_Init+0x50>)
 8000b08:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b0a:	4b10      	ldr	r3, [pc, #64]	@ (8000b4c <MX_USART2_UART_Init+0x4c>)
 8000b0c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b10:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b12:	4b0e      	ldr	r3, [pc, #56]	@ (8000b4c <MX_USART2_UART_Init+0x4c>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b18:	4b0c      	ldr	r3, [pc, #48]	@ (8000b4c <MX_USART2_UART_Init+0x4c>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b1e:	4b0b      	ldr	r3, [pc, #44]	@ (8000b4c <MX_USART2_UART_Init+0x4c>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b24:	4b09      	ldr	r3, [pc, #36]	@ (8000b4c <MX_USART2_UART_Init+0x4c>)
 8000b26:	220c      	movs	r2, #12
 8000b28:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b2a:	4b08      	ldr	r3, [pc, #32]	@ (8000b4c <MX_USART2_UART_Init+0x4c>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b30:	4b06      	ldr	r3, [pc, #24]	@ (8000b4c <MX_USART2_UART_Init+0x4c>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b36:	4805      	ldr	r0, [pc, #20]	@ (8000b4c <MX_USART2_UART_Init+0x4c>)
 8000b38:	f001 fd7a 	bl	8002630 <HAL_UART_Init>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b42:	f7ff ff2d 	bl	80009a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b46:	bf00      	nop
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	200000d0 	.word	0x200000d0
 8000b50:	40004400 	.word	0x40004400

08000b54 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b08a      	sub	sp, #40	@ 0x28
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b5c:	f107 0314 	add.w	r3, r7, #20
 8000b60:	2200      	movs	r2, #0
 8000b62:	601a      	str	r2, [r3, #0]
 8000b64:	605a      	str	r2, [r3, #4]
 8000b66:	609a      	str	r2, [r3, #8]
 8000b68:	60da      	str	r2, [r3, #12]
 8000b6a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a1d      	ldr	r2, [pc, #116]	@ (8000be8 <HAL_UART_MspInit+0x94>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d133      	bne.n	8000bde <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b76:	2300      	movs	r3, #0
 8000b78:	613b      	str	r3, [r7, #16]
 8000b7a:	4b1c      	ldr	r3, [pc, #112]	@ (8000bec <HAL_UART_MspInit+0x98>)
 8000b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b7e:	4a1b      	ldr	r2, [pc, #108]	@ (8000bec <HAL_UART_MspInit+0x98>)
 8000b80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b84:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b86:	4b19      	ldr	r3, [pc, #100]	@ (8000bec <HAL_UART_MspInit+0x98>)
 8000b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b8e:	613b      	str	r3, [r7, #16]
 8000b90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b92:	2300      	movs	r3, #0
 8000b94:	60fb      	str	r3, [r7, #12]
 8000b96:	4b15      	ldr	r3, [pc, #84]	@ (8000bec <HAL_UART_MspInit+0x98>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b9a:	4a14      	ldr	r2, [pc, #80]	@ (8000bec <HAL_UART_MspInit+0x98>)
 8000b9c:	f043 0301 	orr.w	r3, r3, #1
 8000ba0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ba2:	4b12      	ldr	r3, [pc, #72]	@ (8000bec <HAL_UART_MspInit+0x98>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba6:	f003 0301 	and.w	r3, r3, #1
 8000baa:	60fb      	str	r3, [r7, #12]
 8000bac:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000bae:	230c      	movs	r3, #12
 8000bb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bba:	2303      	movs	r3, #3
 8000bbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bbe:	2307      	movs	r3, #7
 8000bc0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc2:	f107 0314 	add.w	r3, r7, #20
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4809      	ldr	r0, [pc, #36]	@ (8000bf0 <HAL_UART_MspInit+0x9c>)
 8000bca:	f000 fa77 	bl	80010bc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000bce:	2200      	movs	r2, #0
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	2026      	movs	r0, #38	@ 0x26
 8000bd4:	f000 f9a9 	bl	8000f2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000bd8:	2026      	movs	r0, #38	@ 0x26
 8000bda:	f000 f9c2 	bl	8000f62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000bde:	bf00      	nop
 8000be0:	3728      	adds	r7, #40	@ 0x28
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	40004400 	.word	0x40004400
 8000bec:	40023800 	.word	0x40023800
 8000bf0:	40020000 	.word	0x40020000

08000bf4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000bf4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c2c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000bf8:	f7ff ff70 	bl	8000adc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bfc:	480c      	ldr	r0, [pc, #48]	@ (8000c30 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000bfe:	490d      	ldr	r1, [pc, #52]	@ (8000c34 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c00:	4a0d      	ldr	r2, [pc, #52]	@ (8000c38 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c04:	e002      	b.n	8000c0c <LoopCopyDataInit>

08000c06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c0a:	3304      	adds	r3, #4

08000c0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c10:	d3f9      	bcc.n	8000c06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c12:	4a0a      	ldr	r2, [pc, #40]	@ (8000c3c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c14:	4c0a      	ldr	r4, [pc, #40]	@ (8000c40 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c18:	e001      	b.n	8000c1e <LoopFillZerobss>

08000c1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c1c:	3204      	adds	r2, #4

08000c1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c20:	d3fb      	bcc.n	8000c1a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c22:	f002 fc65 	bl	80034f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c26:	f7ff fe21 	bl	800086c <main>
  bx  lr    
 8000c2a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c2c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c34:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000c38:	08003e6c 	.word	0x08003e6c
  ldr r2, =_sbss
 8000c3c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000c40:	20000264 	.word	0x20000264

08000c44 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c44:	e7fe      	b.n	8000c44 <ADC_IRQHandler>
	...

08000c48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c4c:	4b0e      	ldr	r3, [pc, #56]	@ (8000c88 <HAL_Init+0x40>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a0d      	ldr	r2, [pc, #52]	@ (8000c88 <HAL_Init+0x40>)
 8000c52:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c56:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c58:	4b0b      	ldr	r3, [pc, #44]	@ (8000c88 <HAL_Init+0x40>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a0a      	ldr	r2, [pc, #40]	@ (8000c88 <HAL_Init+0x40>)
 8000c5e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c62:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c64:	4b08      	ldr	r3, [pc, #32]	@ (8000c88 <HAL_Init+0x40>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a07      	ldr	r2, [pc, #28]	@ (8000c88 <HAL_Init+0x40>)
 8000c6a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c70:	2003      	movs	r0, #3
 8000c72:	f000 f94f 	bl	8000f14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c76:	200f      	movs	r0, #15
 8000c78:	f000 f808 	bl	8000c8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c7c:	f7ff fe96 	bl	80009ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c80:	2300      	movs	r3, #0
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	40023c00 	.word	0x40023c00

08000c8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c94:	4b12      	ldr	r3, [pc, #72]	@ (8000ce0 <HAL_InitTick+0x54>)
 8000c96:	681a      	ldr	r2, [r3, #0]
 8000c98:	4b12      	ldr	r3, [pc, #72]	@ (8000ce4 <HAL_InitTick+0x58>)
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ca2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ca6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000caa:	4618      	mov	r0, r3
 8000cac:	f000 f967 	bl	8000f7e <HAL_SYSTICK_Config>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	e00e      	b.n	8000cd8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	2b0f      	cmp	r3, #15
 8000cbe:	d80a      	bhi.n	8000cd6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	6879      	ldr	r1, [r7, #4]
 8000cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cc8:	f000 f92f 	bl	8000f2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ccc:	4a06      	ldr	r2, [pc, #24]	@ (8000ce8 <HAL_InitTick+0x5c>)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	e000      	b.n	8000cd8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cd6:	2301      	movs	r3, #1
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	3708      	adds	r7, #8
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	20000000 	.word	0x20000000
 8000ce4:	20000008 	.word	0x20000008
 8000ce8:	20000004 	.word	0x20000004

08000cec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cf0:	4b06      	ldr	r3, [pc, #24]	@ (8000d0c <HAL_IncTick+0x20>)
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	461a      	mov	r2, r3
 8000cf6:	4b06      	ldr	r3, [pc, #24]	@ (8000d10 <HAL_IncTick+0x24>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	4413      	add	r3, r2
 8000cfc:	4a04      	ldr	r2, [pc, #16]	@ (8000d10 <HAL_IncTick+0x24>)
 8000cfe:	6013      	str	r3, [r2, #0]
}
 8000d00:	bf00      	nop
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	20000008 	.word	0x20000008
 8000d10:	20000118 	.word	0x20000118

08000d14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  return uwTick;
 8000d18:	4b03      	ldr	r3, [pc, #12]	@ (8000d28 <HAL_GetTick+0x14>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	20000118 	.word	0x20000118

08000d2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b084      	sub	sp, #16
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d34:	f7ff ffee 	bl	8000d14 <HAL_GetTick>
 8000d38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d44:	d005      	beq.n	8000d52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d46:	4b0a      	ldr	r3, [pc, #40]	@ (8000d70 <HAL_Delay+0x44>)
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	461a      	mov	r2, r3
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	4413      	add	r3, r2
 8000d50:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d52:	bf00      	nop
 8000d54:	f7ff ffde 	bl	8000d14 <HAL_GetTick>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	68bb      	ldr	r3, [r7, #8]
 8000d5c:	1ad3      	subs	r3, r2, r3
 8000d5e:	68fa      	ldr	r2, [r7, #12]
 8000d60:	429a      	cmp	r2, r3
 8000d62:	d8f7      	bhi.n	8000d54 <HAL_Delay+0x28>
  {
  }
}
 8000d64:	bf00      	nop
 8000d66:	bf00      	nop
 8000d68:	3710      	adds	r7, #16
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	20000008 	.word	0x20000008

08000d74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b085      	sub	sp, #20
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	f003 0307 	and.w	r3, r3, #7
 8000d82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d84:	4b0c      	ldr	r3, [pc, #48]	@ (8000db8 <__NVIC_SetPriorityGrouping+0x44>)
 8000d86:	68db      	ldr	r3, [r3, #12]
 8000d88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d8a:	68ba      	ldr	r2, [r7, #8]
 8000d8c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d90:	4013      	ands	r3, r2
 8000d92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d9c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000da0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000da4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000da6:	4a04      	ldr	r2, [pc, #16]	@ (8000db8 <__NVIC_SetPriorityGrouping+0x44>)
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	60d3      	str	r3, [r2, #12]
}
 8000dac:	bf00      	nop
 8000dae:	3714      	adds	r7, #20
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr
 8000db8:	e000ed00 	.word	0xe000ed00

08000dbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dc0:	4b04      	ldr	r3, [pc, #16]	@ (8000dd4 <__NVIC_GetPriorityGrouping+0x18>)
 8000dc2:	68db      	ldr	r3, [r3, #12]
 8000dc4:	0a1b      	lsrs	r3, r3, #8
 8000dc6:	f003 0307 	and.w	r3, r3, #7
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr
 8000dd4:	e000ed00 	.word	0xe000ed00

08000dd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b083      	sub	sp, #12
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	4603      	mov	r3, r0
 8000de0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	db0b      	blt.n	8000e02 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dea:	79fb      	ldrb	r3, [r7, #7]
 8000dec:	f003 021f 	and.w	r2, r3, #31
 8000df0:	4907      	ldr	r1, [pc, #28]	@ (8000e10 <__NVIC_EnableIRQ+0x38>)
 8000df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df6:	095b      	lsrs	r3, r3, #5
 8000df8:	2001      	movs	r0, #1
 8000dfa:	fa00 f202 	lsl.w	r2, r0, r2
 8000dfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e02:	bf00      	nop
 8000e04:	370c      	adds	r7, #12
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	e000e100 	.word	0xe000e100

08000e14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	6039      	str	r1, [r7, #0]
 8000e1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	db0a      	blt.n	8000e3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	b2da      	uxtb	r2, r3
 8000e2c:	490c      	ldr	r1, [pc, #48]	@ (8000e60 <__NVIC_SetPriority+0x4c>)
 8000e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e32:	0112      	lsls	r2, r2, #4
 8000e34:	b2d2      	uxtb	r2, r2
 8000e36:	440b      	add	r3, r1
 8000e38:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e3c:	e00a      	b.n	8000e54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	b2da      	uxtb	r2, r3
 8000e42:	4908      	ldr	r1, [pc, #32]	@ (8000e64 <__NVIC_SetPriority+0x50>)
 8000e44:	79fb      	ldrb	r3, [r7, #7]
 8000e46:	f003 030f 	and.w	r3, r3, #15
 8000e4a:	3b04      	subs	r3, #4
 8000e4c:	0112      	lsls	r2, r2, #4
 8000e4e:	b2d2      	uxtb	r2, r2
 8000e50:	440b      	add	r3, r1
 8000e52:	761a      	strb	r2, [r3, #24]
}
 8000e54:	bf00      	nop
 8000e56:	370c      	adds	r7, #12
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr
 8000e60:	e000e100 	.word	0xe000e100
 8000e64:	e000ed00 	.word	0xe000ed00

08000e68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b089      	sub	sp, #36	@ 0x24
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	60f8      	str	r0, [r7, #12]
 8000e70:	60b9      	str	r1, [r7, #8]
 8000e72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	f003 0307 	and.w	r3, r3, #7
 8000e7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e7c:	69fb      	ldr	r3, [r7, #28]
 8000e7e:	f1c3 0307 	rsb	r3, r3, #7
 8000e82:	2b04      	cmp	r3, #4
 8000e84:	bf28      	it	cs
 8000e86:	2304      	movcs	r3, #4
 8000e88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e8a:	69fb      	ldr	r3, [r7, #28]
 8000e8c:	3304      	adds	r3, #4
 8000e8e:	2b06      	cmp	r3, #6
 8000e90:	d902      	bls.n	8000e98 <NVIC_EncodePriority+0x30>
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	3b03      	subs	r3, #3
 8000e96:	e000      	b.n	8000e9a <NVIC_EncodePriority+0x32>
 8000e98:	2300      	movs	r3, #0
 8000e9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e9c:	f04f 32ff 	mov.w	r2, #4294967295
 8000ea0:	69bb      	ldr	r3, [r7, #24]
 8000ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea6:	43da      	mvns	r2, r3
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	401a      	ands	r2, r3
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000eb0:	f04f 31ff 	mov.w	r1, #4294967295
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eba:	43d9      	mvns	r1, r3
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec0:	4313      	orrs	r3, r2
         );
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3724      	adds	r7, #36	@ 0x24
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
	...

08000ed0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	3b01      	subs	r3, #1
 8000edc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ee0:	d301      	bcc.n	8000ee6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	e00f      	b.n	8000f06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ee6:	4a0a      	ldr	r2, [pc, #40]	@ (8000f10 <SysTick_Config+0x40>)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	3b01      	subs	r3, #1
 8000eec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eee:	210f      	movs	r1, #15
 8000ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ef4:	f7ff ff8e 	bl	8000e14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ef8:	4b05      	ldr	r3, [pc, #20]	@ (8000f10 <SysTick_Config+0x40>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000efe:	4b04      	ldr	r3, [pc, #16]	@ (8000f10 <SysTick_Config+0x40>)
 8000f00:	2207      	movs	r2, #7
 8000f02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f04:	2300      	movs	r3, #0
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	3708      	adds	r7, #8
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	e000e010 	.word	0xe000e010

08000f14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f1c:	6878      	ldr	r0, [r7, #4]
 8000f1e:	f7ff ff29 	bl	8000d74 <__NVIC_SetPriorityGrouping>
}
 8000f22:	bf00      	nop
 8000f24:	3708      	adds	r7, #8
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}

08000f2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f2a:	b580      	push	{r7, lr}
 8000f2c:	b086      	sub	sp, #24
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	4603      	mov	r3, r0
 8000f32:	60b9      	str	r1, [r7, #8]
 8000f34:	607a      	str	r2, [r7, #4]
 8000f36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f3c:	f7ff ff3e 	bl	8000dbc <__NVIC_GetPriorityGrouping>
 8000f40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f42:	687a      	ldr	r2, [r7, #4]
 8000f44:	68b9      	ldr	r1, [r7, #8]
 8000f46:	6978      	ldr	r0, [r7, #20]
 8000f48:	f7ff ff8e 	bl	8000e68 <NVIC_EncodePriority>
 8000f4c:	4602      	mov	r2, r0
 8000f4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f52:	4611      	mov	r1, r2
 8000f54:	4618      	mov	r0, r3
 8000f56:	f7ff ff5d 	bl	8000e14 <__NVIC_SetPriority>
}
 8000f5a:	bf00      	nop
 8000f5c:	3718      	adds	r7, #24
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}

08000f62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f62:	b580      	push	{r7, lr}
 8000f64:	b082      	sub	sp, #8
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	4603      	mov	r3, r0
 8000f6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f70:	4618      	mov	r0, r3
 8000f72:	f7ff ff31 	bl	8000dd8 <__NVIC_EnableIRQ>
}
 8000f76:	bf00      	nop
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}

08000f7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f7e:	b580      	push	{r7, lr}
 8000f80:	b082      	sub	sp, #8
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f86:	6878      	ldr	r0, [r7, #4]
 8000f88:	f7ff ffa2 	bl	8000ed0 <SysTick_Config>
 8000f8c:	4603      	mov	r3, r0
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3708      	adds	r7, #8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}

08000f96 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f96:	b580      	push	{r7, lr}
 8000f98:	b084      	sub	sp, #16
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fa2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000fa4:	f7ff feb6 	bl	8000d14 <HAL_GetTick>
 8000fa8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000fb0:	b2db      	uxtb	r3, r3
 8000fb2:	2b02      	cmp	r3, #2
 8000fb4:	d008      	beq.n	8000fc8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2280      	movs	r2, #128	@ 0x80
 8000fba:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	e052      	b.n	800106e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	681a      	ldr	r2, [r3, #0]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f022 0216 	bic.w	r2, r2, #22
 8000fd6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	695a      	ldr	r2, [r3, #20]
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000fe6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d103      	bne.n	8000ff8 <HAL_DMA_Abort+0x62>
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d007      	beq.n	8001008 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f022 0208 	bic.w	r2, r2, #8
 8001006:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f022 0201 	bic.w	r2, r2, #1
 8001016:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001018:	e013      	b.n	8001042 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800101a:	f7ff fe7b 	bl	8000d14 <HAL_GetTick>
 800101e:	4602      	mov	r2, r0
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	1ad3      	subs	r3, r2, r3
 8001024:	2b05      	cmp	r3, #5
 8001026:	d90c      	bls.n	8001042 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2220      	movs	r2, #32
 800102c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2203      	movs	r2, #3
 8001032:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2200      	movs	r2, #0
 800103a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800103e:	2303      	movs	r3, #3
 8001040:	e015      	b.n	800106e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f003 0301 	and.w	r3, r3, #1
 800104c:	2b00      	cmp	r3, #0
 800104e:	d1e4      	bne.n	800101a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001054:	223f      	movs	r2, #63	@ 0x3f
 8001056:	409a      	lsls	r2, r3
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2201      	movs	r2, #1
 8001060:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2200      	movs	r2, #0
 8001068:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800106c:	2300      	movs	r3, #0
}
 800106e:	4618      	mov	r0, r3
 8001070:	3710      	adds	r7, #16
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}

08001076 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001076:	b480      	push	{r7}
 8001078:	b083      	sub	sp, #12
 800107a:	af00      	add	r7, sp, #0
 800107c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001084:	b2db      	uxtb	r3, r3
 8001086:	2b02      	cmp	r3, #2
 8001088:	d004      	beq.n	8001094 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2280      	movs	r2, #128	@ 0x80
 800108e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001090:	2301      	movs	r3, #1
 8001092:	e00c      	b.n	80010ae <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2205      	movs	r2, #5
 8001098:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f022 0201 	bic.w	r2, r2, #1
 80010aa:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80010ac:	2300      	movs	r3, #0
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	370c      	adds	r7, #12
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
	...

080010bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010bc:	b480      	push	{r7}
 80010be:	b089      	sub	sp, #36	@ 0x24
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010c6:	2300      	movs	r3, #0
 80010c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010ca:	2300      	movs	r3, #0
 80010cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010ce:	2300      	movs	r3, #0
 80010d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010d2:	2300      	movs	r3, #0
 80010d4:	61fb      	str	r3, [r7, #28]
 80010d6:	e159      	b.n	800138c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010d8:	2201      	movs	r2, #1
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	fa02 f303 	lsl.w	r3, r2, r3
 80010e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	697a      	ldr	r2, [r7, #20]
 80010e8:	4013      	ands	r3, r2
 80010ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010ec:	693a      	ldr	r2, [r7, #16]
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	429a      	cmp	r2, r3
 80010f2:	f040 8148 	bne.w	8001386 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	f003 0303 	and.w	r3, r3, #3
 80010fe:	2b01      	cmp	r3, #1
 8001100:	d005      	beq.n	800110e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800110a:	2b02      	cmp	r3, #2
 800110c:	d130      	bne.n	8001170 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	689b      	ldr	r3, [r3, #8]
 8001112:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001114:	69fb      	ldr	r3, [r7, #28]
 8001116:	005b      	lsls	r3, r3, #1
 8001118:	2203      	movs	r2, #3
 800111a:	fa02 f303 	lsl.w	r3, r2, r3
 800111e:	43db      	mvns	r3, r3
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	4013      	ands	r3, r2
 8001124:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	68da      	ldr	r2, [r3, #12]
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	005b      	lsls	r3, r3, #1
 800112e:	fa02 f303 	lsl.w	r3, r2, r3
 8001132:	69ba      	ldr	r2, [r7, #24]
 8001134:	4313      	orrs	r3, r2
 8001136:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	69ba      	ldr	r2, [r7, #24]
 800113c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001144:	2201      	movs	r2, #1
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	fa02 f303 	lsl.w	r3, r2, r3
 800114c:	43db      	mvns	r3, r3
 800114e:	69ba      	ldr	r2, [r7, #24]
 8001150:	4013      	ands	r3, r2
 8001152:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	091b      	lsrs	r3, r3, #4
 800115a:	f003 0201 	and.w	r2, r3, #1
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	fa02 f303 	lsl.w	r3, r2, r3
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	4313      	orrs	r3, r2
 8001168:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f003 0303 	and.w	r3, r3, #3
 8001178:	2b03      	cmp	r3, #3
 800117a:	d017      	beq.n	80011ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	68db      	ldr	r3, [r3, #12]
 8001180:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	005b      	lsls	r3, r3, #1
 8001186:	2203      	movs	r2, #3
 8001188:	fa02 f303 	lsl.w	r3, r2, r3
 800118c:	43db      	mvns	r3, r3
 800118e:	69ba      	ldr	r2, [r7, #24]
 8001190:	4013      	ands	r3, r2
 8001192:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	689a      	ldr	r2, [r3, #8]
 8001198:	69fb      	ldr	r3, [r7, #28]
 800119a:	005b      	lsls	r3, r3, #1
 800119c:	fa02 f303 	lsl.w	r3, r2, r3
 80011a0:	69ba      	ldr	r2, [r7, #24]
 80011a2:	4313      	orrs	r3, r2
 80011a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f003 0303 	and.w	r3, r3, #3
 80011b4:	2b02      	cmp	r3, #2
 80011b6:	d123      	bne.n	8001200 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011b8:	69fb      	ldr	r3, [r7, #28]
 80011ba:	08da      	lsrs	r2, r3, #3
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	3208      	adds	r2, #8
 80011c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	f003 0307 	and.w	r3, r3, #7
 80011cc:	009b      	lsls	r3, r3, #2
 80011ce:	220f      	movs	r2, #15
 80011d0:	fa02 f303 	lsl.w	r3, r2, r3
 80011d4:	43db      	mvns	r3, r3
 80011d6:	69ba      	ldr	r2, [r7, #24]
 80011d8:	4013      	ands	r3, r2
 80011da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	691a      	ldr	r2, [r3, #16]
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	f003 0307 	and.w	r3, r3, #7
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ec:	69ba      	ldr	r2, [r7, #24]
 80011ee:	4313      	orrs	r3, r2
 80011f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	08da      	lsrs	r2, r3, #3
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	3208      	adds	r2, #8
 80011fa:	69b9      	ldr	r1, [r7, #24]
 80011fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	005b      	lsls	r3, r3, #1
 800120a:	2203      	movs	r2, #3
 800120c:	fa02 f303 	lsl.w	r3, r2, r3
 8001210:	43db      	mvns	r3, r3
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	4013      	ands	r3, r2
 8001216:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f003 0203 	and.w	r2, r3, #3
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	005b      	lsls	r3, r3, #1
 8001224:	fa02 f303 	lsl.w	r3, r2, r3
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	4313      	orrs	r3, r2
 800122c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	69ba      	ldr	r2, [r7, #24]
 8001232:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800123c:	2b00      	cmp	r3, #0
 800123e:	f000 80a2 	beq.w	8001386 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001242:	2300      	movs	r3, #0
 8001244:	60fb      	str	r3, [r7, #12]
 8001246:	4b57      	ldr	r3, [pc, #348]	@ (80013a4 <HAL_GPIO_Init+0x2e8>)
 8001248:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800124a:	4a56      	ldr	r2, [pc, #344]	@ (80013a4 <HAL_GPIO_Init+0x2e8>)
 800124c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001250:	6453      	str	r3, [r2, #68]	@ 0x44
 8001252:	4b54      	ldr	r3, [pc, #336]	@ (80013a4 <HAL_GPIO_Init+0x2e8>)
 8001254:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001256:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800125a:	60fb      	str	r3, [r7, #12]
 800125c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800125e:	4a52      	ldr	r2, [pc, #328]	@ (80013a8 <HAL_GPIO_Init+0x2ec>)
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	089b      	lsrs	r3, r3, #2
 8001264:	3302      	adds	r3, #2
 8001266:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800126a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	f003 0303 	and.w	r3, r3, #3
 8001272:	009b      	lsls	r3, r3, #2
 8001274:	220f      	movs	r2, #15
 8001276:	fa02 f303 	lsl.w	r3, r2, r3
 800127a:	43db      	mvns	r3, r3
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	4013      	ands	r3, r2
 8001280:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	4a49      	ldr	r2, [pc, #292]	@ (80013ac <HAL_GPIO_Init+0x2f0>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d019      	beq.n	80012be <HAL_GPIO_Init+0x202>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4a48      	ldr	r2, [pc, #288]	@ (80013b0 <HAL_GPIO_Init+0x2f4>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d013      	beq.n	80012ba <HAL_GPIO_Init+0x1fe>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4a47      	ldr	r2, [pc, #284]	@ (80013b4 <HAL_GPIO_Init+0x2f8>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d00d      	beq.n	80012b6 <HAL_GPIO_Init+0x1fa>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4a46      	ldr	r2, [pc, #280]	@ (80013b8 <HAL_GPIO_Init+0x2fc>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d007      	beq.n	80012b2 <HAL_GPIO_Init+0x1f6>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4a45      	ldr	r2, [pc, #276]	@ (80013bc <HAL_GPIO_Init+0x300>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d101      	bne.n	80012ae <HAL_GPIO_Init+0x1f2>
 80012aa:	2304      	movs	r3, #4
 80012ac:	e008      	b.n	80012c0 <HAL_GPIO_Init+0x204>
 80012ae:	2307      	movs	r3, #7
 80012b0:	e006      	b.n	80012c0 <HAL_GPIO_Init+0x204>
 80012b2:	2303      	movs	r3, #3
 80012b4:	e004      	b.n	80012c0 <HAL_GPIO_Init+0x204>
 80012b6:	2302      	movs	r3, #2
 80012b8:	e002      	b.n	80012c0 <HAL_GPIO_Init+0x204>
 80012ba:	2301      	movs	r3, #1
 80012bc:	e000      	b.n	80012c0 <HAL_GPIO_Init+0x204>
 80012be:	2300      	movs	r3, #0
 80012c0:	69fa      	ldr	r2, [r7, #28]
 80012c2:	f002 0203 	and.w	r2, r2, #3
 80012c6:	0092      	lsls	r2, r2, #2
 80012c8:	4093      	lsls	r3, r2
 80012ca:	69ba      	ldr	r2, [r7, #24]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012d0:	4935      	ldr	r1, [pc, #212]	@ (80013a8 <HAL_GPIO_Init+0x2ec>)
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	089b      	lsrs	r3, r3, #2
 80012d6:	3302      	adds	r3, #2
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012de:	4b38      	ldr	r3, [pc, #224]	@ (80013c0 <HAL_GPIO_Init+0x304>)
 80012e0:	689b      	ldr	r3, [r3, #8]
 80012e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	43db      	mvns	r3, r3
 80012e8:	69ba      	ldr	r2, [r7, #24]
 80012ea:	4013      	ands	r3, r2
 80012ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d003      	beq.n	8001302 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80012fa:	69ba      	ldr	r2, [r7, #24]
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	4313      	orrs	r3, r2
 8001300:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001302:	4a2f      	ldr	r2, [pc, #188]	@ (80013c0 <HAL_GPIO_Init+0x304>)
 8001304:	69bb      	ldr	r3, [r7, #24]
 8001306:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001308:	4b2d      	ldr	r3, [pc, #180]	@ (80013c0 <HAL_GPIO_Init+0x304>)
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	43db      	mvns	r3, r3
 8001312:	69ba      	ldr	r2, [r7, #24]
 8001314:	4013      	ands	r3, r2
 8001316:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001320:	2b00      	cmp	r3, #0
 8001322:	d003      	beq.n	800132c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001324:	69ba      	ldr	r2, [r7, #24]
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	4313      	orrs	r3, r2
 800132a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800132c:	4a24      	ldr	r2, [pc, #144]	@ (80013c0 <HAL_GPIO_Init+0x304>)
 800132e:	69bb      	ldr	r3, [r7, #24]
 8001330:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001332:	4b23      	ldr	r3, [pc, #140]	@ (80013c0 <HAL_GPIO_Init+0x304>)
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	43db      	mvns	r3, r3
 800133c:	69ba      	ldr	r2, [r7, #24]
 800133e:	4013      	ands	r3, r2
 8001340:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800134a:	2b00      	cmp	r3, #0
 800134c:	d003      	beq.n	8001356 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800134e:	69ba      	ldr	r2, [r7, #24]
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	4313      	orrs	r3, r2
 8001354:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001356:	4a1a      	ldr	r2, [pc, #104]	@ (80013c0 <HAL_GPIO_Init+0x304>)
 8001358:	69bb      	ldr	r3, [r7, #24]
 800135a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800135c:	4b18      	ldr	r3, [pc, #96]	@ (80013c0 <HAL_GPIO_Init+0x304>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	43db      	mvns	r3, r3
 8001366:	69ba      	ldr	r2, [r7, #24]
 8001368:	4013      	ands	r3, r2
 800136a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001374:	2b00      	cmp	r3, #0
 8001376:	d003      	beq.n	8001380 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	4313      	orrs	r3, r2
 800137e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001380:	4a0f      	ldr	r2, [pc, #60]	@ (80013c0 <HAL_GPIO_Init+0x304>)
 8001382:	69bb      	ldr	r3, [r7, #24]
 8001384:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	3301      	adds	r3, #1
 800138a:	61fb      	str	r3, [r7, #28]
 800138c:	69fb      	ldr	r3, [r7, #28]
 800138e:	2b0f      	cmp	r3, #15
 8001390:	f67f aea2 	bls.w	80010d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001394:	bf00      	nop
 8001396:	bf00      	nop
 8001398:	3724      	adds	r7, #36	@ 0x24
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	40023800 	.word	0x40023800
 80013a8:	40013800 	.word	0x40013800
 80013ac:	40020000 	.word	0x40020000
 80013b0:	40020400 	.word	0x40020400
 80013b4:	40020800 	.word	0x40020800
 80013b8:	40020c00 	.word	0x40020c00
 80013bc:	40021000 	.word	0x40021000
 80013c0:	40013c00 	.word	0x40013c00

080013c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b084      	sub	sp, #16
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d101      	bne.n	80013d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
 80013d4:	e12b      	b.n	800162e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d106      	bne.n	80013f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2200      	movs	r2, #0
 80013e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80013ea:	6878      	ldr	r0, [r7, #4]
 80013ec:	f7ff f92c 	bl	8000648 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2224      	movs	r2, #36	@ 0x24
 80013f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f022 0201 	bic.w	r2, r2, #1
 8001406:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001416:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001426:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001428:	f001 f8da 	bl	80025e0 <HAL_RCC_GetPCLK1Freq>
 800142c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	4a81      	ldr	r2, [pc, #516]	@ (8001638 <HAL_I2C_Init+0x274>)
 8001434:	4293      	cmp	r3, r2
 8001436:	d807      	bhi.n	8001448 <HAL_I2C_Init+0x84>
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	4a80      	ldr	r2, [pc, #512]	@ (800163c <HAL_I2C_Init+0x278>)
 800143c:	4293      	cmp	r3, r2
 800143e:	bf94      	ite	ls
 8001440:	2301      	movls	r3, #1
 8001442:	2300      	movhi	r3, #0
 8001444:	b2db      	uxtb	r3, r3
 8001446:	e006      	b.n	8001456 <HAL_I2C_Init+0x92>
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	4a7d      	ldr	r2, [pc, #500]	@ (8001640 <HAL_I2C_Init+0x27c>)
 800144c:	4293      	cmp	r3, r2
 800144e:	bf94      	ite	ls
 8001450:	2301      	movls	r3, #1
 8001452:	2300      	movhi	r3, #0
 8001454:	b2db      	uxtb	r3, r3
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800145a:	2301      	movs	r3, #1
 800145c:	e0e7      	b.n	800162e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	4a78      	ldr	r2, [pc, #480]	@ (8001644 <HAL_I2C_Init+0x280>)
 8001462:	fba2 2303 	umull	r2, r3, r2, r3
 8001466:	0c9b      	lsrs	r3, r3, #18
 8001468:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	68ba      	ldr	r2, [r7, #8]
 800147a:	430a      	orrs	r2, r1
 800147c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	6a1b      	ldr	r3, [r3, #32]
 8001484:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	4a6a      	ldr	r2, [pc, #424]	@ (8001638 <HAL_I2C_Init+0x274>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d802      	bhi.n	8001498 <HAL_I2C_Init+0xd4>
 8001492:	68bb      	ldr	r3, [r7, #8]
 8001494:	3301      	adds	r3, #1
 8001496:	e009      	b.n	80014ac <HAL_I2C_Init+0xe8>
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800149e:	fb02 f303 	mul.w	r3, r2, r3
 80014a2:	4a69      	ldr	r2, [pc, #420]	@ (8001648 <HAL_I2C_Init+0x284>)
 80014a4:	fba2 2303 	umull	r2, r3, r2, r3
 80014a8:	099b      	lsrs	r3, r3, #6
 80014aa:	3301      	adds	r3, #1
 80014ac:	687a      	ldr	r2, [r7, #4]
 80014ae:	6812      	ldr	r2, [r2, #0]
 80014b0:	430b      	orrs	r3, r1
 80014b2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	69db      	ldr	r3, [r3, #28]
 80014ba:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80014be:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	495c      	ldr	r1, [pc, #368]	@ (8001638 <HAL_I2C_Init+0x274>)
 80014c8:	428b      	cmp	r3, r1
 80014ca:	d819      	bhi.n	8001500 <HAL_I2C_Init+0x13c>
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	1e59      	subs	r1, r3, #1
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	005b      	lsls	r3, r3, #1
 80014d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80014da:	1c59      	adds	r1, r3, #1
 80014dc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80014e0:	400b      	ands	r3, r1
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d00a      	beq.n	80014fc <HAL_I2C_Init+0x138>
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	1e59      	subs	r1, r3, #1
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	005b      	lsls	r3, r3, #1
 80014f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80014f4:	3301      	adds	r3, #1
 80014f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014fa:	e051      	b.n	80015a0 <HAL_I2C_Init+0x1dc>
 80014fc:	2304      	movs	r3, #4
 80014fe:	e04f      	b.n	80015a0 <HAL_I2C_Init+0x1dc>
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	689b      	ldr	r3, [r3, #8]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d111      	bne.n	800152c <HAL_I2C_Init+0x168>
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	1e58      	subs	r0, r3, #1
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6859      	ldr	r1, [r3, #4]
 8001510:	460b      	mov	r3, r1
 8001512:	005b      	lsls	r3, r3, #1
 8001514:	440b      	add	r3, r1
 8001516:	fbb0 f3f3 	udiv	r3, r0, r3
 800151a:	3301      	adds	r3, #1
 800151c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001520:	2b00      	cmp	r3, #0
 8001522:	bf0c      	ite	eq
 8001524:	2301      	moveq	r3, #1
 8001526:	2300      	movne	r3, #0
 8001528:	b2db      	uxtb	r3, r3
 800152a:	e012      	b.n	8001552 <HAL_I2C_Init+0x18e>
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	1e58      	subs	r0, r3, #1
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6859      	ldr	r1, [r3, #4]
 8001534:	460b      	mov	r3, r1
 8001536:	009b      	lsls	r3, r3, #2
 8001538:	440b      	add	r3, r1
 800153a:	0099      	lsls	r1, r3, #2
 800153c:	440b      	add	r3, r1
 800153e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001542:	3301      	adds	r3, #1
 8001544:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001548:	2b00      	cmp	r3, #0
 800154a:	bf0c      	ite	eq
 800154c:	2301      	moveq	r3, #1
 800154e:	2300      	movne	r3, #0
 8001550:	b2db      	uxtb	r3, r3
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <HAL_I2C_Init+0x196>
 8001556:	2301      	movs	r3, #1
 8001558:	e022      	b.n	80015a0 <HAL_I2C_Init+0x1dc>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d10e      	bne.n	8001580 <HAL_I2C_Init+0x1bc>
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	1e58      	subs	r0, r3, #1
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6859      	ldr	r1, [r3, #4]
 800156a:	460b      	mov	r3, r1
 800156c:	005b      	lsls	r3, r3, #1
 800156e:	440b      	add	r3, r1
 8001570:	fbb0 f3f3 	udiv	r3, r0, r3
 8001574:	3301      	adds	r3, #1
 8001576:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800157a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800157e:	e00f      	b.n	80015a0 <HAL_I2C_Init+0x1dc>
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	1e58      	subs	r0, r3, #1
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6859      	ldr	r1, [r3, #4]
 8001588:	460b      	mov	r3, r1
 800158a:	009b      	lsls	r3, r3, #2
 800158c:	440b      	add	r3, r1
 800158e:	0099      	lsls	r1, r3, #2
 8001590:	440b      	add	r3, r1
 8001592:	fbb0 f3f3 	udiv	r3, r0, r3
 8001596:	3301      	adds	r3, #1
 8001598:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800159c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80015a0:	6879      	ldr	r1, [r7, #4]
 80015a2:	6809      	ldr	r1, [r1, #0]
 80015a4:	4313      	orrs	r3, r2
 80015a6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	69da      	ldr	r2, [r3, #28]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6a1b      	ldr	r3, [r3, #32]
 80015ba:	431a      	orrs	r2, r3
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	430a      	orrs	r2, r1
 80015c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80015ce:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80015d2:	687a      	ldr	r2, [r7, #4]
 80015d4:	6911      	ldr	r1, [r2, #16]
 80015d6:	687a      	ldr	r2, [r7, #4]
 80015d8:	68d2      	ldr	r2, [r2, #12]
 80015da:	4311      	orrs	r1, r2
 80015dc:	687a      	ldr	r2, [r7, #4]
 80015de:	6812      	ldr	r2, [r2, #0]
 80015e0:	430b      	orrs	r3, r1
 80015e2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	68db      	ldr	r3, [r3, #12]
 80015ea:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	695a      	ldr	r2, [r3, #20]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	699b      	ldr	r3, [r3, #24]
 80015f6:	431a      	orrs	r2, r3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	430a      	orrs	r2, r1
 80015fe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f042 0201 	orr.w	r2, r2, #1
 800160e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2200      	movs	r2, #0
 8001614:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2220      	movs	r2, #32
 800161a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2200      	movs	r2, #0
 8001622:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2200      	movs	r2, #0
 8001628:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800162c:	2300      	movs	r3, #0
}
 800162e:	4618      	mov	r0, r3
 8001630:	3710      	adds	r7, #16
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	000186a0 	.word	0x000186a0
 800163c:	001e847f 	.word	0x001e847f
 8001640:	003d08ff 	.word	0x003d08ff
 8001644:	431bde83 	.word	0x431bde83
 8001648:	10624dd3 	.word	0x10624dd3

0800164c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b088      	sub	sp, #32
 8001650:	af02      	add	r7, sp, #8
 8001652:	60f8      	str	r0, [r7, #12]
 8001654:	607a      	str	r2, [r7, #4]
 8001656:	461a      	mov	r2, r3
 8001658:	460b      	mov	r3, r1
 800165a:	817b      	strh	r3, [r7, #10]
 800165c:	4613      	mov	r3, r2
 800165e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001660:	f7ff fb58 	bl	8000d14 <HAL_GetTick>
 8001664:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800166c:	b2db      	uxtb	r3, r3
 800166e:	2b20      	cmp	r3, #32
 8001670:	f040 80e0 	bne.w	8001834 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	9300      	str	r3, [sp, #0]
 8001678:	2319      	movs	r3, #25
 800167a:	2201      	movs	r2, #1
 800167c:	4970      	ldr	r1, [pc, #448]	@ (8001840 <HAL_I2C_Master_Transmit+0x1f4>)
 800167e:	68f8      	ldr	r0, [r7, #12]
 8001680:	f000 f964 	bl	800194c <I2C_WaitOnFlagUntilTimeout>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800168a:	2302      	movs	r3, #2
 800168c:	e0d3      	b.n	8001836 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001694:	2b01      	cmp	r3, #1
 8001696:	d101      	bne.n	800169c <HAL_I2C_Master_Transmit+0x50>
 8001698:	2302      	movs	r3, #2
 800169a:	e0cc      	b.n	8001836 <HAL_I2C_Master_Transmit+0x1ea>
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	2201      	movs	r2, #1
 80016a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 0301 	and.w	r3, r3, #1
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d007      	beq.n	80016c2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f042 0201 	orr.w	r2, r2, #1
 80016c0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80016d0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	2221      	movs	r2, #33	@ 0x21
 80016d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	2210      	movs	r2, #16
 80016de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	2200      	movs	r2, #0
 80016e6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	687a      	ldr	r2, [r7, #4]
 80016ec:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	893a      	ldrh	r2, [r7, #8]
 80016f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80016f8:	b29a      	uxth	r2, r3
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	4a50      	ldr	r2, [pc, #320]	@ (8001844 <HAL_I2C_Master_Transmit+0x1f8>)
 8001702:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001704:	8979      	ldrh	r1, [r7, #10]
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	6a3a      	ldr	r2, [r7, #32]
 800170a:	68f8      	ldr	r0, [r7, #12]
 800170c:	f000 f89c 	bl	8001848 <I2C_MasterRequestWrite>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e08d      	b.n	8001836 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800171a:	2300      	movs	r3, #0
 800171c:	613b      	str	r3, [r7, #16]
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	695b      	ldr	r3, [r3, #20]
 8001724:	613b      	str	r3, [r7, #16]
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	699b      	ldr	r3, [r3, #24]
 800172c:	613b      	str	r3, [r7, #16]
 800172e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001730:	e066      	b.n	8001800 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001732:	697a      	ldr	r2, [r7, #20]
 8001734:	6a39      	ldr	r1, [r7, #32]
 8001736:	68f8      	ldr	r0, [r7, #12]
 8001738:	f000 fa22 	bl	8001b80 <I2C_WaitOnTXEFlagUntilTimeout>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d00d      	beq.n	800175e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001746:	2b04      	cmp	r3, #4
 8001748:	d107      	bne.n	800175a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001758:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e06b      	b.n	8001836 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001762:	781a      	ldrb	r2, [r3, #0]
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800176e:	1c5a      	adds	r2, r3, #1
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001778:	b29b      	uxth	r3, r3
 800177a:	3b01      	subs	r3, #1
 800177c:	b29a      	uxth	r2, r3
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001786:	3b01      	subs	r3, #1
 8001788:	b29a      	uxth	r2, r3
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	695b      	ldr	r3, [r3, #20]
 8001794:	f003 0304 	and.w	r3, r3, #4
 8001798:	2b04      	cmp	r3, #4
 800179a:	d11b      	bne.n	80017d4 <HAL_I2C_Master_Transmit+0x188>
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d017      	beq.n	80017d4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017a8:	781a      	ldrb	r2, [r3, #0]
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017b4:	1c5a      	adds	r2, r3, #1
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017be:	b29b      	uxth	r3, r3
 80017c0:	3b01      	subs	r3, #1
 80017c2:	b29a      	uxth	r2, r3
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017cc:	3b01      	subs	r3, #1
 80017ce:	b29a      	uxth	r2, r3
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017d4:	697a      	ldr	r2, [r7, #20]
 80017d6:	6a39      	ldr	r1, [r7, #32]
 80017d8:	68f8      	ldr	r0, [r7, #12]
 80017da:	f000 fa19 	bl	8001c10 <I2C_WaitOnBTFFlagUntilTimeout>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d00d      	beq.n	8001800 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017e8:	2b04      	cmp	r3, #4
 80017ea:	d107      	bne.n	80017fc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80017fa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80017fc:	2301      	movs	r3, #1
 80017fe:	e01a      	b.n	8001836 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001804:	2b00      	cmp	r3, #0
 8001806:	d194      	bne.n	8001732 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001816:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	2220      	movs	r2, #32
 800181c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	2200      	movs	r2, #0
 8001824:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	2200      	movs	r2, #0
 800182c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001830:	2300      	movs	r3, #0
 8001832:	e000      	b.n	8001836 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001834:	2302      	movs	r3, #2
  }
}
 8001836:	4618      	mov	r0, r3
 8001838:	3718      	adds	r7, #24
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	00100002 	.word	0x00100002
 8001844:	ffff0000 	.word	0xffff0000

08001848 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b088      	sub	sp, #32
 800184c:	af02      	add	r7, sp, #8
 800184e:	60f8      	str	r0, [r7, #12]
 8001850:	607a      	str	r2, [r7, #4]
 8001852:	603b      	str	r3, [r7, #0]
 8001854:	460b      	mov	r3, r1
 8001856:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800185c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	2b08      	cmp	r3, #8
 8001862:	d006      	beq.n	8001872 <I2C_MasterRequestWrite+0x2a>
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	2b01      	cmp	r3, #1
 8001868:	d003      	beq.n	8001872 <I2C_MasterRequestWrite+0x2a>
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001870:	d108      	bne.n	8001884 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001880:	601a      	str	r2, [r3, #0]
 8001882:	e00b      	b.n	800189c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001888:	2b12      	cmp	r3, #18
 800188a:	d107      	bne.n	800189c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800189a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	9300      	str	r3, [sp, #0]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2200      	movs	r2, #0
 80018a4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80018a8:	68f8      	ldr	r0, [r7, #12]
 80018aa:	f000 f84f 	bl	800194c <I2C_WaitOnFlagUntilTimeout>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d00d      	beq.n	80018d0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80018c2:	d103      	bne.n	80018cc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80018ca:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80018cc:	2303      	movs	r3, #3
 80018ce:	e035      	b.n	800193c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	691b      	ldr	r3, [r3, #16]
 80018d4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80018d8:	d108      	bne.n	80018ec <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80018da:	897b      	ldrh	r3, [r7, #10]
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	461a      	mov	r2, r3
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80018e8:	611a      	str	r2, [r3, #16]
 80018ea:	e01b      	b.n	8001924 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80018ec:	897b      	ldrh	r3, [r7, #10]
 80018ee:	11db      	asrs	r3, r3, #7
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	f003 0306 	and.w	r3, r3, #6
 80018f6:	b2db      	uxtb	r3, r3
 80018f8:	f063 030f 	orn	r3, r3, #15
 80018fc:	b2da      	uxtb	r2, r3
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	687a      	ldr	r2, [r7, #4]
 8001908:	490e      	ldr	r1, [pc, #56]	@ (8001944 <I2C_MasterRequestWrite+0xfc>)
 800190a:	68f8      	ldr	r0, [r7, #12]
 800190c:	f000 f898 	bl	8001a40 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d001      	beq.n	800191a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e010      	b.n	800193c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800191a:	897b      	ldrh	r3, [r7, #10]
 800191c:	b2da      	uxtb	r2, r3
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	687a      	ldr	r2, [r7, #4]
 8001928:	4907      	ldr	r1, [pc, #28]	@ (8001948 <I2C_MasterRequestWrite+0x100>)
 800192a:	68f8      	ldr	r0, [r7, #12]
 800192c:	f000 f888 	bl	8001a40 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e000      	b.n	800193c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800193a:	2300      	movs	r3, #0
}
 800193c:	4618      	mov	r0, r3
 800193e:	3718      	adds	r7, #24
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	00010008 	.word	0x00010008
 8001948:	00010002 	.word	0x00010002

0800194c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b084      	sub	sp, #16
 8001950:	af00      	add	r7, sp, #0
 8001952:	60f8      	str	r0, [r7, #12]
 8001954:	60b9      	str	r1, [r7, #8]
 8001956:	603b      	str	r3, [r7, #0]
 8001958:	4613      	mov	r3, r2
 800195a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800195c:	e048      	b.n	80019f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001964:	d044      	beq.n	80019f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001966:	f7ff f9d5 	bl	8000d14 <HAL_GetTick>
 800196a:	4602      	mov	r2, r0
 800196c:	69bb      	ldr	r3, [r7, #24]
 800196e:	1ad3      	subs	r3, r2, r3
 8001970:	683a      	ldr	r2, [r7, #0]
 8001972:	429a      	cmp	r2, r3
 8001974:	d302      	bcc.n	800197c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d139      	bne.n	80019f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	0c1b      	lsrs	r3, r3, #16
 8001980:	b2db      	uxtb	r3, r3
 8001982:	2b01      	cmp	r3, #1
 8001984:	d10d      	bne.n	80019a2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	695b      	ldr	r3, [r3, #20]
 800198c:	43da      	mvns	r2, r3
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	4013      	ands	r3, r2
 8001992:	b29b      	uxth	r3, r3
 8001994:	2b00      	cmp	r3, #0
 8001996:	bf0c      	ite	eq
 8001998:	2301      	moveq	r3, #1
 800199a:	2300      	movne	r3, #0
 800199c:	b2db      	uxtb	r3, r3
 800199e:	461a      	mov	r2, r3
 80019a0:	e00c      	b.n	80019bc <I2C_WaitOnFlagUntilTimeout+0x70>
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	699b      	ldr	r3, [r3, #24]
 80019a8:	43da      	mvns	r2, r3
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	4013      	ands	r3, r2
 80019ae:	b29b      	uxth	r3, r3
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	bf0c      	ite	eq
 80019b4:	2301      	moveq	r3, #1
 80019b6:	2300      	movne	r3, #0
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	461a      	mov	r2, r3
 80019bc:	79fb      	ldrb	r3, [r7, #7]
 80019be:	429a      	cmp	r2, r3
 80019c0:	d116      	bne.n	80019f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	2200      	movs	r2, #0
 80019c6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	2220      	movs	r2, #32
 80019cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	2200      	movs	r2, #0
 80019d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019dc:	f043 0220 	orr.w	r2, r3, #32
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	2200      	movs	r2, #0
 80019e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
 80019ee:	e023      	b.n	8001a38 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	0c1b      	lsrs	r3, r3, #16
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	d10d      	bne.n	8001a16 <I2C_WaitOnFlagUntilTimeout+0xca>
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	695b      	ldr	r3, [r3, #20]
 8001a00:	43da      	mvns	r2, r3
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	4013      	ands	r3, r2
 8001a06:	b29b      	uxth	r3, r3
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	bf0c      	ite	eq
 8001a0c:	2301      	moveq	r3, #1
 8001a0e:	2300      	movne	r3, #0
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	461a      	mov	r2, r3
 8001a14:	e00c      	b.n	8001a30 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	699b      	ldr	r3, [r3, #24]
 8001a1c:	43da      	mvns	r2, r3
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	4013      	ands	r3, r2
 8001a22:	b29b      	uxth	r3, r3
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	bf0c      	ite	eq
 8001a28:	2301      	moveq	r3, #1
 8001a2a:	2300      	movne	r3, #0
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	461a      	mov	r2, r3
 8001a30:	79fb      	ldrb	r3, [r7, #7]
 8001a32:	429a      	cmp	r2, r3
 8001a34:	d093      	beq.n	800195e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001a36:	2300      	movs	r3, #0
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3710      	adds	r7, #16
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}

08001a40 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	60f8      	str	r0, [r7, #12]
 8001a48:	60b9      	str	r1, [r7, #8]
 8001a4a:	607a      	str	r2, [r7, #4]
 8001a4c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001a4e:	e071      	b.n	8001b34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	695b      	ldr	r3, [r3, #20]
 8001a56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a5e:	d123      	bne.n	8001aa8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a6e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001a78:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	2220      	movs	r2, #32
 8001a84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a94:	f043 0204 	orr.w	r2, r3, #4
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e067      	b.n	8001b78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001aae:	d041      	beq.n	8001b34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ab0:	f7ff f930 	bl	8000d14 <HAL_GetTick>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	687a      	ldr	r2, [r7, #4]
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d302      	bcc.n	8001ac6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d136      	bne.n	8001b34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	0c1b      	lsrs	r3, r3, #16
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d10c      	bne.n	8001aea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	695b      	ldr	r3, [r3, #20]
 8001ad6:	43da      	mvns	r2, r3
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	4013      	ands	r3, r2
 8001adc:	b29b      	uxth	r3, r3
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	bf14      	ite	ne
 8001ae2:	2301      	movne	r3, #1
 8001ae4:	2300      	moveq	r3, #0
 8001ae6:	b2db      	uxtb	r3, r3
 8001ae8:	e00b      	b.n	8001b02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	699b      	ldr	r3, [r3, #24]
 8001af0:	43da      	mvns	r2, r3
 8001af2:	68bb      	ldr	r3, [r7, #8]
 8001af4:	4013      	ands	r3, r2
 8001af6:	b29b      	uxth	r3, r3
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	bf14      	ite	ne
 8001afc:	2301      	movne	r3, #1
 8001afe:	2300      	moveq	r3, #0
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d016      	beq.n	8001b34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	2220      	movs	r2, #32
 8001b10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	2200      	movs	r2, #0
 8001b18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b20:	f043 0220 	orr.w	r2, r3, #32
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	e021      	b.n	8001b78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	0c1b      	lsrs	r3, r3, #16
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	2b01      	cmp	r3, #1
 8001b3c:	d10c      	bne.n	8001b58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	695b      	ldr	r3, [r3, #20]
 8001b44:	43da      	mvns	r2, r3
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	4013      	ands	r3, r2
 8001b4a:	b29b      	uxth	r3, r3
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	bf14      	ite	ne
 8001b50:	2301      	movne	r3, #1
 8001b52:	2300      	moveq	r3, #0
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	e00b      	b.n	8001b70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	699b      	ldr	r3, [r3, #24]
 8001b5e:	43da      	mvns	r2, r3
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	4013      	ands	r3, r2
 8001b64:	b29b      	uxth	r3, r3
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	bf14      	ite	ne
 8001b6a:	2301      	movne	r3, #1
 8001b6c:	2300      	moveq	r3, #0
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	f47f af6d 	bne.w	8001a50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001b76:	2300      	movs	r3, #0
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3710      	adds	r7, #16
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}

08001b80 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b084      	sub	sp, #16
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	60f8      	str	r0, [r7, #12]
 8001b88:	60b9      	str	r1, [r7, #8]
 8001b8a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001b8c:	e034      	b.n	8001bf8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001b8e:	68f8      	ldr	r0, [r7, #12]
 8001b90:	f000 f886 	bl	8001ca0 <I2C_IsAcknowledgeFailed>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e034      	b.n	8001c08 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ba4:	d028      	beq.n	8001bf8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ba6:	f7ff f8b5 	bl	8000d14 <HAL_GetTick>
 8001baa:	4602      	mov	r2, r0
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	1ad3      	subs	r3, r2, r3
 8001bb0:	68ba      	ldr	r2, [r7, #8]
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d302      	bcc.n	8001bbc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d11d      	bne.n	8001bf8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	695b      	ldr	r3, [r3, #20]
 8001bc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001bc6:	2b80      	cmp	r3, #128	@ 0x80
 8001bc8:	d016      	beq.n	8001bf8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	2220      	movs	r2, #32
 8001bd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001be4:	f043 0220 	orr.w	r2, r3, #32
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e007      	b.n	8001c08 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	695b      	ldr	r3, [r3, #20]
 8001bfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c02:	2b80      	cmp	r3, #128	@ 0x80
 8001c04:	d1c3      	bne.n	8001b8e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001c06:	2300      	movs	r3, #0
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3710      	adds	r7, #16
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}

08001c10 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b084      	sub	sp, #16
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	60f8      	str	r0, [r7, #12]
 8001c18:	60b9      	str	r1, [r7, #8]
 8001c1a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001c1c:	e034      	b.n	8001c88 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001c1e:	68f8      	ldr	r0, [r7, #12]
 8001c20:	f000 f83e 	bl	8001ca0 <I2C_IsAcknowledgeFailed>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d001      	beq.n	8001c2e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e034      	b.n	8001c98 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c2e:	68bb      	ldr	r3, [r7, #8]
 8001c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c34:	d028      	beq.n	8001c88 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c36:	f7ff f86d 	bl	8000d14 <HAL_GetTick>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	1ad3      	subs	r3, r2, r3
 8001c40:	68ba      	ldr	r2, [r7, #8]
 8001c42:	429a      	cmp	r2, r3
 8001c44:	d302      	bcc.n	8001c4c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001c46:	68bb      	ldr	r3, [r7, #8]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d11d      	bne.n	8001c88 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	695b      	ldr	r3, [r3, #20]
 8001c52:	f003 0304 	and.w	r3, r3, #4
 8001c56:	2b04      	cmp	r3, #4
 8001c58:	d016      	beq.n	8001c88 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	2220      	movs	r2, #32
 8001c64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c74:	f043 0220 	orr.w	r2, r3, #32
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	2200      	movs	r2, #0
 8001c80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	e007      	b.n	8001c98 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	695b      	ldr	r3, [r3, #20]
 8001c8e:	f003 0304 	and.w	r3, r3, #4
 8001c92:	2b04      	cmp	r3, #4
 8001c94:	d1c3      	bne.n	8001c1e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001c96:	2300      	movs	r3, #0
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	3710      	adds	r7, #16
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}

08001ca0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	695b      	ldr	r3, [r3, #20]
 8001cae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cb2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001cb6:	d11b      	bne.n	8001cf0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001cc0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2220      	movs	r2, #32
 8001ccc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cdc:	f043 0204 	orr.w	r2, r3, #4
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	e000      	b.n	8001cf2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001cf0:	2300      	movs	r3, #0
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	370c      	adds	r7, #12
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
	...

08001d00 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b086      	sub	sp, #24
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d101      	bne.n	8001d12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e267      	b.n	80021e2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 0301 	and.w	r3, r3, #1
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d075      	beq.n	8001e0a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001d1e:	4b88      	ldr	r3, [pc, #544]	@ (8001f40 <HAL_RCC_OscConfig+0x240>)
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	f003 030c 	and.w	r3, r3, #12
 8001d26:	2b04      	cmp	r3, #4
 8001d28:	d00c      	beq.n	8001d44 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d2a:	4b85      	ldr	r3, [pc, #532]	@ (8001f40 <HAL_RCC_OscConfig+0x240>)
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001d32:	2b08      	cmp	r3, #8
 8001d34:	d112      	bne.n	8001d5c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d36:	4b82      	ldr	r3, [pc, #520]	@ (8001f40 <HAL_RCC_OscConfig+0x240>)
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d3e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001d42:	d10b      	bne.n	8001d5c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d44:	4b7e      	ldr	r3, [pc, #504]	@ (8001f40 <HAL_RCC_OscConfig+0x240>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d05b      	beq.n	8001e08 <HAL_RCC_OscConfig+0x108>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d157      	bne.n	8001e08 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e242      	b.n	80021e2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d64:	d106      	bne.n	8001d74 <HAL_RCC_OscConfig+0x74>
 8001d66:	4b76      	ldr	r3, [pc, #472]	@ (8001f40 <HAL_RCC_OscConfig+0x240>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a75      	ldr	r2, [pc, #468]	@ (8001f40 <HAL_RCC_OscConfig+0x240>)
 8001d6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d70:	6013      	str	r3, [r2, #0]
 8001d72:	e01d      	b.n	8001db0 <HAL_RCC_OscConfig+0xb0>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001d7c:	d10c      	bne.n	8001d98 <HAL_RCC_OscConfig+0x98>
 8001d7e:	4b70      	ldr	r3, [pc, #448]	@ (8001f40 <HAL_RCC_OscConfig+0x240>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a6f      	ldr	r2, [pc, #444]	@ (8001f40 <HAL_RCC_OscConfig+0x240>)
 8001d84:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d88:	6013      	str	r3, [r2, #0]
 8001d8a:	4b6d      	ldr	r3, [pc, #436]	@ (8001f40 <HAL_RCC_OscConfig+0x240>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a6c      	ldr	r2, [pc, #432]	@ (8001f40 <HAL_RCC_OscConfig+0x240>)
 8001d90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d94:	6013      	str	r3, [r2, #0]
 8001d96:	e00b      	b.n	8001db0 <HAL_RCC_OscConfig+0xb0>
 8001d98:	4b69      	ldr	r3, [pc, #420]	@ (8001f40 <HAL_RCC_OscConfig+0x240>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a68      	ldr	r2, [pc, #416]	@ (8001f40 <HAL_RCC_OscConfig+0x240>)
 8001d9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001da2:	6013      	str	r3, [r2, #0]
 8001da4:	4b66      	ldr	r3, [pc, #408]	@ (8001f40 <HAL_RCC_OscConfig+0x240>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a65      	ldr	r2, [pc, #404]	@ (8001f40 <HAL_RCC_OscConfig+0x240>)
 8001daa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001dae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d013      	beq.n	8001de0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001db8:	f7fe ffac 	bl	8000d14 <HAL_GetTick>
 8001dbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dbe:	e008      	b.n	8001dd2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dc0:	f7fe ffa8 	bl	8000d14 <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	2b64      	cmp	r3, #100	@ 0x64
 8001dcc:	d901      	bls.n	8001dd2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e207      	b.n	80021e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dd2:	4b5b      	ldr	r3, [pc, #364]	@ (8001f40 <HAL_RCC_OscConfig+0x240>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d0f0      	beq.n	8001dc0 <HAL_RCC_OscConfig+0xc0>
 8001dde:	e014      	b.n	8001e0a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001de0:	f7fe ff98 	bl	8000d14 <HAL_GetTick>
 8001de4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001de6:	e008      	b.n	8001dfa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001de8:	f7fe ff94 	bl	8000d14 <HAL_GetTick>
 8001dec:	4602      	mov	r2, r0
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	2b64      	cmp	r3, #100	@ 0x64
 8001df4:	d901      	bls.n	8001dfa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001df6:	2303      	movs	r3, #3
 8001df8:	e1f3      	b.n	80021e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dfa:	4b51      	ldr	r3, [pc, #324]	@ (8001f40 <HAL_RCC_OscConfig+0x240>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d1f0      	bne.n	8001de8 <HAL_RCC_OscConfig+0xe8>
 8001e06:	e000      	b.n	8001e0a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 0302 	and.w	r3, r3, #2
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d063      	beq.n	8001ede <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001e16:	4b4a      	ldr	r3, [pc, #296]	@ (8001f40 <HAL_RCC_OscConfig+0x240>)
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	f003 030c 	and.w	r3, r3, #12
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d00b      	beq.n	8001e3a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e22:	4b47      	ldr	r3, [pc, #284]	@ (8001f40 <HAL_RCC_OscConfig+0x240>)
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001e2a:	2b08      	cmp	r3, #8
 8001e2c:	d11c      	bne.n	8001e68 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e2e:	4b44      	ldr	r3, [pc, #272]	@ (8001f40 <HAL_RCC_OscConfig+0x240>)
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d116      	bne.n	8001e68 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e3a:	4b41      	ldr	r3, [pc, #260]	@ (8001f40 <HAL_RCC_OscConfig+0x240>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 0302 	and.w	r3, r3, #2
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d005      	beq.n	8001e52 <HAL_RCC_OscConfig+0x152>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	68db      	ldr	r3, [r3, #12]
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d001      	beq.n	8001e52 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e1c7      	b.n	80021e2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e52:	4b3b      	ldr	r3, [pc, #236]	@ (8001f40 <HAL_RCC_OscConfig+0x240>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	691b      	ldr	r3, [r3, #16]
 8001e5e:	00db      	lsls	r3, r3, #3
 8001e60:	4937      	ldr	r1, [pc, #220]	@ (8001f40 <HAL_RCC_OscConfig+0x240>)
 8001e62:	4313      	orrs	r3, r2
 8001e64:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e66:	e03a      	b.n	8001ede <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d020      	beq.n	8001eb2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e70:	4b34      	ldr	r3, [pc, #208]	@ (8001f44 <HAL_RCC_OscConfig+0x244>)
 8001e72:	2201      	movs	r2, #1
 8001e74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e76:	f7fe ff4d 	bl	8000d14 <HAL_GetTick>
 8001e7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e7c:	e008      	b.n	8001e90 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e7e:	f7fe ff49 	bl	8000d14 <HAL_GetTick>
 8001e82:	4602      	mov	r2, r0
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	1ad3      	subs	r3, r2, r3
 8001e88:	2b02      	cmp	r3, #2
 8001e8a:	d901      	bls.n	8001e90 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001e8c:	2303      	movs	r3, #3
 8001e8e:	e1a8      	b.n	80021e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e90:	4b2b      	ldr	r3, [pc, #172]	@ (8001f40 <HAL_RCC_OscConfig+0x240>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f003 0302 	and.w	r3, r3, #2
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d0f0      	beq.n	8001e7e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e9c:	4b28      	ldr	r3, [pc, #160]	@ (8001f40 <HAL_RCC_OscConfig+0x240>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	691b      	ldr	r3, [r3, #16]
 8001ea8:	00db      	lsls	r3, r3, #3
 8001eaa:	4925      	ldr	r1, [pc, #148]	@ (8001f40 <HAL_RCC_OscConfig+0x240>)
 8001eac:	4313      	orrs	r3, r2
 8001eae:	600b      	str	r3, [r1, #0]
 8001eb0:	e015      	b.n	8001ede <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001eb2:	4b24      	ldr	r3, [pc, #144]	@ (8001f44 <HAL_RCC_OscConfig+0x244>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eb8:	f7fe ff2c 	bl	8000d14 <HAL_GetTick>
 8001ebc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ebe:	e008      	b.n	8001ed2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ec0:	f7fe ff28 	bl	8000d14 <HAL_GetTick>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d901      	bls.n	8001ed2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e187      	b.n	80021e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ed2:	4b1b      	ldr	r3, [pc, #108]	@ (8001f40 <HAL_RCC_OscConfig+0x240>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 0302 	and.w	r3, r3, #2
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d1f0      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 0308 	and.w	r3, r3, #8
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d036      	beq.n	8001f58 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	695b      	ldr	r3, [r3, #20]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d016      	beq.n	8001f20 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ef2:	4b15      	ldr	r3, [pc, #84]	@ (8001f48 <HAL_RCC_OscConfig+0x248>)
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ef8:	f7fe ff0c 	bl	8000d14 <HAL_GetTick>
 8001efc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001efe:	e008      	b.n	8001f12 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f00:	f7fe ff08 	bl	8000d14 <HAL_GetTick>
 8001f04:	4602      	mov	r2, r0
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d901      	bls.n	8001f12 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e167      	b.n	80021e2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f12:	4b0b      	ldr	r3, [pc, #44]	@ (8001f40 <HAL_RCC_OscConfig+0x240>)
 8001f14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f16:	f003 0302 	and.w	r3, r3, #2
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d0f0      	beq.n	8001f00 <HAL_RCC_OscConfig+0x200>
 8001f1e:	e01b      	b.n	8001f58 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f20:	4b09      	ldr	r3, [pc, #36]	@ (8001f48 <HAL_RCC_OscConfig+0x248>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f26:	f7fe fef5 	bl	8000d14 <HAL_GetTick>
 8001f2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f2c:	e00e      	b.n	8001f4c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f2e:	f7fe fef1 	bl	8000d14 <HAL_GetTick>
 8001f32:	4602      	mov	r2, r0
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	1ad3      	subs	r3, r2, r3
 8001f38:	2b02      	cmp	r3, #2
 8001f3a:	d907      	bls.n	8001f4c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	e150      	b.n	80021e2 <HAL_RCC_OscConfig+0x4e2>
 8001f40:	40023800 	.word	0x40023800
 8001f44:	42470000 	.word	0x42470000
 8001f48:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f4c:	4b88      	ldr	r3, [pc, #544]	@ (8002170 <HAL_RCC_OscConfig+0x470>)
 8001f4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f50:	f003 0302 	and.w	r3, r3, #2
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d1ea      	bne.n	8001f2e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 0304 	and.w	r3, r3, #4
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	f000 8097 	beq.w	8002094 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f66:	2300      	movs	r3, #0
 8001f68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f6a:	4b81      	ldr	r3, [pc, #516]	@ (8002170 <HAL_RCC_OscConfig+0x470>)
 8001f6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d10f      	bne.n	8001f96 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f76:	2300      	movs	r3, #0
 8001f78:	60bb      	str	r3, [r7, #8]
 8001f7a:	4b7d      	ldr	r3, [pc, #500]	@ (8002170 <HAL_RCC_OscConfig+0x470>)
 8001f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f7e:	4a7c      	ldr	r2, [pc, #496]	@ (8002170 <HAL_RCC_OscConfig+0x470>)
 8001f80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f84:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f86:	4b7a      	ldr	r3, [pc, #488]	@ (8002170 <HAL_RCC_OscConfig+0x470>)
 8001f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f8e:	60bb      	str	r3, [r7, #8]
 8001f90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f92:	2301      	movs	r3, #1
 8001f94:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f96:	4b77      	ldr	r3, [pc, #476]	@ (8002174 <HAL_RCC_OscConfig+0x474>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d118      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fa2:	4b74      	ldr	r3, [pc, #464]	@ (8002174 <HAL_RCC_OscConfig+0x474>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a73      	ldr	r2, [pc, #460]	@ (8002174 <HAL_RCC_OscConfig+0x474>)
 8001fa8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fae:	f7fe feb1 	bl	8000d14 <HAL_GetTick>
 8001fb2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fb4:	e008      	b.n	8001fc8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fb6:	f7fe fead 	bl	8000d14 <HAL_GetTick>
 8001fba:	4602      	mov	r2, r0
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	1ad3      	subs	r3, r2, r3
 8001fc0:	2b02      	cmp	r3, #2
 8001fc2:	d901      	bls.n	8001fc8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001fc4:	2303      	movs	r3, #3
 8001fc6:	e10c      	b.n	80021e2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fc8:	4b6a      	ldr	r3, [pc, #424]	@ (8002174 <HAL_RCC_OscConfig+0x474>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d0f0      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	d106      	bne.n	8001fea <HAL_RCC_OscConfig+0x2ea>
 8001fdc:	4b64      	ldr	r3, [pc, #400]	@ (8002170 <HAL_RCC_OscConfig+0x470>)
 8001fde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fe0:	4a63      	ldr	r2, [pc, #396]	@ (8002170 <HAL_RCC_OscConfig+0x470>)
 8001fe2:	f043 0301 	orr.w	r3, r3, #1
 8001fe6:	6713      	str	r3, [r2, #112]	@ 0x70
 8001fe8:	e01c      	b.n	8002024 <HAL_RCC_OscConfig+0x324>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	2b05      	cmp	r3, #5
 8001ff0:	d10c      	bne.n	800200c <HAL_RCC_OscConfig+0x30c>
 8001ff2:	4b5f      	ldr	r3, [pc, #380]	@ (8002170 <HAL_RCC_OscConfig+0x470>)
 8001ff4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ff6:	4a5e      	ldr	r2, [pc, #376]	@ (8002170 <HAL_RCC_OscConfig+0x470>)
 8001ff8:	f043 0304 	orr.w	r3, r3, #4
 8001ffc:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ffe:	4b5c      	ldr	r3, [pc, #368]	@ (8002170 <HAL_RCC_OscConfig+0x470>)
 8002000:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002002:	4a5b      	ldr	r2, [pc, #364]	@ (8002170 <HAL_RCC_OscConfig+0x470>)
 8002004:	f043 0301 	orr.w	r3, r3, #1
 8002008:	6713      	str	r3, [r2, #112]	@ 0x70
 800200a:	e00b      	b.n	8002024 <HAL_RCC_OscConfig+0x324>
 800200c:	4b58      	ldr	r3, [pc, #352]	@ (8002170 <HAL_RCC_OscConfig+0x470>)
 800200e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002010:	4a57      	ldr	r2, [pc, #348]	@ (8002170 <HAL_RCC_OscConfig+0x470>)
 8002012:	f023 0301 	bic.w	r3, r3, #1
 8002016:	6713      	str	r3, [r2, #112]	@ 0x70
 8002018:	4b55      	ldr	r3, [pc, #340]	@ (8002170 <HAL_RCC_OscConfig+0x470>)
 800201a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800201c:	4a54      	ldr	r2, [pc, #336]	@ (8002170 <HAL_RCC_OscConfig+0x470>)
 800201e:	f023 0304 	bic.w	r3, r3, #4
 8002022:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d015      	beq.n	8002058 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800202c:	f7fe fe72 	bl	8000d14 <HAL_GetTick>
 8002030:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002032:	e00a      	b.n	800204a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002034:	f7fe fe6e 	bl	8000d14 <HAL_GetTick>
 8002038:	4602      	mov	r2, r0
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002042:	4293      	cmp	r3, r2
 8002044:	d901      	bls.n	800204a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002046:	2303      	movs	r3, #3
 8002048:	e0cb      	b.n	80021e2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800204a:	4b49      	ldr	r3, [pc, #292]	@ (8002170 <HAL_RCC_OscConfig+0x470>)
 800204c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800204e:	f003 0302 	and.w	r3, r3, #2
 8002052:	2b00      	cmp	r3, #0
 8002054:	d0ee      	beq.n	8002034 <HAL_RCC_OscConfig+0x334>
 8002056:	e014      	b.n	8002082 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002058:	f7fe fe5c 	bl	8000d14 <HAL_GetTick>
 800205c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800205e:	e00a      	b.n	8002076 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002060:	f7fe fe58 	bl	8000d14 <HAL_GetTick>
 8002064:	4602      	mov	r2, r0
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800206e:	4293      	cmp	r3, r2
 8002070:	d901      	bls.n	8002076 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002072:	2303      	movs	r3, #3
 8002074:	e0b5      	b.n	80021e2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002076:	4b3e      	ldr	r3, [pc, #248]	@ (8002170 <HAL_RCC_OscConfig+0x470>)
 8002078:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800207a:	f003 0302 	and.w	r3, r3, #2
 800207e:	2b00      	cmp	r3, #0
 8002080:	d1ee      	bne.n	8002060 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002082:	7dfb      	ldrb	r3, [r7, #23]
 8002084:	2b01      	cmp	r3, #1
 8002086:	d105      	bne.n	8002094 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002088:	4b39      	ldr	r3, [pc, #228]	@ (8002170 <HAL_RCC_OscConfig+0x470>)
 800208a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800208c:	4a38      	ldr	r2, [pc, #224]	@ (8002170 <HAL_RCC_OscConfig+0x470>)
 800208e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002092:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	699b      	ldr	r3, [r3, #24]
 8002098:	2b00      	cmp	r3, #0
 800209a:	f000 80a1 	beq.w	80021e0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800209e:	4b34      	ldr	r3, [pc, #208]	@ (8002170 <HAL_RCC_OscConfig+0x470>)
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	f003 030c 	and.w	r3, r3, #12
 80020a6:	2b08      	cmp	r3, #8
 80020a8:	d05c      	beq.n	8002164 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	699b      	ldr	r3, [r3, #24]
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	d141      	bne.n	8002136 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020b2:	4b31      	ldr	r3, [pc, #196]	@ (8002178 <HAL_RCC_OscConfig+0x478>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020b8:	f7fe fe2c 	bl	8000d14 <HAL_GetTick>
 80020bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020be:	e008      	b.n	80020d2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020c0:	f7fe fe28 	bl	8000d14 <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d901      	bls.n	80020d2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	e087      	b.n	80021e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020d2:	4b27      	ldr	r3, [pc, #156]	@ (8002170 <HAL_RCC_OscConfig+0x470>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d1f0      	bne.n	80020c0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	69da      	ldr	r2, [r3, #28]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6a1b      	ldr	r3, [r3, #32]
 80020e6:	431a      	orrs	r2, r3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020ec:	019b      	lsls	r3, r3, #6
 80020ee:	431a      	orrs	r2, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020f4:	085b      	lsrs	r3, r3, #1
 80020f6:	3b01      	subs	r3, #1
 80020f8:	041b      	lsls	r3, r3, #16
 80020fa:	431a      	orrs	r2, r3
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002100:	061b      	lsls	r3, r3, #24
 8002102:	491b      	ldr	r1, [pc, #108]	@ (8002170 <HAL_RCC_OscConfig+0x470>)
 8002104:	4313      	orrs	r3, r2
 8002106:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002108:	4b1b      	ldr	r3, [pc, #108]	@ (8002178 <HAL_RCC_OscConfig+0x478>)
 800210a:	2201      	movs	r2, #1
 800210c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800210e:	f7fe fe01 	bl	8000d14 <HAL_GetTick>
 8002112:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002114:	e008      	b.n	8002128 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002116:	f7fe fdfd 	bl	8000d14 <HAL_GetTick>
 800211a:	4602      	mov	r2, r0
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	1ad3      	subs	r3, r2, r3
 8002120:	2b02      	cmp	r3, #2
 8002122:	d901      	bls.n	8002128 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002124:	2303      	movs	r3, #3
 8002126:	e05c      	b.n	80021e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002128:	4b11      	ldr	r3, [pc, #68]	@ (8002170 <HAL_RCC_OscConfig+0x470>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002130:	2b00      	cmp	r3, #0
 8002132:	d0f0      	beq.n	8002116 <HAL_RCC_OscConfig+0x416>
 8002134:	e054      	b.n	80021e0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002136:	4b10      	ldr	r3, [pc, #64]	@ (8002178 <HAL_RCC_OscConfig+0x478>)
 8002138:	2200      	movs	r2, #0
 800213a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800213c:	f7fe fdea 	bl	8000d14 <HAL_GetTick>
 8002140:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002142:	e008      	b.n	8002156 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002144:	f7fe fde6 	bl	8000d14 <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	2b02      	cmp	r3, #2
 8002150:	d901      	bls.n	8002156 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002152:	2303      	movs	r3, #3
 8002154:	e045      	b.n	80021e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002156:	4b06      	ldr	r3, [pc, #24]	@ (8002170 <HAL_RCC_OscConfig+0x470>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800215e:	2b00      	cmp	r3, #0
 8002160:	d1f0      	bne.n	8002144 <HAL_RCC_OscConfig+0x444>
 8002162:	e03d      	b.n	80021e0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	699b      	ldr	r3, [r3, #24]
 8002168:	2b01      	cmp	r3, #1
 800216a:	d107      	bne.n	800217c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	e038      	b.n	80021e2 <HAL_RCC_OscConfig+0x4e2>
 8002170:	40023800 	.word	0x40023800
 8002174:	40007000 	.word	0x40007000
 8002178:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800217c:	4b1b      	ldr	r3, [pc, #108]	@ (80021ec <HAL_RCC_OscConfig+0x4ec>)
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	699b      	ldr	r3, [r3, #24]
 8002186:	2b01      	cmp	r3, #1
 8002188:	d028      	beq.n	80021dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002194:	429a      	cmp	r2, r3
 8002196:	d121      	bne.n	80021dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d11a      	bne.n	80021dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021a6:	68fa      	ldr	r2, [r7, #12]
 80021a8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80021ac:	4013      	ands	r3, r2
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80021b2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d111      	bne.n	80021dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021c2:	085b      	lsrs	r3, r3, #1
 80021c4:	3b01      	subs	r3, #1
 80021c6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d107      	bne.n	80021dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021d6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021d8:	429a      	cmp	r2, r3
 80021da:	d001      	beq.n	80021e0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	e000      	b.n	80021e2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80021e0:	2300      	movs	r3, #0
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3718      	adds	r7, #24
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	40023800 	.word	0x40023800

080021f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b084      	sub	sp, #16
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d101      	bne.n	8002204 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	e0cc      	b.n	800239e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002204:	4b68      	ldr	r3, [pc, #416]	@ (80023a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 0307 	and.w	r3, r3, #7
 800220c:	683a      	ldr	r2, [r7, #0]
 800220e:	429a      	cmp	r2, r3
 8002210:	d90c      	bls.n	800222c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002212:	4b65      	ldr	r3, [pc, #404]	@ (80023a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002214:	683a      	ldr	r2, [r7, #0]
 8002216:	b2d2      	uxtb	r2, r2
 8002218:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800221a:	4b63      	ldr	r3, [pc, #396]	@ (80023a8 <HAL_RCC_ClockConfig+0x1b8>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 0307 	and.w	r3, r3, #7
 8002222:	683a      	ldr	r2, [r7, #0]
 8002224:	429a      	cmp	r2, r3
 8002226:	d001      	beq.n	800222c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e0b8      	b.n	800239e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 0302 	and.w	r3, r3, #2
 8002234:	2b00      	cmp	r3, #0
 8002236:	d020      	beq.n	800227a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 0304 	and.w	r3, r3, #4
 8002240:	2b00      	cmp	r3, #0
 8002242:	d005      	beq.n	8002250 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002244:	4b59      	ldr	r3, [pc, #356]	@ (80023ac <HAL_RCC_ClockConfig+0x1bc>)
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	4a58      	ldr	r2, [pc, #352]	@ (80023ac <HAL_RCC_ClockConfig+0x1bc>)
 800224a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800224e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 0308 	and.w	r3, r3, #8
 8002258:	2b00      	cmp	r3, #0
 800225a:	d005      	beq.n	8002268 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800225c:	4b53      	ldr	r3, [pc, #332]	@ (80023ac <HAL_RCC_ClockConfig+0x1bc>)
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	4a52      	ldr	r2, [pc, #328]	@ (80023ac <HAL_RCC_ClockConfig+0x1bc>)
 8002262:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002266:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002268:	4b50      	ldr	r3, [pc, #320]	@ (80023ac <HAL_RCC_ClockConfig+0x1bc>)
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	494d      	ldr	r1, [pc, #308]	@ (80023ac <HAL_RCC_ClockConfig+0x1bc>)
 8002276:	4313      	orrs	r3, r2
 8002278:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0301 	and.w	r3, r3, #1
 8002282:	2b00      	cmp	r3, #0
 8002284:	d044      	beq.n	8002310 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	2b01      	cmp	r3, #1
 800228c:	d107      	bne.n	800229e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800228e:	4b47      	ldr	r3, [pc, #284]	@ (80023ac <HAL_RCC_ClockConfig+0x1bc>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d119      	bne.n	80022ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e07f      	b.n	800239e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	d003      	beq.n	80022ae <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022aa:	2b03      	cmp	r3, #3
 80022ac:	d107      	bne.n	80022be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022ae:	4b3f      	ldr	r3, [pc, #252]	@ (80023ac <HAL_RCC_ClockConfig+0x1bc>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d109      	bne.n	80022ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e06f      	b.n	800239e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022be:	4b3b      	ldr	r3, [pc, #236]	@ (80023ac <HAL_RCC_ClockConfig+0x1bc>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0302 	and.w	r3, r3, #2
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d101      	bne.n	80022ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e067      	b.n	800239e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022ce:	4b37      	ldr	r3, [pc, #220]	@ (80023ac <HAL_RCC_ClockConfig+0x1bc>)
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	f023 0203 	bic.w	r2, r3, #3
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	4934      	ldr	r1, [pc, #208]	@ (80023ac <HAL_RCC_ClockConfig+0x1bc>)
 80022dc:	4313      	orrs	r3, r2
 80022de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022e0:	f7fe fd18 	bl	8000d14 <HAL_GetTick>
 80022e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022e6:	e00a      	b.n	80022fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022e8:	f7fe fd14 	bl	8000d14 <HAL_GetTick>
 80022ec:	4602      	mov	r2, r0
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d901      	bls.n	80022fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022fa:	2303      	movs	r3, #3
 80022fc:	e04f      	b.n	800239e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022fe:	4b2b      	ldr	r3, [pc, #172]	@ (80023ac <HAL_RCC_ClockConfig+0x1bc>)
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	f003 020c 	and.w	r2, r3, #12
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	429a      	cmp	r2, r3
 800230e:	d1eb      	bne.n	80022e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002310:	4b25      	ldr	r3, [pc, #148]	@ (80023a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0307 	and.w	r3, r3, #7
 8002318:	683a      	ldr	r2, [r7, #0]
 800231a:	429a      	cmp	r2, r3
 800231c:	d20c      	bcs.n	8002338 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800231e:	4b22      	ldr	r3, [pc, #136]	@ (80023a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002320:	683a      	ldr	r2, [r7, #0]
 8002322:	b2d2      	uxtb	r2, r2
 8002324:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002326:	4b20      	ldr	r3, [pc, #128]	@ (80023a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 0307 	and.w	r3, r3, #7
 800232e:	683a      	ldr	r2, [r7, #0]
 8002330:	429a      	cmp	r2, r3
 8002332:	d001      	beq.n	8002338 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	e032      	b.n	800239e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0304 	and.w	r3, r3, #4
 8002340:	2b00      	cmp	r3, #0
 8002342:	d008      	beq.n	8002356 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002344:	4b19      	ldr	r3, [pc, #100]	@ (80023ac <HAL_RCC_ClockConfig+0x1bc>)
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	4916      	ldr	r1, [pc, #88]	@ (80023ac <HAL_RCC_ClockConfig+0x1bc>)
 8002352:	4313      	orrs	r3, r2
 8002354:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 0308 	and.w	r3, r3, #8
 800235e:	2b00      	cmp	r3, #0
 8002360:	d009      	beq.n	8002376 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002362:	4b12      	ldr	r3, [pc, #72]	@ (80023ac <HAL_RCC_ClockConfig+0x1bc>)
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	691b      	ldr	r3, [r3, #16]
 800236e:	00db      	lsls	r3, r3, #3
 8002370:	490e      	ldr	r1, [pc, #56]	@ (80023ac <HAL_RCC_ClockConfig+0x1bc>)
 8002372:	4313      	orrs	r3, r2
 8002374:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002376:	f000 f821 	bl	80023bc <HAL_RCC_GetSysClockFreq>
 800237a:	4602      	mov	r2, r0
 800237c:	4b0b      	ldr	r3, [pc, #44]	@ (80023ac <HAL_RCC_ClockConfig+0x1bc>)
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	091b      	lsrs	r3, r3, #4
 8002382:	f003 030f 	and.w	r3, r3, #15
 8002386:	490a      	ldr	r1, [pc, #40]	@ (80023b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002388:	5ccb      	ldrb	r3, [r1, r3]
 800238a:	fa22 f303 	lsr.w	r3, r2, r3
 800238e:	4a09      	ldr	r2, [pc, #36]	@ (80023b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002390:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002392:	4b09      	ldr	r3, [pc, #36]	@ (80023b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4618      	mov	r0, r3
 8002398:	f7fe fc78 	bl	8000c8c <HAL_InitTick>

  return HAL_OK;
 800239c:	2300      	movs	r3, #0
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3710      	adds	r7, #16
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	40023c00 	.word	0x40023c00
 80023ac:	40023800 	.word	0x40023800
 80023b0:	08003e10 	.word	0x08003e10
 80023b4:	20000000 	.word	0x20000000
 80023b8:	20000004 	.word	0x20000004

080023bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023c0:	b094      	sub	sp, #80	@ 0x50
 80023c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80023c4:	2300      	movs	r3, #0
 80023c6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80023c8:	2300      	movs	r3, #0
 80023ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80023cc:	2300      	movs	r3, #0
 80023ce:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80023d0:	2300      	movs	r3, #0
 80023d2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023d4:	4b79      	ldr	r3, [pc, #484]	@ (80025bc <HAL_RCC_GetSysClockFreq+0x200>)
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	f003 030c 	and.w	r3, r3, #12
 80023dc:	2b08      	cmp	r3, #8
 80023de:	d00d      	beq.n	80023fc <HAL_RCC_GetSysClockFreq+0x40>
 80023e0:	2b08      	cmp	r3, #8
 80023e2:	f200 80e1 	bhi.w	80025a8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d002      	beq.n	80023f0 <HAL_RCC_GetSysClockFreq+0x34>
 80023ea:	2b04      	cmp	r3, #4
 80023ec:	d003      	beq.n	80023f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80023ee:	e0db      	b.n	80025a8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80023f0:	4b73      	ldr	r3, [pc, #460]	@ (80025c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80023f2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80023f4:	e0db      	b.n	80025ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80023f6:	4b73      	ldr	r3, [pc, #460]	@ (80025c4 <HAL_RCC_GetSysClockFreq+0x208>)
 80023f8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80023fa:	e0d8      	b.n	80025ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80023fc:	4b6f      	ldr	r3, [pc, #444]	@ (80025bc <HAL_RCC_GetSysClockFreq+0x200>)
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002404:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002406:	4b6d      	ldr	r3, [pc, #436]	@ (80025bc <HAL_RCC_GetSysClockFreq+0x200>)
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d063      	beq.n	80024da <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002412:	4b6a      	ldr	r3, [pc, #424]	@ (80025bc <HAL_RCC_GetSysClockFreq+0x200>)
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	099b      	lsrs	r3, r3, #6
 8002418:	2200      	movs	r2, #0
 800241a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800241c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800241e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002420:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002424:	633b      	str	r3, [r7, #48]	@ 0x30
 8002426:	2300      	movs	r3, #0
 8002428:	637b      	str	r3, [r7, #52]	@ 0x34
 800242a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800242e:	4622      	mov	r2, r4
 8002430:	462b      	mov	r3, r5
 8002432:	f04f 0000 	mov.w	r0, #0
 8002436:	f04f 0100 	mov.w	r1, #0
 800243a:	0159      	lsls	r1, r3, #5
 800243c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002440:	0150      	lsls	r0, r2, #5
 8002442:	4602      	mov	r2, r0
 8002444:	460b      	mov	r3, r1
 8002446:	4621      	mov	r1, r4
 8002448:	1a51      	subs	r1, r2, r1
 800244a:	6139      	str	r1, [r7, #16]
 800244c:	4629      	mov	r1, r5
 800244e:	eb63 0301 	sbc.w	r3, r3, r1
 8002452:	617b      	str	r3, [r7, #20]
 8002454:	f04f 0200 	mov.w	r2, #0
 8002458:	f04f 0300 	mov.w	r3, #0
 800245c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002460:	4659      	mov	r1, fp
 8002462:	018b      	lsls	r3, r1, #6
 8002464:	4651      	mov	r1, sl
 8002466:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800246a:	4651      	mov	r1, sl
 800246c:	018a      	lsls	r2, r1, #6
 800246e:	4651      	mov	r1, sl
 8002470:	ebb2 0801 	subs.w	r8, r2, r1
 8002474:	4659      	mov	r1, fp
 8002476:	eb63 0901 	sbc.w	r9, r3, r1
 800247a:	f04f 0200 	mov.w	r2, #0
 800247e:	f04f 0300 	mov.w	r3, #0
 8002482:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002486:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800248a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800248e:	4690      	mov	r8, r2
 8002490:	4699      	mov	r9, r3
 8002492:	4623      	mov	r3, r4
 8002494:	eb18 0303 	adds.w	r3, r8, r3
 8002498:	60bb      	str	r3, [r7, #8]
 800249a:	462b      	mov	r3, r5
 800249c:	eb49 0303 	adc.w	r3, r9, r3
 80024a0:	60fb      	str	r3, [r7, #12]
 80024a2:	f04f 0200 	mov.w	r2, #0
 80024a6:	f04f 0300 	mov.w	r3, #0
 80024aa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80024ae:	4629      	mov	r1, r5
 80024b0:	024b      	lsls	r3, r1, #9
 80024b2:	4621      	mov	r1, r4
 80024b4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80024b8:	4621      	mov	r1, r4
 80024ba:	024a      	lsls	r2, r1, #9
 80024bc:	4610      	mov	r0, r2
 80024be:	4619      	mov	r1, r3
 80024c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80024c2:	2200      	movs	r2, #0
 80024c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80024c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80024c8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80024cc:	f7fd fee0 	bl	8000290 <__aeabi_uldivmod>
 80024d0:	4602      	mov	r2, r0
 80024d2:	460b      	mov	r3, r1
 80024d4:	4613      	mov	r3, r2
 80024d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80024d8:	e058      	b.n	800258c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024da:	4b38      	ldr	r3, [pc, #224]	@ (80025bc <HAL_RCC_GetSysClockFreq+0x200>)
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	099b      	lsrs	r3, r3, #6
 80024e0:	2200      	movs	r2, #0
 80024e2:	4618      	mov	r0, r3
 80024e4:	4611      	mov	r1, r2
 80024e6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80024ea:	623b      	str	r3, [r7, #32]
 80024ec:	2300      	movs	r3, #0
 80024ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80024f0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80024f4:	4642      	mov	r2, r8
 80024f6:	464b      	mov	r3, r9
 80024f8:	f04f 0000 	mov.w	r0, #0
 80024fc:	f04f 0100 	mov.w	r1, #0
 8002500:	0159      	lsls	r1, r3, #5
 8002502:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002506:	0150      	lsls	r0, r2, #5
 8002508:	4602      	mov	r2, r0
 800250a:	460b      	mov	r3, r1
 800250c:	4641      	mov	r1, r8
 800250e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002512:	4649      	mov	r1, r9
 8002514:	eb63 0b01 	sbc.w	fp, r3, r1
 8002518:	f04f 0200 	mov.w	r2, #0
 800251c:	f04f 0300 	mov.w	r3, #0
 8002520:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002524:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002528:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800252c:	ebb2 040a 	subs.w	r4, r2, sl
 8002530:	eb63 050b 	sbc.w	r5, r3, fp
 8002534:	f04f 0200 	mov.w	r2, #0
 8002538:	f04f 0300 	mov.w	r3, #0
 800253c:	00eb      	lsls	r3, r5, #3
 800253e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002542:	00e2      	lsls	r2, r4, #3
 8002544:	4614      	mov	r4, r2
 8002546:	461d      	mov	r5, r3
 8002548:	4643      	mov	r3, r8
 800254a:	18e3      	adds	r3, r4, r3
 800254c:	603b      	str	r3, [r7, #0]
 800254e:	464b      	mov	r3, r9
 8002550:	eb45 0303 	adc.w	r3, r5, r3
 8002554:	607b      	str	r3, [r7, #4]
 8002556:	f04f 0200 	mov.w	r2, #0
 800255a:	f04f 0300 	mov.w	r3, #0
 800255e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002562:	4629      	mov	r1, r5
 8002564:	028b      	lsls	r3, r1, #10
 8002566:	4621      	mov	r1, r4
 8002568:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800256c:	4621      	mov	r1, r4
 800256e:	028a      	lsls	r2, r1, #10
 8002570:	4610      	mov	r0, r2
 8002572:	4619      	mov	r1, r3
 8002574:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002576:	2200      	movs	r2, #0
 8002578:	61bb      	str	r3, [r7, #24]
 800257a:	61fa      	str	r2, [r7, #28]
 800257c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002580:	f7fd fe86 	bl	8000290 <__aeabi_uldivmod>
 8002584:	4602      	mov	r2, r0
 8002586:	460b      	mov	r3, r1
 8002588:	4613      	mov	r3, r2
 800258a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800258c:	4b0b      	ldr	r3, [pc, #44]	@ (80025bc <HAL_RCC_GetSysClockFreq+0x200>)
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	0c1b      	lsrs	r3, r3, #16
 8002592:	f003 0303 	and.w	r3, r3, #3
 8002596:	3301      	adds	r3, #1
 8002598:	005b      	lsls	r3, r3, #1
 800259a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800259c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800259e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80025a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80025a4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80025a6:	e002      	b.n	80025ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80025a8:	4b05      	ldr	r3, [pc, #20]	@ (80025c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80025aa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80025ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3750      	adds	r7, #80	@ 0x50
 80025b4:	46bd      	mov	sp, r7
 80025b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80025ba:	bf00      	nop
 80025bc:	40023800 	.word	0x40023800
 80025c0:	00f42400 	.word	0x00f42400
 80025c4:	007a1200 	.word	0x007a1200

080025c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025c8:	b480      	push	{r7}
 80025ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025cc:	4b03      	ldr	r3, [pc, #12]	@ (80025dc <HAL_RCC_GetHCLKFreq+0x14>)
 80025ce:	681b      	ldr	r3, [r3, #0]
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr
 80025da:	bf00      	nop
 80025dc:	20000000 	.word	0x20000000

080025e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80025e4:	f7ff fff0 	bl	80025c8 <HAL_RCC_GetHCLKFreq>
 80025e8:	4602      	mov	r2, r0
 80025ea:	4b05      	ldr	r3, [pc, #20]	@ (8002600 <HAL_RCC_GetPCLK1Freq+0x20>)
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	0a9b      	lsrs	r3, r3, #10
 80025f0:	f003 0307 	and.w	r3, r3, #7
 80025f4:	4903      	ldr	r1, [pc, #12]	@ (8002604 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025f6:	5ccb      	ldrb	r3, [r1, r3]
 80025f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	40023800 	.word	0x40023800
 8002604:	08003e20 	.word	0x08003e20

08002608 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800260c:	f7ff ffdc 	bl	80025c8 <HAL_RCC_GetHCLKFreq>
 8002610:	4602      	mov	r2, r0
 8002612:	4b05      	ldr	r3, [pc, #20]	@ (8002628 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	0b5b      	lsrs	r3, r3, #13
 8002618:	f003 0307 	and.w	r3, r3, #7
 800261c:	4903      	ldr	r1, [pc, #12]	@ (800262c <HAL_RCC_GetPCLK2Freq+0x24>)
 800261e:	5ccb      	ldrb	r3, [r1, r3]
 8002620:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002624:	4618      	mov	r0, r3
 8002626:	bd80      	pop	{r7, pc}
 8002628:	40023800 	.word	0x40023800
 800262c:	08003e20 	.word	0x08003e20

08002630 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b082      	sub	sp, #8
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d101      	bne.n	8002642 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e042      	b.n	80026c8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002648:	b2db      	uxtb	r3, r3
 800264a:	2b00      	cmp	r3, #0
 800264c:	d106      	bne.n	800265c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2200      	movs	r2, #0
 8002652:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f7fe fa7c 	bl	8000b54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2224      	movs	r2, #36	@ 0x24
 8002660:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	68da      	ldr	r2, [r3, #12]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002672:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	f000 fc85 	bl	8002f84 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	691a      	ldr	r2, [r3, #16]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002688:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	695a      	ldr	r2, [r3, #20]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002698:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	68da      	ldr	r2, [r3, #12]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80026a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2200      	movs	r2, #0
 80026ae:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2220      	movs	r2, #32
 80026b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2220      	movs	r2, #32
 80026bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2200      	movs	r2, #0
 80026c4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80026c6:	2300      	movs	r3, #0
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	3708      	adds	r7, #8
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}

080026d0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b0ba      	sub	sp, #232	@ 0xe8
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	695b      	ldr	r3, [r3, #20]
 80026f2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80026f6:	2300      	movs	r3, #0
 80026f8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80026fc:	2300      	movs	r3, #0
 80026fe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002702:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002706:	f003 030f 	and.w	r3, r3, #15
 800270a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800270e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002712:	2b00      	cmp	r3, #0
 8002714:	d10f      	bne.n	8002736 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002716:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800271a:	f003 0320 	and.w	r3, r3, #32
 800271e:	2b00      	cmp	r3, #0
 8002720:	d009      	beq.n	8002736 <HAL_UART_IRQHandler+0x66>
 8002722:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002726:	f003 0320 	and.w	r3, r3, #32
 800272a:	2b00      	cmp	r3, #0
 800272c:	d003      	beq.n	8002736 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f000 fb69 	bl	8002e06 <UART_Receive_IT>
      return;
 8002734:	e25b      	b.n	8002bee <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002736:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800273a:	2b00      	cmp	r3, #0
 800273c:	f000 80de 	beq.w	80028fc <HAL_UART_IRQHandler+0x22c>
 8002740:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002744:	f003 0301 	and.w	r3, r3, #1
 8002748:	2b00      	cmp	r3, #0
 800274a:	d106      	bne.n	800275a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800274c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002750:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002754:	2b00      	cmp	r3, #0
 8002756:	f000 80d1 	beq.w	80028fc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800275a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800275e:	f003 0301 	and.w	r3, r3, #1
 8002762:	2b00      	cmp	r3, #0
 8002764:	d00b      	beq.n	800277e <HAL_UART_IRQHandler+0xae>
 8002766:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800276a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800276e:	2b00      	cmp	r3, #0
 8002770:	d005      	beq.n	800277e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002776:	f043 0201 	orr.w	r2, r3, #1
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800277e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002782:	f003 0304 	and.w	r3, r3, #4
 8002786:	2b00      	cmp	r3, #0
 8002788:	d00b      	beq.n	80027a2 <HAL_UART_IRQHandler+0xd2>
 800278a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800278e:	f003 0301 	and.w	r3, r3, #1
 8002792:	2b00      	cmp	r3, #0
 8002794:	d005      	beq.n	80027a2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800279a:	f043 0202 	orr.w	r2, r3, #2
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80027a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80027a6:	f003 0302 	and.w	r3, r3, #2
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d00b      	beq.n	80027c6 <HAL_UART_IRQHandler+0xf6>
 80027ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80027b2:	f003 0301 	and.w	r3, r3, #1
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d005      	beq.n	80027c6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027be:	f043 0204 	orr.w	r2, r3, #4
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80027c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80027ca:	f003 0308 	and.w	r3, r3, #8
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d011      	beq.n	80027f6 <HAL_UART_IRQHandler+0x126>
 80027d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80027d6:	f003 0320 	and.w	r3, r3, #32
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d105      	bne.n	80027ea <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80027de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80027e2:	f003 0301 	and.w	r3, r3, #1
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d005      	beq.n	80027f6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027ee:	f043 0208 	orr.w	r2, r3, #8
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	f000 81f2 	beq.w	8002be4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002800:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002804:	f003 0320 	and.w	r3, r3, #32
 8002808:	2b00      	cmp	r3, #0
 800280a:	d008      	beq.n	800281e <HAL_UART_IRQHandler+0x14e>
 800280c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002810:	f003 0320 	and.w	r3, r3, #32
 8002814:	2b00      	cmp	r3, #0
 8002816:	d002      	beq.n	800281e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	f000 faf4 	bl	8002e06 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	695b      	ldr	r3, [r3, #20]
 8002824:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002828:	2b40      	cmp	r3, #64	@ 0x40
 800282a:	bf0c      	ite	eq
 800282c:	2301      	moveq	r3, #1
 800282e:	2300      	movne	r3, #0
 8002830:	b2db      	uxtb	r3, r3
 8002832:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800283a:	f003 0308 	and.w	r3, r3, #8
 800283e:	2b00      	cmp	r3, #0
 8002840:	d103      	bne.n	800284a <HAL_UART_IRQHandler+0x17a>
 8002842:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002846:	2b00      	cmp	r3, #0
 8002848:	d04f      	beq.n	80028ea <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f000 f9fc 	bl	8002c48 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	695b      	ldr	r3, [r3, #20]
 8002856:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800285a:	2b40      	cmp	r3, #64	@ 0x40
 800285c:	d141      	bne.n	80028e2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	3314      	adds	r3, #20
 8002864:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002868:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800286c:	e853 3f00 	ldrex	r3, [r3]
 8002870:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002874:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002878:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800287c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	3314      	adds	r3, #20
 8002886:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800288a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800288e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002892:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002896:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800289a:	e841 2300 	strex	r3, r2, [r1]
 800289e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80028a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d1d9      	bne.n	800285e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d013      	beq.n	80028da <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028b6:	4a7e      	ldr	r2, [pc, #504]	@ (8002ab0 <HAL_UART_IRQHandler+0x3e0>)
 80028b8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028be:	4618      	mov	r0, r3
 80028c0:	f7fe fbd9 	bl	8001076 <HAL_DMA_Abort_IT>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d016      	beq.n	80028f8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028d0:	687a      	ldr	r2, [r7, #4]
 80028d2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80028d4:	4610      	mov	r0, r2
 80028d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028d8:	e00e      	b.n	80028f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f000 f99e 	bl	8002c1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028e0:	e00a      	b.n	80028f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f000 f99a 	bl	8002c1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028e8:	e006      	b.n	80028f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f000 f996 	bl	8002c1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2200      	movs	r2, #0
 80028f4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80028f6:	e175      	b.n	8002be4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028f8:	bf00      	nop
    return;
 80028fa:	e173      	b.n	8002be4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002900:	2b01      	cmp	r3, #1
 8002902:	f040 814f 	bne.w	8002ba4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002906:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800290a:	f003 0310 	and.w	r3, r3, #16
 800290e:	2b00      	cmp	r3, #0
 8002910:	f000 8148 	beq.w	8002ba4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002914:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002918:	f003 0310 	and.w	r3, r3, #16
 800291c:	2b00      	cmp	r3, #0
 800291e:	f000 8141 	beq.w	8002ba4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002922:	2300      	movs	r3, #0
 8002924:	60bb      	str	r3, [r7, #8]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	60bb      	str	r3, [r7, #8]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	60bb      	str	r3, [r7, #8]
 8002936:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	695b      	ldr	r3, [r3, #20]
 800293e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002942:	2b40      	cmp	r3, #64	@ 0x40
 8002944:	f040 80b6 	bne.w	8002ab4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002954:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002958:	2b00      	cmp	r3, #0
 800295a:	f000 8145 	beq.w	8002be8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002962:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002966:	429a      	cmp	r2, r3
 8002968:	f080 813e 	bcs.w	8002be8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002972:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002978:	69db      	ldr	r3, [r3, #28]
 800297a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800297e:	f000 8088 	beq.w	8002a92 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	330c      	adds	r3, #12
 8002988:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800298c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002990:	e853 3f00 	ldrex	r3, [r3]
 8002994:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002998:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800299c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80029a0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	330c      	adds	r3, #12
 80029aa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80029ae:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80029b2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029b6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80029ba:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80029be:	e841 2300 	strex	r3, r2, [r1]
 80029c2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80029c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d1d9      	bne.n	8002982 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	3314      	adds	r3, #20
 80029d4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029d6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80029d8:	e853 3f00 	ldrex	r3, [r3]
 80029dc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80029de:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80029e0:	f023 0301 	bic.w	r3, r3, #1
 80029e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	3314      	adds	r3, #20
 80029ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80029f2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80029f6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029f8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80029fa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80029fe:	e841 2300 	strex	r3, r2, [r1]
 8002a02:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002a04:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d1e1      	bne.n	80029ce <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	3314      	adds	r3, #20
 8002a10:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a12:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002a14:	e853 3f00 	ldrex	r3, [r3]
 8002a18:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002a1a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a1c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002a20:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	3314      	adds	r3, #20
 8002a2a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002a2e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002a30:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a32:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002a34:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002a36:	e841 2300 	strex	r3, r2, [r1]
 8002a3a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002a3c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d1e3      	bne.n	8002a0a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2220      	movs	r2, #32
 8002a46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	330c      	adds	r3, #12
 8002a56:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002a5a:	e853 3f00 	ldrex	r3, [r3]
 8002a5e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002a60:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002a62:	f023 0310 	bic.w	r3, r3, #16
 8002a66:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	330c      	adds	r3, #12
 8002a70:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002a74:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002a76:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a78:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002a7a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002a7c:	e841 2300 	strex	r3, r2, [r1]
 8002a80:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002a82:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d1e3      	bne.n	8002a50 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f7fe fa82 	bl	8000f96 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2202      	movs	r2, #2
 8002a96:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002aa0:	b29b      	uxth	r3, r3
 8002aa2:	1ad3      	subs	r3, r2, r3
 8002aa4:	b29b      	uxth	r3, r3
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	f000 f8c1 	bl	8002c30 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002aae:	e09b      	b.n	8002be8 <HAL_UART_IRQHandler+0x518>
 8002ab0:	08002d0f 	.word	0x08002d0f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002abc:	b29b      	uxth	r3, r3
 8002abe:	1ad3      	subs	r3, r2, r3
 8002ac0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002ac8:	b29b      	uxth	r3, r3
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	f000 808e 	beq.w	8002bec <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002ad0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	f000 8089 	beq.w	8002bec <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	330c      	adds	r3, #12
 8002ae0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ae2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ae4:	e853 3f00 	ldrex	r3, [r3]
 8002ae8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002aea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002aec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002af0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	330c      	adds	r3, #12
 8002afa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002afe:	647a      	str	r2, [r7, #68]	@ 0x44
 8002b00:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b02:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002b04:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002b06:	e841 2300 	strex	r3, r2, [r1]
 8002b0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002b0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d1e3      	bne.n	8002ada <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	3314      	adds	r3, #20
 8002b18:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b1c:	e853 3f00 	ldrex	r3, [r3]
 8002b20:	623b      	str	r3, [r7, #32]
   return(result);
 8002b22:	6a3b      	ldr	r3, [r7, #32]
 8002b24:	f023 0301 	bic.w	r3, r3, #1
 8002b28:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	3314      	adds	r3, #20
 8002b32:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002b36:	633a      	str	r2, [r7, #48]	@ 0x30
 8002b38:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b3a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002b3c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b3e:	e841 2300 	strex	r3, r2, [r1]
 8002b42:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002b44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d1e3      	bne.n	8002b12 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2220      	movs	r2, #32
 8002b4e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2200      	movs	r2, #0
 8002b56:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	330c      	adds	r3, #12
 8002b5e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	e853 3f00 	ldrex	r3, [r3]
 8002b66:	60fb      	str	r3, [r7, #12]
   return(result);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	f023 0310 	bic.w	r3, r3, #16
 8002b6e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	330c      	adds	r3, #12
 8002b78:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002b7c:	61fa      	str	r2, [r7, #28]
 8002b7e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b80:	69b9      	ldr	r1, [r7, #24]
 8002b82:	69fa      	ldr	r2, [r7, #28]
 8002b84:	e841 2300 	strex	r3, r2, [r1]
 8002b88:	617b      	str	r3, [r7, #20]
   return(result);
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d1e3      	bne.n	8002b58 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2202      	movs	r2, #2
 8002b94:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002b96:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002b9a:	4619      	mov	r1, r3
 8002b9c:	6878      	ldr	r0, [r7, #4]
 8002b9e:	f000 f847 	bl	8002c30 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002ba2:	e023      	b.n	8002bec <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002ba4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ba8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d009      	beq.n	8002bc4 <HAL_UART_IRQHandler+0x4f4>
 8002bb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002bb4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d003      	beq.n	8002bc4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	f000 f8ba 	bl	8002d36 <UART_Transmit_IT>
    return;
 8002bc2:	e014      	b.n	8002bee <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002bc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002bc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d00e      	beq.n	8002bee <HAL_UART_IRQHandler+0x51e>
 8002bd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002bd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d008      	beq.n	8002bee <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f000 f8fa 	bl	8002dd6 <UART_EndTransmit_IT>
    return;
 8002be2:	e004      	b.n	8002bee <HAL_UART_IRQHandler+0x51e>
    return;
 8002be4:	bf00      	nop
 8002be6:	e002      	b.n	8002bee <HAL_UART_IRQHandler+0x51e>
      return;
 8002be8:	bf00      	nop
 8002bea:	e000      	b.n	8002bee <HAL_UART_IRQHandler+0x51e>
      return;
 8002bec:	bf00      	nop
  }
}
 8002bee:	37e8      	adds	r7, #232	@ 0xe8
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}

08002bf4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b083      	sub	sp, #12
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002bfc:	bf00      	nop
 8002bfe:	370c      	adds	r7, #12
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr

08002c08 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b083      	sub	sp, #12
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002c10:	bf00      	nop
 8002c12:	370c      	adds	r7, #12
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr

08002c1c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002c24:	bf00      	nop
 8002c26:	370c      	adds	r7, #12
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr

08002c30 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b083      	sub	sp, #12
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
 8002c38:	460b      	mov	r3, r1
 8002c3a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002c3c:	bf00      	nop
 8002c3e:	370c      	adds	r7, #12
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr

08002c48 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b095      	sub	sp, #84	@ 0x54
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	330c      	adds	r3, #12
 8002c56:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c5a:	e853 3f00 	ldrex	r3, [r3]
 8002c5e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002c60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c62:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002c66:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	330c      	adds	r3, #12
 8002c6e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002c70:	643a      	str	r2, [r7, #64]	@ 0x40
 8002c72:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c74:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002c76:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002c78:	e841 2300 	strex	r3, r2, [r1]
 8002c7c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002c7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d1e5      	bne.n	8002c50 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	3314      	adds	r3, #20
 8002c8a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c8c:	6a3b      	ldr	r3, [r7, #32]
 8002c8e:	e853 3f00 	ldrex	r3, [r3]
 8002c92:	61fb      	str	r3, [r7, #28]
   return(result);
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	f023 0301 	bic.w	r3, r3, #1
 8002c9a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	3314      	adds	r3, #20
 8002ca2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002ca4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002ca6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ca8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002caa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002cac:	e841 2300 	strex	r3, r2, [r1]
 8002cb0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d1e5      	bne.n	8002c84 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d119      	bne.n	8002cf4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	330c      	adds	r3, #12
 8002cc6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	e853 3f00 	ldrex	r3, [r3]
 8002cce:	60bb      	str	r3, [r7, #8]
   return(result);
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	f023 0310 	bic.w	r3, r3, #16
 8002cd6:	647b      	str	r3, [r7, #68]	@ 0x44
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	330c      	adds	r3, #12
 8002cde:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002ce0:	61ba      	str	r2, [r7, #24]
 8002ce2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ce4:	6979      	ldr	r1, [r7, #20]
 8002ce6:	69ba      	ldr	r2, [r7, #24]
 8002ce8:	e841 2300 	strex	r3, r2, [r1]
 8002cec:	613b      	str	r3, [r7, #16]
   return(result);
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d1e5      	bne.n	8002cc0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2220      	movs	r2, #32
 8002cf8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002d02:	bf00      	nop
 8002d04:	3754      	adds	r7, #84	@ 0x54
 8002d06:	46bd      	mov	sp, r7
 8002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0c:	4770      	bx	lr

08002d0e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002d0e:	b580      	push	{r7, lr}
 8002d10:	b084      	sub	sp, #16
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d1a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2200      	movs	r2, #0
 8002d26:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002d28:	68f8      	ldr	r0, [r7, #12]
 8002d2a:	f7ff ff77 	bl	8002c1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002d2e:	bf00      	nop
 8002d30:	3710      	adds	r7, #16
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}

08002d36 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002d36:	b480      	push	{r7}
 8002d38:	b085      	sub	sp, #20
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	2b21      	cmp	r3, #33	@ 0x21
 8002d48:	d13e      	bne.n	8002dc8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d52:	d114      	bne.n	8002d7e <UART_Transmit_IT+0x48>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	691b      	ldr	r3, [r3, #16]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d110      	bne.n	8002d7e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6a1b      	ldr	r3, [r3, #32]
 8002d60:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	881b      	ldrh	r3, [r3, #0]
 8002d66:	461a      	mov	r2, r3
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d70:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6a1b      	ldr	r3, [r3, #32]
 8002d76:	1c9a      	adds	r2, r3, #2
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	621a      	str	r2, [r3, #32]
 8002d7c:	e008      	b.n	8002d90 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6a1b      	ldr	r3, [r3, #32]
 8002d82:	1c59      	adds	r1, r3, #1
 8002d84:	687a      	ldr	r2, [r7, #4]
 8002d86:	6211      	str	r1, [r2, #32]
 8002d88:	781a      	ldrb	r2, [r3, #0]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002d94:	b29b      	uxth	r3, r3
 8002d96:	3b01      	subs	r3, #1
 8002d98:	b29b      	uxth	r3, r3
 8002d9a:	687a      	ldr	r2, [r7, #4]
 8002d9c:	4619      	mov	r1, r3
 8002d9e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d10f      	bne.n	8002dc4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	68da      	ldr	r2, [r3, #12]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002db2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	68da      	ldr	r2, [r3, #12]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002dc2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	e000      	b.n	8002dca <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002dc8:	2302      	movs	r3, #2
  }
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3714      	adds	r7, #20
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr

08002dd6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002dd6:	b580      	push	{r7, lr}
 8002dd8:	b082      	sub	sp, #8
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	68da      	ldr	r2, [r3, #12]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002dec:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2220      	movs	r2, #32
 8002df2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f7ff fefc 	bl	8002bf4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002dfc:	2300      	movs	r3, #0
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3708      	adds	r7, #8
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}

08002e06 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002e06:	b580      	push	{r7, lr}
 8002e08:	b08c      	sub	sp, #48	@ 0x30
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	2b22      	cmp	r3, #34	@ 0x22
 8002e18:	f040 80ae 	bne.w	8002f78 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e24:	d117      	bne.n	8002e56 <UART_Receive_IT+0x50>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	691b      	ldr	r3, [r3, #16]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d113      	bne.n	8002e56 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e36:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e44:	b29a      	uxth	r2, r3
 8002e46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e48:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e4e:	1c9a      	adds	r2, r3, #2
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	629a      	str	r2, [r3, #40]	@ 0x28
 8002e54:	e026      	b.n	8002ea4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e68:	d007      	beq.n	8002e7a <UART_Receive_IT+0x74>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d10a      	bne.n	8002e88 <UART_Receive_IT+0x82>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	691b      	ldr	r3, [r3, #16]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d106      	bne.n	8002e88 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	b2da      	uxtb	r2, r3
 8002e82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e84:	701a      	strb	r2, [r3, #0]
 8002e86:	e008      	b.n	8002e9a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002e94:	b2da      	uxtb	r2, r3
 8002e96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e98:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e9e:	1c5a      	adds	r2, r3, #1
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002ea8:	b29b      	uxth	r3, r3
 8002eaa:	3b01      	subs	r3, #1
 8002eac:	b29b      	uxth	r3, r3
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	4619      	mov	r1, r3
 8002eb2:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d15d      	bne.n	8002f74 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	68da      	ldr	r2, [r3, #12]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f022 0220 	bic.w	r2, r2, #32
 8002ec6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	68da      	ldr	r2, [r3, #12]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002ed6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	695a      	ldr	r2, [r3, #20]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f022 0201 	bic.w	r2, r2, #1
 8002ee6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2220      	movs	r2, #32
 8002eec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d135      	bne.n	8002f6a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2200      	movs	r2, #0
 8002f02:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	330c      	adds	r3, #12
 8002f0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	e853 3f00 	ldrex	r3, [r3]
 8002f12:	613b      	str	r3, [r7, #16]
   return(result);
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	f023 0310 	bic.w	r3, r3, #16
 8002f1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	330c      	adds	r3, #12
 8002f22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f24:	623a      	str	r2, [r7, #32]
 8002f26:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f28:	69f9      	ldr	r1, [r7, #28]
 8002f2a:	6a3a      	ldr	r2, [r7, #32]
 8002f2c:	e841 2300 	strex	r3, r2, [r1]
 8002f30:	61bb      	str	r3, [r7, #24]
   return(result);
 8002f32:	69bb      	ldr	r3, [r7, #24]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d1e5      	bne.n	8002f04 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 0310 	and.w	r3, r3, #16
 8002f42:	2b10      	cmp	r3, #16
 8002f44:	d10a      	bne.n	8002f5c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002f46:	2300      	movs	r3, #0
 8002f48:	60fb      	str	r3, [r7, #12]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	60fb      	str	r3, [r7, #12]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	60fb      	str	r3, [r7, #12]
 8002f5a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002f60:	4619      	mov	r1, r3
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f7ff fe64 	bl	8002c30 <HAL_UARTEx_RxEventCallback>
 8002f68:	e002      	b.n	8002f70 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f7ff fe4c 	bl	8002c08 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002f70:	2300      	movs	r3, #0
 8002f72:	e002      	b.n	8002f7a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002f74:	2300      	movs	r3, #0
 8002f76:	e000      	b.n	8002f7a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002f78:	2302      	movs	r3, #2
  }
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3730      	adds	r7, #48	@ 0x30
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
	...

08002f84 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f88:	b0c0      	sub	sp, #256	@ 0x100
 8002f8a:	af00      	add	r7, sp, #0
 8002f8c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	691b      	ldr	r3, [r3, #16]
 8002f98:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002f9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fa0:	68d9      	ldr	r1, [r3, #12]
 8002fa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	ea40 0301 	orr.w	r3, r0, r1
 8002fac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002fae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fb2:	689a      	ldr	r2, [r3, #8]
 8002fb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fb8:	691b      	ldr	r3, [r3, #16]
 8002fba:	431a      	orrs	r2, r3
 8002fbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fc0:	695b      	ldr	r3, [r3, #20]
 8002fc2:	431a      	orrs	r2, r3
 8002fc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fc8:	69db      	ldr	r3, [r3, #28]
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002fd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	68db      	ldr	r3, [r3, #12]
 8002fd8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002fdc:	f021 010c 	bic.w	r1, r1, #12
 8002fe0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002fea:	430b      	orrs	r3, r1
 8002fec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002fee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	695b      	ldr	r3, [r3, #20]
 8002ff6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002ffa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ffe:	6999      	ldr	r1, [r3, #24]
 8003000:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	ea40 0301 	orr.w	r3, r0, r1
 800300a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800300c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	4b8f      	ldr	r3, [pc, #572]	@ (8003250 <UART_SetConfig+0x2cc>)
 8003014:	429a      	cmp	r2, r3
 8003016:	d005      	beq.n	8003024 <UART_SetConfig+0xa0>
 8003018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	4b8d      	ldr	r3, [pc, #564]	@ (8003254 <UART_SetConfig+0x2d0>)
 8003020:	429a      	cmp	r2, r3
 8003022:	d104      	bne.n	800302e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003024:	f7ff faf0 	bl	8002608 <HAL_RCC_GetPCLK2Freq>
 8003028:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800302c:	e003      	b.n	8003036 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800302e:	f7ff fad7 	bl	80025e0 <HAL_RCC_GetPCLK1Freq>
 8003032:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003036:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800303a:	69db      	ldr	r3, [r3, #28]
 800303c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003040:	f040 810c 	bne.w	800325c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003044:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003048:	2200      	movs	r2, #0
 800304a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800304e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003052:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003056:	4622      	mov	r2, r4
 8003058:	462b      	mov	r3, r5
 800305a:	1891      	adds	r1, r2, r2
 800305c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800305e:	415b      	adcs	r3, r3
 8003060:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003062:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003066:	4621      	mov	r1, r4
 8003068:	eb12 0801 	adds.w	r8, r2, r1
 800306c:	4629      	mov	r1, r5
 800306e:	eb43 0901 	adc.w	r9, r3, r1
 8003072:	f04f 0200 	mov.w	r2, #0
 8003076:	f04f 0300 	mov.w	r3, #0
 800307a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800307e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003082:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003086:	4690      	mov	r8, r2
 8003088:	4699      	mov	r9, r3
 800308a:	4623      	mov	r3, r4
 800308c:	eb18 0303 	adds.w	r3, r8, r3
 8003090:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003094:	462b      	mov	r3, r5
 8003096:	eb49 0303 	adc.w	r3, r9, r3
 800309a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800309e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80030aa:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80030ae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80030b2:	460b      	mov	r3, r1
 80030b4:	18db      	adds	r3, r3, r3
 80030b6:	653b      	str	r3, [r7, #80]	@ 0x50
 80030b8:	4613      	mov	r3, r2
 80030ba:	eb42 0303 	adc.w	r3, r2, r3
 80030be:	657b      	str	r3, [r7, #84]	@ 0x54
 80030c0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80030c4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80030c8:	f7fd f8e2 	bl	8000290 <__aeabi_uldivmod>
 80030cc:	4602      	mov	r2, r0
 80030ce:	460b      	mov	r3, r1
 80030d0:	4b61      	ldr	r3, [pc, #388]	@ (8003258 <UART_SetConfig+0x2d4>)
 80030d2:	fba3 2302 	umull	r2, r3, r3, r2
 80030d6:	095b      	lsrs	r3, r3, #5
 80030d8:	011c      	lsls	r4, r3, #4
 80030da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80030de:	2200      	movs	r2, #0
 80030e0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80030e4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80030e8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80030ec:	4642      	mov	r2, r8
 80030ee:	464b      	mov	r3, r9
 80030f0:	1891      	adds	r1, r2, r2
 80030f2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80030f4:	415b      	adcs	r3, r3
 80030f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80030f8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80030fc:	4641      	mov	r1, r8
 80030fe:	eb12 0a01 	adds.w	sl, r2, r1
 8003102:	4649      	mov	r1, r9
 8003104:	eb43 0b01 	adc.w	fp, r3, r1
 8003108:	f04f 0200 	mov.w	r2, #0
 800310c:	f04f 0300 	mov.w	r3, #0
 8003110:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003114:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003118:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800311c:	4692      	mov	sl, r2
 800311e:	469b      	mov	fp, r3
 8003120:	4643      	mov	r3, r8
 8003122:	eb1a 0303 	adds.w	r3, sl, r3
 8003126:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800312a:	464b      	mov	r3, r9
 800312c:	eb4b 0303 	adc.w	r3, fp, r3
 8003130:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	2200      	movs	r2, #0
 800313c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003140:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003144:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003148:	460b      	mov	r3, r1
 800314a:	18db      	adds	r3, r3, r3
 800314c:	643b      	str	r3, [r7, #64]	@ 0x40
 800314e:	4613      	mov	r3, r2
 8003150:	eb42 0303 	adc.w	r3, r2, r3
 8003154:	647b      	str	r3, [r7, #68]	@ 0x44
 8003156:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800315a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800315e:	f7fd f897 	bl	8000290 <__aeabi_uldivmod>
 8003162:	4602      	mov	r2, r0
 8003164:	460b      	mov	r3, r1
 8003166:	4611      	mov	r1, r2
 8003168:	4b3b      	ldr	r3, [pc, #236]	@ (8003258 <UART_SetConfig+0x2d4>)
 800316a:	fba3 2301 	umull	r2, r3, r3, r1
 800316e:	095b      	lsrs	r3, r3, #5
 8003170:	2264      	movs	r2, #100	@ 0x64
 8003172:	fb02 f303 	mul.w	r3, r2, r3
 8003176:	1acb      	subs	r3, r1, r3
 8003178:	00db      	lsls	r3, r3, #3
 800317a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800317e:	4b36      	ldr	r3, [pc, #216]	@ (8003258 <UART_SetConfig+0x2d4>)
 8003180:	fba3 2302 	umull	r2, r3, r3, r2
 8003184:	095b      	lsrs	r3, r3, #5
 8003186:	005b      	lsls	r3, r3, #1
 8003188:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800318c:	441c      	add	r4, r3
 800318e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003192:	2200      	movs	r2, #0
 8003194:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003198:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800319c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80031a0:	4642      	mov	r2, r8
 80031a2:	464b      	mov	r3, r9
 80031a4:	1891      	adds	r1, r2, r2
 80031a6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80031a8:	415b      	adcs	r3, r3
 80031aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80031ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80031b0:	4641      	mov	r1, r8
 80031b2:	1851      	adds	r1, r2, r1
 80031b4:	6339      	str	r1, [r7, #48]	@ 0x30
 80031b6:	4649      	mov	r1, r9
 80031b8:	414b      	adcs	r3, r1
 80031ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80031bc:	f04f 0200 	mov.w	r2, #0
 80031c0:	f04f 0300 	mov.w	r3, #0
 80031c4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80031c8:	4659      	mov	r1, fp
 80031ca:	00cb      	lsls	r3, r1, #3
 80031cc:	4651      	mov	r1, sl
 80031ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80031d2:	4651      	mov	r1, sl
 80031d4:	00ca      	lsls	r2, r1, #3
 80031d6:	4610      	mov	r0, r2
 80031d8:	4619      	mov	r1, r3
 80031da:	4603      	mov	r3, r0
 80031dc:	4642      	mov	r2, r8
 80031de:	189b      	adds	r3, r3, r2
 80031e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80031e4:	464b      	mov	r3, r9
 80031e6:	460a      	mov	r2, r1
 80031e8:	eb42 0303 	adc.w	r3, r2, r3
 80031ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80031f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	2200      	movs	r2, #0
 80031f8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80031fc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003200:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003204:	460b      	mov	r3, r1
 8003206:	18db      	adds	r3, r3, r3
 8003208:	62bb      	str	r3, [r7, #40]	@ 0x28
 800320a:	4613      	mov	r3, r2
 800320c:	eb42 0303 	adc.w	r3, r2, r3
 8003210:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003212:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003216:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800321a:	f7fd f839 	bl	8000290 <__aeabi_uldivmod>
 800321e:	4602      	mov	r2, r0
 8003220:	460b      	mov	r3, r1
 8003222:	4b0d      	ldr	r3, [pc, #52]	@ (8003258 <UART_SetConfig+0x2d4>)
 8003224:	fba3 1302 	umull	r1, r3, r3, r2
 8003228:	095b      	lsrs	r3, r3, #5
 800322a:	2164      	movs	r1, #100	@ 0x64
 800322c:	fb01 f303 	mul.w	r3, r1, r3
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	00db      	lsls	r3, r3, #3
 8003234:	3332      	adds	r3, #50	@ 0x32
 8003236:	4a08      	ldr	r2, [pc, #32]	@ (8003258 <UART_SetConfig+0x2d4>)
 8003238:	fba2 2303 	umull	r2, r3, r2, r3
 800323c:	095b      	lsrs	r3, r3, #5
 800323e:	f003 0207 	and.w	r2, r3, #7
 8003242:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4422      	add	r2, r4
 800324a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800324c:	e106      	b.n	800345c <UART_SetConfig+0x4d8>
 800324e:	bf00      	nop
 8003250:	40011000 	.word	0x40011000
 8003254:	40011400 	.word	0x40011400
 8003258:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800325c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003260:	2200      	movs	r2, #0
 8003262:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003266:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800326a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800326e:	4642      	mov	r2, r8
 8003270:	464b      	mov	r3, r9
 8003272:	1891      	adds	r1, r2, r2
 8003274:	6239      	str	r1, [r7, #32]
 8003276:	415b      	adcs	r3, r3
 8003278:	627b      	str	r3, [r7, #36]	@ 0x24
 800327a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800327e:	4641      	mov	r1, r8
 8003280:	1854      	adds	r4, r2, r1
 8003282:	4649      	mov	r1, r9
 8003284:	eb43 0501 	adc.w	r5, r3, r1
 8003288:	f04f 0200 	mov.w	r2, #0
 800328c:	f04f 0300 	mov.w	r3, #0
 8003290:	00eb      	lsls	r3, r5, #3
 8003292:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003296:	00e2      	lsls	r2, r4, #3
 8003298:	4614      	mov	r4, r2
 800329a:	461d      	mov	r5, r3
 800329c:	4643      	mov	r3, r8
 800329e:	18e3      	adds	r3, r4, r3
 80032a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80032a4:	464b      	mov	r3, r9
 80032a6:	eb45 0303 	adc.w	r3, r5, r3
 80032aa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80032ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	2200      	movs	r2, #0
 80032b6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80032ba:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80032be:	f04f 0200 	mov.w	r2, #0
 80032c2:	f04f 0300 	mov.w	r3, #0
 80032c6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80032ca:	4629      	mov	r1, r5
 80032cc:	008b      	lsls	r3, r1, #2
 80032ce:	4621      	mov	r1, r4
 80032d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80032d4:	4621      	mov	r1, r4
 80032d6:	008a      	lsls	r2, r1, #2
 80032d8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80032dc:	f7fc ffd8 	bl	8000290 <__aeabi_uldivmod>
 80032e0:	4602      	mov	r2, r0
 80032e2:	460b      	mov	r3, r1
 80032e4:	4b60      	ldr	r3, [pc, #384]	@ (8003468 <UART_SetConfig+0x4e4>)
 80032e6:	fba3 2302 	umull	r2, r3, r3, r2
 80032ea:	095b      	lsrs	r3, r3, #5
 80032ec:	011c      	lsls	r4, r3, #4
 80032ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80032f2:	2200      	movs	r2, #0
 80032f4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80032f8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80032fc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003300:	4642      	mov	r2, r8
 8003302:	464b      	mov	r3, r9
 8003304:	1891      	adds	r1, r2, r2
 8003306:	61b9      	str	r1, [r7, #24]
 8003308:	415b      	adcs	r3, r3
 800330a:	61fb      	str	r3, [r7, #28]
 800330c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003310:	4641      	mov	r1, r8
 8003312:	1851      	adds	r1, r2, r1
 8003314:	6139      	str	r1, [r7, #16]
 8003316:	4649      	mov	r1, r9
 8003318:	414b      	adcs	r3, r1
 800331a:	617b      	str	r3, [r7, #20]
 800331c:	f04f 0200 	mov.w	r2, #0
 8003320:	f04f 0300 	mov.w	r3, #0
 8003324:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003328:	4659      	mov	r1, fp
 800332a:	00cb      	lsls	r3, r1, #3
 800332c:	4651      	mov	r1, sl
 800332e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003332:	4651      	mov	r1, sl
 8003334:	00ca      	lsls	r2, r1, #3
 8003336:	4610      	mov	r0, r2
 8003338:	4619      	mov	r1, r3
 800333a:	4603      	mov	r3, r0
 800333c:	4642      	mov	r2, r8
 800333e:	189b      	adds	r3, r3, r2
 8003340:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003344:	464b      	mov	r3, r9
 8003346:	460a      	mov	r2, r1
 8003348:	eb42 0303 	adc.w	r3, r2, r3
 800334c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	2200      	movs	r2, #0
 8003358:	67bb      	str	r3, [r7, #120]	@ 0x78
 800335a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800335c:	f04f 0200 	mov.w	r2, #0
 8003360:	f04f 0300 	mov.w	r3, #0
 8003364:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003368:	4649      	mov	r1, r9
 800336a:	008b      	lsls	r3, r1, #2
 800336c:	4641      	mov	r1, r8
 800336e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003372:	4641      	mov	r1, r8
 8003374:	008a      	lsls	r2, r1, #2
 8003376:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800337a:	f7fc ff89 	bl	8000290 <__aeabi_uldivmod>
 800337e:	4602      	mov	r2, r0
 8003380:	460b      	mov	r3, r1
 8003382:	4611      	mov	r1, r2
 8003384:	4b38      	ldr	r3, [pc, #224]	@ (8003468 <UART_SetConfig+0x4e4>)
 8003386:	fba3 2301 	umull	r2, r3, r3, r1
 800338a:	095b      	lsrs	r3, r3, #5
 800338c:	2264      	movs	r2, #100	@ 0x64
 800338e:	fb02 f303 	mul.w	r3, r2, r3
 8003392:	1acb      	subs	r3, r1, r3
 8003394:	011b      	lsls	r3, r3, #4
 8003396:	3332      	adds	r3, #50	@ 0x32
 8003398:	4a33      	ldr	r2, [pc, #204]	@ (8003468 <UART_SetConfig+0x4e4>)
 800339a:	fba2 2303 	umull	r2, r3, r2, r3
 800339e:	095b      	lsrs	r3, r3, #5
 80033a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80033a4:	441c      	add	r4, r3
 80033a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80033aa:	2200      	movs	r2, #0
 80033ac:	673b      	str	r3, [r7, #112]	@ 0x70
 80033ae:	677a      	str	r2, [r7, #116]	@ 0x74
 80033b0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80033b4:	4642      	mov	r2, r8
 80033b6:	464b      	mov	r3, r9
 80033b8:	1891      	adds	r1, r2, r2
 80033ba:	60b9      	str	r1, [r7, #8]
 80033bc:	415b      	adcs	r3, r3
 80033be:	60fb      	str	r3, [r7, #12]
 80033c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80033c4:	4641      	mov	r1, r8
 80033c6:	1851      	adds	r1, r2, r1
 80033c8:	6039      	str	r1, [r7, #0]
 80033ca:	4649      	mov	r1, r9
 80033cc:	414b      	adcs	r3, r1
 80033ce:	607b      	str	r3, [r7, #4]
 80033d0:	f04f 0200 	mov.w	r2, #0
 80033d4:	f04f 0300 	mov.w	r3, #0
 80033d8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80033dc:	4659      	mov	r1, fp
 80033de:	00cb      	lsls	r3, r1, #3
 80033e0:	4651      	mov	r1, sl
 80033e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80033e6:	4651      	mov	r1, sl
 80033e8:	00ca      	lsls	r2, r1, #3
 80033ea:	4610      	mov	r0, r2
 80033ec:	4619      	mov	r1, r3
 80033ee:	4603      	mov	r3, r0
 80033f0:	4642      	mov	r2, r8
 80033f2:	189b      	adds	r3, r3, r2
 80033f4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80033f6:	464b      	mov	r3, r9
 80033f8:	460a      	mov	r2, r1
 80033fa:	eb42 0303 	adc.w	r3, r2, r3
 80033fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003400:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	2200      	movs	r2, #0
 8003408:	663b      	str	r3, [r7, #96]	@ 0x60
 800340a:	667a      	str	r2, [r7, #100]	@ 0x64
 800340c:	f04f 0200 	mov.w	r2, #0
 8003410:	f04f 0300 	mov.w	r3, #0
 8003414:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003418:	4649      	mov	r1, r9
 800341a:	008b      	lsls	r3, r1, #2
 800341c:	4641      	mov	r1, r8
 800341e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003422:	4641      	mov	r1, r8
 8003424:	008a      	lsls	r2, r1, #2
 8003426:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800342a:	f7fc ff31 	bl	8000290 <__aeabi_uldivmod>
 800342e:	4602      	mov	r2, r0
 8003430:	460b      	mov	r3, r1
 8003432:	4b0d      	ldr	r3, [pc, #52]	@ (8003468 <UART_SetConfig+0x4e4>)
 8003434:	fba3 1302 	umull	r1, r3, r3, r2
 8003438:	095b      	lsrs	r3, r3, #5
 800343a:	2164      	movs	r1, #100	@ 0x64
 800343c:	fb01 f303 	mul.w	r3, r1, r3
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	011b      	lsls	r3, r3, #4
 8003444:	3332      	adds	r3, #50	@ 0x32
 8003446:	4a08      	ldr	r2, [pc, #32]	@ (8003468 <UART_SetConfig+0x4e4>)
 8003448:	fba2 2303 	umull	r2, r3, r2, r3
 800344c:	095b      	lsrs	r3, r3, #5
 800344e:	f003 020f 	and.w	r2, r3, #15
 8003452:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4422      	add	r2, r4
 800345a:	609a      	str	r2, [r3, #8]
}
 800345c:	bf00      	nop
 800345e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003462:	46bd      	mov	sp, r7
 8003464:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003468:	51eb851f 	.word	0x51eb851f

0800346c <sniprintf>:
 800346c:	b40c      	push	{r2, r3}
 800346e:	b530      	push	{r4, r5, lr}
 8003470:	4b17      	ldr	r3, [pc, #92]	@ (80034d0 <sniprintf+0x64>)
 8003472:	1e0c      	subs	r4, r1, #0
 8003474:	681d      	ldr	r5, [r3, #0]
 8003476:	b09d      	sub	sp, #116	@ 0x74
 8003478:	da08      	bge.n	800348c <sniprintf+0x20>
 800347a:	238b      	movs	r3, #139	@ 0x8b
 800347c:	602b      	str	r3, [r5, #0]
 800347e:	f04f 30ff 	mov.w	r0, #4294967295
 8003482:	b01d      	add	sp, #116	@ 0x74
 8003484:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003488:	b002      	add	sp, #8
 800348a:	4770      	bx	lr
 800348c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8003490:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003494:	bf14      	ite	ne
 8003496:	f104 33ff 	addne.w	r3, r4, #4294967295
 800349a:	4623      	moveq	r3, r4
 800349c:	9304      	str	r3, [sp, #16]
 800349e:	9307      	str	r3, [sp, #28]
 80034a0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80034a4:	9002      	str	r0, [sp, #8]
 80034a6:	9006      	str	r0, [sp, #24]
 80034a8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80034ac:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80034ae:	ab21      	add	r3, sp, #132	@ 0x84
 80034b0:	a902      	add	r1, sp, #8
 80034b2:	4628      	mov	r0, r5
 80034b4:	9301      	str	r3, [sp, #4]
 80034b6:	f000 f995 	bl	80037e4 <_svfiprintf_r>
 80034ba:	1c43      	adds	r3, r0, #1
 80034bc:	bfbc      	itt	lt
 80034be:	238b      	movlt	r3, #139	@ 0x8b
 80034c0:	602b      	strlt	r3, [r5, #0]
 80034c2:	2c00      	cmp	r4, #0
 80034c4:	d0dd      	beq.n	8003482 <sniprintf+0x16>
 80034c6:	9b02      	ldr	r3, [sp, #8]
 80034c8:	2200      	movs	r2, #0
 80034ca:	701a      	strb	r2, [r3, #0]
 80034cc:	e7d9      	b.n	8003482 <sniprintf+0x16>
 80034ce:	bf00      	nop
 80034d0:	2000000c 	.word	0x2000000c

080034d4 <memset>:
 80034d4:	4402      	add	r2, r0
 80034d6:	4603      	mov	r3, r0
 80034d8:	4293      	cmp	r3, r2
 80034da:	d100      	bne.n	80034de <memset+0xa>
 80034dc:	4770      	bx	lr
 80034de:	f803 1b01 	strb.w	r1, [r3], #1
 80034e2:	e7f9      	b.n	80034d8 <memset+0x4>

080034e4 <__errno>:
 80034e4:	4b01      	ldr	r3, [pc, #4]	@ (80034ec <__errno+0x8>)
 80034e6:	6818      	ldr	r0, [r3, #0]
 80034e8:	4770      	bx	lr
 80034ea:	bf00      	nop
 80034ec:	2000000c 	.word	0x2000000c

080034f0 <__libc_init_array>:
 80034f0:	b570      	push	{r4, r5, r6, lr}
 80034f2:	4d0d      	ldr	r5, [pc, #52]	@ (8003528 <__libc_init_array+0x38>)
 80034f4:	4c0d      	ldr	r4, [pc, #52]	@ (800352c <__libc_init_array+0x3c>)
 80034f6:	1b64      	subs	r4, r4, r5
 80034f8:	10a4      	asrs	r4, r4, #2
 80034fa:	2600      	movs	r6, #0
 80034fc:	42a6      	cmp	r6, r4
 80034fe:	d109      	bne.n	8003514 <__libc_init_array+0x24>
 8003500:	4d0b      	ldr	r5, [pc, #44]	@ (8003530 <__libc_init_array+0x40>)
 8003502:	4c0c      	ldr	r4, [pc, #48]	@ (8003534 <__libc_init_array+0x44>)
 8003504:	f000 fc66 	bl	8003dd4 <_init>
 8003508:	1b64      	subs	r4, r4, r5
 800350a:	10a4      	asrs	r4, r4, #2
 800350c:	2600      	movs	r6, #0
 800350e:	42a6      	cmp	r6, r4
 8003510:	d105      	bne.n	800351e <__libc_init_array+0x2e>
 8003512:	bd70      	pop	{r4, r5, r6, pc}
 8003514:	f855 3b04 	ldr.w	r3, [r5], #4
 8003518:	4798      	blx	r3
 800351a:	3601      	adds	r6, #1
 800351c:	e7ee      	b.n	80034fc <__libc_init_array+0xc>
 800351e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003522:	4798      	blx	r3
 8003524:	3601      	adds	r6, #1
 8003526:	e7f2      	b.n	800350e <__libc_init_array+0x1e>
 8003528:	08003e64 	.word	0x08003e64
 800352c:	08003e64 	.word	0x08003e64
 8003530:	08003e64 	.word	0x08003e64
 8003534:	08003e68 	.word	0x08003e68

08003538 <__retarget_lock_acquire_recursive>:
 8003538:	4770      	bx	lr

0800353a <__retarget_lock_release_recursive>:
 800353a:	4770      	bx	lr

0800353c <_free_r>:
 800353c:	b538      	push	{r3, r4, r5, lr}
 800353e:	4605      	mov	r5, r0
 8003540:	2900      	cmp	r1, #0
 8003542:	d041      	beq.n	80035c8 <_free_r+0x8c>
 8003544:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003548:	1f0c      	subs	r4, r1, #4
 800354a:	2b00      	cmp	r3, #0
 800354c:	bfb8      	it	lt
 800354e:	18e4      	addlt	r4, r4, r3
 8003550:	f000 f8e0 	bl	8003714 <__malloc_lock>
 8003554:	4a1d      	ldr	r2, [pc, #116]	@ (80035cc <_free_r+0x90>)
 8003556:	6813      	ldr	r3, [r2, #0]
 8003558:	b933      	cbnz	r3, 8003568 <_free_r+0x2c>
 800355a:	6063      	str	r3, [r4, #4]
 800355c:	6014      	str	r4, [r2, #0]
 800355e:	4628      	mov	r0, r5
 8003560:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003564:	f000 b8dc 	b.w	8003720 <__malloc_unlock>
 8003568:	42a3      	cmp	r3, r4
 800356a:	d908      	bls.n	800357e <_free_r+0x42>
 800356c:	6820      	ldr	r0, [r4, #0]
 800356e:	1821      	adds	r1, r4, r0
 8003570:	428b      	cmp	r3, r1
 8003572:	bf01      	itttt	eq
 8003574:	6819      	ldreq	r1, [r3, #0]
 8003576:	685b      	ldreq	r3, [r3, #4]
 8003578:	1809      	addeq	r1, r1, r0
 800357a:	6021      	streq	r1, [r4, #0]
 800357c:	e7ed      	b.n	800355a <_free_r+0x1e>
 800357e:	461a      	mov	r2, r3
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	b10b      	cbz	r3, 8003588 <_free_r+0x4c>
 8003584:	42a3      	cmp	r3, r4
 8003586:	d9fa      	bls.n	800357e <_free_r+0x42>
 8003588:	6811      	ldr	r1, [r2, #0]
 800358a:	1850      	adds	r0, r2, r1
 800358c:	42a0      	cmp	r0, r4
 800358e:	d10b      	bne.n	80035a8 <_free_r+0x6c>
 8003590:	6820      	ldr	r0, [r4, #0]
 8003592:	4401      	add	r1, r0
 8003594:	1850      	adds	r0, r2, r1
 8003596:	4283      	cmp	r3, r0
 8003598:	6011      	str	r1, [r2, #0]
 800359a:	d1e0      	bne.n	800355e <_free_r+0x22>
 800359c:	6818      	ldr	r0, [r3, #0]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	6053      	str	r3, [r2, #4]
 80035a2:	4408      	add	r0, r1
 80035a4:	6010      	str	r0, [r2, #0]
 80035a6:	e7da      	b.n	800355e <_free_r+0x22>
 80035a8:	d902      	bls.n	80035b0 <_free_r+0x74>
 80035aa:	230c      	movs	r3, #12
 80035ac:	602b      	str	r3, [r5, #0]
 80035ae:	e7d6      	b.n	800355e <_free_r+0x22>
 80035b0:	6820      	ldr	r0, [r4, #0]
 80035b2:	1821      	adds	r1, r4, r0
 80035b4:	428b      	cmp	r3, r1
 80035b6:	bf04      	itt	eq
 80035b8:	6819      	ldreq	r1, [r3, #0]
 80035ba:	685b      	ldreq	r3, [r3, #4]
 80035bc:	6063      	str	r3, [r4, #4]
 80035be:	bf04      	itt	eq
 80035c0:	1809      	addeq	r1, r1, r0
 80035c2:	6021      	streq	r1, [r4, #0]
 80035c4:	6054      	str	r4, [r2, #4]
 80035c6:	e7ca      	b.n	800355e <_free_r+0x22>
 80035c8:	bd38      	pop	{r3, r4, r5, pc}
 80035ca:	bf00      	nop
 80035cc:	20000260 	.word	0x20000260

080035d0 <sbrk_aligned>:
 80035d0:	b570      	push	{r4, r5, r6, lr}
 80035d2:	4e0f      	ldr	r6, [pc, #60]	@ (8003610 <sbrk_aligned+0x40>)
 80035d4:	460c      	mov	r4, r1
 80035d6:	6831      	ldr	r1, [r6, #0]
 80035d8:	4605      	mov	r5, r0
 80035da:	b911      	cbnz	r1, 80035e2 <sbrk_aligned+0x12>
 80035dc:	f000 fba6 	bl	8003d2c <_sbrk_r>
 80035e0:	6030      	str	r0, [r6, #0]
 80035e2:	4621      	mov	r1, r4
 80035e4:	4628      	mov	r0, r5
 80035e6:	f000 fba1 	bl	8003d2c <_sbrk_r>
 80035ea:	1c43      	adds	r3, r0, #1
 80035ec:	d103      	bne.n	80035f6 <sbrk_aligned+0x26>
 80035ee:	f04f 34ff 	mov.w	r4, #4294967295
 80035f2:	4620      	mov	r0, r4
 80035f4:	bd70      	pop	{r4, r5, r6, pc}
 80035f6:	1cc4      	adds	r4, r0, #3
 80035f8:	f024 0403 	bic.w	r4, r4, #3
 80035fc:	42a0      	cmp	r0, r4
 80035fe:	d0f8      	beq.n	80035f2 <sbrk_aligned+0x22>
 8003600:	1a21      	subs	r1, r4, r0
 8003602:	4628      	mov	r0, r5
 8003604:	f000 fb92 	bl	8003d2c <_sbrk_r>
 8003608:	3001      	adds	r0, #1
 800360a:	d1f2      	bne.n	80035f2 <sbrk_aligned+0x22>
 800360c:	e7ef      	b.n	80035ee <sbrk_aligned+0x1e>
 800360e:	bf00      	nop
 8003610:	2000025c 	.word	0x2000025c

08003614 <_malloc_r>:
 8003614:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003618:	1ccd      	adds	r5, r1, #3
 800361a:	f025 0503 	bic.w	r5, r5, #3
 800361e:	3508      	adds	r5, #8
 8003620:	2d0c      	cmp	r5, #12
 8003622:	bf38      	it	cc
 8003624:	250c      	movcc	r5, #12
 8003626:	2d00      	cmp	r5, #0
 8003628:	4606      	mov	r6, r0
 800362a:	db01      	blt.n	8003630 <_malloc_r+0x1c>
 800362c:	42a9      	cmp	r1, r5
 800362e:	d904      	bls.n	800363a <_malloc_r+0x26>
 8003630:	230c      	movs	r3, #12
 8003632:	6033      	str	r3, [r6, #0]
 8003634:	2000      	movs	r0, #0
 8003636:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800363a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003710 <_malloc_r+0xfc>
 800363e:	f000 f869 	bl	8003714 <__malloc_lock>
 8003642:	f8d8 3000 	ldr.w	r3, [r8]
 8003646:	461c      	mov	r4, r3
 8003648:	bb44      	cbnz	r4, 800369c <_malloc_r+0x88>
 800364a:	4629      	mov	r1, r5
 800364c:	4630      	mov	r0, r6
 800364e:	f7ff ffbf 	bl	80035d0 <sbrk_aligned>
 8003652:	1c43      	adds	r3, r0, #1
 8003654:	4604      	mov	r4, r0
 8003656:	d158      	bne.n	800370a <_malloc_r+0xf6>
 8003658:	f8d8 4000 	ldr.w	r4, [r8]
 800365c:	4627      	mov	r7, r4
 800365e:	2f00      	cmp	r7, #0
 8003660:	d143      	bne.n	80036ea <_malloc_r+0xd6>
 8003662:	2c00      	cmp	r4, #0
 8003664:	d04b      	beq.n	80036fe <_malloc_r+0xea>
 8003666:	6823      	ldr	r3, [r4, #0]
 8003668:	4639      	mov	r1, r7
 800366a:	4630      	mov	r0, r6
 800366c:	eb04 0903 	add.w	r9, r4, r3
 8003670:	f000 fb5c 	bl	8003d2c <_sbrk_r>
 8003674:	4581      	cmp	r9, r0
 8003676:	d142      	bne.n	80036fe <_malloc_r+0xea>
 8003678:	6821      	ldr	r1, [r4, #0]
 800367a:	1a6d      	subs	r5, r5, r1
 800367c:	4629      	mov	r1, r5
 800367e:	4630      	mov	r0, r6
 8003680:	f7ff ffa6 	bl	80035d0 <sbrk_aligned>
 8003684:	3001      	adds	r0, #1
 8003686:	d03a      	beq.n	80036fe <_malloc_r+0xea>
 8003688:	6823      	ldr	r3, [r4, #0]
 800368a:	442b      	add	r3, r5
 800368c:	6023      	str	r3, [r4, #0]
 800368e:	f8d8 3000 	ldr.w	r3, [r8]
 8003692:	685a      	ldr	r2, [r3, #4]
 8003694:	bb62      	cbnz	r2, 80036f0 <_malloc_r+0xdc>
 8003696:	f8c8 7000 	str.w	r7, [r8]
 800369a:	e00f      	b.n	80036bc <_malloc_r+0xa8>
 800369c:	6822      	ldr	r2, [r4, #0]
 800369e:	1b52      	subs	r2, r2, r5
 80036a0:	d420      	bmi.n	80036e4 <_malloc_r+0xd0>
 80036a2:	2a0b      	cmp	r2, #11
 80036a4:	d917      	bls.n	80036d6 <_malloc_r+0xc2>
 80036a6:	1961      	adds	r1, r4, r5
 80036a8:	42a3      	cmp	r3, r4
 80036aa:	6025      	str	r5, [r4, #0]
 80036ac:	bf18      	it	ne
 80036ae:	6059      	strne	r1, [r3, #4]
 80036b0:	6863      	ldr	r3, [r4, #4]
 80036b2:	bf08      	it	eq
 80036b4:	f8c8 1000 	streq.w	r1, [r8]
 80036b8:	5162      	str	r2, [r4, r5]
 80036ba:	604b      	str	r3, [r1, #4]
 80036bc:	4630      	mov	r0, r6
 80036be:	f000 f82f 	bl	8003720 <__malloc_unlock>
 80036c2:	f104 000b 	add.w	r0, r4, #11
 80036c6:	1d23      	adds	r3, r4, #4
 80036c8:	f020 0007 	bic.w	r0, r0, #7
 80036cc:	1ac2      	subs	r2, r0, r3
 80036ce:	bf1c      	itt	ne
 80036d0:	1a1b      	subne	r3, r3, r0
 80036d2:	50a3      	strne	r3, [r4, r2]
 80036d4:	e7af      	b.n	8003636 <_malloc_r+0x22>
 80036d6:	6862      	ldr	r2, [r4, #4]
 80036d8:	42a3      	cmp	r3, r4
 80036da:	bf0c      	ite	eq
 80036dc:	f8c8 2000 	streq.w	r2, [r8]
 80036e0:	605a      	strne	r2, [r3, #4]
 80036e2:	e7eb      	b.n	80036bc <_malloc_r+0xa8>
 80036e4:	4623      	mov	r3, r4
 80036e6:	6864      	ldr	r4, [r4, #4]
 80036e8:	e7ae      	b.n	8003648 <_malloc_r+0x34>
 80036ea:	463c      	mov	r4, r7
 80036ec:	687f      	ldr	r7, [r7, #4]
 80036ee:	e7b6      	b.n	800365e <_malloc_r+0x4a>
 80036f0:	461a      	mov	r2, r3
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	42a3      	cmp	r3, r4
 80036f6:	d1fb      	bne.n	80036f0 <_malloc_r+0xdc>
 80036f8:	2300      	movs	r3, #0
 80036fa:	6053      	str	r3, [r2, #4]
 80036fc:	e7de      	b.n	80036bc <_malloc_r+0xa8>
 80036fe:	230c      	movs	r3, #12
 8003700:	6033      	str	r3, [r6, #0]
 8003702:	4630      	mov	r0, r6
 8003704:	f000 f80c 	bl	8003720 <__malloc_unlock>
 8003708:	e794      	b.n	8003634 <_malloc_r+0x20>
 800370a:	6005      	str	r5, [r0, #0]
 800370c:	e7d6      	b.n	80036bc <_malloc_r+0xa8>
 800370e:	bf00      	nop
 8003710:	20000260 	.word	0x20000260

08003714 <__malloc_lock>:
 8003714:	4801      	ldr	r0, [pc, #4]	@ (800371c <__malloc_lock+0x8>)
 8003716:	f7ff bf0f 	b.w	8003538 <__retarget_lock_acquire_recursive>
 800371a:	bf00      	nop
 800371c:	20000258 	.word	0x20000258

08003720 <__malloc_unlock>:
 8003720:	4801      	ldr	r0, [pc, #4]	@ (8003728 <__malloc_unlock+0x8>)
 8003722:	f7ff bf0a 	b.w	800353a <__retarget_lock_release_recursive>
 8003726:	bf00      	nop
 8003728:	20000258 	.word	0x20000258

0800372c <__ssputs_r>:
 800372c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003730:	688e      	ldr	r6, [r1, #8]
 8003732:	461f      	mov	r7, r3
 8003734:	42be      	cmp	r6, r7
 8003736:	680b      	ldr	r3, [r1, #0]
 8003738:	4682      	mov	sl, r0
 800373a:	460c      	mov	r4, r1
 800373c:	4690      	mov	r8, r2
 800373e:	d82d      	bhi.n	800379c <__ssputs_r+0x70>
 8003740:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003744:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003748:	d026      	beq.n	8003798 <__ssputs_r+0x6c>
 800374a:	6965      	ldr	r5, [r4, #20]
 800374c:	6909      	ldr	r1, [r1, #16]
 800374e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003752:	eba3 0901 	sub.w	r9, r3, r1
 8003756:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800375a:	1c7b      	adds	r3, r7, #1
 800375c:	444b      	add	r3, r9
 800375e:	106d      	asrs	r5, r5, #1
 8003760:	429d      	cmp	r5, r3
 8003762:	bf38      	it	cc
 8003764:	461d      	movcc	r5, r3
 8003766:	0553      	lsls	r3, r2, #21
 8003768:	d527      	bpl.n	80037ba <__ssputs_r+0x8e>
 800376a:	4629      	mov	r1, r5
 800376c:	f7ff ff52 	bl	8003614 <_malloc_r>
 8003770:	4606      	mov	r6, r0
 8003772:	b360      	cbz	r0, 80037ce <__ssputs_r+0xa2>
 8003774:	6921      	ldr	r1, [r4, #16]
 8003776:	464a      	mov	r2, r9
 8003778:	f000 fae8 	bl	8003d4c <memcpy>
 800377c:	89a3      	ldrh	r3, [r4, #12]
 800377e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003782:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003786:	81a3      	strh	r3, [r4, #12]
 8003788:	6126      	str	r6, [r4, #16]
 800378a:	6165      	str	r5, [r4, #20]
 800378c:	444e      	add	r6, r9
 800378e:	eba5 0509 	sub.w	r5, r5, r9
 8003792:	6026      	str	r6, [r4, #0]
 8003794:	60a5      	str	r5, [r4, #8]
 8003796:	463e      	mov	r6, r7
 8003798:	42be      	cmp	r6, r7
 800379a:	d900      	bls.n	800379e <__ssputs_r+0x72>
 800379c:	463e      	mov	r6, r7
 800379e:	6820      	ldr	r0, [r4, #0]
 80037a0:	4632      	mov	r2, r6
 80037a2:	4641      	mov	r1, r8
 80037a4:	f000 faa8 	bl	8003cf8 <memmove>
 80037a8:	68a3      	ldr	r3, [r4, #8]
 80037aa:	1b9b      	subs	r3, r3, r6
 80037ac:	60a3      	str	r3, [r4, #8]
 80037ae:	6823      	ldr	r3, [r4, #0]
 80037b0:	4433      	add	r3, r6
 80037b2:	6023      	str	r3, [r4, #0]
 80037b4:	2000      	movs	r0, #0
 80037b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037ba:	462a      	mov	r2, r5
 80037bc:	f000 fad4 	bl	8003d68 <_realloc_r>
 80037c0:	4606      	mov	r6, r0
 80037c2:	2800      	cmp	r0, #0
 80037c4:	d1e0      	bne.n	8003788 <__ssputs_r+0x5c>
 80037c6:	6921      	ldr	r1, [r4, #16]
 80037c8:	4650      	mov	r0, sl
 80037ca:	f7ff feb7 	bl	800353c <_free_r>
 80037ce:	230c      	movs	r3, #12
 80037d0:	f8ca 3000 	str.w	r3, [sl]
 80037d4:	89a3      	ldrh	r3, [r4, #12]
 80037d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80037da:	81a3      	strh	r3, [r4, #12]
 80037dc:	f04f 30ff 	mov.w	r0, #4294967295
 80037e0:	e7e9      	b.n	80037b6 <__ssputs_r+0x8a>
	...

080037e4 <_svfiprintf_r>:
 80037e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037e8:	4698      	mov	r8, r3
 80037ea:	898b      	ldrh	r3, [r1, #12]
 80037ec:	061b      	lsls	r3, r3, #24
 80037ee:	b09d      	sub	sp, #116	@ 0x74
 80037f0:	4607      	mov	r7, r0
 80037f2:	460d      	mov	r5, r1
 80037f4:	4614      	mov	r4, r2
 80037f6:	d510      	bpl.n	800381a <_svfiprintf_r+0x36>
 80037f8:	690b      	ldr	r3, [r1, #16]
 80037fa:	b973      	cbnz	r3, 800381a <_svfiprintf_r+0x36>
 80037fc:	2140      	movs	r1, #64	@ 0x40
 80037fe:	f7ff ff09 	bl	8003614 <_malloc_r>
 8003802:	6028      	str	r0, [r5, #0]
 8003804:	6128      	str	r0, [r5, #16]
 8003806:	b930      	cbnz	r0, 8003816 <_svfiprintf_r+0x32>
 8003808:	230c      	movs	r3, #12
 800380a:	603b      	str	r3, [r7, #0]
 800380c:	f04f 30ff 	mov.w	r0, #4294967295
 8003810:	b01d      	add	sp, #116	@ 0x74
 8003812:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003816:	2340      	movs	r3, #64	@ 0x40
 8003818:	616b      	str	r3, [r5, #20]
 800381a:	2300      	movs	r3, #0
 800381c:	9309      	str	r3, [sp, #36]	@ 0x24
 800381e:	2320      	movs	r3, #32
 8003820:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003824:	f8cd 800c 	str.w	r8, [sp, #12]
 8003828:	2330      	movs	r3, #48	@ 0x30
 800382a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80039c8 <_svfiprintf_r+0x1e4>
 800382e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003832:	f04f 0901 	mov.w	r9, #1
 8003836:	4623      	mov	r3, r4
 8003838:	469a      	mov	sl, r3
 800383a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800383e:	b10a      	cbz	r2, 8003844 <_svfiprintf_r+0x60>
 8003840:	2a25      	cmp	r2, #37	@ 0x25
 8003842:	d1f9      	bne.n	8003838 <_svfiprintf_r+0x54>
 8003844:	ebba 0b04 	subs.w	fp, sl, r4
 8003848:	d00b      	beq.n	8003862 <_svfiprintf_r+0x7e>
 800384a:	465b      	mov	r3, fp
 800384c:	4622      	mov	r2, r4
 800384e:	4629      	mov	r1, r5
 8003850:	4638      	mov	r0, r7
 8003852:	f7ff ff6b 	bl	800372c <__ssputs_r>
 8003856:	3001      	adds	r0, #1
 8003858:	f000 80a7 	beq.w	80039aa <_svfiprintf_r+0x1c6>
 800385c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800385e:	445a      	add	r2, fp
 8003860:	9209      	str	r2, [sp, #36]	@ 0x24
 8003862:	f89a 3000 	ldrb.w	r3, [sl]
 8003866:	2b00      	cmp	r3, #0
 8003868:	f000 809f 	beq.w	80039aa <_svfiprintf_r+0x1c6>
 800386c:	2300      	movs	r3, #0
 800386e:	f04f 32ff 	mov.w	r2, #4294967295
 8003872:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003876:	f10a 0a01 	add.w	sl, sl, #1
 800387a:	9304      	str	r3, [sp, #16]
 800387c:	9307      	str	r3, [sp, #28]
 800387e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003882:	931a      	str	r3, [sp, #104]	@ 0x68
 8003884:	4654      	mov	r4, sl
 8003886:	2205      	movs	r2, #5
 8003888:	f814 1b01 	ldrb.w	r1, [r4], #1
 800388c:	484e      	ldr	r0, [pc, #312]	@ (80039c8 <_svfiprintf_r+0x1e4>)
 800388e:	f7fc fcaf 	bl	80001f0 <memchr>
 8003892:	9a04      	ldr	r2, [sp, #16]
 8003894:	b9d8      	cbnz	r0, 80038ce <_svfiprintf_r+0xea>
 8003896:	06d0      	lsls	r0, r2, #27
 8003898:	bf44      	itt	mi
 800389a:	2320      	movmi	r3, #32
 800389c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80038a0:	0711      	lsls	r1, r2, #28
 80038a2:	bf44      	itt	mi
 80038a4:	232b      	movmi	r3, #43	@ 0x2b
 80038a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80038aa:	f89a 3000 	ldrb.w	r3, [sl]
 80038ae:	2b2a      	cmp	r3, #42	@ 0x2a
 80038b0:	d015      	beq.n	80038de <_svfiprintf_r+0xfa>
 80038b2:	9a07      	ldr	r2, [sp, #28]
 80038b4:	4654      	mov	r4, sl
 80038b6:	2000      	movs	r0, #0
 80038b8:	f04f 0c0a 	mov.w	ip, #10
 80038bc:	4621      	mov	r1, r4
 80038be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80038c2:	3b30      	subs	r3, #48	@ 0x30
 80038c4:	2b09      	cmp	r3, #9
 80038c6:	d94b      	bls.n	8003960 <_svfiprintf_r+0x17c>
 80038c8:	b1b0      	cbz	r0, 80038f8 <_svfiprintf_r+0x114>
 80038ca:	9207      	str	r2, [sp, #28]
 80038cc:	e014      	b.n	80038f8 <_svfiprintf_r+0x114>
 80038ce:	eba0 0308 	sub.w	r3, r0, r8
 80038d2:	fa09 f303 	lsl.w	r3, r9, r3
 80038d6:	4313      	orrs	r3, r2
 80038d8:	9304      	str	r3, [sp, #16]
 80038da:	46a2      	mov	sl, r4
 80038dc:	e7d2      	b.n	8003884 <_svfiprintf_r+0xa0>
 80038de:	9b03      	ldr	r3, [sp, #12]
 80038e0:	1d19      	adds	r1, r3, #4
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	9103      	str	r1, [sp, #12]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	bfbb      	ittet	lt
 80038ea:	425b      	neglt	r3, r3
 80038ec:	f042 0202 	orrlt.w	r2, r2, #2
 80038f0:	9307      	strge	r3, [sp, #28]
 80038f2:	9307      	strlt	r3, [sp, #28]
 80038f4:	bfb8      	it	lt
 80038f6:	9204      	strlt	r2, [sp, #16]
 80038f8:	7823      	ldrb	r3, [r4, #0]
 80038fa:	2b2e      	cmp	r3, #46	@ 0x2e
 80038fc:	d10a      	bne.n	8003914 <_svfiprintf_r+0x130>
 80038fe:	7863      	ldrb	r3, [r4, #1]
 8003900:	2b2a      	cmp	r3, #42	@ 0x2a
 8003902:	d132      	bne.n	800396a <_svfiprintf_r+0x186>
 8003904:	9b03      	ldr	r3, [sp, #12]
 8003906:	1d1a      	adds	r2, r3, #4
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	9203      	str	r2, [sp, #12]
 800390c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003910:	3402      	adds	r4, #2
 8003912:	9305      	str	r3, [sp, #20]
 8003914:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80039d8 <_svfiprintf_r+0x1f4>
 8003918:	7821      	ldrb	r1, [r4, #0]
 800391a:	2203      	movs	r2, #3
 800391c:	4650      	mov	r0, sl
 800391e:	f7fc fc67 	bl	80001f0 <memchr>
 8003922:	b138      	cbz	r0, 8003934 <_svfiprintf_r+0x150>
 8003924:	9b04      	ldr	r3, [sp, #16]
 8003926:	eba0 000a 	sub.w	r0, r0, sl
 800392a:	2240      	movs	r2, #64	@ 0x40
 800392c:	4082      	lsls	r2, r0
 800392e:	4313      	orrs	r3, r2
 8003930:	3401      	adds	r4, #1
 8003932:	9304      	str	r3, [sp, #16]
 8003934:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003938:	4824      	ldr	r0, [pc, #144]	@ (80039cc <_svfiprintf_r+0x1e8>)
 800393a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800393e:	2206      	movs	r2, #6
 8003940:	f7fc fc56 	bl	80001f0 <memchr>
 8003944:	2800      	cmp	r0, #0
 8003946:	d036      	beq.n	80039b6 <_svfiprintf_r+0x1d2>
 8003948:	4b21      	ldr	r3, [pc, #132]	@ (80039d0 <_svfiprintf_r+0x1ec>)
 800394a:	bb1b      	cbnz	r3, 8003994 <_svfiprintf_r+0x1b0>
 800394c:	9b03      	ldr	r3, [sp, #12]
 800394e:	3307      	adds	r3, #7
 8003950:	f023 0307 	bic.w	r3, r3, #7
 8003954:	3308      	adds	r3, #8
 8003956:	9303      	str	r3, [sp, #12]
 8003958:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800395a:	4433      	add	r3, r6
 800395c:	9309      	str	r3, [sp, #36]	@ 0x24
 800395e:	e76a      	b.n	8003836 <_svfiprintf_r+0x52>
 8003960:	fb0c 3202 	mla	r2, ip, r2, r3
 8003964:	460c      	mov	r4, r1
 8003966:	2001      	movs	r0, #1
 8003968:	e7a8      	b.n	80038bc <_svfiprintf_r+0xd8>
 800396a:	2300      	movs	r3, #0
 800396c:	3401      	adds	r4, #1
 800396e:	9305      	str	r3, [sp, #20]
 8003970:	4619      	mov	r1, r3
 8003972:	f04f 0c0a 	mov.w	ip, #10
 8003976:	4620      	mov	r0, r4
 8003978:	f810 2b01 	ldrb.w	r2, [r0], #1
 800397c:	3a30      	subs	r2, #48	@ 0x30
 800397e:	2a09      	cmp	r2, #9
 8003980:	d903      	bls.n	800398a <_svfiprintf_r+0x1a6>
 8003982:	2b00      	cmp	r3, #0
 8003984:	d0c6      	beq.n	8003914 <_svfiprintf_r+0x130>
 8003986:	9105      	str	r1, [sp, #20]
 8003988:	e7c4      	b.n	8003914 <_svfiprintf_r+0x130>
 800398a:	fb0c 2101 	mla	r1, ip, r1, r2
 800398e:	4604      	mov	r4, r0
 8003990:	2301      	movs	r3, #1
 8003992:	e7f0      	b.n	8003976 <_svfiprintf_r+0x192>
 8003994:	ab03      	add	r3, sp, #12
 8003996:	9300      	str	r3, [sp, #0]
 8003998:	462a      	mov	r2, r5
 800399a:	4b0e      	ldr	r3, [pc, #56]	@ (80039d4 <_svfiprintf_r+0x1f0>)
 800399c:	a904      	add	r1, sp, #16
 800399e:	4638      	mov	r0, r7
 80039a0:	f3af 8000 	nop.w
 80039a4:	1c42      	adds	r2, r0, #1
 80039a6:	4606      	mov	r6, r0
 80039a8:	d1d6      	bne.n	8003958 <_svfiprintf_r+0x174>
 80039aa:	89ab      	ldrh	r3, [r5, #12]
 80039ac:	065b      	lsls	r3, r3, #25
 80039ae:	f53f af2d 	bmi.w	800380c <_svfiprintf_r+0x28>
 80039b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80039b4:	e72c      	b.n	8003810 <_svfiprintf_r+0x2c>
 80039b6:	ab03      	add	r3, sp, #12
 80039b8:	9300      	str	r3, [sp, #0]
 80039ba:	462a      	mov	r2, r5
 80039bc:	4b05      	ldr	r3, [pc, #20]	@ (80039d4 <_svfiprintf_r+0x1f0>)
 80039be:	a904      	add	r1, sp, #16
 80039c0:	4638      	mov	r0, r7
 80039c2:	f000 f879 	bl	8003ab8 <_printf_i>
 80039c6:	e7ed      	b.n	80039a4 <_svfiprintf_r+0x1c0>
 80039c8:	08003e28 	.word	0x08003e28
 80039cc:	08003e32 	.word	0x08003e32
 80039d0:	00000000 	.word	0x00000000
 80039d4:	0800372d 	.word	0x0800372d
 80039d8:	08003e2e 	.word	0x08003e2e

080039dc <_printf_common>:
 80039dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80039e0:	4616      	mov	r6, r2
 80039e2:	4698      	mov	r8, r3
 80039e4:	688a      	ldr	r2, [r1, #8]
 80039e6:	690b      	ldr	r3, [r1, #16]
 80039e8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80039ec:	4293      	cmp	r3, r2
 80039ee:	bfb8      	it	lt
 80039f0:	4613      	movlt	r3, r2
 80039f2:	6033      	str	r3, [r6, #0]
 80039f4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80039f8:	4607      	mov	r7, r0
 80039fa:	460c      	mov	r4, r1
 80039fc:	b10a      	cbz	r2, 8003a02 <_printf_common+0x26>
 80039fe:	3301      	adds	r3, #1
 8003a00:	6033      	str	r3, [r6, #0]
 8003a02:	6823      	ldr	r3, [r4, #0]
 8003a04:	0699      	lsls	r1, r3, #26
 8003a06:	bf42      	ittt	mi
 8003a08:	6833      	ldrmi	r3, [r6, #0]
 8003a0a:	3302      	addmi	r3, #2
 8003a0c:	6033      	strmi	r3, [r6, #0]
 8003a0e:	6825      	ldr	r5, [r4, #0]
 8003a10:	f015 0506 	ands.w	r5, r5, #6
 8003a14:	d106      	bne.n	8003a24 <_printf_common+0x48>
 8003a16:	f104 0a19 	add.w	sl, r4, #25
 8003a1a:	68e3      	ldr	r3, [r4, #12]
 8003a1c:	6832      	ldr	r2, [r6, #0]
 8003a1e:	1a9b      	subs	r3, r3, r2
 8003a20:	42ab      	cmp	r3, r5
 8003a22:	dc26      	bgt.n	8003a72 <_printf_common+0x96>
 8003a24:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003a28:	6822      	ldr	r2, [r4, #0]
 8003a2a:	3b00      	subs	r3, #0
 8003a2c:	bf18      	it	ne
 8003a2e:	2301      	movne	r3, #1
 8003a30:	0692      	lsls	r2, r2, #26
 8003a32:	d42b      	bmi.n	8003a8c <_printf_common+0xb0>
 8003a34:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003a38:	4641      	mov	r1, r8
 8003a3a:	4638      	mov	r0, r7
 8003a3c:	47c8      	blx	r9
 8003a3e:	3001      	adds	r0, #1
 8003a40:	d01e      	beq.n	8003a80 <_printf_common+0xa4>
 8003a42:	6823      	ldr	r3, [r4, #0]
 8003a44:	6922      	ldr	r2, [r4, #16]
 8003a46:	f003 0306 	and.w	r3, r3, #6
 8003a4a:	2b04      	cmp	r3, #4
 8003a4c:	bf02      	ittt	eq
 8003a4e:	68e5      	ldreq	r5, [r4, #12]
 8003a50:	6833      	ldreq	r3, [r6, #0]
 8003a52:	1aed      	subeq	r5, r5, r3
 8003a54:	68a3      	ldr	r3, [r4, #8]
 8003a56:	bf0c      	ite	eq
 8003a58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003a5c:	2500      	movne	r5, #0
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	bfc4      	itt	gt
 8003a62:	1a9b      	subgt	r3, r3, r2
 8003a64:	18ed      	addgt	r5, r5, r3
 8003a66:	2600      	movs	r6, #0
 8003a68:	341a      	adds	r4, #26
 8003a6a:	42b5      	cmp	r5, r6
 8003a6c:	d11a      	bne.n	8003aa4 <_printf_common+0xc8>
 8003a6e:	2000      	movs	r0, #0
 8003a70:	e008      	b.n	8003a84 <_printf_common+0xa8>
 8003a72:	2301      	movs	r3, #1
 8003a74:	4652      	mov	r2, sl
 8003a76:	4641      	mov	r1, r8
 8003a78:	4638      	mov	r0, r7
 8003a7a:	47c8      	blx	r9
 8003a7c:	3001      	adds	r0, #1
 8003a7e:	d103      	bne.n	8003a88 <_printf_common+0xac>
 8003a80:	f04f 30ff 	mov.w	r0, #4294967295
 8003a84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a88:	3501      	adds	r5, #1
 8003a8a:	e7c6      	b.n	8003a1a <_printf_common+0x3e>
 8003a8c:	18e1      	adds	r1, r4, r3
 8003a8e:	1c5a      	adds	r2, r3, #1
 8003a90:	2030      	movs	r0, #48	@ 0x30
 8003a92:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003a96:	4422      	add	r2, r4
 8003a98:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003a9c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003aa0:	3302      	adds	r3, #2
 8003aa2:	e7c7      	b.n	8003a34 <_printf_common+0x58>
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	4622      	mov	r2, r4
 8003aa8:	4641      	mov	r1, r8
 8003aaa:	4638      	mov	r0, r7
 8003aac:	47c8      	blx	r9
 8003aae:	3001      	adds	r0, #1
 8003ab0:	d0e6      	beq.n	8003a80 <_printf_common+0xa4>
 8003ab2:	3601      	adds	r6, #1
 8003ab4:	e7d9      	b.n	8003a6a <_printf_common+0x8e>
	...

08003ab8 <_printf_i>:
 8003ab8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003abc:	7e0f      	ldrb	r7, [r1, #24]
 8003abe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003ac0:	2f78      	cmp	r7, #120	@ 0x78
 8003ac2:	4691      	mov	r9, r2
 8003ac4:	4680      	mov	r8, r0
 8003ac6:	460c      	mov	r4, r1
 8003ac8:	469a      	mov	sl, r3
 8003aca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003ace:	d807      	bhi.n	8003ae0 <_printf_i+0x28>
 8003ad0:	2f62      	cmp	r7, #98	@ 0x62
 8003ad2:	d80a      	bhi.n	8003aea <_printf_i+0x32>
 8003ad4:	2f00      	cmp	r7, #0
 8003ad6:	f000 80d2 	beq.w	8003c7e <_printf_i+0x1c6>
 8003ada:	2f58      	cmp	r7, #88	@ 0x58
 8003adc:	f000 80b9 	beq.w	8003c52 <_printf_i+0x19a>
 8003ae0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003ae4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003ae8:	e03a      	b.n	8003b60 <_printf_i+0xa8>
 8003aea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003aee:	2b15      	cmp	r3, #21
 8003af0:	d8f6      	bhi.n	8003ae0 <_printf_i+0x28>
 8003af2:	a101      	add	r1, pc, #4	@ (adr r1, 8003af8 <_printf_i+0x40>)
 8003af4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003af8:	08003b51 	.word	0x08003b51
 8003afc:	08003b65 	.word	0x08003b65
 8003b00:	08003ae1 	.word	0x08003ae1
 8003b04:	08003ae1 	.word	0x08003ae1
 8003b08:	08003ae1 	.word	0x08003ae1
 8003b0c:	08003ae1 	.word	0x08003ae1
 8003b10:	08003b65 	.word	0x08003b65
 8003b14:	08003ae1 	.word	0x08003ae1
 8003b18:	08003ae1 	.word	0x08003ae1
 8003b1c:	08003ae1 	.word	0x08003ae1
 8003b20:	08003ae1 	.word	0x08003ae1
 8003b24:	08003c65 	.word	0x08003c65
 8003b28:	08003b8f 	.word	0x08003b8f
 8003b2c:	08003c1f 	.word	0x08003c1f
 8003b30:	08003ae1 	.word	0x08003ae1
 8003b34:	08003ae1 	.word	0x08003ae1
 8003b38:	08003c87 	.word	0x08003c87
 8003b3c:	08003ae1 	.word	0x08003ae1
 8003b40:	08003b8f 	.word	0x08003b8f
 8003b44:	08003ae1 	.word	0x08003ae1
 8003b48:	08003ae1 	.word	0x08003ae1
 8003b4c:	08003c27 	.word	0x08003c27
 8003b50:	6833      	ldr	r3, [r6, #0]
 8003b52:	1d1a      	adds	r2, r3, #4
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	6032      	str	r2, [r6, #0]
 8003b58:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003b5c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003b60:	2301      	movs	r3, #1
 8003b62:	e09d      	b.n	8003ca0 <_printf_i+0x1e8>
 8003b64:	6833      	ldr	r3, [r6, #0]
 8003b66:	6820      	ldr	r0, [r4, #0]
 8003b68:	1d19      	adds	r1, r3, #4
 8003b6a:	6031      	str	r1, [r6, #0]
 8003b6c:	0606      	lsls	r6, r0, #24
 8003b6e:	d501      	bpl.n	8003b74 <_printf_i+0xbc>
 8003b70:	681d      	ldr	r5, [r3, #0]
 8003b72:	e003      	b.n	8003b7c <_printf_i+0xc4>
 8003b74:	0645      	lsls	r5, r0, #25
 8003b76:	d5fb      	bpl.n	8003b70 <_printf_i+0xb8>
 8003b78:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003b7c:	2d00      	cmp	r5, #0
 8003b7e:	da03      	bge.n	8003b88 <_printf_i+0xd0>
 8003b80:	232d      	movs	r3, #45	@ 0x2d
 8003b82:	426d      	negs	r5, r5
 8003b84:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003b88:	4859      	ldr	r0, [pc, #356]	@ (8003cf0 <_printf_i+0x238>)
 8003b8a:	230a      	movs	r3, #10
 8003b8c:	e011      	b.n	8003bb2 <_printf_i+0xfa>
 8003b8e:	6821      	ldr	r1, [r4, #0]
 8003b90:	6833      	ldr	r3, [r6, #0]
 8003b92:	0608      	lsls	r0, r1, #24
 8003b94:	f853 5b04 	ldr.w	r5, [r3], #4
 8003b98:	d402      	bmi.n	8003ba0 <_printf_i+0xe8>
 8003b9a:	0649      	lsls	r1, r1, #25
 8003b9c:	bf48      	it	mi
 8003b9e:	b2ad      	uxthmi	r5, r5
 8003ba0:	2f6f      	cmp	r7, #111	@ 0x6f
 8003ba2:	4853      	ldr	r0, [pc, #332]	@ (8003cf0 <_printf_i+0x238>)
 8003ba4:	6033      	str	r3, [r6, #0]
 8003ba6:	bf14      	ite	ne
 8003ba8:	230a      	movne	r3, #10
 8003baa:	2308      	moveq	r3, #8
 8003bac:	2100      	movs	r1, #0
 8003bae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003bb2:	6866      	ldr	r6, [r4, #4]
 8003bb4:	60a6      	str	r6, [r4, #8]
 8003bb6:	2e00      	cmp	r6, #0
 8003bb8:	bfa2      	ittt	ge
 8003bba:	6821      	ldrge	r1, [r4, #0]
 8003bbc:	f021 0104 	bicge.w	r1, r1, #4
 8003bc0:	6021      	strge	r1, [r4, #0]
 8003bc2:	b90d      	cbnz	r5, 8003bc8 <_printf_i+0x110>
 8003bc4:	2e00      	cmp	r6, #0
 8003bc6:	d04b      	beq.n	8003c60 <_printf_i+0x1a8>
 8003bc8:	4616      	mov	r6, r2
 8003bca:	fbb5 f1f3 	udiv	r1, r5, r3
 8003bce:	fb03 5711 	mls	r7, r3, r1, r5
 8003bd2:	5dc7      	ldrb	r7, [r0, r7]
 8003bd4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003bd8:	462f      	mov	r7, r5
 8003bda:	42bb      	cmp	r3, r7
 8003bdc:	460d      	mov	r5, r1
 8003bde:	d9f4      	bls.n	8003bca <_printf_i+0x112>
 8003be0:	2b08      	cmp	r3, #8
 8003be2:	d10b      	bne.n	8003bfc <_printf_i+0x144>
 8003be4:	6823      	ldr	r3, [r4, #0]
 8003be6:	07df      	lsls	r7, r3, #31
 8003be8:	d508      	bpl.n	8003bfc <_printf_i+0x144>
 8003bea:	6923      	ldr	r3, [r4, #16]
 8003bec:	6861      	ldr	r1, [r4, #4]
 8003bee:	4299      	cmp	r1, r3
 8003bf0:	bfde      	ittt	le
 8003bf2:	2330      	movle	r3, #48	@ 0x30
 8003bf4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003bf8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003bfc:	1b92      	subs	r2, r2, r6
 8003bfe:	6122      	str	r2, [r4, #16]
 8003c00:	f8cd a000 	str.w	sl, [sp]
 8003c04:	464b      	mov	r3, r9
 8003c06:	aa03      	add	r2, sp, #12
 8003c08:	4621      	mov	r1, r4
 8003c0a:	4640      	mov	r0, r8
 8003c0c:	f7ff fee6 	bl	80039dc <_printf_common>
 8003c10:	3001      	adds	r0, #1
 8003c12:	d14a      	bne.n	8003caa <_printf_i+0x1f2>
 8003c14:	f04f 30ff 	mov.w	r0, #4294967295
 8003c18:	b004      	add	sp, #16
 8003c1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c1e:	6823      	ldr	r3, [r4, #0]
 8003c20:	f043 0320 	orr.w	r3, r3, #32
 8003c24:	6023      	str	r3, [r4, #0]
 8003c26:	4833      	ldr	r0, [pc, #204]	@ (8003cf4 <_printf_i+0x23c>)
 8003c28:	2778      	movs	r7, #120	@ 0x78
 8003c2a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003c2e:	6823      	ldr	r3, [r4, #0]
 8003c30:	6831      	ldr	r1, [r6, #0]
 8003c32:	061f      	lsls	r7, r3, #24
 8003c34:	f851 5b04 	ldr.w	r5, [r1], #4
 8003c38:	d402      	bmi.n	8003c40 <_printf_i+0x188>
 8003c3a:	065f      	lsls	r7, r3, #25
 8003c3c:	bf48      	it	mi
 8003c3e:	b2ad      	uxthmi	r5, r5
 8003c40:	6031      	str	r1, [r6, #0]
 8003c42:	07d9      	lsls	r1, r3, #31
 8003c44:	bf44      	itt	mi
 8003c46:	f043 0320 	orrmi.w	r3, r3, #32
 8003c4a:	6023      	strmi	r3, [r4, #0]
 8003c4c:	b11d      	cbz	r5, 8003c56 <_printf_i+0x19e>
 8003c4e:	2310      	movs	r3, #16
 8003c50:	e7ac      	b.n	8003bac <_printf_i+0xf4>
 8003c52:	4827      	ldr	r0, [pc, #156]	@ (8003cf0 <_printf_i+0x238>)
 8003c54:	e7e9      	b.n	8003c2a <_printf_i+0x172>
 8003c56:	6823      	ldr	r3, [r4, #0]
 8003c58:	f023 0320 	bic.w	r3, r3, #32
 8003c5c:	6023      	str	r3, [r4, #0]
 8003c5e:	e7f6      	b.n	8003c4e <_printf_i+0x196>
 8003c60:	4616      	mov	r6, r2
 8003c62:	e7bd      	b.n	8003be0 <_printf_i+0x128>
 8003c64:	6833      	ldr	r3, [r6, #0]
 8003c66:	6825      	ldr	r5, [r4, #0]
 8003c68:	6961      	ldr	r1, [r4, #20]
 8003c6a:	1d18      	adds	r0, r3, #4
 8003c6c:	6030      	str	r0, [r6, #0]
 8003c6e:	062e      	lsls	r6, r5, #24
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	d501      	bpl.n	8003c78 <_printf_i+0x1c0>
 8003c74:	6019      	str	r1, [r3, #0]
 8003c76:	e002      	b.n	8003c7e <_printf_i+0x1c6>
 8003c78:	0668      	lsls	r0, r5, #25
 8003c7a:	d5fb      	bpl.n	8003c74 <_printf_i+0x1bc>
 8003c7c:	8019      	strh	r1, [r3, #0]
 8003c7e:	2300      	movs	r3, #0
 8003c80:	6123      	str	r3, [r4, #16]
 8003c82:	4616      	mov	r6, r2
 8003c84:	e7bc      	b.n	8003c00 <_printf_i+0x148>
 8003c86:	6833      	ldr	r3, [r6, #0]
 8003c88:	1d1a      	adds	r2, r3, #4
 8003c8a:	6032      	str	r2, [r6, #0]
 8003c8c:	681e      	ldr	r6, [r3, #0]
 8003c8e:	6862      	ldr	r2, [r4, #4]
 8003c90:	2100      	movs	r1, #0
 8003c92:	4630      	mov	r0, r6
 8003c94:	f7fc faac 	bl	80001f0 <memchr>
 8003c98:	b108      	cbz	r0, 8003c9e <_printf_i+0x1e6>
 8003c9a:	1b80      	subs	r0, r0, r6
 8003c9c:	6060      	str	r0, [r4, #4]
 8003c9e:	6863      	ldr	r3, [r4, #4]
 8003ca0:	6123      	str	r3, [r4, #16]
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003ca8:	e7aa      	b.n	8003c00 <_printf_i+0x148>
 8003caa:	6923      	ldr	r3, [r4, #16]
 8003cac:	4632      	mov	r2, r6
 8003cae:	4649      	mov	r1, r9
 8003cb0:	4640      	mov	r0, r8
 8003cb2:	47d0      	blx	sl
 8003cb4:	3001      	adds	r0, #1
 8003cb6:	d0ad      	beq.n	8003c14 <_printf_i+0x15c>
 8003cb8:	6823      	ldr	r3, [r4, #0]
 8003cba:	079b      	lsls	r3, r3, #30
 8003cbc:	d413      	bmi.n	8003ce6 <_printf_i+0x22e>
 8003cbe:	68e0      	ldr	r0, [r4, #12]
 8003cc0:	9b03      	ldr	r3, [sp, #12]
 8003cc2:	4298      	cmp	r0, r3
 8003cc4:	bfb8      	it	lt
 8003cc6:	4618      	movlt	r0, r3
 8003cc8:	e7a6      	b.n	8003c18 <_printf_i+0x160>
 8003cca:	2301      	movs	r3, #1
 8003ccc:	4632      	mov	r2, r6
 8003cce:	4649      	mov	r1, r9
 8003cd0:	4640      	mov	r0, r8
 8003cd2:	47d0      	blx	sl
 8003cd4:	3001      	adds	r0, #1
 8003cd6:	d09d      	beq.n	8003c14 <_printf_i+0x15c>
 8003cd8:	3501      	adds	r5, #1
 8003cda:	68e3      	ldr	r3, [r4, #12]
 8003cdc:	9903      	ldr	r1, [sp, #12]
 8003cde:	1a5b      	subs	r3, r3, r1
 8003ce0:	42ab      	cmp	r3, r5
 8003ce2:	dcf2      	bgt.n	8003cca <_printf_i+0x212>
 8003ce4:	e7eb      	b.n	8003cbe <_printf_i+0x206>
 8003ce6:	2500      	movs	r5, #0
 8003ce8:	f104 0619 	add.w	r6, r4, #25
 8003cec:	e7f5      	b.n	8003cda <_printf_i+0x222>
 8003cee:	bf00      	nop
 8003cf0:	08003e39 	.word	0x08003e39
 8003cf4:	08003e4a 	.word	0x08003e4a

08003cf8 <memmove>:
 8003cf8:	4288      	cmp	r0, r1
 8003cfa:	b510      	push	{r4, lr}
 8003cfc:	eb01 0402 	add.w	r4, r1, r2
 8003d00:	d902      	bls.n	8003d08 <memmove+0x10>
 8003d02:	4284      	cmp	r4, r0
 8003d04:	4623      	mov	r3, r4
 8003d06:	d807      	bhi.n	8003d18 <memmove+0x20>
 8003d08:	1e43      	subs	r3, r0, #1
 8003d0a:	42a1      	cmp	r1, r4
 8003d0c:	d008      	beq.n	8003d20 <memmove+0x28>
 8003d0e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003d12:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003d16:	e7f8      	b.n	8003d0a <memmove+0x12>
 8003d18:	4402      	add	r2, r0
 8003d1a:	4601      	mov	r1, r0
 8003d1c:	428a      	cmp	r2, r1
 8003d1e:	d100      	bne.n	8003d22 <memmove+0x2a>
 8003d20:	bd10      	pop	{r4, pc}
 8003d22:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003d26:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003d2a:	e7f7      	b.n	8003d1c <memmove+0x24>

08003d2c <_sbrk_r>:
 8003d2c:	b538      	push	{r3, r4, r5, lr}
 8003d2e:	4d06      	ldr	r5, [pc, #24]	@ (8003d48 <_sbrk_r+0x1c>)
 8003d30:	2300      	movs	r3, #0
 8003d32:	4604      	mov	r4, r0
 8003d34:	4608      	mov	r0, r1
 8003d36:	602b      	str	r3, [r5, #0]
 8003d38:	f7fc fe9a 	bl	8000a70 <_sbrk>
 8003d3c:	1c43      	adds	r3, r0, #1
 8003d3e:	d102      	bne.n	8003d46 <_sbrk_r+0x1a>
 8003d40:	682b      	ldr	r3, [r5, #0]
 8003d42:	b103      	cbz	r3, 8003d46 <_sbrk_r+0x1a>
 8003d44:	6023      	str	r3, [r4, #0]
 8003d46:	bd38      	pop	{r3, r4, r5, pc}
 8003d48:	20000254 	.word	0x20000254

08003d4c <memcpy>:
 8003d4c:	440a      	add	r2, r1
 8003d4e:	4291      	cmp	r1, r2
 8003d50:	f100 33ff 	add.w	r3, r0, #4294967295
 8003d54:	d100      	bne.n	8003d58 <memcpy+0xc>
 8003d56:	4770      	bx	lr
 8003d58:	b510      	push	{r4, lr}
 8003d5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003d5e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003d62:	4291      	cmp	r1, r2
 8003d64:	d1f9      	bne.n	8003d5a <memcpy+0xe>
 8003d66:	bd10      	pop	{r4, pc}

08003d68 <_realloc_r>:
 8003d68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d6c:	4680      	mov	r8, r0
 8003d6e:	4615      	mov	r5, r2
 8003d70:	460c      	mov	r4, r1
 8003d72:	b921      	cbnz	r1, 8003d7e <_realloc_r+0x16>
 8003d74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003d78:	4611      	mov	r1, r2
 8003d7a:	f7ff bc4b 	b.w	8003614 <_malloc_r>
 8003d7e:	b92a      	cbnz	r2, 8003d8c <_realloc_r+0x24>
 8003d80:	f7ff fbdc 	bl	800353c <_free_r>
 8003d84:	2400      	movs	r4, #0
 8003d86:	4620      	mov	r0, r4
 8003d88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003d8c:	f000 f81a 	bl	8003dc4 <_malloc_usable_size_r>
 8003d90:	4285      	cmp	r5, r0
 8003d92:	4606      	mov	r6, r0
 8003d94:	d802      	bhi.n	8003d9c <_realloc_r+0x34>
 8003d96:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8003d9a:	d8f4      	bhi.n	8003d86 <_realloc_r+0x1e>
 8003d9c:	4629      	mov	r1, r5
 8003d9e:	4640      	mov	r0, r8
 8003da0:	f7ff fc38 	bl	8003614 <_malloc_r>
 8003da4:	4607      	mov	r7, r0
 8003da6:	2800      	cmp	r0, #0
 8003da8:	d0ec      	beq.n	8003d84 <_realloc_r+0x1c>
 8003daa:	42b5      	cmp	r5, r6
 8003dac:	462a      	mov	r2, r5
 8003dae:	4621      	mov	r1, r4
 8003db0:	bf28      	it	cs
 8003db2:	4632      	movcs	r2, r6
 8003db4:	f7ff ffca 	bl	8003d4c <memcpy>
 8003db8:	4621      	mov	r1, r4
 8003dba:	4640      	mov	r0, r8
 8003dbc:	f7ff fbbe 	bl	800353c <_free_r>
 8003dc0:	463c      	mov	r4, r7
 8003dc2:	e7e0      	b.n	8003d86 <_realloc_r+0x1e>

08003dc4 <_malloc_usable_size_r>:
 8003dc4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003dc8:	1f18      	subs	r0, r3, #4
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	bfbc      	itt	lt
 8003dce:	580b      	ldrlt	r3, [r1, r0]
 8003dd0:	18c0      	addlt	r0, r0, r3
 8003dd2:	4770      	bx	lr

08003dd4 <_init>:
 8003dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dd6:	bf00      	nop
 8003dd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dda:	bc08      	pop	{r3}
 8003ddc:	469e      	mov	lr, r3
 8003dde:	4770      	bx	lr

08003de0 <_fini>:
 8003de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003de2:	bf00      	nop
 8003de4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003de6:	bc08      	pop	{r3}
 8003de8:	469e      	mov	lr, r3
 8003dea:	4770      	bx	lr
