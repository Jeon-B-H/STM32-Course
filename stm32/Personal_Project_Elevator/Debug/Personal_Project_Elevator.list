
Personal_Project_Elevator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006044  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  080061e4  080061e4  000071e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080062c4  080062c4  00008064  2**0
                  CONTENTS
  4 .ARM          00000008  080062c4  080062c4  000072c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080062cc  080062cc  00008064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080062cc  080062cc  000072cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080062d0  080062d0  000072d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  080062d4  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004cb0  20000064  08006338  00008064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004d14  08006338  00008d14  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008064  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001922e  00000000  00000000  00008094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003be3  00000000  00000000  000212c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001518  00000000  00000000  00024ea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000104b  00000000  00000000  000263c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019a06  00000000  00000000  0002740b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019ede  00000000  00000000  00040e11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098ee0  00000000  00000000  0005acef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f3bcf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a10  00000000  00000000  000f3c14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000f9624  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000064 	.word	0x20000064
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080061cc 	.word	0x080061cc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000068 	.word	0x20000068
 80001dc:	080061cc 	.word	0x080061cc

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b96a 	b.w	80004cc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	460c      	mov	r4, r1
 8000218:	2b00      	cmp	r3, #0
 800021a:	d14e      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021c:	4694      	mov	ip, r2
 800021e:	458c      	cmp	ip, r1
 8000220:	4686      	mov	lr, r0
 8000222:	fab2 f282 	clz	r2, r2
 8000226:	d962      	bls.n	80002ee <__udivmoddi4+0xde>
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0320 	rsb	r3, r2, #32
 800022e:	4091      	lsls	r1, r2
 8000230:	fa20 f303 	lsr.w	r3, r0, r3
 8000234:	fa0c fc02 	lsl.w	ip, ip, r2
 8000238:	4319      	orrs	r1, r3
 800023a:	fa00 fe02 	lsl.w	lr, r0, r2
 800023e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000242:	fa1f f68c 	uxth.w	r6, ip
 8000246:	fbb1 f4f7 	udiv	r4, r1, r7
 800024a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800024e:	fb07 1114 	mls	r1, r7, r4, r1
 8000252:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000256:	fb04 f106 	mul.w	r1, r4, r6
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f104 30ff 	add.w	r0, r4, #4294967295
 8000266:	f080 8112 	bcs.w	800048e <__udivmoddi4+0x27e>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 810f 	bls.w	800048e <__udivmoddi4+0x27e>
 8000270:	3c02      	subs	r4, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a59      	subs	r1, r3, r1
 8000276:	fa1f f38e 	uxth.w	r3, lr
 800027a:	fbb1 f0f7 	udiv	r0, r1, r7
 800027e:	fb07 1110 	mls	r1, r7, r0, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb00 f606 	mul.w	r6, r0, r6
 800028a:	429e      	cmp	r6, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x94>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f100 31ff 	add.w	r1, r0, #4294967295
 8000296:	f080 80fc 	bcs.w	8000492 <__udivmoddi4+0x282>
 800029a:	429e      	cmp	r6, r3
 800029c:	f240 80f9 	bls.w	8000492 <__udivmoddi4+0x282>
 80002a0:	4463      	add	r3, ip
 80002a2:	3802      	subs	r0, #2
 80002a4:	1b9b      	subs	r3, r3, r6
 80002a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002aa:	2100      	movs	r1, #0
 80002ac:	b11d      	cbz	r5, 80002b6 <__udivmoddi4+0xa6>
 80002ae:	40d3      	lsrs	r3, r2
 80002b0:	2200      	movs	r2, #0
 80002b2:	e9c5 3200 	strd	r3, r2, [r5]
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d905      	bls.n	80002ca <__udivmoddi4+0xba>
 80002be:	b10d      	cbz	r5, 80002c4 <__udivmoddi4+0xb4>
 80002c0:	e9c5 0100 	strd	r0, r1, [r5]
 80002c4:	2100      	movs	r1, #0
 80002c6:	4608      	mov	r0, r1
 80002c8:	e7f5      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ca:	fab3 f183 	clz	r1, r3
 80002ce:	2900      	cmp	r1, #0
 80002d0:	d146      	bne.n	8000360 <__udivmoddi4+0x150>
 80002d2:	42a3      	cmp	r3, r4
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xcc>
 80002d6:	4290      	cmp	r0, r2
 80002d8:	f0c0 80f0 	bcc.w	80004bc <__udivmoddi4+0x2ac>
 80002dc:	1a86      	subs	r6, r0, r2
 80002de:	eb64 0303 	sbc.w	r3, r4, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	2d00      	cmp	r5, #0
 80002e6:	d0e6      	beq.n	80002b6 <__udivmoddi4+0xa6>
 80002e8:	e9c5 6300 	strd	r6, r3, [r5]
 80002ec:	e7e3      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x204>
 80002f4:	eba1 040c 	sub.w	r4, r1, ip
 80002f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002fc:	fa1f f78c 	uxth.w	r7, ip
 8000300:	2101      	movs	r1, #1
 8000302:	fbb4 f6f8 	udiv	r6, r4, r8
 8000306:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030a:	fb08 4416 	mls	r4, r8, r6, r4
 800030e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000312:	fb07 f006 	mul.w	r0, r7, r6
 8000316:	4298      	cmp	r0, r3
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x11c>
 800031a:	eb1c 0303 	adds.w	r3, ip, r3
 800031e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x11a>
 8000324:	4298      	cmp	r0, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 800032a:	4626      	mov	r6, r4
 800032c:	1a1c      	subs	r4, r3, r0
 800032e:	fa1f f38e 	uxth.w	r3, lr
 8000332:	fbb4 f0f8 	udiv	r0, r4, r8
 8000336:	fb08 4410 	mls	r4, r8, r0, r4
 800033a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033e:	fb00 f707 	mul.w	r7, r0, r7
 8000342:	429f      	cmp	r7, r3
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x148>
 8000346:	eb1c 0303 	adds.w	r3, ip, r3
 800034a:	f100 34ff 	add.w	r4, r0, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x146>
 8000350:	429f      	cmp	r7, r3
 8000352:	f200 80b0 	bhi.w	80004b6 <__udivmoddi4+0x2a6>
 8000356:	4620      	mov	r0, r4
 8000358:	1bdb      	subs	r3, r3, r7
 800035a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800035e:	e7a5      	b.n	80002ac <__udivmoddi4+0x9c>
 8000360:	f1c1 0620 	rsb	r6, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 f706 	lsr.w	r7, r2, r6
 800036a:	431f      	orrs	r7, r3
 800036c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000370:	fa04 f301 	lsl.w	r3, r4, r1
 8000374:	ea43 030c 	orr.w	r3, r3, ip
 8000378:	40f4      	lsrs	r4, r6
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	0c38      	lsrs	r0, r7, #16
 8000380:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000384:	fbb4 fef0 	udiv	lr, r4, r0
 8000388:	fa1f fc87 	uxth.w	ip, r7
 800038c:	fb00 441e 	mls	r4, r0, lr, r4
 8000390:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000394:	fb0e f90c 	mul.w	r9, lr, ip
 8000398:	45a1      	cmp	r9, r4
 800039a:	fa02 f201 	lsl.w	r2, r2, r1
 800039e:	d90a      	bls.n	80003b6 <__udivmoddi4+0x1a6>
 80003a0:	193c      	adds	r4, r7, r4
 80003a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003a6:	f080 8084 	bcs.w	80004b2 <__udivmoddi4+0x2a2>
 80003aa:	45a1      	cmp	r9, r4
 80003ac:	f240 8081 	bls.w	80004b2 <__udivmoddi4+0x2a2>
 80003b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003b4:	443c      	add	r4, r7
 80003b6:	eba4 0409 	sub.w	r4, r4, r9
 80003ba:	fa1f f983 	uxth.w	r9, r3
 80003be:	fbb4 f3f0 	udiv	r3, r4, r0
 80003c2:	fb00 4413 	mls	r4, r0, r3, r4
 80003c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d907      	bls.n	80003e2 <__udivmoddi4+0x1d2>
 80003d2:	193c      	adds	r4, r7, r4
 80003d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d8:	d267      	bcs.n	80004aa <__udivmoddi4+0x29a>
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d965      	bls.n	80004aa <__udivmoddi4+0x29a>
 80003de:	3b02      	subs	r3, #2
 80003e0:	443c      	add	r4, r7
 80003e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003e6:	fba0 9302 	umull	r9, r3, r0, r2
 80003ea:	eba4 040c 	sub.w	r4, r4, ip
 80003ee:	429c      	cmp	r4, r3
 80003f0:	46ce      	mov	lr, r9
 80003f2:	469c      	mov	ip, r3
 80003f4:	d351      	bcc.n	800049a <__udivmoddi4+0x28a>
 80003f6:	d04e      	beq.n	8000496 <__udivmoddi4+0x286>
 80003f8:	b155      	cbz	r5, 8000410 <__udivmoddi4+0x200>
 80003fa:	ebb8 030e 	subs.w	r3, r8, lr
 80003fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000402:	fa04 f606 	lsl.w	r6, r4, r6
 8000406:	40cb      	lsrs	r3, r1
 8000408:	431e      	orrs	r6, r3
 800040a:	40cc      	lsrs	r4, r1
 800040c:	e9c5 6400 	strd	r6, r4, [r5]
 8000410:	2100      	movs	r1, #0
 8000412:	e750      	b.n	80002b6 <__udivmoddi4+0xa6>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f103 	lsr.w	r1, r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa24 f303 	lsr.w	r3, r4, r3
 8000424:	4094      	lsls	r4, r2
 8000426:	430c      	orrs	r4, r1
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000430:	fa1f f78c 	uxth.w	r7, ip
 8000434:	fbb3 f0f8 	udiv	r0, r3, r8
 8000438:	fb08 3110 	mls	r1, r8, r0, r3
 800043c:	0c23      	lsrs	r3, r4, #16
 800043e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000442:	fb00 f107 	mul.w	r1, r0, r7
 8000446:	4299      	cmp	r1, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x24c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000452:	d22c      	bcs.n	80004ae <__udivmoddi4+0x29e>
 8000454:	4299      	cmp	r1, r3
 8000456:	d92a      	bls.n	80004ae <__udivmoddi4+0x29e>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b2a4      	uxth	r4, r4
 8000460:	fbb3 f1f8 	udiv	r1, r3, r8
 8000464:	fb08 3311 	mls	r3, r8, r1, r3
 8000468:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800046c:	fb01 f307 	mul.w	r3, r1, r7
 8000470:	42a3      	cmp	r3, r4
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x276>
 8000474:	eb1c 0404 	adds.w	r4, ip, r4
 8000478:	f101 36ff 	add.w	r6, r1, #4294967295
 800047c:	d213      	bcs.n	80004a6 <__udivmoddi4+0x296>
 800047e:	42a3      	cmp	r3, r4
 8000480:	d911      	bls.n	80004a6 <__udivmoddi4+0x296>
 8000482:	3902      	subs	r1, #2
 8000484:	4464      	add	r4, ip
 8000486:	1ae4      	subs	r4, r4, r3
 8000488:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800048c:	e739      	b.n	8000302 <__udivmoddi4+0xf2>
 800048e:	4604      	mov	r4, r0
 8000490:	e6f0      	b.n	8000274 <__udivmoddi4+0x64>
 8000492:	4608      	mov	r0, r1
 8000494:	e706      	b.n	80002a4 <__udivmoddi4+0x94>
 8000496:	45c8      	cmp	r8, r9
 8000498:	d2ae      	bcs.n	80003f8 <__udivmoddi4+0x1e8>
 800049a:	ebb9 0e02 	subs.w	lr, r9, r2
 800049e:	eb63 0c07 	sbc.w	ip, r3, r7
 80004a2:	3801      	subs	r0, #1
 80004a4:	e7a8      	b.n	80003f8 <__udivmoddi4+0x1e8>
 80004a6:	4631      	mov	r1, r6
 80004a8:	e7ed      	b.n	8000486 <__udivmoddi4+0x276>
 80004aa:	4603      	mov	r3, r0
 80004ac:	e799      	b.n	80003e2 <__udivmoddi4+0x1d2>
 80004ae:	4630      	mov	r0, r6
 80004b0:	e7d4      	b.n	800045c <__udivmoddi4+0x24c>
 80004b2:	46d6      	mov	lr, sl
 80004b4:	e77f      	b.n	80003b6 <__udivmoddi4+0x1a6>
 80004b6:	4463      	add	r3, ip
 80004b8:	3802      	subs	r0, #2
 80004ba:	e74d      	b.n	8000358 <__udivmoddi4+0x148>
 80004bc:	4606      	mov	r6, r0
 80004be:	4623      	mov	r3, r4
 80004c0:	4608      	mov	r0, r1
 80004c2:	e70f      	b.n	80002e4 <__udivmoddi4+0xd4>
 80004c4:	3e02      	subs	r6, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	e730      	b.n	800032c <__udivmoddi4+0x11c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80004d6:	2300      	movs	r3, #0
 80004d8:	607b      	str	r3, [r7, #4]
 80004da:	4b10      	ldr	r3, [pc, #64]	@ (800051c <MX_DMA_Init+0x4c>)
 80004dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004de:	4a0f      	ldr	r2, [pc, #60]	@ (800051c <MX_DMA_Init+0x4c>)
 80004e0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80004e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80004e6:	4b0d      	ldr	r3, [pc, #52]	@ (800051c <MX_DMA_Init+0x4c>)
 80004e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80004ee:	607b      	str	r3, [r7, #4]
 80004f0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 80004f2:	2200      	movs	r2, #0
 80004f4:	2105      	movs	r1, #5
 80004f6:	203a      	movs	r0, #58	@ 0x3a
 80004f8:	f000 fcf2 	bl	8000ee0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80004fc:	203a      	movs	r0, #58	@ 0x3a
 80004fe:	f000 fd0b 	bl	8000f18 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8000502:	2200      	movs	r2, #0
 8000504:	2105      	movs	r1, #5
 8000506:	2046      	movs	r0, #70	@ 0x46
 8000508:	f000 fcea 	bl	8000ee0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 800050c:	2046      	movs	r0, #70	@ 0x46
 800050e:	f000 fd03 	bl	8000f18 <HAL_NVIC_EnableIRQ>

}
 8000512:	bf00      	nop
 8000514:	3708      	adds	r7, #8
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}
 800051a:	bf00      	nop
 800051c:	40023800 	.word	0x40023800

08000520 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000524:	4a0c      	ldr	r2, [pc, #48]	@ (8000558 <MX_FREERTOS_Init+0x38>)
 8000526:	2100      	movs	r1, #0
 8000528:	480c      	ldr	r0, [pc, #48]	@ (800055c <MX_FREERTOS_Init+0x3c>)
 800052a:	f002 ff2d 	bl	8003388 <osThreadNew>
 800052e:	4603      	mov	r3, r0
 8000530:	4a0b      	ldr	r2, [pc, #44]	@ (8000560 <MX_FREERTOS_Init+0x40>)
 8000532:	6013      	str	r3, [r2, #0]

  /* creation of Senseor */
  SenseorHandle = osThreadNew(StartTask02, NULL, &Senseor_attributes);
 8000534:	4a0b      	ldr	r2, [pc, #44]	@ (8000564 <MX_FREERTOS_Init+0x44>)
 8000536:	2100      	movs	r1, #0
 8000538:	480b      	ldr	r0, [pc, #44]	@ (8000568 <MX_FREERTOS_Init+0x48>)
 800053a:	f002 ff25 	bl	8003388 <osThreadNew>
 800053e:	4603      	mov	r3, r0
 8000540:	4a0a      	ldr	r2, [pc, #40]	@ (800056c <MX_FREERTOS_Init+0x4c>)
 8000542:	6013      	str	r3, [r2, #0]

  /* creation of Motor */
  MotorHandle = osThreadNew(StartTask03, NULL, &Motor_attributes);
 8000544:	4a0a      	ldr	r2, [pc, #40]	@ (8000570 <MX_FREERTOS_Init+0x50>)
 8000546:	2100      	movs	r1, #0
 8000548:	480a      	ldr	r0, [pc, #40]	@ (8000574 <MX_FREERTOS_Init+0x54>)
 800054a:	f002 ff1d 	bl	8003388 <osThreadNew>
 800054e:	4603      	mov	r3, r0
 8000550:	4a09      	ldr	r2, [pc, #36]	@ (8000578 <MX_FREERTOS_Init+0x58>)
 8000552:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000554:	bf00      	nop
 8000556:	bd80      	pop	{r7, pc}
 8000558:	08006238 	.word	0x08006238
 800055c:	0800057d 	.word	0x0800057d
 8000560:	20000084 	.word	0x20000084
 8000564:	0800625c 	.word	0x0800625c
 8000568:	0800058d 	.word	0x0800058d
 800056c:	20000088 	.word	0x20000088
 8000570:	08006280 	.word	0x08006280
 8000574:	08000609 	.word	0x08000609
 8000578:	2000008c 	.word	0x2000008c

0800057c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {

    osDelay(1);
 8000584:	2001      	movs	r0, #1
 8000586:	f002 ff91 	bl	80034ac <osDelay>
 800058a:	e7fb      	b.n	8000584 <StartDefaultTask+0x8>

0800058c <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	  if(0 < target_floor && target_floor < 4) {
 8000594:	4b19      	ldr	r3, [pc, #100]	@ (80005fc <StartTask02+0x70>)
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	2b00      	cmp	r3, #0
 800059a:	d02a      	beq.n	80005f2 <StartTask02+0x66>
 800059c:	4b17      	ldr	r3, [pc, #92]	@ (80005fc <StartTask02+0x70>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	2b03      	cmp	r3, #3
 80005a2:	d826      	bhi.n	80005f2 <StartTask02+0x66>
		  switch(target_floor) {
 80005a4:	4b15      	ldr	r3, [pc, #84]	@ (80005fc <StartTask02+0x70>)
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	2b03      	cmp	r3, #3
 80005aa:	d019      	beq.n	80005e0 <StartTask02+0x54>
 80005ac:	2b03      	cmp	r3, #3
 80005ae:	dc20      	bgt.n	80005f2 <StartTask02+0x66>
 80005b0:	2b01      	cmp	r3, #1
 80005b2:	d002      	beq.n	80005ba <StartTask02+0x2e>
 80005b4:	2b02      	cmp	r3, #2
 80005b6:	d00a      	beq.n	80005ce <StartTask02+0x42>
 80005b8:	e01b      	b.n	80005f2 <StartTask02+0x66>
		  case 1 :
			  target_floor_sensor = HAL_GPIO_ReadPin(GPIOC, FIRST_FLOOR_SENSOR_PIN);
 80005ba:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80005be:	4810      	ldr	r0, [pc, #64]	@ (8000600 <StartTask02+0x74>)
 80005c0:	f001 f9ac 	bl	800191c <HAL_GPIO_ReadPin>
 80005c4:	4603      	mov	r3, r0
 80005c6:	461a      	mov	r2, r3
 80005c8:	4b0e      	ldr	r3, [pc, #56]	@ (8000604 <StartTask02+0x78>)
 80005ca:	701a      	strb	r2, [r3, #0]
			  break;
 80005cc:	e011      	b.n	80005f2 <StartTask02+0x66>
		  case 2:
			  target_floor_sensor = HAL_GPIO_ReadPin(GPIOC, SECOND_FLOOR_SENSOR_PIN);
 80005ce:	2140      	movs	r1, #64	@ 0x40
 80005d0:	480b      	ldr	r0, [pc, #44]	@ (8000600 <StartTask02+0x74>)
 80005d2:	f001 f9a3 	bl	800191c <HAL_GPIO_ReadPin>
 80005d6:	4603      	mov	r3, r0
 80005d8:	461a      	mov	r2, r3
 80005da:	4b0a      	ldr	r3, [pc, #40]	@ (8000604 <StartTask02+0x78>)
 80005dc:	701a      	strb	r2, [r3, #0]
			  break;
 80005de:	e008      	b.n	80005f2 <StartTask02+0x66>
		  case 3:
			  target_floor_sensor = HAL_GPIO_ReadPin(GPIOC, THIRD_FLOOR_SENSOR_PIN);
 80005e0:	2120      	movs	r1, #32
 80005e2:	4807      	ldr	r0, [pc, #28]	@ (8000600 <StartTask02+0x74>)
 80005e4:	f001 f99a 	bl	800191c <HAL_GPIO_ReadPin>
 80005e8:	4603      	mov	r3, r0
 80005ea:	461a      	mov	r2, r3
 80005ec:	4b05      	ldr	r3, [pc, #20]	@ (8000604 <StartTask02+0x78>)
 80005ee:	701a      	strb	r2, [r3, #0]
			  break;
 80005f0:	bf00      	nop
		  }
	  }

    osDelay(1);
 80005f2:	2001      	movs	r0, #1
 80005f4:	f002 ff5a 	bl	80034ac <osDelay>
	  if(0 < target_floor && target_floor < 4) {
 80005f8:	e7cc      	b.n	8000594 <StartTask02+0x8>
 80005fa:	bf00      	nop
 80005fc:	20000080 	.word	0x20000080
 8000600:	40020800 	.word	0x40020800
 8000604:	20000082 	.word	0x20000082

08000608 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b084      	sub	sp, #16
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  // List of Pin
	for(;;)
	{
		uint8_t receive_floor = receive_data[0] - 48;
 8000610:	4b1c      	ldr	r3, [pc, #112]	@ (8000684 <StartTask03+0x7c>)
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	3b30      	subs	r3, #48	@ 0x30
 8000616:	73fb      	strb	r3, [r7, #15]

		if(0 < receive_floor && receive_floor < 4) {
 8000618:	7bfb      	ldrb	r3, [r7, #15]
 800061a:	2b00      	cmp	r3, #0
 800061c:	d02d      	beq.n	800067a <StartTask03+0x72>
 800061e:	7bfb      	ldrb	r3, [r7, #15]
 8000620:	2b03      	cmp	r3, #3
 8000622:	d82a      	bhi.n	800067a <StartTask03+0x72>
			target_floor = receive_floor;
 8000624:	4a18      	ldr	r2, [pc, #96]	@ (8000688 <StartTask03+0x80>)
 8000626:	7bfb      	ldrb	r3, [r7, #15]
 8000628:	7013      	strb	r3, [r2, #0]

			if(target_floor > current_floor) up_down = 1;
 800062a:	4b17      	ldr	r3, [pc, #92]	@ (8000688 <StartTask03+0x80>)
 800062c:	781a      	ldrb	r2, [r3, #0]
 800062e:	4b17      	ldr	r3, [pc, #92]	@ (800068c <StartTask03+0x84>)
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	429a      	cmp	r2, r3
 8000634:	d903      	bls.n	800063e <StartTask03+0x36>
 8000636:	4b16      	ldr	r3, [pc, #88]	@ (8000690 <StartTask03+0x88>)
 8000638:	2201      	movs	r2, #1
 800063a:	701a      	strb	r2, [r3, #0]
 800063c:	e008      	b.n	8000650 <StartTask03+0x48>
			else if(target_floor < current_floor) up_down = 0;
 800063e:	4b12      	ldr	r3, [pc, #72]	@ (8000688 <StartTask03+0x80>)
 8000640:	781a      	ldrb	r2, [r3, #0]
 8000642:	4b12      	ldr	r3, [pc, #72]	@ (800068c <StartTask03+0x84>)
 8000644:	781b      	ldrb	r3, [r3, #0]
 8000646:	429a      	cmp	r2, r3
 8000648:	d202      	bcs.n	8000650 <StartTask03+0x48>
 800064a:	4b11      	ldr	r3, [pc, #68]	@ (8000690 <StartTask03+0x88>)
 800064c:	2200      	movs	r2, #0
 800064e:	701a      	strb	r2, [r3, #0]

			while(1) {
				if(!target_floor_sensor) control_step_motor(up_down, 1);
 8000650:	4b10      	ldr	r3, [pc, #64]	@ (8000694 <StartTask03+0x8c>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	2b00      	cmp	r3, #0
 8000656:	d106      	bne.n	8000666 <StartTask03+0x5e>
 8000658:	4b0d      	ldr	r3, [pc, #52]	@ (8000690 <StartTask03+0x88>)
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	2101      	movs	r1, #1
 800065e:	4618      	mov	r0, r3
 8000660:	f005 fc30 	bl	8005ec4 <control_step_motor>
 8000664:	e7f4      	b.n	8000650 <StartTask03+0x48>
				else  {
					control_step_motor(up_down, 0);
 8000666:	4b0a      	ldr	r3, [pc, #40]	@ (8000690 <StartTask03+0x88>)
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	2100      	movs	r1, #0
 800066c:	4618      	mov	r0, r3
 800066e:	f005 fc29 	bl	8005ec4 <control_step_motor>
					current_floor = target_floor;
 8000672:	4b05      	ldr	r3, [pc, #20]	@ (8000688 <StartTask03+0x80>)
 8000674:	781a      	ldrb	r2, [r3, #0]
 8000676:	4b05      	ldr	r3, [pc, #20]	@ (800068c <StartTask03+0x84>)
 8000678:	701a      	strb	r2, [r3, #0]
					break;
				}
			}
		}
		osDelay(1);
 800067a:	2001      	movs	r0, #1
 800067c:	f002 ff16 	bl	80034ac <osDelay>
	{
 8000680:	e7c6      	b.n	8000610 <StartTask03+0x8>
 8000682:	bf00      	nop
 8000684:	20004bcc 	.word	0x20004bcc
 8000688:	20000080 	.word	0x20000080
 800068c:	20004bcd 	.word	0x20004bcd
 8000690:	20000081 	.word	0x20000081
 8000694:	20000082 	.word	0x20000082

08000698 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b08a      	sub	sp, #40	@ 0x28
 800069c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800069e:	f107 0314 	add.w	r3, r7, #20
 80006a2:	2200      	movs	r2, #0
 80006a4:	601a      	str	r2, [r3, #0]
 80006a6:	605a      	str	r2, [r3, #4]
 80006a8:	609a      	str	r2, [r3, #8]
 80006aa:	60da      	str	r2, [r3, #12]
 80006ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006ae:	2300      	movs	r3, #0
 80006b0:	613b      	str	r3, [r7, #16]
 80006b2:	4b36      	ldr	r3, [pc, #216]	@ (800078c <MX_GPIO_Init+0xf4>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006b6:	4a35      	ldr	r2, [pc, #212]	@ (800078c <MX_GPIO_Init+0xf4>)
 80006b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80006be:	4b33      	ldr	r3, [pc, #204]	@ (800078c <MX_GPIO_Init+0xf4>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006c6:	613b      	str	r3, [r7, #16]
 80006c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ca:	2300      	movs	r3, #0
 80006cc:	60fb      	str	r3, [r7, #12]
 80006ce:	4b2f      	ldr	r3, [pc, #188]	@ (800078c <MX_GPIO_Init+0xf4>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006d2:	4a2e      	ldr	r2, [pc, #184]	@ (800078c <MX_GPIO_Init+0xf4>)
 80006d4:	f043 0301 	orr.w	r3, r3, #1
 80006d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006da:	4b2c      	ldr	r3, [pc, #176]	@ (800078c <MX_GPIO_Init+0xf4>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006de:	f003 0301 	and.w	r3, r3, #1
 80006e2:	60fb      	str	r3, [r7, #12]
 80006e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006e6:	2300      	movs	r3, #0
 80006e8:	60bb      	str	r3, [r7, #8]
 80006ea:	4b28      	ldr	r3, [pc, #160]	@ (800078c <MX_GPIO_Init+0xf4>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ee:	4a27      	ldr	r2, [pc, #156]	@ (800078c <MX_GPIO_Init+0xf4>)
 80006f0:	f043 0304 	orr.w	r3, r3, #4
 80006f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006f6:	4b25      	ldr	r3, [pc, #148]	@ (800078c <MX_GPIO_Init+0xf4>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006fa:	f003 0304 	and.w	r3, r3, #4
 80006fe:	60bb      	str	r3, [r7, #8]
 8000700:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000702:	2300      	movs	r3, #0
 8000704:	607b      	str	r3, [r7, #4]
 8000706:	4b21      	ldr	r3, [pc, #132]	@ (800078c <MX_GPIO_Init+0xf4>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800070a:	4a20      	ldr	r2, [pc, #128]	@ (800078c <MX_GPIO_Init+0xf4>)
 800070c:	f043 0302 	orr.w	r3, r3, #2
 8000710:	6313      	str	r3, [r2, #48]	@ 0x30
 8000712:	4b1e      	ldr	r3, [pc, #120]	@ (800078c <MX_GPIO_Init+0xf4>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000716:	f003 0302 	and.w	r3, r3, #2
 800071a:	607b      	str	r3, [r7, #4]
 800071c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 800071e:	2200      	movs	r2, #0
 8000720:	21e0      	movs	r1, #224	@ 0xe0
 8000722:	481b      	ldr	r0, [pc, #108]	@ (8000790 <MX_GPIO_Init+0xf8>)
 8000724:	f001 f912 	bl	800194c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000728:	2200      	movs	r2, #0
 800072a:	2140      	movs	r1, #64	@ 0x40
 800072c:	4819      	ldr	r0, [pc, #100]	@ (8000794 <MX_GPIO_Init+0xfc>)
 800072e:	f001 f90d 	bl	800194c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000732:	23e0      	movs	r3, #224	@ 0xe0
 8000734:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000736:	2301      	movs	r3, #1
 8000738:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073a:	2300      	movs	r3, #0
 800073c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800073e:	2300      	movs	r3, #0
 8000740:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000742:	f107 0314 	add.w	r3, r7, #20
 8000746:	4619      	mov	r1, r3
 8000748:	4811      	ldr	r0, [pc, #68]	@ (8000790 <MX_GPIO_Init+0xf8>)
 800074a:	f000 ff63 	bl	8001614 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC5 PC6 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8;
 800074e:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 8000752:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000754:	2300      	movs	r3, #0
 8000756:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000758:	2300      	movs	r3, #0
 800075a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800075c:	f107 0314 	add.w	r3, r7, #20
 8000760:	4619      	mov	r1, r3
 8000762:	480d      	ldr	r0, [pc, #52]	@ (8000798 <MX_GPIO_Init+0x100>)
 8000764:	f000 ff56 	bl	8001614 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000768:	2340      	movs	r3, #64	@ 0x40
 800076a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800076c:	2301      	movs	r3, #1
 800076e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000770:	2300      	movs	r3, #0
 8000772:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000774:	2300      	movs	r3, #0
 8000776:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000778:	f107 0314 	add.w	r3, r7, #20
 800077c:	4619      	mov	r1, r3
 800077e:	4805      	ldr	r0, [pc, #20]	@ (8000794 <MX_GPIO_Init+0xfc>)
 8000780:	f000 ff48 	bl	8001614 <HAL_GPIO_Init>

}
 8000784:	bf00      	nop
 8000786:	3728      	adds	r7, #40	@ 0x28
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	40023800 	.word	0x40023800
 8000790:	40020000 	.word	0x40020000
 8000794:	40020400 	.word	0x40020400
 8000798:	40020800 	.word	0x40020800

0800079c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80007a0:	f000 fa80 	bl	8000ca4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007a4:	f000 f810 	bl	80007c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007a8:	f7ff ff76 	bl	8000698 <MX_GPIO_Init>
  MX_DMA_Init();
 80007ac:	f7ff fe90 	bl	80004d0 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80007b0:	f000 f974 	bl	8000a9c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  apInit();
 80007b4:	f005 fb50 	bl	8005e58 <apInit>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80007b8:	f002 fd9c 	bl	80032f4 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80007bc:	f7ff feb0 	bl	8000520 <MX_FREERTOS_Init>

  /* Start scheduler */
  apMain();
 80007c0:	f005 fb70 	bl	8005ea4 <apMain>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007c4:	bf00      	nop
 80007c6:	e7fd      	b.n	80007c4 <main+0x28>

080007c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b094      	sub	sp, #80	@ 0x50
 80007cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ce:	f107 0320 	add.w	r3, r7, #32
 80007d2:	2230      	movs	r2, #48	@ 0x30
 80007d4:	2100      	movs	r1, #0
 80007d6:	4618      	mov	r0, r3
 80007d8:	f005 fc10 	bl	8005ffc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007dc:	f107 030c 	add.w	r3, r7, #12
 80007e0:	2200      	movs	r2, #0
 80007e2:	601a      	str	r2, [r3, #0]
 80007e4:	605a      	str	r2, [r3, #4]
 80007e6:	609a      	str	r2, [r3, #8]
 80007e8:	60da      	str	r2, [r3, #12]
 80007ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ec:	2300      	movs	r3, #0
 80007ee:	60bb      	str	r3, [r7, #8]
 80007f0:	4b27      	ldr	r3, [pc, #156]	@ (8000890 <SystemClock_Config+0xc8>)
 80007f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007f4:	4a26      	ldr	r2, [pc, #152]	@ (8000890 <SystemClock_Config+0xc8>)
 80007f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007fa:	6413      	str	r3, [r2, #64]	@ 0x40
 80007fc:	4b24      	ldr	r3, [pc, #144]	@ (8000890 <SystemClock_Config+0xc8>)
 80007fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000800:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000804:	60bb      	str	r3, [r7, #8]
 8000806:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000808:	2300      	movs	r3, #0
 800080a:	607b      	str	r3, [r7, #4]
 800080c:	4b21      	ldr	r3, [pc, #132]	@ (8000894 <SystemClock_Config+0xcc>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	4a20      	ldr	r2, [pc, #128]	@ (8000894 <SystemClock_Config+0xcc>)
 8000812:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000816:	6013      	str	r3, [r2, #0]
 8000818:	4b1e      	ldr	r3, [pc, #120]	@ (8000894 <SystemClock_Config+0xcc>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000820:	607b      	str	r3, [r7, #4]
 8000822:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000824:	2301      	movs	r3, #1
 8000826:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000828:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800082c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800082e:	2302      	movs	r3, #2
 8000830:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000832:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000836:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000838:	2304      	movs	r3, #4
 800083a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 800083c:	2364      	movs	r3, #100	@ 0x64
 800083e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000840:	2302      	movs	r3, #2
 8000842:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000844:	2304      	movs	r3, #4
 8000846:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000848:	f107 0320 	add.w	r3, r7, #32
 800084c:	4618      	mov	r0, r3
 800084e:	f001 f897 	bl	8001980 <HAL_RCC_OscConfig>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000858:	f000 f830 	bl	80008bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800085c:	230f      	movs	r3, #15
 800085e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000860:	2302      	movs	r3, #2
 8000862:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000864:	2300      	movs	r3, #0
 8000866:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000868:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800086c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800086e:	2300      	movs	r3, #0
 8000870:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000872:	f107 030c 	add.w	r3, r7, #12
 8000876:	2103      	movs	r1, #3
 8000878:	4618      	mov	r0, r3
 800087a:	f001 faf9 	bl	8001e70 <HAL_RCC_ClockConfig>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000884:	f000 f81a 	bl	80008bc <Error_Handler>
  }
}
 8000888:	bf00      	nop
 800088a:	3750      	adds	r7, #80	@ 0x50
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	40023800 	.word	0x40023800
 8000894:	40007000 	.word	0x40007000

08000898 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11) {
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4a04      	ldr	r2, [pc, #16]	@ (80008b8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008a6:	4293      	cmp	r3, r2
 80008a8:	d101      	bne.n	80008ae <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008aa:	f000 fa1d 	bl	8000ce8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008ae:	bf00      	nop
 80008b0:	3708      	adds	r7, #8
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	40014800 	.word	0x40014800

080008bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008c0:	b672      	cpsid	i
}
 80008c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008c4:	bf00      	nop
 80008c6:	e7fd      	b.n	80008c4 <Error_Handler+0x8>

080008c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	607b      	str	r3, [r7, #4]
 80008d2:	4b12      	ldr	r3, [pc, #72]	@ (800091c <HAL_MspInit+0x54>)
 80008d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008d6:	4a11      	ldr	r2, [pc, #68]	@ (800091c <HAL_MspInit+0x54>)
 80008d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80008de:	4b0f      	ldr	r3, [pc, #60]	@ (800091c <HAL_MspInit+0x54>)
 80008e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008e6:	607b      	str	r3, [r7, #4]
 80008e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	603b      	str	r3, [r7, #0]
 80008ee:	4b0b      	ldr	r3, [pc, #44]	@ (800091c <HAL_MspInit+0x54>)
 80008f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008f2:	4a0a      	ldr	r2, [pc, #40]	@ (800091c <HAL_MspInit+0x54>)
 80008f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80008fa:	4b08      	ldr	r3, [pc, #32]	@ (800091c <HAL_MspInit+0x54>)
 80008fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000902:	603b      	str	r3, [r7, #0]
 8000904:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000906:	2200      	movs	r2, #0
 8000908:	210f      	movs	r1, #15
 800090a:	f06f 0001 	mvn.w	r0, #1
 800090e:	f000 fae7 	bl	8000ee0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000912:	bf00      	nop
 8000914:	3708      	adds	r7, #8
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	40023800 	.word	0x40023800

08000920 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b08c      	sub	sp, #48	@ 0x30
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000928:	2300      	movs	r3, #0
 800092a:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 800092c:	2300      	movs	r3, #0
 800092e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 8000930:	2300      	movs	r3, #0
 8000932:	60bb      	str	r3, [r7, #8]
 8000934:	4b2e      	ldr	r3, [pc, #184]	@ (80009f0 <HAL_InitTick+0xd0>)
 8000936:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000938:	4a2d      	ldr	r2, [pc, #180]	@ (80009f0 <HAL_InitTick+0xd0>)
 800093a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800093e:	6453      	str	r3, [r2, #68]	@ 0x44
 8000940:	4b2b      	ldr	r3, [pc, #172]	@ (80009f0 <HAL_InitTick+0xd0>)
 8000942:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000944:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000948:	60bb      	str	r3, [r7, #8]
 800094a:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800094c:	f107 020c 	add.w	r2, r7, #12
 8000950:	f107 0310 	add.w	r3, r7, #16
 8000954:	4611      	mov	r1, r2
 8000956:	4618      	mov	r0, r3
 8000958:	f001 fcaa 	bl	80022b0 <HAL_RCC_GetClockConfig>
  /* Compute TIM11 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 800095c:	f001 fc94 	bl	8002288 <HAL_RCC_GetPCLK2Freq>
 8000960:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000962:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000964:	4a23      	ldr	r2, [pc, #140]	@ (80009f4 <HAL_InitTick+0xd4>)
 8000966:	fba2 2303 	umull	r2, r3, r2, r3
 800096a:	0c9b      	lsrs	r3, r3, #18
 800096c:	3b01      	subs	r3, #1
 800096e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 8000970:	4b21      	ldr	r3, [pc, #132]	@ (80009f8 <HAL_InitTick+0xd8>)
 8000972:	4a22      	ldr	r2, [pc, #136]	@ (80009fc <HAL_InitTick+0xdc>)
 8000974:	601a      	str	r2, [r3, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 8000976:	4b20      	ldr	r3, [pc, #128]	@ (80009f8 <HAL_InitTick+0xd8>)
 8000978:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800097c:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 800097e:	4a1e      	ldr	r2, [pc, #120]	@ (80009f8 <HAL_InitTick+0xd8>)
 8000980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000982:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 8000984:	4b1c      	ldr	r3, [pc, #112]	@ (80009f8 <HAL_InitTick+0xd8>)
 8000986:	2200      	movs	r2, #0
 8000988:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800098a:	4b1b      	ldr	r3, [pc, #108]	@ (80009f8 <HAL_InitTick+0xd8>)
 800098c:	2200      	movs	r2, #0
 800098e:	609a      	str	r2, [r3, #8]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000990:	4b19      	ldr	r3, [pc, #100]	@ (80009f8 <HAL_InitTick+0xd8>)
 8000992:	2200      	movs	r2, #0
 8000994:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim11);
 8000996:	4818      	ldr	r0, [pc, #96]	@ (80009f8 <HAL_InitTick+0xd8>)
 8000998:	f001 fcbc 	bl	8002314 <HAL_TIM_Base_Init>
 800099c:	4603      	mov	r3, r0
 800099e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80009a2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d11b      	bne.n	80009e2 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim11);
 80009aa:	4813      	ldr	r0, [pc, #76]	@ (80009f8 <HAL_InitTick+0xd8>)
 80009ac:	f001 fd0c 	bl	80023c8 <HAL_TIM_Base_Start_IT>
 80009b0:	4603      	mov	r3, r0
 80009b2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80009b6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d111      	bne.n	80009e2 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM11 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80009be:	201a      	movs	r0, #26
 80009c0:	f000 faaa 	bl	8000f18 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	2b0f      	cmp	r3, #15
 80009c8:	d808      	bhi.n	80009dc <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority, 0U);
 80009ca:	2200      	movs	r2, #0
 80009cc:	6879      	ldr	r1, [r7, #4]
 80009ce:	201a      	movs	r0, #26
 80009d0:	f000 fa86 	bl	8000ee0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009d4:	4a0a      	ldr	r2, [pc, #40]	@ (8000a00 <HAL_InitTick+0xe0>)
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	6013      	str	r3, [r2, #0]
 80009da:	e002      	b.n	80009e2 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80009dc:	2301      	movs	r3, #1
 80009de:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80009e2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	3730      	adds	r7, #48	@ 0x30
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	40023800 	.word	0x40023800
 80009f4:	431bde83 	.word	0x431bde83
 80009f8:	20000090 	.word	0x20000090
 80009fc:	40014800 	.word	0x40014800
 8000a00:	20000004 	.word	0x20000004

08000a04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a08:	bf00      	nop
 8000a0a:	e7fd      	b.n	8000a08 <NMI_Handler+0x4>

08000a0c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a10:	bf00      	nop
 8000a12:	e7fd      	b.n	8000a10 <HardFault_Handler+0x4>

08000a14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a18:	bf00      	nop
 8000a1a:	e7fd      	b.n	8000a18 <MemManage_Handler+0x4>

08000a1c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a20:	bf00      	nop
 8000a22:	e7fd      	b.n	8000a20 <BusFault_Handler+0x4>

08000a24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a28:	bf00      	nop
 8000a2a:	e7fd      	b.n	8000a28 <UsageFault_Handler+0x4>

08000a2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a30:	bf00      	nop
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr
	...

08000a3c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8000a40:	4802      	ldr	r0, [pc, #8]	@ (8000a4c <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8000a42:	f001 fd23 	bl	800248c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8000a46:	bf00      	nop
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	20000090 	.word	0x20000090

08000a50 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000a54:	4802      	ldr	r0, [pc, #8]	@ (8000a60 <DMA2_Stream2_IRQHandler+0x10>)
 8000a56:	f000 fb73 	bl	8001140 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8000a5a:	bf00      	nop
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	20000120 	.word	0x20000120

08000a64 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000a68:	4802      	ldr	r0, [pc, #8]	@ (8000a74 <DMA2_Stream7_IRQHandler+0x10>)
 8000a6a:	f000 fb69 	bl	8001140 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8000a6e:	bf00      	nop
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	20000180 	.word	0x20000180

08000a78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a7c:	4b06      	ldr	r3, [pc, #24]	@ (8000a98 <SystemInit+0x20>)
 8000a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a82:	4a05      	ldr	r2, [pc, #20]	@ (8000a98 <SystemInit+0x20>)
 8000a84:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a88:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a8c:	bf00      	nop
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	e000ed00 	.word	0xe000ed00

08000a9c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000aa0:	4b11      	ldr	r3, [pc, #68]	@ (8000ae8 <MX_USART1_UART_Init+0x4c>)
 8000aa2:	4a12      	ldr	r2, [pc, #72]	@ (8000aec <MX_USART1_UART_Init+0x50>)
 8000aa4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000aa6:	4b10      	ldr	r3, [pc, #64]	@ (8000ae8 <MX_USART1_UART_Init+0x4c>)
 8000aa8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000aac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000aae:	4b0e      	ldr	r3, [pc, #56]	@ (8000ae8 <MX_USART1_UART_Init+0x4c>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ab4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ae8 <MX_USART1_UART_Init+0x4c>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000aba:	4b0b      	ldr	r3, [pc, #44]	@ (8000ae8 <MX_USART1_UART_Init+0x4c>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ac0:	4b09      	ldr	r3, [pc, #36]	@ (8000ae8 <MX_USART1_UART_Init+0x4c>)
 8000ac2:	220c      	movs	r2, #12
 8000ac4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ac6:	4b08      	ldr	r3, [pc, #32]	@ (8000ae8 <MX_USART1_UART_Init+0x4c>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000acc:	4b06      	ldr	r3, [pc, #24]	@ (8000ae8 <MX_USART1_UART_Init+0x4c>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ad2:	4805      	ldr	r0, [pc, #20]	@ (8000ae8 <MX_USART1_UART_Init+0x4c>)
 8000ad4:	f001 fe92 	bl	80027fc <HAL_UART_Init>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000ade:	f7ff feed 	bl	80008bc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ae2:	bf00      	nop
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	200000d8 	.word	0x200000d8
 8000aec:	40011000 	.word	0x40011000

08000af0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b08a      	sub	sp, #40	@ 0x28
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af8:	f107 0314 	add.w	r3, r7, #20
 8000afc:	2200      	movs	r2, #0
 8000afe:	601a      	str	r2, [r3, #0]
 8000b00:	605a      	str	r2, [r3, #4]
 8000b02:	609a      	str	r2, [r3, #8]
 8000b04:	60da      	str	r2, [r3, #12]
 8000b06:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a49      	ldr	r2, [pc, #292]	@ (8000c34 <HAL_UART_MspInit+0x144>)
 8000b0e:	4293      	cmp	r3, r2
 8000b10:	f040 808b 	bne.w	8000c2a <HAL_UART_MspInit+0x13a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b14:	2300      	movs	r3, #0
 8000b16:	613b      	str	r3, [r7, #16]
 8000b18:	4b47      	ldr	r3, [pc, #284]	@ (8000c38 <HAL_UART_MspInit+0x148>)
 8000b1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b1c:	4a46      	ldr	r2, [pc, #280]	@ (8000c38 <HAL_UART_MspInit+0x148>)
 8000b1e:	f043 0310 	orr.w	r3, r3, #16
 8000b22:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b24:	4b44      	ldr	r3, [pc, #272]	@ (8000c38 <HAL_UART_MspInit+0x148>)
 8000b26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b28:	f003 0310 	and.w	r3, r3, #16
 8000b2c:	613b      	str	r3, [r7, #16]
 8000b2e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b30:	2300      	movs	r3, #0
 8000b32:	60fb      	str	r3, [r7, #12]
 8000b34:	4b40      	ldr	r3, [pc, #256]	@ (8000c38 <HAL_UART_MspInit+0x148>)
 8000b36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b38:	4a3f      	ldr	r2, [pc, #252]	@ (8000c38 <HAL_UART_MspInit+0x148>)
 8000b3a:	f043 0301 	orr.w	r3, r3, #1
 8000b3e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b40:	4b3d      	ldr	r3, [pc, #244]	@ (8000c38 <HAL_UART_MspInit+0x148>)
 8000b42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b44:	f003 0301 	and.w	r3, r3, #1
 8000b48:	60fb      	str	r3, [r7, #12]
 8000b4a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000b4c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000b50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b52:	2302      	movs	r3, #2
 8000b54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b56:	2300      	movs	r3, #0
 8000b58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b5a:	2303      	movs	r3, #3
 8000b5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b5e:	2307      	movs	r3, #7
 8000b60:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b62:	f107 0314 	add.w	r3, r7, #20
 8000b66:	4619      	mov	r1, r3
 8000b68:	4834      	ldr	r0, [pc, #208]	@ (8000c3c <HAL_UART_MspInit+0x14c>)
 8000b6a:	f000 fd53 	bl	8001614 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8000b6e:	4b34      	ldr	r3, [pc, #208]	@ (8000c40 <HAL_UART_MspInit+0x150>)
 8000b70:	4a34      	ldr	r2, [pc, #208]	@ (8000c44 <HAL_UART_MspInit+0x154>)
 8000b72:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8000b74:	4b32      	ldr	r3, [pc, #200]	@ (8000c40 <HAL_UART_MspInit+0x150>)
 8000b76:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000b7a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b7c:	4b30      	ldr	r3, [pc, #192]	@ (8000c40 <HAL_UART_MspInit+0x150>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b82:	4b2f      	ldr	r3, [pc, #188]	@ (8000c40 <HAL_UART_MspInit+0x150>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000b88:	4b2d      	ldr	r3, [pc, #180]	@ (8000c40 <HAL_UART_MspInit+0x150>)
 8000b8a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b8e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b90:	4b2b      	ldr	r3, [pc, #172]	@ (8000c40 <HAL_UART_MspInit+0x150>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b96:	4b2a      	ldr	r3, [pc, #168]	@ (8000c40 <HAL_UART_MspInit+0x150>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8000b9c:	4b28      	ldr	r3, [pc, #160]	@ (8000c40 <HAL_UART_MspInit+0x150>)
 8000b9e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000ba2:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000ba4:	4b26      	ldr	r3, [pc, #152]	@ (8000c40 <HAL_UART_MspInit+0x150>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000baa:	4b25      	ldr	r3, [pc, #148]	@ (8000c40 <HAL_UART_MspInit+0x150>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000bb0:	4823      	ldr	r0, [pc, #140]	@ (8000c40 <HAL_UART_MspInit+0x150>)
 8000bb2:	f000 f9bf 	bl	8000f34 <HAL_DMA_Init>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8000bbc:	f7ff fe7e 	bl	80008bc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	4a1f      	ldr	r2, [pc, #124]	@ (8000c40 <HAL_UART_MspInit+0x150>)
 8000bc4:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000bc6:	4a1e      	ldr	r2, [pc, #120]	@ (8000c40 <HAL_UART_MspInit+0x150>)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8000bcc:	4b1e      	ldr	r3, [pc, #120]	@ (8000c48 <HAL_UART_MspInit+0x158>)
 8000bce:	4a1f      	ldr	r2, [pc, #124]	@ (8000c4c <HAL_UART_MspInit+0x15c>)
 8000bd0:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8000bd2:	4b1d      	ldr	r3, [pc, #116]	@ (8000c48 <HAL_UART_MspInit+0x158>)
 8000bd4:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000bd8:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000bda:	4b1b      	ldr	r3, [pc, #108]	@ (8000c48 <HAL_UART_MspInit+0x158>)
 8000bdc:	2240      	movs	r2, #64	@ 0x40
 8000bde:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000be0:	4b19      	ldr	r3, [pc, #100]	@ (8000c48 <HAL_UART_MspInit+0x158>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000be6:	4b18      	ldr	r3, [pc, #96]	@ (8000c48 <HAL_UART_MspInit+0x158>)
 8000be8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000bec:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000bee:	4b16      	ldr	r3, [pc, #88]	@ (8000c48 <HAL_UART_MspInit+0x158>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000bf4:	4b14      	ldr	r3, [pc, #80]	@ (8000c48 <HAL_UART_MspInit+0x158>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
 8000bfa:	4b13      	ldr	r3, [pc, #76]	@ (8000c48 <HAL_UART_MspInit+0x158>)
 8000bfc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000c00:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000c02:	4b11      	ldr	r3, [pc, #68]	@ (8000c48 <HAL_UART_MspInit+0x158>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c08:	4b0f      	ldr	r3, [pc, #60]	@ (8000c48 <HAL_UART_MspInit+0x158>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000c0e:	480e      	ldr	r0, [pc, #56]	@ (8000c48 <HAL_UART_MspInit+0x158>)
 8000c10:	f000 f990 	bl	8000f34 <HAL_DMA_Init>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 8000c1a:	f7ff fe4f 	bl	80008bc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	4a09      	ldr	r2, [pc, #36]	@ (8000c48 <HAL_UART_MspInit+0x158>)
 8000c22:	639a      	str	r2, [r3, #56]	@ 0x38
 8000c24:	4a08      	ldr	r2, [pc, #32]	@ (8000c48 <HAL_UART_MspInit+0x158>)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000c2a:	bf00      	nop
 8000c2c:	3728      	adds	r7, #40	@ 0x28
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	40011000 	.word	0x40011000
 8000c38:	40023800 	.word	0x40023800
 8000c3c:	40020000 	.word	0x40020000
 8000c40:	20000120 	.word	0x20000120
 8000c44:	40026440 	.word	0x40026440
 8000c48:	20000180 	.word	0x20000180
 8000c4c:	400264b8 	.word	0x400264b8

08000c50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c50:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c88 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c54:	f7ff ff10 	bl	8000a78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c58:	480c      	ldr	r0, [pc, #48]	@ (8000c8c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c5a:	490d      	ldr	r1, [pc, #52]	@ (8000c90 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c5c:	4a0d      	ldr	r2, [pc, #52]	@ (8000c94 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c60:	e002      	b.n	8000c68 <LoopCopyDataInit>

08000c62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c66:	3304      	adds	r3, #4

08000c68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c6c:	d3f9      	bcc.n	8000c62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c6e:	4a0a      	ldr	r2, [pc, #40]	@ (8000c98 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c70:	4c0a      	ldr	r4, [pc, #40]	@ (8000c9c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c74:	e001      	b.n	8000c7a <LoopFillZerobss>

08000c76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c78:	3204      	adds	r2, #4

08000c7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c7c:	d3fb      	bcc.n	8000c76 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c7e:	f005 fa1b 	bl	80060b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c82:	f7ff fd8b 	bl	800079c <main>
  bx  lr    
 8000c86:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c88:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c90:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000c94:	080062d4 	.word	0x080062d4
  ldr r2, =_sbss
 8000c98:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000c9c:	20004d14 	.word	0x20004d14

08000ca0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ca0:	e7fe      	b.n	8000ca0 <ADC_IRQHandler>
	...

08000ca4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ca8:	4b0e      	ldr	r3, [pc, #56]	@ (8000ce4 <HAL_Init+0x40>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a0d      	ldr	r2, [pc, #52]	@ (8000ce4 <HAL_Init+0x40>)
 8000cae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000cb2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cb4:	4b0b      	ldr	r3, [pc, #44]	@ (8000ce4 <HAL_Init+0x40>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a0a      	ldr	r2, [pc, #40]	@ (8000ce4 <HAL_Init+0x40>)
 8000cba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000cbe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cc0:	4b08      	ldr	r3, [pc, #32]	@ (8000ce4 <HAL_Init+0x40>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a07      	ldr	r2, [pc, #28]	@ (8000ce4 <HAL_Init+0x40>)
 8000cc6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000cca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ccc:	2003      	movs	r0, #3
 8000cce:	f000 f8fc 	bl	8000eca <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cd2:	2000      	movs	r0, #0
 8000cd4:	f7ff fe24 	bl	8000920 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cd8:	f7ff fdf6 	bl	80008c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cdc:	2300      	movs	r3, #0
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	40023c00 	.word	0x40023c00

08000ce8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cec:	4b06      	ldr	r3, [pc, #24]	@ (8000d08 <HAL_IncTick+0x20>)
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	461a      	mov	r2, r3
 8000cf2:	4b06      	ldr	r3, [pc, #24]	@ (8000d0c <HAL_IncTick+0x24>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4413      	add	r3, r2
 8000cf8:	4a04      	ldr	r2, [pc, #16]	@ (8000d0c <HAL_IncTick+0x24>)
 8000cfa:	6013      	str	r3, [r2, #0]
}
 8000cfc:	bf00      	nop
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop
 8000d08:	20000008 	.word	0x20000008
 8000d0c:	200001e0 	.word	0x200001e0

08000d10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  return uwTick;
 8000d14:	4b03      	ldr	r3, [pc, #12]	@ (8000d24 <HAL_GetTick+0x14>)
 8000d16:	681b      	ldr	r3, [r3, #0]
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	200001e0 	.word	0x200001e0

08000d28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b084      	sub	sp, #16
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d30:	f7ff ffee 	bl	8000d10 <HAL_GetTick>
 8000d34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d40:	d005      	beq.n	8000d4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d42:	4b0a      	ldr	r3, [pc, #40]	@ (8000d6c <HAL_Delay+0x44>)
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	461a      	mov	r2, r3
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	4413      	add	r3, r2
 8000d4c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d4e:	bf00      	nop
 8000d50:	f7ff ffde 	bl	8000d10 <HAL_GetTick>
 8000d54:	4602      	mov	r2, r0
 8000d56:	68bb      	ldr	r3, [r7, #8]
 8000d58:	1ad3      	subs	r3, r2, r3
 8000d5a:	68fa      	ldr	r2, [r7, #12]
 8000d5c:	429a      	cmp	r2, r3
 8000d5e:	d8f7      	bhi.n	8000d50 <HAL_Delay+0x28>
  {
  }
}
 8000d60:	bf00      	nop
 8000d62:	bf00      	nop
 8000d64:	3710      	adds	r7, #16
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	20000008 	.word	0x20000008

08000d70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b085      	sub	sp, #20
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	f003 0307 	and.w	r3, r3, #7
 8000d7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d80:	4b0c      	ldr	r3, [pc, #48]	@ (8000db4 <__NVIC_SetPriorityGrouping+0x44>)
 8000d82:	68db      	ldr	r3, [r3, #12]
 8000d84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d86:	68ba      	ldr	r2, [r7, #8]
 8000d88:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d98:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000da0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000da2:	4a04      	ldr	r2, [pc, #16]	@ (8000db4 <__NVIC_SetPriorityGrouping+0x44>)
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	60d3      	str	r3, [r2, #12]
}
 8000da8:	bf00      	nop
 8000daa:	3714      	adds	r7, #20
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr
 8000db4:	e000ed00 	.word	0xe000ed00

08000db8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dbc:	4b04      	ldr	r3, [pc, #16]	@ (8000dd0 <__NVIC_GetPriorityGrouping+0x18>)
 8000dbe:	68db      	ldr	r3, [r3, #12]
 8000dc0:	0a1b      	lsrs	r3, r3, #8
 8000dc2:	f003 0307 	and.w	r3, r3, #7
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr
 8000dd0:	e000ed00 	.word	0xe000ed00

08000dd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	4603      	mov	r3, r0
 8000ddc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	db0b      	blt.n	8000dfe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000de6:	79fb      	ldrb	r3, [r7, #7]
 8000de8:	f003 021f 	and.w	r2, r3, #31
 8000dec:	4907      	ldr	r1, [pc, #28]	@ (8000e0c <__NVIC_EnableIRQ+0x38>)
 8000dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df2:	095b      	lsrs	r3, r3, #5
 8000df4:	2001      	movs	r0, #1
 8000df6:	fa00 f202 	lsl.w	r2, r0, r2
 8000dfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000dfe:	bf00      	nop
 8000e00:	370c      	adds	r7, #12
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	e000e100 	.word	0xe000e100

08000e10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	4603      	mov	r3, r0
 8000e18:	6039      	str	r1, [r7, #0]
 8000e1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	db0a      	blt.n	8000e3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	b2da      	uxtb	r2, r3
 8000e28:	490c      	ldr	r1, [pc, #48]	@ (8000e5c <__NVIC_SetPriority+0x4c>)
 8000e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2e:	0112      	lsls	r2, r2, #4
 8000e30:	b2d2      	uxtb	r2, r2
 8000e32:	440b      	add	r3, r1
 8000e34:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e38:	e00a      	b.n	8000e50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	b2da      	uxtb	r2, r3
 8000e3e:	4908      	ldr	r1, [pc, #32]	@ (8000e60 <__NVIC_SetPriority+0x50>)
 8000e40:	79fb      	ldrb	r3, [r7, #7]
 8000e42:	f003 030f 	and.w	r3, r3, #15
 8000e46:	3b04      	subs	r3, #4
 8000e48:	0112      	lsls	r2, r2, #4
 8000e4a:	b2d2      	uxtb	r2, r2
 8000e4c:	440b      	add	r3, r1
 8000e4e:	761a      	strb	r2, [r3, #24]
}
 8000e50:	bf00      	nop
 8000e52:	370c      	adds	r7, #12
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr
 8000e5c:	e000e100 	.word	0xe000e100
 8000e60:	e000ed00 	.word	0xe000ed00

08000e64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b089      	sub	sp, #36	@ 0x24
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	60f8      	str	r0, [r7, #12]
 8000e6c:	60b9      	str	r1, [r7, #8]
 8000e6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	f003 0307 	and.w	r3, r3, #7
 8000e76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e78:	69fb      	ldr	r3, [r7, #28]
 8000e7a:	f1c3 0307 	rsb	r3, r3, #7
 8000e7e:	2b04      	cmp	r3, #4
 8000e80:	bf28      	it	cs
 8000e82:	2304      	movcs	r3, #4
 8000e84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	3304      	adds	r3, #4
 8000e8a:	2b06      	cmp	r3, #6
 8000e8c:	d902      	bls.n	8000e94 <NVIC_EncodePriority+0x30>
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	3b03      	subs	r3, #3
 8000e92:	e000      	b.n	8000e96 <NVIC_EncodePriority+0x32>
 8000e94:	2300      	movs	r3, #0
 8000e96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e98:	f04f 32ff 	mov.w	r2, #4294967295
 8000e9c:	69bb      	ldr	r3, [r7, #24]
 8000e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea2:	43da      	mvns	r2, r3
 8000ea4:	68bb      	ldr	r3, [r7, #8]
 8000ea6:	401a      	ands	r2, r3
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000eac:	f04f 31ff 	mov.w	r1, #4294967295
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	fa01 f303 	lsl.w	r3, r1, r3
 8000eb6:	43d9      	mvns	r1, r3
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ebc:	4313      	orrs	r3, r2
         );
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3724      	adds	r7, #36	@ 0x24
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr

08000eca <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eca:	b580      	push	{r7, lr}
 8000ecc:	b082      	sub	sp, #8
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ed2:	6878      	ldr	r0, [r7, #4]
 8000ed4:	f7ff ff4c 	bl	8000d70 <__NVIC_SetPriorityGrouping>
}
 8000ed8:	bf00      	nop
 8000eda:	3708      	adds	r7, #8
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}

08000ee0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b086      	sub	sp, #24
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	60b9      	str	r1, [r7, #8]
 8000eea:	607a      	str	r2, [r7, #4]
 8000eec:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ef2:	f7ff ff61 	bl	8000db8 <__NVIC_GetPriorityGrouping>
 8000ef6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ef8:	687a      	ldr	r2, [r7, #4]
 8000efa:	68b9      	ldr	r1, [r7, #8]
 8000efc:	6978      	ldr	r0, [r7, #20]
 8000efe:	f7ff ffb1 	bl	8000e64 <NVIC_EncodePriority>
 8000f02:	4602      	mov	r2, r0
 8000f04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f08:	4611      	mov	r1, r2
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f7ff ff80 	bl	8000e10 <__NVIC_SetPriority>
}
 8000f10:	bf00      	nop
 8000f12:	3718      	adds	r7, #24
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}

08000f18 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	4603      	mov	r3, r0
 8000f20:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f26:	4618      	mov	r0, r3
 8000f28:	f7ff ff54 	bl	8000dd4 <__NVIC_EnableIRQ>
}
 8000f2c:	bf00      	nop
 8000f2e:	3708      	adds	r7, #8
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}

08000f34 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b086      	sub	sp, #24
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000f40:	f7ff fee6 	bl	8000d10 <HAL_GetTick>
 8000f44:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d101      	bne.n	8000f50 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	e099      	b.n	8001084 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2202      	movs	r2, #2
 8000f54:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	681a      	ldr	r2, [r3, #0]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f022 0201 	bic.w	r2, r2, #1
 8000f6e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f70:	e00f      	b.n	8000f92 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000f72:	f7ff fecd 	bl	8000d10 <HAL_GetTick>
 8000f76:	4602      	mov	r2, r0
 8000f78:	693b      	ldr	r3, [r7, #16]
 8000f7a:	1ad3      	subs	r3, r2, r3
 8000f7c:	2b05      	cmp	r3, #5
 8000f7e:	d908      	bls.n	8000f92 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2220      	movs	r2, #32
 8000f84:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2203      	movs	r2, #3
 8000f8a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8000f8e:	2303      	movs	r3, #3
 8000f90:	e078      	b.n	8001084 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f003 0301 	and.w	r3, r3, #1
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d1e8      	bne.n	8000f72 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000fa8:	697a      	ldr	r2, [r7, #20]
 8000faa:	4b38      	ldr	r3, [pc, #224]	@ (800108c <HAL_DMA_Init+0x158>)
 8000fac:	4013      	ands	r3, r2
 8000fae:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	685a      	ldr	r2, [r3, #4]
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	689b      	ldr	r3, [r3, #8]
 8000fb8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000fbe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	691b      	ldr	r3, [r3, #16]
 8000fc4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	699b      	ldr	r3, [r3, #24]
 8000fd0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fd6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	6a1b      	ldr	r3, [r3, #32]
 8000fdc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000fde:	697a      	ldr	r2, [r7, #20]
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fe8:	2b04      	cmp	r3, #4
 8000fea:	d107      	bne.n	8000ffc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	697a      	ldr	r2, [r7, #20]
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	697a      	ldr	r2, [r7, #20]
 8001002:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	695b      	ldr	r3, [r3, #20]
 800100a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	f023 0307 	bic.w	r3, r3, #7
 8001012:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001018:	697a      	ldr	r2, [r7, #20]
 800101a:	4313      	orrs	r3, r2
 800101c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001022:	2b04      	cmp	r3, #4
 8001024:	d117      	bne.n	8001056 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800102a:	697a      	ldr	r2, [r7, #20]
 800102c:	4313      	orrs	r3, r2
 800102e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001034:	2b00      	cmp	r3, #0
 8001036:	d00e      	beq.n	8001056 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001038:	6878      	ldr	r0, [r7, #4]
 800103a:	f000 fa6f 	bl	800151c <DMA_CheckFifoParam>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d008      	beq.n	8001056 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2240      	movs	r2, #64	@ 0x40
 8001048:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2201      	movs	r2, #1
 800104e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001052:	2301      	movs	r3, #1
 8001054:	e016      	b.n	8001084 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	697a      	ldr	r2, [r7, #20]
 800105c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800105e:	6878      	ldr	r0, [r7, #4]
 8001060:	f000 fa26 	bl	80014b0 <DMA_CalcBaseAndBitshift>
 8001064:	4603      	mov	r3, r0
 8001066:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800106c:	223f      	movs	r2, #63	@ 0x3f
 800106e:	409a      	lsls	r2, r3
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2200      	movs	r2, #0
 8001078:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2201      	movs	r2, #1
 800107e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001082:	2300      	movs	r3, #0
}
 8001084:	4618      	mov	r0, r3
 8001086:	3718      	adds	r7, #24
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	f010803f 	.word	0xf010803f

08001090 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b086      	sub	sp, #24
 8001094:	af00      	add	r7, sp, #0
 8001096:	60f8      	str	r0, [r7, #12]
 8001098:	60b9      	str	r1, [r7, #8]
 800109a:	607a      	str	r2, [r7, #4]
 800109c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800109e:	2300      	movs	r3, #0
 80010a0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010a6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80010ae:	2b01      	cmp	r3, #1
 80010b0:	d101      	bne.n	80010b6 <HAL_DMA_Start_IT+0x26>
 80010b2:	2302      	movs	r3, #2
 80010b4:	e040      	b.n	8001138 <HAL_DMA_Start_IT+0xa8>
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	2201      	movs	r2, #1
 80010ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	2b01      	cmp	r3, #1
 80010c8:	d12f      	bne.n	800112a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	2202      	movs	r2, #2
 80010ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	2200      	movs	r2, #0
 80010d6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	687a      	ldr	r2, [r7, #4]
 80010dc:	68b9      	ldr	r1, [r7, #8]
 80010de:	68f8      	ldr	r0, [r7, #12]
 80010e0:	f000 f9b8 	bl	8001454 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80010e8:	223f      	movs	r2, #63	@ 0x3f
 80010ea:	409a      	lsls	r2, r3
 80010ec:	693b      	ldr	r3, [r7, #16]
 80010ee:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f042 0216 	orr.w	r2, r2, #22
 80010fe:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001104:	2b00      	cmp	r3, #0
 8001106:	d007      	beq.n	8001118 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f042 0208 	orr.w	r2, r2, #8
 8001116:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	681a      	ldr	r2, [r3, #0]
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f042 0201 	orr.w	r2, r2, #1
 8001126:	601a      	str	r2, [r3, #0]
 8001128:	e005      	b.n	8001136 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	2200      	movs	r2, #0
 800112e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001132:	2302      	movs	r3, #2
 8001134:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001136:	7dfb      	ldrb	r3, [r7, #23]
}
 8001138:	4618      	mov	r0, r3
 800113a:	3718      	adds	r7, #24
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}

08001140 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b086      	sub	sp, #24
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001148:	2300      	movs	r3, #0
 800114a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800114c:	4b8e      	ldr	r3, [pc, #568]	@ (8001388 <HAL_DMA_IRQHandler+0x248>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a8e      	ldr	r2, [pc, #568]	@ (800138c <HAL_DMA_IRQHandler+0x24c>)
 8001152:	fba2 2303 	umull	r2, r3, r2, r3
 8001156:	0a9b      	lsrs	r3, r3, #10
 8001158:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800115e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001160:	693b      	ldr	r3, [r7, #16]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800116a:	2208      	movs	r2, #8
 800116c:	409a      	lsls	r2, r3
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	4013      	ands	r3, r2
 8001172:	2b00      	cmp	r3, #0
 8001174:	d01a      	beq.n	80011ac <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f003 0304 	and.w	r3, r3, #4
 8001180:	2b00      	cmp	r3, #0
 8001182:	d013      	beq.n	80011ac <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f022 0204 	bic.w	r2, r2, #4
 8001192:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001198:	2208      	movs	r2, #8
 800119a:	409a      	lsls	r2, r3
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80011a4:	f043 0201 	orr.w	r2, r3, #1
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80011b0:	2201      	movs	r2, #1
 80011b2:	409a      	lsls	r2, r3
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	4013      	ands	r3, r2
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d012      	beq.n	80011e2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	695b      	ldr	r3, [r3, #20]
 80011c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d00b      	beq.n	80011e2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80011ce:	2201      	movs	r2, #1
 80011d0:	409a      	lsls	r2, r3
 80011d2:	693b      	ldr	r3, [r7, #16]
 80011d4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80011da:	f043 0202 	orr.w	r2, r3, #2
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80011e6:	2204      	movs	r2, #4
 80011e8:	409a      	lsls	r2, r3
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	4013      	ands	r3, r2
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d012      	beq.n	8001218 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f003 0302 	and.w	r3, r3, #2
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d00b      	beq.n	8001218 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001204:	2204      	movs	r2, #4
 8001206:	409a      	lsls	r2, r3
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001210:	f043 0204 	orr.w	r2, r3, #4
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800121c:	2210      	movs	r2, #16
 800121e:	409a      	lsls	r2, r3
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	4013      	ands	r3, r2
 8001224:	2b00      	cmp	r3, #0
 8001226:	d043      	beq.n	80012b0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f003 0308 	and.w	r3, r3, #8
 8001232:	2b00      	cmp	r3, #0
 8001234:	d03c      	beq.n	80012b0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800123a:	2210      	movs	r2, #16
 800123c:	409a      	lsls	r2, r3
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800124c:	2b00      	cmp	r3, #0
 800124e:	d018      	beq.n	8001282 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800125a:	2b00      	cmp	r3, #0
 800125c:	d108      	bne.n	8001270 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001262:	2b00      	cmp	r3, #0
 8001264:	d024      	beq.n	80012b0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800126a:	6878      	ldr	r0, [r7, #4]
 800126c:	4798      	blx	r3
 800126e:	e01f      	b.n	80012b0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001274:	2b00      	cmp	r3, #0
 8001276:	d01b      	beq.n	80012b0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800127c:	6878      	ldr	r0, [r7, #4]
 800127e:	4798      	blx	r3
 8001280:	e016      	b.n	80012b0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800128c:	2b00      	cmp	r3, #0
 800128e:	d107      	bne.n	80012a0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f022 0208 	bic.w	r2, r2, #8
 800129e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d003      	beq.n	80012b0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ac:	6878      	ldr	r0, [r7, #4]
 80012ae:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012b4:	2220      	movs	r2, #32
 80012b6:	409a      	lsls	r2, r3
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	4013      	ands	r3, r2
 80012bc:	2b00      	cmp	r3, #0
 80012be:	f000 808f 	beq.w	80013e0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f003 0310 	and.w	r3, r3, #16
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	f000 8087 	beq.w	80013e0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012d6:	2220      	movs	r2, #32
 80012d8:	409a      	lsls	r2, r3
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80012e4:	b2db      	uxtb	r3, r3
 80012e6:	2b05      	cmp	r3, #5
 80012e8:	d136      	bne.n	8001358 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f022 0216 	bic.w	r2, r2, #22
 80012f8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	695a      	ldr	r2, [r3, #20]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001308:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800130e:	2b00      	cmp	r3, #0
 8001310:	d103      	bne.n	800131a <HAL_DMA_IRQHandler+0x1da>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001316:	2b00      	cmp	r3, #0
 8001318:	d007      	beq.n	800132a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f022 0208 	bic.w	r2, r2, #8
 8001328:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800132e:	223f      	movs	r2, #63	@ 0x3f
 8001330:	409a      	lsls	r2, r3
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2201      	movs	r2, #1
 800133a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2200      	movs	r2, #0
 8001342:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800134a:	2b00      	cmp	r3, #0
 800134c:	d07e      	beq.n	800144c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001352:	6878      	ldr	r0, [r7, #4]
 8001354:	4798      	blx	r3
        }
        return;
 8001356:	e079      	b.n	800144c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001362:	2b00      	cmp	r3, #0
 8001364:	d01d      	beq.n	80013a2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001370:	2b00      	cmp	r3, #0
 8001372:	d10d      	bne.n	8001390 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001378:	2b00      	cmp	r3, #0
 800137a:	d031      	beq.n	80013e0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001380:	6878      	ldr	r0, [r7, #4]
 8001382:	4798      	blx	r3
 8001384:	e02c      	b.n	80013e0 <HAL_DMA_IRQHandler+0x2a0>
 8001386:	bf00      	nop
 8001388:	20000000 	.word	0x20000000
 800138c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001394:	2b00      	cmp	r3, #0
 8001396:	d023      	beq.n	80013e0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800139c:	6878      	ldr	r0, [r7, #4]
 800139e:	4798      	blx	r3
 80013a0:	e01e      	b.n	80013e0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d10f      	bne.n	80013d0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f022 0210 	bic.w	r2, r2, #16
 80013be:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2201      	movs	r2, #1
 80013c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2200      	movs	r2, #0
 80013cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d003      	beq.n	80013e0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80013dc:	6878      	ldr	r0, [r7, #4]
 80013de:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d032      	beq.n	800144e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013ec:	f003 0301 	and.w	r3, r3, #1
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d022      	beq.n	800143a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2205      	movs	r2, #5
 80013f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f022 0201 	bic.w	r2, r2, #1
 800140a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	3301      	adds	r3, #1
 8001410:	60bb      	str	r3, [r7, #8]
 8001412:	697a      	ldr	r2, [r7, #20]
 8001414:	429a      	cmp	r2, r3
 8001416:	d307      	bcc.n	8001428 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f003 0301 	and.w	r3, r3, #1
 8001422:	2b00      	cmp	r3, #0
 8001424:	d1f2      	bne.n	800140c <HAL_DMA_IRQHandler+0x2cc>
 8001426:	e000      	b.n	800142a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001428:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2201      	movs	r2, #1
 800142e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2200      	movs	r2, #0
 8001436:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800143e:	2b00      	cmp	r3, #0
 8001440:	d005      	beq.n	800144e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	4798      	blx	r3
 800144a:	e000      	b.n	800144e <HAL_DMA_IRQHandler+0x30e>
        return;
 800144c:	bf00      	nop
    }
  }
}
 800144e:	3718      	adds	r7, #24
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}

08001454 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001454:	b480      	push	{r7}
 8001456:	b085      	sub	sp, #20
 8001458:	af00      	add	r7, sp, #0
 800145a:	60f8      	str	r0, [r7, #12]
 800145c:	60b9      	str	r1, [r7, #8]
 800145e:	607a      	str	r2, [r7, #4]
 8001460:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001470:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	683a      	ldr	r2, [r7, #0]
 8001478:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	689b      	ldr	r3, [r3, #8]
 800147e:	2b40      	cmp	r3, #64	@ 0x40
 8001480:	d108      	bne.n	8001494 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	687a      	ldr	r2, [r7, #4]
 8001488:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	68ba      	ldr	r2, [r7, #8]
 8001490:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001492:	e007      	b.n	80014a4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	68ba      	ldr	r2, [r7, #8]
 800149a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	687a      	ldr	r2, [r7, #4]
 80014a2:	60da      	str	r2, [r3, #12]
}
 80014a4:	bf00      	nop
 80014a6:	3714      	adds	r7, #20
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr

080014b0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b085      	sub	sp, #20
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	3b10      	subs	r3, #16
 80014c0:	4a14      	ldr	r2, [pc, #80]	@ (8001514 <DMA_CalcBaseAndBitshift+0x64>)
 80014c2:	fba2 2303 	umull	r2, r3, r2, r3
 80014c6:	091b      	lsrs	r3, r3, #4
 80014c8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80014ca:	4a13      	ldr	r2, [pc, #76]	@ (8001518 <DMA_CalcBaseAndBitshift+0x68>)
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	4413      	add	r3, r2
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	461a      	mov	r2, r3
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	2b03      	cmp	r3, #3
 80014dc:	d909      	bls.n	80014f2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80014e6:	f023 0303 	bic.w	r3, r3, #3
 80014ea:	1d1a      	adds	r2, r3, #4
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	659a      	str	r2, [r3, #88]	@ 0x58
 80014f0:	e007      	b.n	8001502 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80014fa:	f023 0303 	bic.w	r3, r3, #3
 80014fe:	687a      	ldr	r2, [r7, #4]
 8001500:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001506:	4618      	mov	r0, r3
 8001508:	3714      	adds	r7, #20
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	aaaaaaab 	.word	0xaaaaaaab
 8001518:	080062bc 	.word	0x080062bc

0800151c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800151c:	b480      	push	{r7}
 800151e:	b085      	sub	sp, #20
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001524:	2300      	movs	r3, #0
 8001526:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800152c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	699b      	ldr	r3, [r3, #24]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d11f      	bne.n	8001576 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001536:	68bb      	ldr	r3, [r7, #8]
 8001538:	2b03      	cmp	r3, #3
 800153a:	d856      	bhi.n	80015ea <DMA_CheckFifoParam+0xce>
 800153c:	a201      	add	r2, pc, #4	@ (adr r2, 8001544 <DMA_CheckFifoParam+0x28>)
 800153e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001542:	bf00      	nop
 8001544:	08001555 	.word	0x08001555
 8001548:	08001567 	.word	0x08001567
 800154c:	08001555 	.word	0x08001555
 8001550:	080015eb 	.word	0x080015eb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001558:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800155c:	2b00      	cmp	r3, #0
 800155e:	d046      	beq.n	80015ee <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001560:	2301      	movs	r3, #1
 8001562:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001564:	e043      	b.n	80015ee <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800156a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800156e:	d140      	bne.n	80015f2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001570:	2301      	movs	r3, #1
 8001572:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001574:	e03d      	b.n	80015f2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	699b      	ldr	r3, [r3, #24]
 800157a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800157e:	d121      	bne.n	80015c4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	2b03      	cmp	r3, #3
 8001584:	d837      	bhi.n	80015f6 <DMA_CheckFifoParam+0xda>
 8001586:	a201      	add	r2, pc, #4	@ (adr r2, 800158c <DMA_CheckFifoParam+0x70>)
 8001588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800158c:	0800159d 	.word	0x0800159d
 8001590:	080015a3 	.word	0x080015a3
 8001594:	0800159d 	.word	0x0800159d
 8001598:	080015b5 	.word	0x080015b5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800159c:	2301      	movs	r3, #1
 800159e:	73fb      	strb	r3, [r7, #15]
      break;
 80015a0:	e030      	b.n	8001604 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015a6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d025      	beq.n	80015fa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
 80015b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80015b2:	e022      	b.n	80015fa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015b8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80015bc:	d11f      	bne.n	80015fe <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80015c2:	e01c      	b.n	80015fe <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	2b02      	cmp	r3, #2
 80015c8:	d903      	bls.n	80015d2 <DMA_CheckFifoParam+0xb6>
 80015ca:	68bb      	ldr	r3, [r7, #8]
 80015cc:	2b03      	cmp	r3, #3
 80015ce:	d003      	beq.n	80015d8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80015d0:	e018      	b.n	8001604 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	73fb      	strb	r3, [r7, #15]
      break;
 80015d6:	e015      	b.n	8001604 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015dc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d00e      	beq.n	8001602 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80015e4:	2301      	movs	r3, #1
 80015e6:	73fb      	strb	r3, [r7, #15]
      break;
 80015e8:	e00b      	b.n	8001602 <DMA_CheckFifoParam+0xe6>
      break;
 80015ea:	bf00      	nop
 80015ec:	e00a      	b.n	8001604 <DMA_CheckFifoParam+0xe8>
      break;
 80015ee:	bf00      	nop
 80015f0:	e008      	b.n	8001604 <DMA_CheckFifoParam+0xe8>
      break;
 80015f2:	bf00      	nop
 80015f4:	e006      	b.n	8001604 <DMA_CheckFifoParam+0xe8>
      break;
 80015f6:	bf00      	nop
 80015f8:	e004      	b.n	8001604 <DMA_CheckFifoParam+0xe8>
      break;
 80015fa:	bf00      	nop
 80015fc:	e002      	b.n	8001604 <DMA_CheckFifoParam+0xe8>
      break;   
 80015fe:	bf00      	nop
 8001600:	e000      	b.n	8001604 <DMA_CheckFifoParam+0xe8>
      break;
 8001602:	bf00      	nop
    }
  } 
  
  return status; 
 8001604:	7bfb      	ldrb	r3, [r7, #15]
}
 8001606:	4618      	mov	r0, r3
 8001608:	3714      	adds	r7, #20
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop

08001614 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001614:	b480      	push	{r7}
 8001616:	b089      	sub	sp, #36	@ 0x24
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
 800161c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800161e:	2300      	movs	r3, #0
 8001620:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001622:	2300      	movs	r3, #0
 8001624:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001626:	2300      	movs	r3, #0
 8001628:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800162a:	2300      	movs	r3, #0
 800162c:	61fb      	str	r3, [r7, #28]
 800162e:	e159      	b.n	80018e4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001630:	2201      	movs	r2, #1
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	fa02 f303 	lsl.w	r3, r2, r3
 8001638:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	697a      	ldr	r2, [r7, #20]
 8001640:	4013      	ands	r3, r2
 8001642:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001644:	693a      	ldr	r2, [r7, #16]
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	429a      	cmp	r2, r3
 800164a:	f040 8148 	bne.w	80018de <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	f003 0303 	and.w	r3, r3, #3
 8001656:	2b01      	cmp	r3, #1
 8001658:	d005      	beq.n	8001666 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001662:	2b02      	cmp	r3, #2
 8001664:	d130      	bne.n	80016c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800166c:	69fb      	ldr	r3, [r7, #28]
 800166e:	005b      	lsls	r3, r3, #1
 8001670:	2203      	movs	r2, #3
 8001672:	fa02 f303 	lsl.w	r3, r2, r3
 8001676:	43db      	mvns	r3, r3
 8001678:	69ba      	ldr	r2, [r7, #24]
 800167a:	4013      	ands	r3, r2
 800167c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	68da      	ldr	r2, [r3, #12]
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	005b      	lsls	r3, r3, #1
 8001686:	fa02 f303 	lsl.w	r3, r2, r3
 800168a:	69ba      	ldr	r2, [r7, #24]
 800168c:	4313      	orrs	r3, r2
 800168e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	69ba      	ldr	r2, [r7, #24]
 8001694:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800169c:	2201      	movs	r2, #1
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	fa02 f303 	lsl.w	r3, r2, r3
 80016a4:	43db      	mvns	r3, r3
 80016a6:	69ba      	ldr	r2, [r7, #24]
 80016a8:	4013      	ands	r3, r2
 80016aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	091b      	lsrs	r3, r3, #4
 80016b2:	f003 0201 	and.w	r2, r3, #1
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	fa02 f303 	lsl.w	r3, r2, r3
 80016bc:	69ba      	ldr	r2, [r7, #24]
 80016be:	4313      	orrs	r3, r2
 80016c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	69ba      	ldr	r2, [r7, #24]
 80016c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f003 0303 	and.w	r3, r3, #3
 80016d0:	2b03      	cmp	r3, #3
 80016d2:	d017      	beq.n	8001704 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	005b      	lsls	r3, r3, #1
 80016de:	2203      	movs	r2, #3
 80016e0:	fa02 f303 	lsl.w	r3, r2, r3
 80016e4:	43db      	mvns	r3, r3
 80016e6:	69ba      	ldr	r2, [r7, #24]
 80016e8:	4013      	ands	r3, r2
 80016ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	689a      	ldr	r2, [r3, #8]
 80016f0:	69fb      	ldr	r3, [r7, #28]
 80016f2:	005b      	lsls	r3, r3, #1
 80016f4:	fa02 f303 	lsl.w	r3, r2, r3
 80016f8:	69ba      	ldr	r2, [r7, #24]
 80016fa:	4313      	orrs	r3, r2
 80016fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	69ba      	ldr	r2, [r7, #24]
 8001702:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f003 0303 	and.w	r3, r3, #3
 800170c:	2b02      	cmp	r3, #2
 800170e:	d123      	bne.n	8001758 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001710:	69fb      	ldr	r3, [r7, #28]
 8001712:	08da      	lsrs	r2, r3, #3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	3208      	adds	r2, #8
 8001718:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800171c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	f003 0307 	and.w	r3, r3, #7
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	220f      	movs	r2, #15
 8001728:	fa02 f303 	lsl.w	r3, r2, r3
 800172c:	43db      	mvns	r3, r3
 800172e:	69ba      	ldr	r2, [r7, #24]
 8001730:	4013      	ands	r3, r2
 8001732:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	691a      	ldr	r2, [r3, #16]
 8001738:	69fb      	ldr	r3, [r7, #28]
 800173a:	f003 0307 	and.w	r3, r3, #7
 800173e:	009b      	lsls	r3, r3, #2
 8001740:	fa02 f303 	lsl.w	r3, r2, r3
 8001744:	69ba      	ldr	r2, [r7, #24]
 8001746:	4313      	orrs	r3, r2
 8001748:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	08da      	lsrs	r2, r3, #3
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	3208      	adds	r2, #8
 8001752:	69b9      	ldr	r1, [r7, #24]
 8001754:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800175e:	69fb      	ldr	r3, [r7, #28]
 8001760:	005b      	lsls	r3, r3, #1
 8001762:	2203      	movs	r2, #3
 8001764:	fa02 f303 	lsl.w	r3, r2, r3
 8001768:	43db      	mvns	r3, r3
 800176a:	69ba      	ldr	r2, [r7, #24]
 800176c:	4013      	ands	r3, r2
 800176e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	f003 0203 	and.w	r2, r3, #3
 8001778:	69fb      	ldr	r3, [r7, #28]
 800177a:	005b      	lsls	r3, r3, #1
 800177c:	fa02 f303 	lsl.w	r3, r2, r3
 8001780:	69ba      	ldr	r2, [r7, #24]
 8001782:	4313      	orrs	r3, r2
 8001784:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	69ba      	ldr	r2, [r7, #24]
 800178a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001794:	2b00      	cmp	r3, #0
 8001796:	f000 80a2 	beq.w	80018de <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800179a:	2300      	movs	r3, #0
 800179c:	60fb      	str	r3, [r7, #12]
 800179e:	4b57      	ldr	r3, [pc, #348]	@ (80018fc <HAL_GPIO_Init+0x2e8>)
 80017a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017a2:	4a56      	ldr	r2, [pc, #344]	@ (80018fc <HAL_GPIO_Init+0x2e8>)
 80017a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80017aa:	4b54      	ldr	r3, [pc, #336]	@ (80018fc <HAL_GPIO_Init+0x2e8>)
 80017ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017b2:	60fb      	str	r3, [r7, #12]
 80017b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017b6:	4a52      	ldr	r2, [pc, #328]	@ (8001900 <HAL_GPIO_Init+0x2ec>)
 80017b8:	69fb      	ldr	r3, [r7, #28]
 80017ba:	089b      	lsrs	r3, r3, #2
 80017bc:	3302      	adds	r3, #2
 80017be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80017c4:	69fb      	ldr	r3, [r7, #28]
 80017c6:	f003 0303 	and.w	r3, r3, #3
 80017ca:	009b      	lsls	r3, r3, #2
 80017cc:	220f      	movs	r2, #15
 80017ce:	fa02 f303 	lsl.w	r3, r2, r3
 80017d2:	43db      	mvns	r3, r3
 80017d4:	69ba      	ldr	r2, [r7, #24]
 80017d6:	4013      	ands	r3, r2
 80017d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	4a49      	ldr	r2, [pc, #292]	@ (8001904 <HAL_GPIO_Init+0x2f0>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d019      	beq.n	8001816 <HAL_GPIO_Init+0x202>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	4a48      	ldr	r2, [pc, #288]	@ (8001908 <HAL_GPIO_Init+0x2f4>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d013      	beq.n	8001812 <HAL_GPIO_Init+0x1fe>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4a47      	ldr	r2, [pc, #284]	@ (800190c <HAL_GPIO_Init+0x2f8>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d00d      	beq.n	800180e <HAL_GPIO_Init+0x1fa>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4a46      	ldr	r2, [pc, #280]	@ (8001910 <HAL_GPIO_Init+0x2fc>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d007      	beq.n	800180a <HAL_GPIO_Init+0x1f6>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4a45      	ldr	r2, [pc, #276]	@ (8001914 <HAL_GPIO_Init+0x300>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d101      	bne.n	8001806 <HAL_GPIO_Init+0x1f2>
 8001802:	2304      	movs	r3, #4
 8001804:	e008      	b.n	8001818 <HAL_GPIO_Init+0x204>
 8001806:	2307      	movs	r3, #7
 8001808:	e006      	b.n	8001818 <HAL_GPIO_Init+0x204>
 800180a:	2303      	movs	r3, #3
 800180c:	e004      	b.n	8001818 <HAL_GPIO_Init+0x204>
 800180e:	2302      	movs	r3, #2
 8001810:	e002      	b.n	8001818 <HAL_GPIO_Init+0x204>
 8001812:	2301      	movs	r3, #1
 8001814:	e000      	b.n	8001818 <HAL_GPIO_Init+0x204>
 8001816:	2300      	movs	r3, #0
 8001818:	69fa      	ldr	r2, [r7, #28]
 800181a:	f002 0203 	and.w	r2, r2, #3
 800181e:	0092      	lsls	r2, r2, #2
 8001820:	4093      	lsls	r3, r2
 8001822:	69ba      	ldr	r2, [r7, #24]
 8001824:	4313      	orrs	r3, r2
 8001826:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001828:	4935      	ldr	r1, [pc, #212]	@ (8001900 <HAL_GPIO_Init+0x2ec>)
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	089b      	lsrs	r3, r3, #2
 800182e:	3302      	adds	r3, #2
 8001830:	69ba      	ldr	r2, [r7, #24]
 8001832:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001836:	4b38      	ldr	r3, [pc, #224]	@ (8001918 <HAL_GPIO_Init+0x304>)
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	43db      	mvns	r3, r3
 8001840:	69ba      	ldr	r2, [r7, #24]
 8001842:	4013      	ands	r3, r2
 8001844:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d003      	beq.n	800185a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001852:	69ba      	ldr	r2, [r7, #24]
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	4313      	orrs	r3, r2
 8001858:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800185a:	4a2f      	ldr	r2, [pc, #188]	@ (8001918 <HAL_GPIO_Init+0x304>)
 800185c:	69bb      	ldr	r3, [r7, #24]
 800185e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001860:	4b2d      	ldr	r3, [pc, #180]	@ (8001918 <HAL_GPIO_Init+0x304>)
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	43db      	mvns	r3, r3
 800186a:	69ba      	ldr	r2, [r7, #24]
 800186c:	4013      	ands	r3, r2
 800186e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001878:	2b00      	cmp	r3, #0
 800187a:	d003      	beq.n	8001884 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800187c:	69ba      	ldr	r2, [r7, #24]
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	4313      	orrs	r3, r2
 8001882:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001884:	4a24      	ldr	r2, [pc, #144]	@ (8001918 <HAL_GPIO_Init+0x304>)
 8001886:	69bb      	ldr	r3, [r7, #24]
 8001888:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800188a:	4b23      	ldr	r3, [pc, #140]	@ (8001918 <HAL_GPIO_Init+0x304>)
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	43db      	mvns	r3, r3
 8001894:	69ba      	ldr	r2, [r7, #24]
 8001896:	4013      	ands	r3, r2
 8001898:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d003      	beq.n	80018ae <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80018a6:	69ba      	ldr	r2, [r7, #24]
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	4313      	orrs	r3, r2
 80018ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80018ae:	4a1a      	ldr	r2, [pc, #104]	@ (8001918 <HAL_GPIO_Init+0x304>)
 80018b0:	69bb      	ldr	r3, [r7, #24]
 80018b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018b4:	4b18      	ldr	r3, [pc, #96]	@ (8001918 <HAL_GPIO_Init+0x304>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	43db      	mvns	r3, r3
 80018be:	69ba      	ldr	r2, [r7, #24]
 80018c0:	4013      	ands	r3, r2
 80018c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d003      	beq.n	80018d8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80018d0:	69ba      	ldr	r2, [r7, #24]
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	4313      	orrs	r3, r2
 80018d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80018d8:	4a0f      	ldr	r2, [pc, #60]	@ (8001918 <HAL_GPIO_Init+0x304>)
 80018da:	69bb      	ldr	r3, [r7, #24]
 80018dc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	3301      	adds	r3, #1
 80018e2:	61fb      	str	r3, [r7, #28]
 80018e4:	69fb      	ldr	r3, [r7, #28]
 80018e6:	2b0f      	cmp	r3, #15
 80018e8:	f67f aea2 	bls.w	8001630 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80018ec:	bf00      	nop
 80018ee:	bf00      	nop
 80018f0:	3724      	adds	r7, #36	@ 0x24
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	40023800 	.word	0x40023800
 8001900:	40013800 	.word	0x40013800
 8001904:	40020000 	.word	0x40020000
 8001908:	40020400 	.word	0x40020400
 800190c:	40020800 	.word	0x40020800
 8001910:	40020c00 	.word	0x40020c00
 8001914:	40021000 	.word	0x40021000
 8001918:	40013c00 	.word	0x40013c00

0800191c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800191c:	b480      	push	{r7}
 800191e:	b085      	sub	sp, #20
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
 8001924:	460b      	mov	r3, r1
 8001926:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	691a      	ldr	r2, [r3, #16]
 800192c:	887b      	ldrh	r3, [r7, #2]
 800192e:	4013      	ands	r3, r2
 8001930:	2b00      	cmp	r3, #0
 8001932:	d002      	beq.n	800193a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001934:	2301      	movs	r3, #1
 8001936:	73fb      	strb	r3, [r7, #15]
 8001938:	e001      	b.n	800193e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800193a:	2300      	movs	r3, #0
 800193c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800193e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001940:	4618      	mov	r0, r3
 8001942:	3714      	adds	r7, #20
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr

0800194c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	460b      	mov	r3, r1
 8001956:	807b      	strh	r3, [r7, #2]
 8001958:	4613      	mov	r3, r2
 800195a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800195c:	787b      	ldrb	r3, [r7, #1]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d003      	beq.n	800196a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001962:	887a      	ldrh	r2, [r7, #2]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001968:	e003      	b.n	8001972 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800196a:	887b      	ldrh	r3, [r7, #2]
 800196c:	041a      	lsls	r2, r3, #16
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	619a      	str	r2, [r3, #24]
}
 8001972:	bf00      	nop
 8001974:	370c      	adds	r7, #12
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
	...

08001980 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b086      	sub	sp, #24
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d101      	bne.n	8001992 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e267      	b.n	8001e62 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0301 	and.w	r3, r3, #1
 800199a:	2b00      	cmp	r3, #0
 800199c:	d075      	beq.n	8001a8a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800199e:	4b88      	ldr	r3, [pc, #544]	@ (8001bc0 <HAL_RCC_OscConfig+0x240>)
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	f003 030c 	and.w	r3, r3, #12
 80019a6:	2b04      	cmp	r3, #4
 80019a8:	d00c      	beq.n	80019c4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019aa:	4b85      	ldr	r3, [pc, #532]	@ (8001bc0 <HAL_RCC_OscConfig+0x240>)
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80019b2:	2b08      	cmp	r3, #8
 80019b4:	d112      	bne.n	80019dc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019b6:	4b82      	ldr	r3, [pc, #520]	@ (8001bc0 <HAL_RCC_OscConfig+0x240>)
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019be:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80019c2:	d10b      	bne.n	80019dc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019c4:	4b7e      	ldr	r3, [pc, #504]	@ (8001bc0 <HAL_RCC_OscConfig+0x240>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d05b      	beq.n	8001a88 <HAL_RCC_OscConfig+0x108>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d157      	bne.n	8001a88 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80019d8:	2301      	movs	r3, #1
 80019da:	e242      	b.n	8001e62 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80019e4:	d106      	bne.n	80019f4 <HAL_RCC_OscConfig+0x74>
 80019e6:	4b76      	ldr	r3, [pc, #472]	@ (8001bc0 <HAL_RCC_OscConfig+0x240>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a75      	ldr	r2, [pc, #468]	@ (8001bc0 <HAL_RCC_OscConfig+0x240>)
 80019ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019f0:	6013      	str	r3, [r2, #0]
 80019f2:	e01d      	b.n	8001a30 <HAL_RCC_OscConfig+0xb0>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80019fc:	d10c      	bne.n	8001a18 <HAL_RCC_OscConfig+0x98>
 80019fe:	4b70      	ldr	r3, [pc, #448]	@ (8001bc0 <HAL_RCC_OscConfig+0x240>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a6f      	ldr	r2, [pc, #444]	@ (8001bc0 <HAL_RCC_OscConfig+0x240>)
 8001a04:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a08:	6013      	str	r3, [r2, #0]
 8001a0a:	4b6d      	ldr	r3, [pc, #436]	@ (8001bc0 <HAL_RCC_OscConfig+0x240>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a6c      	ldr	r2, [pc, #432]	@ (8001bc0 <HAL_RCC_OscConfig+0x240>)
 8001a10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a14:	6013      	str	r3, [r2, #0]
 8001a16:	e00b      	b.n	8001a30 <HAL_RCC_OscConfig+0xb0>
 8001a18:	4b69      	ldr	r3, [pc, #420]	@ (8001bc0 <HAL_RCC_OscConfig+0x240>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a68      	ldr	r2, [pc, #416]	@ (8001bc0 <HAL_RCC_OscConfig+0x240>)
 8001a1e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a22:	6013      	str	r3, [r2, #0]
 8001a24:	4b66      	ldr	r3, [pc, #408]	@ (8001bc0 <HAL_RCC_OscConfig+0x240>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a65      	ldr	r2, [pc, #404]	@ (8001bc0 <HAL_RCC_OscConfig+0x240>)
 8001a2a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d013      	beq.n	8001a60 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a38:	f7ff f96a 	bl	8000d10 <HAL_GetTick>
 8001a3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a3e:	e008      	b.n	8001a52 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a40:	f7ff f966 	bl	8000d10 <HAL_GetTick>
 8001a44:	4602      	mov	r2, r0
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	2b64      	cmp	r3, #100	@ 0x64
 8001a4c:	d901      	bls.n	8001a52 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	e207      	b.n	8001e62 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a52:	4b5b      	ldr	r3, [pc, #364]	@ (8001bc0 <HAL_RCC_OscConfig+0x240>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d0f0      	beq.n	8001a40 <HAL_RCC_OscConfig+0xc0>
 8001a5e:	e014      	b.n	8001a8a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a60:	f7ff f956 	bl	8000d10 <HAL_GetTick>
 8001a64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a66:	e008      	b.n	8001a7a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a68:	f7ff f952 	bl	8000d10 <HAL_GetTick>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	2b64      	cmp	r3, #100	@ 0x64
 8001a74:	d901      	bls.n	8001a7a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a76:	2303      	movs	r3, #3
 8001a78:	e1f3      	b.n	8001e62 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a7a:	4b51      	ldr	r3, [pc, #324]	@ (8001bc0 <HAL_RCC_OscConfig+0x240>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d1f0      	bne.n	8001a68 <HAL_RCC_OscConfig+0xe8>
 8001a86:	e000      	b.n	8001a8a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 0302 	and.w	r3, r3, #2
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d063      	beq.n	8001b5e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001a96:	4b4a      	ldr	r3, [pc, #296]	@ (8001bc0 <HAL_RCC_OscConfig+0x240>)
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	f003 030c 	and.w	r3, r3, #12
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d00b      	beq.n	8001aba <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001aa2:	4b47      	ldr	r3, [pc, #284]	@ (8001bc0 <HAL_RCC_OscConfig+0x240>)
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001aaa:	2b08      	cmp	r3, #8
 8001aac:	d11c      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001aae:	4b44      	ldr	r3, [pc, #272]	@ (8001bc0 <HAL_RCC_OscConfig+0x240>)
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d116      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001aba:	4b41      	ldr	r3, [pc, #260]	@ (8001bc0 <HAL_RCC_OscConfig+0x240>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 0302 	and.w	r3, r3, #2
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d005      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x152>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	68db      	ldr	r3, [r3, #12]
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d001      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e1c7      	b.n	8001e62 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ad2:	4b3b      	ldr	r3, [pc, #236]	@ (8001bc0 <HAL_RCC_OscConfig+0x240>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	691b      	ldr	r3, [r3, #16]
 8001ade:	00db      	lsls	r3, r3, #3
 8001ae0:	4937      	ldr	r1, [pc, #220]	@ (8001bc0 <HAL_RCC_OscConfig+0x240>)
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ae6:	e03a      	b.n	8001b5e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d020      	beq.n	8001b32 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001af0:	4b34      	ldr	r3, [pc, #208]	@ (8001bc4 <HAL_RCC_OscConfig+0x244>)
 8001af2:	2201      	movs	r2, #1
 8001af4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001af6:	f7ff f90b 	bl	8000d10 <HAL_GetTick>
 8001afa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001afc:	e008      	b.n	8001b10 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001afe:	f7ff f907 	bl	8000d10 <HAL_GetTick>
 8001b02:	4602      	mov	r2, r0
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	1ad3      	subs	r3, r2, r3
 8001b08:	2b02      	cmp	r3, #2
 8001b0a:	d901      	bls.n	8001b10 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	e1a8      	b.n	8001e62 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b10:	4b2b      	ldr	r3, [pc, #172]	@ (8001bc0 <HAL_RCC_OscConfig+0x240>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 0302 	and.w	r3, r3, #2
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d0f0      	beq.n	8001afe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b1c:	4b28      	ldr	r3, [pc, #160]	@ (8001bc0 <HAL_RCC_OscConfig+0x240>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	691b      	ldr	r3, [r3, #16]
 8001b28:	00db      	lsls	r3, r3, #3
 8001b2a:	4925      	ldr	r1, [pc, #148]	@ (8001bc0 <HAL_RCC_OscConfig+0x240>)
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	600b      	str	r3, [r1, #0]
 8001b30:	e015      	b.n	8001b5e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b32:	4b24      	ldr	r3, [pc, #144]	@ (8001bc4 <HAL_RCC_OscConfig+0x244>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b38:	f7ff f8ea 	bl	8000d10 <HAL_GetTick>
 8001b3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b3e:	e008      	b.n	8001b52 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b40:	f7ff f8e6 	bl	8000d10 <HAL_GetTick>
 8001b44:	4602      	mov	r2, r0
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	2b02      	cmp	r3, #2
 8001b4c:	d901      	bls.n	8001b52 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	e187      	b.n	8001e62 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b52:	4b1b      	ldr	r3, [pc, #108]	@ (8001bc0 <HAL_RCC_OscConfig+0x240>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 0302 	and.w	r3, r3, #2
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d1f0      	bne.n	8001b40 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 0308 	and.w	r3, r3, #8
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d036      	beq.n	8001bd8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	695b      	ldr	r3, [r3, #20]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d016      	beq.n	8001ba0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b72:	4b15      	ldr	r3, [pc, #84]	@ (8001bc8 <HAL_RCC_OscConfig+0x248>)
 8001b74:	2201      	movs	r2, #1
 8001b76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b78:	f7ff f8ca 	bl	8000d10 <HAL_GetTick>
 8001b7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b7e:	e008      	b.n	8001b92 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b80:	f7ff f8c6 	bl	8000d10 <HAL_GetTick>
 8001b84:	4602      	mov	r2, r0
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	2b02      	cmp	r3, #2
 8001b8c:	d901      	bls.n	8001b92 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001b8e:	2303      	movs	r3, #3
 8001b90:	e167      	b.n	8001e62 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b92:	4b0b      	ldr	r3, [pc, #44]	@ (8001bc0 <HAL_RCC_OscConfig+0x240>)
 8001b94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b96:	f003 0302 	and.w	r3, r3, #2
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d0f0      	beq.n	8001b80 <HAL_RCC_OscConfig+0x200>
 8001b9e:	e01b      	b.n	8001bd8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ba0:	4b09      	ldr	r3, [pc, #36]	@ (8001bc8 <HAL_RCC_OscConfig+0x248>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ba6:	f7ff f8b3 	bl	8000d10 <HAL_GetTick>
 8001baa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bac:	e00e      	b.n	8001bcc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bae:	f7ff f8af 	bl	8000d10 <HAL_GetTick>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	1ad3      	subs	r3, r2, r3
 8001bb8:	2b02      	cmp	r3, #2
 8001bba:	d907      	bls.n	8001bcc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	e150      	b.n	8001e62 <HAL_RCC_OscConfig+0x4e2>
 8001bc0:	40023800 	.word	0x40023800
 8001bc4:	42470000 	.word	0x42470000
 8001bc8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bcc:	4b88      	ldr	r3, [pc, #544]	@ (8001df0 <HAL_RCC_OscConfig+0x470>)
 8001bce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001bd0:	f003 0302 	and.w	r3, r3, #2
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d1ea      	bne.n	8001bae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f003 0304 	and.w	r3, r3, #4
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	f000 8097 	beq.w	8001d14 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001be6:	2300      	movs	r3, #0
 8001be8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bea:	4b81      	ldr	r3, [pc, #516]	@ (8001df0 <HAL_RCC_OscConfig+0x470>)
 8001bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d10f      	bne.n	8001c16 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	60bb      	str	r3, [r7, #8]
 8001bfa:	4b7d      	ldr	r3, [pc, #500]	@ (8001df0 <HAL_RCC_OscConfig+0x470>)
 8001bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bfe:	4a7c      	ldr	r2, [pc, #496]	@ (8001df0 <HAL_RCC_OscConfig+0x470>)
 8001c00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c04:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c06:	4b7a      	ldr	r3, [pc, #488]	@ (8001df0 <HAL_RCC_OscConfig+0x470>)
 8001c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c0e:	60bb      	str	r3, [r7, #8]
 8001c10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c12:	2301      	movs	r3, #1
 8001c14:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c16:	4b77      	ldr	r3, [pc, #476]	@ (8001df4 <HAL_RCC_OscConfig+0x474>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d118      	bne.n	8001c54 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c22:	4b74      	ldr	r3, [pc, #464]	@ (8001df4 <HAL_RCC_OscConfig+0x474>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a73      	ldr	r2, [pc, #460]	@ (8001df4 <HAL_RCC_OscConfig+0x474>)
 8001c28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c2e:	f7ff f86f 	bl	8000d10 <HAL_GetTick>
 8001c32:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c34:	e008      	b.n	8001c48 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c36:	f7ff f86b 	bl	8000d10 <HAL_GetTick>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	1ad3      	subs	r3, r2, r3
 8001c40:	2b02      	cmp	r3, #2
 8001c42:	d901      	bls.n	8001c48 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001c44:	2303      	movs	r3, #3
 8001c46:	e10c      	b.n	8001e62 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c48:	4b6a      	ldr	r3, [pc, #424]	@ (8001df4 <HAL_RCC_OscConfig+0x474>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d0f0      	beq.n	8001c36 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d106      	bne.n	8001c6a <HAL_RCC_OscConfig+0x2ea>
 8001c5c:	4b64      	ldr	r3, [pc, #400]	@ (8001df0 <HAL_RCC_OscConfig+0x470>)
 8001c5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c60:	4a63      	ldr	r2, [pc, #396]	@ (8001df0 <HAL_RCC_OscConfig+0x470>)
 8001c62:	f043 0301 	orr.w	r3, r3, #1
 8001c66:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c68:	e01c      	b.n	8001ca4 <HAL_RCC_OscConfig+0x324>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	2b05      	cmp	r3, #5
 8001c70:	d10c      	bne.n	8001c8c <HAL_RCC_OscConfig+0x30c>
 8001c72:	4b5f      	ldr	r3, [pc, #380]	@ (8001df0 <HAL_RCC_OscConfig+0x470>)
 8001c74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c76:	4a5e      	ldr	r2, [pc, #376]	@ (8001df0 <HAL_RCC_OscConfig+0x470>)
 8001c78:	f043 0304 	orr.w	r3, r3, #4
 8001c7c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c7e:	4b5c      	ldr	r3, [pc, #368]	@ (8001df0 <HAL_RCC_OscConfig+0x470>)
 8001c80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c82:	4a5b      	ldr	r2, [pc, #364]	@ (8001df0 <HAL_RCC_OscConfig+0x470>)
 8001c84:	f043 0301 	orr.w	r3, r3, #1
 8001c88:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c8a:	e00b      	b.n	8001ca4 <HAL_RCC_OscConfig+0x324>
 8001c8c:	4b58      	ldr	r3, [pc, #352]	@ (8001df0 <HAL_RCC_OscConfig+0x470>)
 8001c8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c90:	4a57      	ldr	r2, [pc, #348]	@ (8001df0 <HAL_RCC_OscConfig+0x470>)
 8001c92:	f023 0301 	bic.w	r3, r3, #1
 8001c96:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c98:	4b55      	ldr	r3, [pc, #340]	@ (8001df0 <HAL_RCC_OscConfig+0x470>)
 8001c9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c9c:	4a54      	ldr	r2, [pc, #336]	@ (8001df0 <HAL_RCC_OscConfig+0x470>)
 8001c9e:	f023 0304 	bic.w	r3, r3, #4
 8001ca2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d015      	beq.n	8001cd8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cac:	f7ff f830 	bl	8000d10 <HAL_GetTick>
 8001cb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cb2:	e00a      	b.n	8001cca <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cb4:	f7ff f82c 	bl	8000d10 <HAL_GetTick>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d901      	bls.n	8001cca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	e0cb      	b.n	8001e62 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cca:	4b49      	ldr	r3, [pc, #292]	@ (8001df0 <HAL_RCC_OscConfig+0x470>)
 8001ccc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cce:	f003 0302 	and.w	r3, r3, #2
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d0ee      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x334>
 8001cd6:	e014      	b.n	8001d02 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cd8:	f7ff f81a 	bl	8000d10 <HAL_GetTick>
 8001cdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cde:	e00a      	b.n	8001cf6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ce0:	f7ff f816 	bl	8000d10 <HAL_GetTick>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d901      	bls.n	8001cf6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e0b5      	b.n	8001e62 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cf6:	4b3e      	ldr	r3, [pc, #248]	@ (8001df0 <HAL_RCC_OscConfig+0x470>)
 8001cf8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cfa:	f003 0302 	and.w	r3, r3, #2
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d1ee      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001d02:	7dfb      	ldrb	r3, [r7, #23]
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d105      	bne.n	8001d14 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d08:	4b39      	ldr	r3, [pc, #228]	@ (8001df0 <HAL_RCC_OscConfig+0x470>)
 8001d0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d0c:	4a38      	ldr	r2, [pc, #224]	@ (8001df0 <HAL_RCC_OscConfig+0x470>)
 8001d0e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d12:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	699b      	ldr	r3, [r3, #24]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	f000 80a1 	beq.w	8001e60 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d1e:	4b34      	ldr	r3, [pc, #208]	@ (8001df0 <HAL_RCC_OscConfig+0x470>)
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	f003 030c 	and.w	r3, r3, #12
 8001d26:	2b08      	cmp	r3, #8
 8001d28:	d05c      	beq.n	8001de4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	699b      	ldr	r3, [r3, #24]
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	d141      	bne.n	8001db6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d32:	4b31      	ldr	r3, [pc, #196]	@ (8001df8 <HAL_RCC_OscConfig+0x478>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d38:	f7fe ffea 	bl	8000d10 <HAL_GetTick>
 8001d3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d3e:	e008      	b.n	8001d52 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d40:	f7fe ffe6 	bl	8000d10 <HAL_GetTick>
 8001d44:	4602      	mov	r2, r0
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	2b02      	cmp	r3, #2
 8001d4c:	d901      	bls.n	8001d52 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e087      	b.n	8001e62 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d52:	4b27      	ldr	r3, [pc, #156]	@ (8001df0 <HAL_RCC_OscConfig+0x470>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d1f0      	bne.n	8001d40 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	69da      	ldr	r2, [r3, #28]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6a1b      	ldr	r3, [r3, #32]
 8001d66:	431a      	orrs	r2, r3
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d6c:	019b      	lsls	r3, r3, #6
 8001d6e:	431a      	orrs	r2, r3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d74:	085b      	lsrs	r3, r3, #1
 8001d76:	3b01      	subs	r3, #1
 8001d78:	041b      	lsls	r3, r3, #16
 8001d7a:	431a      	orrs	r2, r3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d80:	061b      	lsls	r3, r3, #24
 8001d82:	491b      	ldr	r1, [pc, #108]	@ (8001df0 <HAL_RCC_OscConfig+0x470>)
 8001d84:	4313      	orrs	r3, r2
 8001d86:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d88:	4b1b      	ldr	r3, [pc, #108]	@ (8001df8 <HAL_RCC_OscConfig+0x478>)
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d8e:	f7fe ffbf 	bl	8000d10 <HAL_GetTick>
 8001d92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d94:	e008      	b.n	8001da8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d96:	f7fe ffbb 	bl	8000d10 <HAL_GetTick>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	2b02      	cmp	r3, #2
 8001da2:	d901      	bls.n	8001da8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001da4:	2303      	movs	r3, #3
 8001da6:	e05c      	b.n	8001e62 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001da8:	4b11      	ldr	r3, [pc, #68]	@ (8001df0 <HAL_RCC_OscConfig+0x470>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d0f0      	beq.n	8001d96 <HAL_RCC_OscConfig+0x416>
 8001db4:	e054      	b.n	8001e60 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001db6:	4b10      	ldr	r3, [pc, #64]	@ (8001df8 <HAL_RCC_OscConfig+0x478>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dbc:	f7fe ffa8 	bl	8000d10 <HAL_GetTick>
 8001dc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dc2:	e008      	b.n	8001dd6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dc4:	f7fe ffa4 	bl	8000d10 <HAL_GetTick>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	2b02      	cmp	r3, #2
 8001dd0:	d901      	bls.n	8001dd6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e045      	b.n	8001e62 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dd6:	4b06      	ldr	r3, [pc, #24]	@ (8001df0 <HAL_RCC_OscConfig+0x470>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d1f0      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x444>
 8001de2:	e03d      	b.n	8001e60 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	699b      	ldr	r3, [r3, #24]
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d107      	bne.n	8001dfc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	e038      	b.n	8001e62 <HAL_RCC_OscConfig+0x4e2>
 8001df0:	40023800 	.word	0x40023800
 8001df4:	40007000 	.word	0x40007000
 8001df8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001dfc:	4b1b      	ldr	r3, [pc, #108]	@ (8001e6c <HAL_RCC_OscConfig+0x4ec>)
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	699b      	ldr	r3, [r3, #24]
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d028      	beq.n	8001e5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d121      	bne.n	8001e5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e22:	429a      	cmp	r2, r3
 8001e24:	d11a      	bne.n	8001e5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e26:	68fa      	ldr	r2, [r7, #12]
 8001e28:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001e32:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d111      	bne.n	8001e5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e42:	085b      	lsrs	r3, r3, #1
 8001e44:	3b01      	subs	r3, #1
 8001e46:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d107      	bne.n	8001e5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e56:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d001      	beq.n	8001e60 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	e000      	b.n	8001e62 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001e60:	2300      	movs	r3, #0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3718      	adds	r7, #24
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	40023800 	.word	0x40023800

08001e70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b084      	sub	sp, #16
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
 8001e78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d101      	bne.n	8001e84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	e0cc      	b.n	800201e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e84:	4b68      	ldr	r3, [pc, #416]	@ (8002028 <HAL_RCC_ClockConfig+0x1b8>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 0307 	and.w	r3, r3, #7
 8001e8c:	683a      	ldr	r2, [r7, #0]
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	d90c      	bls.n	8001eac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e92:	4b65      	ldr	r3, [pc, #404]	@ (8002028 <HAL_RCC_ClockConfig+0x1b8>)
 8001e94:	683a      	ldr	r2, [r7, #0]
 8001e96:	b2d2      	uxtb	r2, r2
 8001e98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e9a:	4b63      	ldr	r3, [pc, #396]	@ (8002028 <HAL_RCC_ClockConfig+0x1b8>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 0307 	and.w	r3, r3, #7
 8001ea2:	683a      	ldr	r2, [r7, #0]
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d001      	beq.n	8001eac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e0b8      	b.n	800201e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f003 0302 	and.w	r3, r3, #2
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d020      	beq.n	8001efa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0304 	and.w	r3, r3, #4
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d005      	beq.n	8001ed0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ec4:	4b59      	ldr	r3, [pc, #356]	@ (800202c <HAL_RCC_ClockConfig+0x1bc>)
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	4a58      	ldr	r2, [pc, #352]	@ (800202c <HAL_RCC_ClockConfig+0x1bc>)
 8001eca:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001ece:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f003 0308 	and.w	r3, r3, #8
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d005      	beq.n	8001ee8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001edc:	4b53      	ldr	r3, [pc, #332]	@ (800202c <HAL_RCC_ClockConfig+0x1bc>)
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	4a52      	ldr	r2, [pc, #328]	@ (800202c <HAL_RCC_ClockConfig+0x1bc>)
 8001ee2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001ee6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ee8:	4b50      	ldr	r3, [pc, #320]	@ (800202c <HAL_RCC_ClockConfig+0x1bc>)
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	494d      	ldr	r1, [pc, #308]	@ (800202c <HAL_RCC_ClockConfig+0x1bc>)
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 0301 	and.w	r3, r3, #1
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d044      	beq.n	8001f90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d107      	bne.n	8001f1e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f0e:	4b47      	ldr	r3, [pc, #284]	@ (800202c <HAL_RCC_ClockConfig+0x1bc>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d119      	bne.n	8001f4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e07f      	b.n	800201e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	d003      	beq.n	8001f2e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f2a:	2b03      	cmp	r3, #3
 8001f2c:	d107      	bne.n	8001f3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f2e:	4b3f      	ldr	r3, [pc, #252]	@ (800202c <HAL_RCC_ClockConfig+0x1bc>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d109      	bne.n	8001f4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e06f      	b.n	800201e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f3e:	4b3b      	ldr	r3, [pc, #236]	@ (800202c <HAL_RCC_ClockConfig+0x1bc>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0302 	and.w	r3, r3, #2
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d101      	bne.n	8001f4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e067      	b.n	800201e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f4e:	4b37      	ldr	r3, [pc, #220]	@ (800202c <HAL_RCC_ClockConfig+0x1bc>)
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	f023 0203 	bic.w	r2, r3, #3
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	4934      	ldr	r1, [pc, #208]	@ (800202c <HAL_RCC_ClockConfig+0x1bc>)
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f60:	f7fe fed6 	bl	8000d10 <HAL_GetTick>
 8001f64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f66:	e00a      	b.n	8001f7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f68:	f7fe fed2 	bl	8000d10 <HAL_GetTick>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d901      	bls.n	8001f7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	e04f      	b.n	800201e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f7e:	4b2b      	ldr	r3, [pc, #172]	@ (800202c <HAL_RCC_ClockConfig+0x1bc>)
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	f003 020c 	and.w	r2, r3, #12
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d1eb      	bne.n	8001f68 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f90:	4b25      	ldr	r3, [pc, #148]	@ (8002028 <HAL_RCC_ClockConfig+0x1b8>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 0307 	and.w	r3, r3, #7
 8001f98:	683a      	ldr	r2, [r7, #0]
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	d20c      	bcs.n	8001fb8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f9e:	4b22      	ldr	r3, [pc, #136]	@ (8002028 <HAL_RCC_ClockConfig+0x1b8>)
 8001fa0:	683a      	ldr	r2, [r7, #0]
 8001fa2:	b2d2      	uxtb	r2, r2
 8001fa4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fa6:	4b20      	ldr	r3, [pc, #128]	@ (8002028 <HAL_RCC_ClockConfig+0x1b8>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 0307 	and.w	r3, r3, #7
 8001fae:	683a      	ldr	r2, [r7, #0]
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d001      	beq.n	8001fb8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e032      	b.n	800201e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 0304 	and.w	r3, r3, #4
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d008      	beq.n	8001fd6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fc4:	4b19      	ldr	r3, [pc, #100]	@ (800202c <HAL_RCC_ClockConfig+0x1bc>)
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	4916      	ldr	r1, [pc, #88]	@ (800202c <HAL_RCC_ClockConfig+0x1bc>)
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0308 	and.w	r3, r3, #8
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d009      	beq.n	8001ff6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001fe2:	4b12      	ldr	r3, [pc, #72]	@ (800202c <HAL_RCC_ClockConfig+0x1bc>)
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	691b      	ldr	r3, [r3, #16]
 8001fee:	00db      	lsls	r3, r3, #3
 8001ff0:	490e      	ldr	r1, [pc, #56]	@ (800202c <HAL_RCC_ClockConfig+0x1bc>)
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001ff6:	f000 f821 	bl	800203c <HAL_RCC_GetSysClockFreq>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	4b0b      	ldr	r3, [pc, #44]	@ (800202c <HAL_RCC_ClockConfig+0x1bc>)
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	091b      	lsrs	r3, r3, #4
 8002002:	f003 030f 	and.w	r3, r3, #15
 8002006:	490a      	ldr	r1, [pc, #40]	@ (8002030 <HAL_RCC_ClockConfig+0x1c0>)
 8002008:	5ccb      	ldrb	r3, [r1, r3]
 800200a:	fa22 f303 	lsr.w	r3, r2, r3
 800200e:	4a09      	ldr	r2, [pc, #36]	@ (8002034 <HAL_RCC_ClockConfig+0x1c4>)
 8002010:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002012:	4b09      	ldr	r3, [pc, #36]	@ (8002038 <HAL_RCC_ClockConfig+0x1c8>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4618      	mov	r0, r3
 8002018:	f7fe fc82 	bl	8000920 <HAL_InitTick>

  return HAL_OK;
 800201c:	2300      	movs	r3, #0
}
 800201e:	4618      	mov	r0, r3
 8002020:	3710      	adds	r7, #16
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	40023c00 	.word	0x40023c00
 800202c:	40023800 	.word	0x40023800
 8002030:	080062a4 	.word	0x080062a4
 8002034:	20000000 	.word	0x20000000
 8002038:	20000004 	.word	0x20000004

0800203c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800203c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002040:	b094      	sub	sp, #80	@ 0x50
 8002042:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002044:	2300      	movs	r3, #0
 8002046:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002048:	2300      	movs	r3, #0
 800204a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800204c:	2300      	movs	r3, #0
 800204e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002050:	2300      	movs	r3, #0
 8002052:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002054:	4b79      	ldr	r3, [pc, #484]	@ (800223c <HAL_RCC_GetSysClockFreq+0x200>)
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	f003 030c 	and.w	r3, r3, #12
 800205c:	2b08      	cmp	r3, #8
 800205e:	d00d      	beq.n	800207c <HAL_RCC_GetSysClockFreq+0x40>
 8002060:	2b08      	cmp	r3, #8
 8002062:	f200 80e1 	bhi.w	8002228 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002066:	2b00      	cmp	r3, #0
 8002068:	d002      	beq.n	8002070 <HAL_RCC_GetSysClockFreq+0x34>
 800206a:	2b04      	cmp	r3, #4
 800206c:	d003      	beq.n	8002076 <HAL_RCC_GetSysClockFreq+0x3a>
 800206e:	e0db      	b.n	8002228 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002070:	4b73      	ldr	r3, [pc, #460]	@ (8002240 <HAL_RCC_GetSysClockFreq+0x204>)
 8002072:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002074:	e0db      	b.n	800222e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002076:	4b73      	ldr	r3, [pc, #460]	@ (8002244 <HAL_RCC_GetSysClockFreq+0x208>)
 8002078:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800207a:	e0d8      	b.n	800222e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800207c:	4b6f      	ldr	r3, [pc, #444]	@ (800223c <HAL_RCC_GetSysClockFreq+0x200>)
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002084:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002086:	4b6d      	ldr	r3, [pc, #436]	@ (800223c <HAL_RCC_GetSysClockFreq+0x200>)
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800208e:	2b00      	cmp	r3, #0
 8002090:	d063      	beq.n	800215a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002092:	4b6a      	ldr	r3, [pc, #424]	@ (800223c <HAL_RCC_GetSysClockFreq+0x200>)
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	099b      	lsrs	r3, r3, #6
 8002098:	2200      	movs	r2, #0
 800209a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800209c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800209e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80020a6:	2300      	movs	r3, #0
 80020a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80020aa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80020ae:	4622      	mov	r2, r4
 80020b0:	462b      	mov	r3, r5
 80020b2:	f04f 0000 	mov.w	r0, #0
 80020b6:	f04f 0100 	mov.w	r1, #0
 80020ba:	0159      	lsls	r1, r3, #5
 80020bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80020c0:	0150      	lsls	r0, r2, #5
 80020c2:	4602      	mov	r2, r0
 80020c4:	460b      	mov	r3, r1
 80020c6:	4621      	mov	r1, r4
 80020c8:	1a51      	subs	r1, r2, r1
 80020ca:	6139      	str	r1, [r7, #16]
 80020cc:	4629      	mov	r1, r5
 80020ce:	eb63 0301 	sbc.w	r3, r3, r1
 80020d2:	617b      	str	r3, [r7, #20]
 80020d4:	f04f 0200 	mov.w	r2, #0
 80020d8:	f04f 0300 	mov.w	r3, #0
 80020dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80020e0:	4659      	mov	r1, fp
 80020e2:	018b      	lsls	r3, r1, #6
 80020e4:	4651      	mov	r1, sl
 80020e6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80020ea:	4651      	mov	r1, sl
 80020ec:	018a      	lsls	r2, r1, #6
 80020ee:	4651      	mov	r1, sl
 80020f0:	ebb2 0801 	subs.w	r8, r2, r1
 80020f4:	4659      	mov	r1, fp
 80020f6:	eb63 0901 	sbc.w	r9, r3, r1
 80020fa:	f04f 0200 	mov.w	r2, #0
 80020fe:	f04f 0300 	mov.w	r3, #0
 8002102:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002106:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800210a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800210e:	4690      	mov	r8, r2
 8002110:	4699      	mov	r9, r3
 8002112:	4623      	mov	r3, r4
 8002114:	eb18 0303 	adds.w	r3, r8, r3
 8002118:	60bb      	str	r3, [r7, #8]
 800211a:	462b      	mov	r3, r5
 800211c:	eb49 0303 	adc.w	r3, r9, r3
 8002120:	60fb      	str	r3, [r7, #12]
 8002122:	f04f 0200 	mov.w	r2, #0
 8002126:	f04f 0300 	mov.w	r3, #0
 800212a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800212e:	4629      	mov	r1, r5
 8002130:	024b      	lsls	r3, r1, #9
 8002132:	4621      	mov	r1, r4
 8002134:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002138:	4621      	mov	r1, r4
 800213a:	024a      	lsls	r2, r1, #9
 800213c:	4610      	mov	r0, r2
 800213e:	4619      	mov	r1, r3
 8002140:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002142:	2200      	movs	r2, #0
 8002144:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002146:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002148:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800214c:	f7fe f848 	bl	80001e0 <__aeabi_uldivmod>
 8002150:	4602      	mov	r2, r0
 8002152:	460b      	mov	r3, r1
 8002154:	4613      	mov	r3, r2
 8002156:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002158:	e058      	b.n	800220c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800215a:	4b38      	ldr	r3, [pc, #224]	@ (800223c <HAL_RCC_GetSysClockFreq+0x200>)
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	099b      	lsrs	r3, r3, #6
 8002160:	2200      	movs	r2, #0
 8002162:	4618      	mov	r0, r3
 8002164:	4611      	mov	r1, r2
 8002166:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800216a:	623b      	str	r3, [r7, #32]
 800216c:	2300      	movs	r3, #0
 800216e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002170:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002174:	4642      	mov	r2, r8
 8002176:	464b      	mov	r3, r9
 8002178:	f04f 0000 	mov.w	r0, #0
 800217c:	f04f 0100 	mov.w	r1, #0
 8002180:	0159      	lsls	r1, r3, #5
 8002182:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002186:	0150      	lsls	r0, r2, #5
 8002188:	4602      	mov	r2, r0
 800218a:	460b      	mov	r3, r1
 800218c:	4641      	mov	r1, r8
 800218e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002192:	4649      	mov	r1, r9
 8002194:	eb63 0b01 	sbc.w	fp, r3, r1
 8002198:	f04f 0200 	mov.w	r2, #0
 800219c:	f04f 0300 	mov.w	r3, #0
 80021a0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80021a4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80021a8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80021ac:	ebb2 040a 	subs.w	r4, r2, sl
 80021b0:	eb63 050b 	sbc.w	r5, r3, fp
 80021b4:	f04f 0200 	mov.w	r2, #0
 80021b8:	f04f 0300 	mov.w	r3, #0
 80021bc:	00eb      	lsls	r3, r5, #3
 80021be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80021c2:	00e2      	lsls	r2, r4, #3
 80021c4:	4614      	mov	r4, r2
 80021c6:	461d      	mov	r5, r3
 80021c8:	4643      	mov	r3, r8
 80021ca:	18e3      	adds	r3, r4, r3
 80021cc:	603b      	str	r3, [r7, #0]
 80021ce:	464b      	mov	r3, r9
 80021d0:	eb45 0303 	adc.w	r3, r5, r3
 80021d4:	607b      	str	r3, [r7, #4]
 80021d6:	f04f 0200 	mov.w	r2, #0
 80021da:	f04f 0300 	mov.w	r3, #0
 80021de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80021e2:	4629      	mov	r1, r5
 80021e4:	028b      	lsls	r3, r1, #10
 80021e6:	4621      	mov	r1, r4
 80021e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80021ec:	4621      	mov	r1, r4
 80021ee:	028a      	lsls	r2, r1, #10
 80021f0:	4610      	mov	r0, r2
 80021f2:	4619      	mov	r1, r3
 80021f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80021f6:	2200      	movs	r2, #0
 80021f8:	61bb      	str	r3, [r7, #24]
 80021fa:	61fa      	str	r2, [r7, #28]
 80021fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002200:	f7fd ffee 	bl	80001e0 <__aeabi_uldivmod>
 8002204:	4602      	mov	r2, r0
 8002206:	460b      	mov	r3, r1
 8002208:	4613      	mov	r3, r2
 800220a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800220c:	4b0b      	ldr	r3, [pc, #44]	@ (800223c <HAL_RCC_GetSysClockFreq+0x200>)
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	0c1b      	lsrs	r3, r3, #16
 8002212:	f003 0303 	and.w	r3, r3, #3
 8002216:	3301      	adds	r3, #1
 8002218:	005b      	lsls	r3, r3, #1
 800221a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800221c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800221e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002220:	fbb2 f3f3 	udiv	r3, r2, r3
 8002224:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002226:	e002      	b.n	800222e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002228:	4b05      	ldr	r3, [pc, #20]	@ (8002240 <HAL_RCC_GetSysClockFreq+0x204>)
 800222a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800222c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800222e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002230:	4618      	mov	r0, r3
 8002232:	3750      	adds	r7, #80	@ 0x50
 8002234:	46bd      	mov	sp, r7
 8002236:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800223a:	bf00      	nop
 800223c:	40023800 	.word	0x40023800
 8002240:	00f42400 	.word	0x00f42400
 8002244:	007a1200 	.word	0x007a1200

08002248 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800224c:	4b03      	ldr	r3, [pc, #12]	@ (800225c <HAL_RCC_GetHCLKFreq+0x14>)
 800224e:	681b      	ldr	r3, [r3, #0]
}
 8002250:	4618      	mov	r0, r3
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr
 800225a:	bf00      	nop
 800225c:	20000000 	.word	0x20000000

08002260 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002264:	f7ff fff0 	bl	8002248 <HAL_RCC_GetHCLKFreq>
 8002268:	4602      	mov	r2, r0
 800226a:	4b05      	ldr	r3, [pc, #20]	@ (8002280 <HAL_RCC_GetPCLK1Freq+0x20>)
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	0a9b      	lsrs	r3, r3, #10
 8002270:	f003 0307 	and.w	r3, r3, #7
 8002274:	4903      	ldr	r1, [pc, #12]	@ (8002284 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002276:	5ccb      	ldrb	r3, [r1, r3]
 8002278:	fa22 f303 	lsr.w	r3, r2, r3
}
 800227c:	4618      	mov	r0, r3
 800227e:	bd80      	pop	{r7, pc}
 8002280:	40023800 	.word	0x40023800
 8002284:	080062b4 	.word	0x080062b4

08002288 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800228c:	f7ff ffdc 	bl	8002248 <HAL_RCC_GetHCLKFreq>
 8002290:	4602      	mov	r2, r0
 8002292:	4b05      	ldr	r3, [pc, #20]	@ (80022a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	0b5b      	lsrs	r3, r3, #13
 8002298:	f003 0307 	and.w	r3, r3, #7
 800229c:	4903      	ldr	r1, [pc, #12]	@ (80022ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800229e:	5ccb      	ldrb	r3, [r1, r3]
 80022a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	40023800 	.word	0x40023800
 80022ac:	080062b4 	.word	0x080062b4

080022b0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
 80022b8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	220f      	movs	r2, #15
 80022be:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80022c0:	4b12      	ldr	r3, [pc, #72]	@ (800230c <HAL_RCC_GetClockConfig+0x5c>)
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	f003 0203 	and.w	r2, r3, #3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80022cc:	4b0f      	ldr	r3, [pc, #60]	@ (800230c <HAL_RCC_GetClockConfig+0x5c>)
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80022d8:	4b0c      	ldr	r3, [pc, #48]	@ (800230c <HAL_RCC_GetClockConfig+0x5c>)
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80022e4:	4b09      	ldr	r3, [pc, #36]	@ (800230c <HAL_RCC_GetClockConfig+0x5c>)
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	08db      	lsrs	r3, r3, #3
 80022ea:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80022f2:	4b07      	ldr	r3, [pc, #28]	@ (8002310 <HAL_RCC_GetClockConfig+0x60>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0207 	and.w	r2, r3, #7
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	601a      	str	r2, [r3, #0]
}
 80022fe:	bf00      	nop
 8002300:	370c      	adds	r7, #12
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr
 800230a:	bf00      	nop
 800230c:	40023800 	.word	0x40023800
 8002310:	40023c00 	.word	0x40023c00

08002314 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b082      	sub	sp, #8
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d101      	bne.n	8002326 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e041      	b.n	80023aa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800232c:	b2db      	uxtb	r3, r3
 800232e:	2b00      	cmp	r3, #0
 8002330:	d106      	bne.n	8002340 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2200      	movs	r2, #0
 8002336:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f000 f839 	bl	80023b2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2202      	movs	r2, #2
 8002344:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	3304      	adds	r3, #4
 8002350:	4619      	mov	r1, r3
 8002352:	4610      	mov	r0, r2
 8002354:	f000 f9b2 	bl	80026bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2201      	movs	r2, #1
 800235c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2201      	movs	r2, #1
 8002364:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2201      	movs	r2, #1
 800236c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2201      	movs	r2, #1
 8002374:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2201      	movs	r2, #1
 800237c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2201      	movs	r2, #1
 8002384:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2201      	movs	r2, #1
 800238c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2201      	movs	r2, #1
 8002394:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2201      	movs	r2, #1
 800239c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2201      	movs	r2, #1
 80023a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80023a8:	2300      	movs	r3, #0
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3708      	adds	r7, #8
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}

080023b2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80023b2:	b480      	push	{r7}
 80023b4:	b083      	sub	sp, #12
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80023ba:	bf00      	nop
 80023bc:	370c      	adds	r7, #12
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr
	...

080023c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b085      	sub	sp, #20
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023d6:	b2db      	uxtb	r3, r3
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d001      	beq.n	80023e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	e044      	b.n	800246a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2202      	movs	r2, #2
 80023e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	68da      	ldr	r2, [r3, #12]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f042 0201 	orr.w	r2, r2, #1
 80023f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a1e      	ldr	r2, [pc, #120]	@ (8002478 <HAL_TIM_Base_Start_IT+0xb0>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d018      	beq.n	8002434 <HAL_TIM_Base_Start_IT+0x6c>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800240a:	d013      	beq.n	8002434 <HAL_TIM_Base_Start_IT+0x6c>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a1a      	ldr	r2, [pc, #104]	@ (800247c <HAL_TIM_Base_Start_IT+0xb4>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d00e      	beq.n	8002434 <HAL_TIM_Base_Start_IT+0x6c>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a19      	ldr	r2, [pc, #100]	@ (8002480 <HAL_TIM_Base_Start_IT+0xb8>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d009      	beq.n	8002434 <HAL_TIM_Base_Start_IT+0x6c>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a17      	ldr	r2, [pc, #92]	@ (8002484 <HAL_TIM_Base_Start_IT+0xbc>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d004      	beq.n	8002434 <HAL_TIM_Base_Start_IT+0x6c>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a16      	ldr	r2, [pc, #88]	@ (8002488 <HAL_TIM_Base_Start_IT+0xc0>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d111      	bne.n	8002458 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	f003 0307 	and.w	r3, r3, #7
 800243e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2b06      	cmp	r3, #6
 8002444:	d010      	beq.n	8002468 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f042 0201 	orr.w	r2, r2, #1
 8002454:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002456:	e007      	b.n	8002468 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f042 0201 	orr.w	r2, r2, #1
 8002466:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002468:	2300      	movs	r3, #0
}
 800246a:	4618      	mov	r0, r3
 800246c:	3714      	adds	r7, #20
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr
 8002476:	bf00      	nop
 8002478:	40010000 	.word	0x40010000
 800247c:	40000400 	.word	0x40000400
 8002480:	40000800 	.word	0x40000800
 8002484:	40000c00 	.word	0x40000c00
 8002488:	40014000 	.word	0x40014000

0800248c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b084      	sub	sp, #16
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	68db      	ldr	r3, [r3, #12]
 800249a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	691b      	ldr	r3, [r3, #16]
 80024a2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	f003 0302 	and.w	r3, r3, #2
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d020      	beq.n	80024f0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	f003 0302 	and.w	r3, r3, #2
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d01b      	beq.n	80024f0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f06f 0202 	mvn.w	r2, #2
 80024c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2201      	movs	r2, #1
 80024c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	699b      	ldr	r3, [r3, #24]
 80024ce:	f003 0303 	and.w	r3, r3, #3
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d003      	beq.n	80024de <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f000 f8d2 	bl	8002680 <HAL_TIM_IC_CaptureCallback>
 80024dc:	e005      	b.n	80024ea <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f000 f8c4 	bl	800266c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024e4:	6878      	ldr	r0, [r7, #4]
 80024e6:	f000 f8d5 	bl	8002694 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2200      	movs	r2, #0
 80024ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	f003 0304 	and.w	r3, r3, #4
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d020      	beq.n	800253c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	f003 0304 	and.w	r3, r3, #4
 8002500:	2b00      	cmp	r3, #0
 8002502:	d01b      	beq.n	800253c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f06f 0204 	mvn.w	r2, #4
 800250c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2202      	movs	r2, #2
 8002512:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	699b      	ldr	r3, [r3, #24]
 800251a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800251e:	2b00      	cmp	r3, #0
 8002520:	d003      	beq.n	800252a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f000 f8ac 	bl	8002680 <HAL_TIM_IC_CaptureCallback>
 8002528:	e005      	b.n	8002536 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f000 f89e 	bl	800266c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f000 f8af 	bl	8002694 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2200      	movs	r2, #0
 800253a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	f003 0308 	and.w	r3, r3, #8
 8002542:	2b00      	cmp	r3, #0
 8002544:	d020      	beq.n	8002588 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	f003 0308 	and.w	r3, r3, #8
 800254c:	2b00      	cmp	r3, #0
 800254e:	d01b      	beq.n	8002588 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f06f 0208 	mvn.w	r2, #8
 8002558:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2204      	movs	r2, #4
 800255e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	69db      	ldr	r3, [r3, #28]
 8002566:	f003 0303 	and.w	r3, r3, #3
 800256a:	2b00      	cmp	r3, #0
 800256c:	d003      	beq.n	8002576 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f000 f886 	bl	8002680 <HAL_TIM_IC_CaptureCallback>
 8002574:	e005      	b.n	8002582 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f000 f878 	bl	800266c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	f000 f889 	bl	8002694 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2200      	movs	r2, #0
 8002586:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	f003 0310 	and.w	r3, r3, #16
 800258e:	2b00      	cmp	r3, #0
 8002590:	d020      	beq.n	80025d4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	f003 0310 	and.w	r3, r3, #16
 8002598:	2b00      	cmp	r3, #0
 800259a:	d01b      	beq.n	80025d4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f06f 0210 	mvn.w	r2, #16
 80025a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2208      	movs	r2, #8
 80025aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	69db      	ldr	r3, [r3, #28]
 80025b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d003      	beq.n	80025c2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f000 f860 	bl	8002680 <HAL_TIM_IC_CaptureCallback>
 80025c0:	e005      	b.n	80025ce <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f000 f852 	bl	800266c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	f000 f863 	bl	8002694 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2200      	movs	r2, #0
 80025d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	f003 0301 	and.w	r3, r3, #1
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d00c      	beq.n	80025f8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	f003 0301 	and.w	r3, r3, #1
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d007      	beq.n	80025f8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f06f 0201 	mvn.w	r2, #1
 80025f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	f7fe f950 	bl	8000898 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d00c      	beq.n	800261c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002608:	2b00      	cmp	r3, #0
 800260a:	d007      	beq.n	800261c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002614:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f000 f8e6 	bl	80027e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002622:	2b00      	cmp	r3, #0
 8002624:	d00c      	beq.n	8002640 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800262c:	2b00      	cmp	r3, #0
 800262e:	d007      	beq.n	8002640 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002638:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f000 f834 	bl	80026a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	f003 0320 	and.w	r3, r3, #32
 8002646:	2b00      	cmp	r3, #0
 8002648:	d00c      	beq.n	8002664 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	f003 0320 	and.w	r3, r3, #32
 8002650:	2b00      	cmp	r3, #0
 8002652:	d007      	beq.n	8002664 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f06f 0220 	mvn.w	r2, #32
 800265c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f000 f8b8 	bl	80027d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002664:	bf00      	nop
 8002666:	3710      	adds	r7, #16
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}

0800266c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002674:	bf00      	nop
 8002676:	370c      	adds	r7, #12
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr

08002680 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002688:	bf00      	nop
 800268a:	370c      	adds	r7, #12
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr

08002694 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002694:	b480      	push	{r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800269c:	bf00      	nop
 800269e:	370c      	adds	r7, #12
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr

080026a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80026b0:	bf00      	nop
 80026b2:	370c      	adds	r7, #12
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr

080026bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80026bc:	b480      	push	{r7}
 80026be:	b085      	sub	sp, #20
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	4a3a      	ldr	r2, [pc, #232]	@ (80027b8 <TIM_Base_SetConfig+0xfc>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d00f      	beq.n	80026f4 <TIM_Base_SetConfig+0x38>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80026da:	d00b      	beq.n	80026f4 <TIM_Base_SetConfig+0x38>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	4a37      	ldr	r2, [pc, #220]	@ (80027bc <TIM_Base_SetConfig+0x100>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d007      	beq.n	80026f4 <TIM_Base_SetConfig+0x38>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	4a36      	ldr	r2, [pc, #216]	@ (80027c0 <TIM_Base_SetConfig+0x104>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d003      	beq.n	80026f4 <TIM_Base_SetConfig+0x38>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	4a35      	ldr	r2, [pc, #212]	@ (80027c4 <TIM_Base_SetConfig+0x108>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d108      	bne.n	8002706 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80026fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	68fa      	ldr	r2, [r7, #12]
 8002702:	4313      	orrs	r3, r2
 8002704:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	4a2b      	ldr	r2, [pc, #172]	@ (80027b8 <TIM_Base_SetConfig+0xfc>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d01b      	beq.n	8002746 <TIM_Base_SetConfig+0x8a>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002714:	d017      	beq.n	8002746 <TIM_Base_SetConfig+0x8a>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4a28      	ldr	r2, [pc, #160]	@ (80027bc <TIM_Base_SetConfig+0x100>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d013      	beq.n	8002746 <TIM_Base_SetConfig+0x8a>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4a27      	ldr	r2, [pc, #156]	@ (80027c0 <TIM_Base_SetConfig+0x104>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d00f      	beq.n	8002746 <TIM_Base_SetConfig+0x8a>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4a26      	ldr	r2, [pc, #152]	@ (80027c4 <TIM_Base_SetConfig+0x108>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d00b      	beq.n	8002746 <TIM_Base_SetConfig+0x8a>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4a25      	ldr	r2, [pc, #148]	@ (80027c8 <TIM_Base_SetConfig+0x10c>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d007      	beq.n	8002746 <TIM_Base_SetConfig+0x8a>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4a24      	ldr	r2, [pc, #144]	@ (80027cc <TIM_Base_SetConfig+0x110>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d003      	beq.n	8002746 <TIM_Base_SetConfig+0x8a>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4a23      	ldr	r2, [pc, #140]	@ (80027d0 <TIM_Base_SetConfig+0x114>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d108      	bne.n	8002758 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800274c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	68db      	ldr	r3, [r3, #12]
 8002752:	68fa      	ldr	r2, [r7, #12]
 8002754:	4313      	orrs	r3, r2
 8002756:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	695b      	ldr	r3, [r3, #20]
 8002762:	4313      	orrs	r3, r2
 8002764:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	68fa      	ldr	r2, [r7, #12]
 800276a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	689a      	ldr	r2, [r3, #8]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	4a0e      	ldr	r2, [pc, #56]	@ (80027b8 <TIM_Base_SetConfig+0xfc>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d103      	bne.n	800278c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	691a      	ldr	r2, [r3, #16]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2201      	movs	r2, #1
 8002790:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	691b      	ldr	r3, [r3, #16]
 8002796:	f003 0301 	and.w	r3, r3, #1
 800279a:	2b01      	cmp	r3, #1
 800279c:	d105      	bne.n	80027aa <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	691b      	ldr	r3, [r3, #16]
 80027a2:	f023 0201 	bic.w	r2, r3, #1
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	611a      	str	r2, [r3, #16]
  }
}
 80027aa:	bf00      	nop
 80027ac:	3714      	adds	r7, #20
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr
 80027b6:	bf00      	nop
 80027b8:	40010000 	.word	0x40010000
 80027bc:	40000400 	.word	0x40000400
 80027c0:	40000800 	.word	0x40000800
 80027c4:	40000c00 	.word	0x40000c00
 80027c8:	40014000 	.word	0x40014000
 80027cc:	40014400 	.word	0x40014400
 80027d0:	40014800 	.word	0x40014800

080027d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b083      	sub	sp, #12
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80027dc:	bf00      	nop
 80027de:	370c      	adds	r7, #12
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr

080027e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b083      	sub	sp, #12
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80027f0:	bf00      	nop
 80027f2:	370c      	adds	r7, #12
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr

080027fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b082      	sub	sp, #8
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d101      	bne.n	800280e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e042      	b.n	8002894 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002814:	b2db      	uxtb	r3, r3
 8002816:	2b00      	cmp	r3, #0
 8002818:	d106      	bne.n	8002828 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2200      	movs	r2, #0
 800281e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	f7fe f964 	bl	8000af0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2224      	movs	r2, #36	@ 0x24
 800282c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	68da      	ldr	r2, [r3, #12]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800283e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002840:	6878      	ldr	r0, [r7, #4]
 8002842:	f000 fa9f 	bl	8002d84 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	691a      	ldr	r2, [r3, #16]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002854:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	695a      	ldr	r2, [r3, #20]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002864:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	68da      	ldr	r2, [r3, #12]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002874:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2200      	movs	r2, #0
 800287a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2220      	movs	r2, #32
 8002880:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2220      	movs	r2, #32
 8002888:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2200      	movs	r2, #0
 8002890:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002892:	2300      	movs	r3, #0
}
 8002894:	4618      	mov	r0, r3
 8002896:	3708      	adds	r7, #8
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}

0800289c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b084      	sub	sp, #16
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	60f8      	str	r0, [r7, #12]
 80028a4:	60b9      	str	r1, [r7, #8]
 80028a6:	4613      	mov	r3, r2
 80028a8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	2b20      	cmp	r3, #32
 80028b4:	d112      	bne.n	80028dc <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d002      	beq.n	80028c2 <HAL_UART_Receive_DMA+0x26>
 80028bc:	88fb      	ldrh	r3, [r7, #6]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d101      	bne.n	80028c6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e00b      	b.n	80028de <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2200      	movs	r2, #0
 80028ca:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80028cc:	88fb      	ldrh	r3, [r7, #6]
 80028ce:	461a      	mov	r2, r3
 80028d0:	68b9      	ldr	r1, [r7, #8]
 80028d2:	68f8      	ldr	r0, [r7, #12]
 80028d4:	f000 f930 	bl	8002b38 <UART_Start_Receive_DMA>
 80028d8:	4603      	mov	r3, r0
 80028da:	e000      	b.n	80028de <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 80028dc:	2302      	movs	r3, #2
  }
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3710      	adds	r7, #16
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}

080028e6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80028e6:	b480      	push	{r7}
 80028e8:	b083      	sub	sp, #12
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80028ee:	bf00      	nop
 80028f0:	370c      	adds	r7, #12
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr

080028fa <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80028fa:	b480      	push	{r7}
 80028fc:	b083      	sub	sp, #12
 80028fe:	af00      	add	r7, sp, #0
 8002900:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8002902:	bf00      	nop
 8002904:	370c      	adds	r7, #12
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr

0800290e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800290e:	b480      	push	{r7}
 8002910:	b083      	sub	sp, #12
 8002912:	af00      	add	r7, sp, #0
 8002914:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002916:	bf00      	nop
 8002918:	370c      	adds	r7, #12
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr

08002922 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002922:	b480      	push	{r7}
 8002924:	b083      	sub	sp, #12
 8002926:	af00      	add	r7, sp, #0
 8002928:	6078      	str	r0, [r7, #4]
 800292a:	460b      	mov	r3, r1
 800292c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800292e:	bf00      	nop
 8002930:	370c      	adds	r7, #12
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr

0800293a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800293a:	b580      	push	{r7, lr}
 800293c:	b09c      	sub	sp, #112	@ 0x70
 800293e:	af00      	add	r7, sp, #0
 8002940:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002946:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002952:	2b00      	cmp	r3, #0
 8002954:	d172      	bne.n	8002a3c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8002956:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002958:	2200      	movs	r2, #0
 800295a:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800295c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	330c      	adds	r3, #12
 8002962:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002964:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002966:	e853 3f00 	ldrex	r3, [r3]
 800296a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800296c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800296e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002972:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002974:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	330c      	adds	r3, #12
 800297a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800297c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800297e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002980:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002982:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002984:	e841 2300 	strex	r3, r2, [r1]
 8002988:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800298a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800298c:	2b00      	cmp	r3, #0
 800298e:	d1e5      	bne.n	800295c <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002990:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	3314      	adds	r3, #20
 8002996:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002998:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800299a:	e853 3f00 	ldrex	r3, [r3]
 800299e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80029a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029a2:	f023 0301 	bic.w	r3, r3, #1
 80029a6:	667b      	str	r3, [r7, #100]	@ 0x64
 80029a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	3314      	adds	r3, #20
 80029ae:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80029b0:	647a      	str	r2, [r7, #68]	@ 0x44
 80029b2:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029b4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80029b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80029b8:	e841 2300 	strex	r3, r2, [r1]
 80029bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80029be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d1e5      	bne.n	8002990 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80029c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	3314      	adds	r3, #20
 80029ca:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ce:	e853 3f00 	ldrex	r3, [r3]
 80029d2:	623b      	str	r3, [r7, #32]
   return(result);
 80029d4:	6a3b      	ldr	r3, [r7, #32]
 80029d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80029da:	663b      	str	r3, [r7, #96]	@ 0x60
 80029dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	3314      	adds	r3, #20
 80029e2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80029e4:	633a      	str	r2, [r7, #48]	@ 0x30
 80029e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029e8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80029ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80029ec:	e841 2300 	strex	r3, r2, [r1]
 80029f0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80029f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d1e5      	bne.n	80029c4 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80029f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80029fa:	2220      	movs	r2, #32
 80029fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a00:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d119      	bne.n	8002a3c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a08:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	330c      	adds	r3, #12
 8002a0e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	e853 3f00 	ldrex	r3, [r3]
 8002a16:	60fb      	str	r3, [r7, #12]
   return(result);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	f023 0310 	bic.w	r3, r3, #16
 8002a1e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002a20:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	330c      	adds	r3, #12
 8002a26:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002a28:	61fa      	str	r2, [r7, #28]
 8002a2a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a2c:	69b9      	ldr	r1, [r7, #24]
 8002a2e:	69fa      	ldr	r2, [r7, #28]
 8002a30:	e841 2300 	strex	r3, r2, [r1]
 8002a34:	617b      	str	r3, [r7, #20]
   return(result);
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d1e5      	bne.n	8002a08 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002a3c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a3e:	2200      	movs	r2, #0
 8002a40:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a42:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d106      	bne.n	8002a58 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002a4a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a4c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002a4e:	4619      	mov	r1, r3
 8002a50:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8002a52:	f7ff ff66 	bl	8002922 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002a56:	e002      	b.n	8002a5e <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8002a58:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8002a5a:	f7ff ff44 	bl	80028e6 <HAL_UART_RxCpltCallback>
}
 8002a5e:	bf00      	nop
 8002a60:	3770      	adds	r7, #112	@ 0x70
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}

08002a66 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002a66:	b580      	push	{r7, lr}
 8002a68:	b084      	sub	sp, #16
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a72:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2201      	movs	r2, #1
 8002a78:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d108      	bne.n	8002a94 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002a86:	085b      	lsrs	r3, r3, #1
 8002a88:	b29b      	uxth	r3, r3
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	68f8      	ldr	r0, [r7, #12]
 8002a8e:	f7ff ff48 	bl	8002922 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002a92:	e002      	b.n	8002a9a <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8002a94:	68f8      	ldr	r0, [r7, #12]
 8002a96:	f7ff ff30 	bl	80028fa <HAL_UART_RxHalfCpltCallback>
}
 8002a9a:	bf00      	nop
 8002a9c:	3710      	adds	r7, #16
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}

08002aa2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002aa2:	b580      	push	{r7, lr}
 8002aa4:	b084      	sub	sp, #16
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ab2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	695b      	ldr	r3, [r3, #20]
 8002aba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002abe:	2b80      	cmp	r3, #128	@ 0x80
 8002ac0:	bf0c      	ite	eq
 8002ac2:	2301      	moveq	r3, #1
 8002ac4:	2300      	movne	r3, #0
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	2b21      	cmp	r3, #33	@ 0x21
 8002ad4:	d108      	bne.n	8002ae8 <UART_DMAError+0x46>
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d005      	beq.n	8002ae8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8002ae2:	68b8      	ldr	r0, [r7, #8]
 8002ae4:	f000 f8c2 	bl	8002c6c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	695b      	ldr	r3, [r3, #20]
 8002aee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002af2:	2b40      	cmp	r3, #64	@ 0x40
 8002af4:	bf0c      	ite	eq
 8002af6:	2301      	moveq	r3, #1
 8002af8:	2300      	movne	r3, #0
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	2b22      	cmp	r3, #34	@ 0x22
 8002b08:	d108      	bne.n	8002b1c <UART_DMAError+0x7a>
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d005      	beq.n	8002b1c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	2200      	movs	r2, #0
 8002b14:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8002b16:	68b8      	ldr	r0, [r7, #8]
 8002b18:	f000 f8d0 	bl	8002cbc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b20:	f043 0210 	orr.w	r2, r3, #16
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002b28:	68b8      	ldr	r0, [r7, #8]
 8002b2a:	f7ff fef0 	bl	800290e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002b2e:	bf00      	nop
 8002b30:	3710      	adds	r7, #16
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
	...

08002b38 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b098      	sub	sp, #96	@ 0x60
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	60f8      	str	r0, [r7, #12]
 8002b40:	60b9      	str	r1, [r7, #8]
 8002b42:	4613      	mov	r3, r2
 8002b44:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8002b46:	68ba      	ldr	r2, [r7, #8]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	88fa      	ldrh	r2, [r7, #6]
 8002b50:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2200      	movs	r2, #0
 8002b56:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2222      	movs	r2, #34	@ 0x22
 8002b5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b64:	4a3e      	ldr	r2, [pc, #248]	@ (8002c60 <UART_Start_Receive_DMA+0x128>)
 8002b66:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b6c:	4a3d      	ldr	r2, [pc, #244]	@ (8002c64 <UART_Start_Receive_DMA+0x12c>)
 8002b6e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b74:	4a3c      	ldr	r2, [pc, #240]	@ (8002c68 <UART_Start_Receive_DMA+0x130>)
 8002b76:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8002b80:	f107 0308 	add.w	r3, r7, #8
 8002b84:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	3304      	adds	r3, #4
 8002b90:	4619      	mov	r1, r3
 8002b92:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	88fb      	ldrh	r3, [r7, #6]
 8002b98:	f7fe fa7a 	bl	8001090 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	613b      	str	r3, [r7, #16]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	613b      	str	r3, [r7, #16]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	613b      	str	r3, [r7, #16]
 8002bb0:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	691b      	ldr	r3, [r3, #16]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d019      	beq.n	8002bee <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	330c      	adds	r3, #12
 8002bc0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bc2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002bc4:	e853 3f00 	ldrex	r3, [r3]
 8002bc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002bca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002bcc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bd0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	330c      	adds	r3, #12
 8002bd8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002bda:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002bdc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bde:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8002be0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002be2:	e841 2300 	strex	r3, r2, [r1]
 8002be6:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8002be8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d1e5      	bne.n	8002bba <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	3314      	adds	r3, #20
 8002bf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bf8:	e853 3f00 	ldrex	r3, [r3]
 8002bfc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002bfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c00:	f043 0301 	orr.w	r3, r3, #1
 8002c04:	657b      	str	r3, [r7, #84]	@ 0x54
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	3314      	adds	r3, #20
 8002c0c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002c0e:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002c10:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c12:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8002c14:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002c16:	e841 2300 	strex	r3, r2, [r1]
 8002c1a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002c1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d1e5      	bne.n	8002bee <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	3314      	adds	r3, #20
 8002c28:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c2a:	69bb      	ldr	r3, [r7, #24]
 8002c2c:	e853 3f00 	ldrex	r3, [r3]
 8002c30:	617b      	str	r3, [r7, #20]
   return(result);
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002c38:	653b      	str	r3, [r7, #80]	@ 0x50
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	3314      	adds	r3, #20
 8002c40:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8002c42:	627a      	str	r2, [r7, #36]	@ 0x24
 8002c44:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c46:	6a39      	ldr	r1, [r7, #32]
 8002c48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c4a:	e841 2300 	strex	r3, r2, [r1]
 8002c4e:	61fb      	str	r3, [r7, #28]
   return(result);
 8002c50:	69fb      	ldr	r3, [r7, #28]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d1e5      	bne.n	8002c22 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8002c56:	2300      	movs	r3, #0
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3760      	adds	r7, #96	@ 0x60
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	0800293b 	.word	0x0800293b
 8002c64:	08002a67 	.word	0x08002a67
 8002c68:	08002aa3 	.word	0x08002aa3

08002c6c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b089      	sub	sp, #36	@ 0x24
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	330c      	adds	r3, #12
 8002c7a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	e853 3f00 	ldrex	r3, [r3]
 8002c82:	60bb      	str	r3, [r7, #8]
   return(result);
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8002c8a:	61fb      	str	r3, [r7, #28]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	330c      	adds	r3, #12
 8002c92:	69fa      	ldr	r2, [r7, #28]
 8002c94:	61ba      	str	r2, [r7, #24]
 8002c96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c98:	6979      	ldr	r1, [r7, #20]
 8002c9a:	69ba      	ldr	r2, [r7, #24]
 8002c9c:	e841 2300 	strex	r3, r2, [r1]
 8002ca0:	613b      	str	r3, [r7, #16]
   return(result);
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d1e5      	bne.n	8002c74 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2220      	movs	r2, #32
 8002cac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8002cb0:	bf00      	nop
 8002cb2:	3724      	adds	r7, #36	@ 0x24
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cba:	4770      	bx	lr

08002cbc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b095      	sub	sp, #84	@ 0x54
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	330c      	adds	r3, #12
 8002cca:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ccc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cce:	e853 3f00 	ldrex	r3, [r3]
 8002cd2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002cd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cd6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002cda:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	330c      	adds	r3, #12
 8002ce2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002ce4:	643a      	str	r2, [r7, #64]	@ 0x40
 8002ce6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ce8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002cea:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002cec:	e841 2300 	strex	r3, r2, [r1]
 8002cf0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002cf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d1e5      	bne.n	8002cc4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	3314      	adds	r3, #20
 8002cfe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d00:	6a3b      	ldr	r3, [r7, #32]
 8002d02:	e853 3f00 	ldrex	r3, [r3]
 8002d06:	61fb      	str	r3, [r7, #28]
   return(result);
 8002d08:	69fb      	ldr	r3, [r7, #28]
 8002d0a:	f023 0301 	bic.w	r3, r3, #1
 8002d0e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	3314      	adds	r3, #20
 8002d16:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002d18:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002d1a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d1c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002d1e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002d20:	e841 2300 	strex	r3, r2, [r1]
 8002d24:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d1e5      	bne.n	8002cf8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d119      	bne.n	8002d68 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	330c      	adds	r3, #12
 8002d3a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	e853 3f00 	ldrex	r3, [r3]
 8002d42:	60bb      	str	r3, [r7, #8]
   return(result);
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	f023 0310 	bic.w	r3, r3, #16
 8002d4a:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	330c      	adds	r3, #12
 8002d52:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002d54:	61ba      	str	r2, [r7, #24]
 8002d56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d58:	6979      	ldr	r1, [r7, #20]
 8002d5a:	69ba      	ldr	r2, [r7, #24]
 8002d5c:	e841 2300 	strex	r3, r2, [r1]
 8002d60:	613b      	str	r3, [r7, #16]
   return(result);
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d1e5      	bne.n	8002d34 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2220      	movs	r2, #32
 8002d6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2200      	movs	r2, #0
 8002d74:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002d76:	bf00      	nop
 8002d78:	3754      	adds	r7, #84	@ 0x54
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr
	...

08002d84 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d88:	b0c0      	sub	sp, #256	@ 0x100
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	691b      	ldr	r3, [r3, #16]
 8002d98:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002da0:	68d9      	ldr	r1, [r3, #12]
 8002da2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	ea40 0301 	orr.w	r3, r0, r1
 8002dac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002dae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002db2:	689a      	ldr	r2, [r3, #8]
 8002db4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002db8:	691b      	ldr	r3, [r3, #16]
 8002dba:	431a      	orrs	r2, r3
 8002dbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002dc0:	695b      	ldr	r3, [r3, #20]
 8002dc2:	431a      	orrs	r2, r3
 8002dc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002dc8:	69db      	ldr	r3, [r3, #28]
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002dd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002ddc:	f021 010c 	bic.w	r1, r1, #12
 8002de0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002dea:	430b      	orrs	r3, r1
 8002dec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002dee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	695b      	ldr	r3, [r3, #20]
 8002df6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002dfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002dfe:	6999      	ldr	r1, [r3, #24]
 8002e00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	ea40 0301 	orr.w	r3, r0, r1
 8002e0a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002e0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	4b8f      	ldr	r3, [pc, #572]	@ (8003050 <UART_SetConfig+0x2cc>)
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d005      	beq.n	8002e24 <UART_SetConfig+0xa0>
 8002e18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	4b8d      	ldr	r3, [pc, #564]	@ (8003054 <UART_SetConfig+0x2d0>)
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d104      	bne.n	8002e2e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002e24:	f7ff fa30 	bl	8002288 <HAL_RCC_GetPCLK2Freq>
 8002e28:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002e2c:	e003      	b.n	8002e36 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002e2e:	f7ff fa17 	bl	8002260 <HAL_RCC_GetPCLK1Freq>
 8002e32:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e3a:	69db      	ldr	r3, [r3, #28]
 8002e3c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002e40:	f040 810c 	bne.w	800305c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002e44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002e48:	2200      	movs	r2, #0
 8002e4a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002e4e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002e52:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002e56:	4622      	mov	r2, r4
 8002e58:	462b      	mov	r3, r5
 8002e5a:	1891      	adds	r1, r2, r2
 8002e5c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002e5e:	415b      	adcs	r3, r3
 8002e60:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002e62:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002e66:	4621      	mov	r1, r4
 8002e68:	eb12 0801 	adds.w	r8, r2, r1
 8002e6c:	4629      	mov	r1, r5
 8002e6e:	eb43 0901 	adc.w	r9, r3, r1
 8002e72:	f04f 0200 	mov.w	r2, #0
 8002e76:	f04f 0300 	mov.w	r3, #0
 8002e7a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e7e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e82:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e86:	4690      	mov	r8, r2
 8002e88:	4699      	mov	r9, r3
 8002e8a:	4623      	mov	r3, r4
 8002e8c:	eb18 0303 	adds.w	r3, r8, r3
 8002e90:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002e94:	462b      	mov	r3, r5
 8002e96:	eb49 0303 	adc.w	r3, r9, r3
 8002e9a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002e9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002eaa:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002eae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002eb2:	460b      	mov	r3, r1
 8002eb4:	18db      	adds	r3, r3, r3
 8002eb6:	653b      	str	r3, [r7, #80]	@ 0x50
 8002eb8:	4613      	mov	r3, r2
 8002eba:	eb42 0303 	adc.w	r3, r2, r3
 8002ebe:	657b      	str	r3, [r7, #84]	@ 0x54
 8002ec0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002ec4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002ec8:	f7fd f98a 	bl	80001e0 <__aeabi_uldivmod>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	460b      	mov	r3, r1
 8002ed0:	4b61      	ldr	r3, [pc, #388]	@ (8003058 <UART_SetConfig+0x2d4>)
 8002ed2:	fba3 2302 	umull	r2, r3, r3, r2
 8002ed6:	095b      	lsrs	r3, r3, #5
 8002ed8:	011c      	lsls	r4, r3, #4
 8002eda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002ede:	2200      	movs	r2, #0
 8002ee0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002ee4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002ee8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002eec:	4642      	mov	r2, r8
 8002eee:	464b      	mov	r3, r9
 8002ef0:	1891      	adds	r1, r2, r2
 8002ef2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002ef4:	415b      	adcs	r3, r3
 8002ef6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002ef8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002efc:	4641      	mov	r1, r8
 8002efe:	eb12 0a01 	adds.w	sl, r2, r1
 8002f02:	4649      	mov	r1, r9
 8002f04:	eb43 0b01 	adc.w	fp, r3, r1
 8002f08:	f04f 0200 	mov.w	r2, #0
 8002f0c:	f04f 0300 	mov.w	r3, #0
 8002f10:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002f14:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002f18:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f1c:	4692      	mov	sl, r2
 8002f1e:	469b      	mov	fp, r3
 8002f20:	4643      	mov	r3, r8
 8002f22:	eb1a 0303 	adds.w	r3, sl, r3
 8002f26:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002f2a:	464b      	mov	r3, r9
 8002f2c:	eb4b 0303 	adc.w	r3, fp, r3
 8002f30:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002f34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002f40:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002f44:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002f48:	460b      	mov	r3, r1
 8002f4a:	18db      	adds	r3, r3, r3
 8002f4c:	643b      	str	r3, [r7, #64]	@ 0x40
 8002f4e:	4613      	mov	r3, r2
 8002f50:	eb42 0303 	adc.w	r3, r2, r3
 8002f54:	647b      	str	r3, [r7, #68]	@ 0x44
 8002f56:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002f5a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002f5e:	f7fd f93f 	bl	80001e0 <__aeabi_uldivmod>
 8002f62:	4602      	mov	r2, r0
 8002f64:	460b      	mov	r3, r1
 8002f66:	4611      	mov	r1, r2
 8002f68:	4b3b      	ldr	r3, [pc, #236]	@ (8003058 <UART_SetConfig+0x2d4>)
 8002f6a:	fba3 2301 	umull	r2, r3, r3, r1
 8002f6e:	095b      	lsrs	r3, r3, #5
 8002f70:	2264      	movs	r2, #100	@ 0x64
 8002f72:	fb02 f303 	mul.w	r3, r2, r3
 8002f76:	1acb      	subs	r3, r1, r3
 8002f78:	00db      	lsls	r3, r3, #3
 8002f7a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002f7e:	4b36      	ldr	r3, [pc, #216]	@ (8003058 <UART_SetConfig+0x2d4>)
 8002f80:	fba3 2302 	umull	r2, r3, r3, r2
 8002f84:	095b      	lsrs	r3, r3, #5
 8002f86:	005b      	lsls	r3, r3, #1
 8002f88:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002f8c:	441c      	add	r4, r3
 8002f8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f92:	2200      	movs	r2, #0
 8002f94:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002f98:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002f9c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002fa0:	4642      	mov	r2, r8
 8002fa2:	464b      	mov	r3, r9
 8002fa4:	1891      	adds	r1, r2, r2
 8002fa6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002fa8:	415b      	adcs	r3, r3
 8002faa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002fac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002fb0:	4641      	mov	r1, r8
 8002fb2:	1851      	adds	r1, r2, r1
 8002fb4:	6339      	str	r1, [r7, #48]	@ 0x30
 8002fb6:	4649      	mov	r1, r9
 8002fb8:	414b      	adcs	r3, r1
 8002fba:	637b      	str	r3, [r7, #52]	@ 0x34
 8002fbc:	f04f 0200 	mov.w	r2, #0
 8002fc0:	f04f 0300 	mov.w	r3, #0
 8002fc4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002fc8:	4659      	mov	r1, fp
 8002fca:	00cb      	lsls	r3, r1, #3
 8002fcc:	4651      	mov	r1, sl
 8002fce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002fd2:	4651      	mov	r1, sl
 8002fd4:	00ca      	lsls	r2, r1, #3
 8002fd6:	4610      	mov	r0, r2
 8002fd8:	4619      	mov	r1, r3
 8002fda:	4603      	mov	r3, r0
 8002fdc:	4642      	mov	r2, r8
 8002fde:	189b      	adds	r3, r3, r2
 8002fe0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002fe4:	464b      	mov	r3, r9
 8002fe6:	460a      	mov	r2, r1
 8002fe8:	eb42 0303 	adc.w	r3, r2, r3
 8002fec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002ff0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002ffc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003000:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003004:	460b      	mov	r3, r1
 8003006:	18db      	adds	r3, r3, r3
 8003008:	62bb      	str	r3, [r7, #40]	@ 0x28
 800300a:	4613      	mov	r3, r2
 800300c:	eb42 0303 	adc.w	r3, r2, r3
 8003010:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003012:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003016:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800301a:	f7fd f8e1 	bl	80001e0 <__aeabi_uldivmod>
 800301e:	4602      	mov	r2, r0
 8003020:	460b      	mov	r3, r1
 8003022:	4b0d      	ldr	r3, [pc, #52]	@ (8003058 <UART_SetConfig+0x2d4>)
 8003024:	fba3 1302 	umull	r1, r3, r3, r2
 8003028:	095b      	lsrs	r3, r3, #5
 800302a:	2164      	movs	r1, #100	@ 0x64
 800302c:	fb01 f303 	mul.w	r3, r1, r3
 8003030:	1ad3      	subs	r3, r2, r3
 8003032:	00db      	lsls	r3, r3, #3
 8003034:	3332      	adds	r3, #50	@ 0x32
 8003036:	4a08      	ldr	r2, [pc, #32]	@ (8003058 <UART_SetConfig+0x2d4>)
 8003038:	fba2 2303 	umull	r2, r3, r2, r3
 800303c:	095b      	lsrs	r3, r3, #5
 800303e:	f003 0207 	and.w	r2, r3, #7
 8003042:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4422      	add	r2, r4
 800304a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800304c:	e106      	b.n	800325c <UART_SetConfig+0x4d8>
 800304e:	bf00      	nop
 8003050:	40011000 	.word	0x40011000
 8003054:	40011400 	.word	0x40011400
 8003058:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800305c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003060:	2200      	movs	r2, #0
 8003062:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003066:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800306a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800306e:	4642      	mov	r2, r8
 8003070:	464b      	mov	r3, r9
 8003072:	1891      	adds	r1, r2, r2
 8003074:	6239      	str	r1, [r7, #32]
 8003076:	415b      	adcs	r3, r3
 8003078:	627b      	str	r3, [r7, #36]	@ 0x24
 800307a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800307e:	4641      	mov	r1, r8
 8003080:	1854      	adds	r4, r2, r1
 8003082:	4649      	mov	r1, r9
 8003084:	eb43 0501 	adc.w	r5, r3, r1
 8003088:	f04f 0200 	mov.w	r2, #0
 800308c:	f04f 0300 	mov.w	r3, #0
 8003090:	00eb      	lsls	r3, r5, #3
 8003092:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003096:	00e2      	lsls	r2, r4, #3
 8003098:	4614      	mov	r4, r2
 800309a:	461d      	mov	r5, r3
 800309c:	4643      	mov	r3, r8
 800309e:	18e3      	adds	r3, r4, r3
 80030a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80030a4:	464b      	mov	r3, r9
 80030a6:	eb45 0303 	adc.w	r3, r5, r3
 80030aa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80030ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	2200      	movs	r2, #0
 80030b6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80030ba:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80030be:	f04f 0200 	mov.w	r2, #0
 80030c2:	f04f 0300 	mov.w	r3, #0
 80030c6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80030ca:	4629      	mov	r1, r5
 80030cc:	008b      	lsls	r3, r1, #2
 80030ce:	4621      	mov	r1, r4
 80030d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80030d4:	4621      	mov	r1, r4
 80030d6:	008a      	lsls	r2, r1, #2
 80030d8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80030dc:	f7fd f880 	bl	80001e0 <__aeabi_uldivmod>
 80030e0:	4602      	mov	r2, r0
 80030e2:	460b      	mov	r3, r1
 80030e4:	4b60      	ldr	r3, [pc, #384]	@ (8003268 <UART_SetConfig+0x4e4>)
 80030e6:	fba3 2302 	umull	r2, r3, r3, r2
 80030ea:	095b      	lsrs	r3, r3, #5
 80030ec:	011c      	lsls	r4, r3, #4
 80030ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80030f2:	2200      	movs	r2, #0
 80030f4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80030f8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80030fc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003100:	4642      	mov	r2, r8
 8003102:	464b      	mov	r3, r9
 8003104:	1891      	adds	r1, r2, r2
 8003106:	61b9      	str	r1, [r7, #24]
 8003108:	415b      	adcs	r3, r3
 800310a:	61fb      	str	r3, [r7, #28]
 800310c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003110:	4641      	mov	r1, r8
 8003112:	1851      	adds	r1, r2, r1
 8003114:	6139      	str	r1, [r7, #16]
 8003116:	4649      	mov	r1, r9
 8003118:	414b      	adcs	r3, r1
 800311a:	617b      	str	r3, [r7, #20]
 800311c:	f04f 0200 	mov.w	r2, #0
 8003120:	f04f 0300 	mov.w	r3, #0
 8003124:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003128:	4659      	mov	r1, fp
 800312a:	00cb      	lsls	r3, r1, #3
 800312c:	4651      	mov	r1, sl
 800312e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003132:	4651      	mov	r1, sl
 8003134:	00ca      	lsls	r2, r1, #3
 8003136:	4610      	mov	r0, r2
 8003138:	4619      	mov	r1, r3
 800313a:	4603      	mov	r3, r0
 800313c:	4642      	mov	r2, r8
 800313e:	189b      	adds	r3, r3, r2
 8003140:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003144:	464b      	mov	r3, r9
 8003146:	460a      	mov	r2, r1
 8003148:	eb42 0303 	adc.w	r3, r2, r3
 800314c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003150:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	2200      	movs	r2, #0
 8003158:	67bb      	str	r3, [r7, #120]	@ 0x78
 800315a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800315c:	f04f 0200 	mov.w	r2, #0
 8003160:	f04f 0300 	mov.w	r3, #0
 8003164:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003168:	4649      	mov	r1, r9
 800316a:	008b      	lsls	r3, r1, #2
 800316c:	4641      	mov	r1, r8
 800316e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003172:	4641      	mov	r1, r8
 8003174:	008a      	lsls	r2, r1, #2
 8003176:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800317a:	f7fd f831 	bl	80001e0 <__aeabi_uldivmod>
 800317e:	4602      	mov	r2, r0
 8003180:	460b      	mov	r3, r1
 8003182:	4611      	mov	r1, r2
 8003184:	4b38      	ldr	r3, [pc, #224]	@ (8003268 <UART_SetConfig+0x4e4>)
 8003186:	fba3 2301 	umull	r2, r3, r3, r1
 800318a:	095b      	lsrs	r3, r3, #5
 800318c:	2264      	movs	r2, #100	@ 0x64
 800318e:	fb02 f303 	mul.w	r3, r2, r3
 8003192:	1acb      	subs	r3, r1, r3
 8003194:	011b      	lsls	r3, r3, #4
 8003196:	3332      	adds	r3, #50	@ 0x32
 8003198:	4a33      	ldr	r2, [pc, #204]	@ (8003268 <UART_SetConfig+0x4e4>)
 800319a:	fba2 2303 	umull	r2, r3, r2, r3
 800319e:	095b      	lsrs	r3, r3, #5
 80031a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80031a4:	441c      	add	r4, r3
 80031a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80031aa:	2200      	movs	r2, #0
 80031ac:	673b      	str	r3, [r7, #112]	@ 0x70
 80031ae:	677a      	str	r2, [r7, #116]	@ 0x74
 80031b0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80031b4:	4642      	mov	r2, r8
 80031b6:	464b      	mov	r3, r9
 80031b8:	1891      	adds	r1, r2, r2
 80031ba:	60b9      	str	r1, [r7, #8]
 80031bc:	415b      	adcs	r3, r3
 80031be:	60fb      	str	r3, [r7, #12]
 80031c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80031c4:	4641      	mov	r1, r8
 80031c6:	1851      	adds	r1, r2, r1
 80031c8:	6039      	str	r1, [r7, #0]
 80031ca:	4649      	mov	r1, r9
 80031cc:	414b      	adcs	r3, r1
 80031ce:	607b      	str	r3, [r7, #4]
 80031d0:	f04f 0200 	mov.w	r2, #0
 80031d4:	f04f 0300 	mov.w	r3, #0
 80031d8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80031dc:	4659      	mov	r1, fp
 80031de:	00cb      	lsls	r3, r1, #3
 80031e0:	4651      	mov	r1, sl
 80031e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80031e6:	4651      	mov	r1, sl
 80031e8:	00ca      	lsls	r2, r1, #3
 80031ea:	4610      	mov	r0, r2
 80031ec:	4619      	mov	r1, r3
 80031ee:	4603      	mov	r3, r0
 80031f0:	4642      	mov	r2, r8
 80031f2:	189b      	adds	r3, r3, r2
 80031f4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80031f6:	464b      	mov	r3, r9
 80031f8:	460a      	mov	r2, r1
 80031fa:	eb42 0303 	adc.w	r3, r2, r3
 80031fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003200:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	2200      	movs	r2, #0
 8003208:	663b      	str	r3, [r7, #96]	@ 0x60
 800320a:	667a      	str	r2, [r7, #100]	@ 0x64
 800320c:	f04f 0200 	mov.w	r2, #0
 8003210:	f04f 0300 	mov.w	r3, #0
 8003214:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003218:	4649      	mov	r1, r9
 800321a:	008b      	lsls	r3, r1, #2
 800321c:	4641      	mov	r1, r8
 800321e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003222:	4641      	mov	r1, r8
 8003224:	008a      	lsls	r2, r1, #2
 8003226:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800322a:	f7fc ffd9 	bl	80001e0 <__aeabi_uldivmod>
 800322e:	4602      	mov	r2, r0
 8003230:	460b      	mov	r3, r1
 8003232:	4b0d      	ldr	r3, [pc, #52]	@ (8003268 <UART_SetConfig+0x4e4>)
 8003234:	fba3 1302 	umull	r1, r3, r3, r2
 8003238:	095b      	lsrs	r3, r3, #5
 800323a:	2164      	movs	r1, #100	@ 0x64
 800323c:	fb01 f303 	mul.w	r3, r1, r3
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	011b      	lsls	r3, r3, #4
 8003244:	3332      	adds	r3, #50	@ 0x32
 8003246:	4a08      	ldr	r2, [pc, #32]	@ (8003268 <UART_SetConfig+0x4e4>)
 8003248:	fba2 2303 	umull	r2, r3, r2, r3
 800324c:	095b      	lsrs	r3, r3, #5
 800324e:	f003 020f 	and.w	r2, r3, #15
 8003252:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4422      	add	r2, r4
 800325a:	609a      	str	r2, [r3, #8]
}
 800325c:	bf00      	nop
 800325e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003262:	46bd      	mov	sp, r7
 8003264:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003268:	51eb851f 	.word	0x51eb851f

0800326c <__NVIC_SetPriority>:
{
 800326c:	b480      	push	{r7}
 800326e:	b083      	sub	sp, #12
 8003270:	af00      	add	r7, sp, #0
 8003272:	4603      	mov	r3, r0
 8003274:	6039      	str	r1, [r7, #0]
 8003276:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003278:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800327c:	2b00      	cmp	r3, #0
 800327e:	db0a      	blt.n	8003296 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	b2da      	uxtb	r2, r3
 8003284:	490c      	ldr	r1, [pc, #48]	@ (80032b8 <__NVIC_SetPriority+0x4c>)
 8003286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800328a:	0112      	lsls	r2, r2, #4
 800328c:	b2d2      	uxtb	r2, r2
 800328e:	440b      	add	r3, r1
 8003290:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003294:	e00a      	b.n	80032ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	b2da      	uxtb	r2, r3
 800329a:	4908      	ldr	r1, [pc, #32]	@ (80032bc <__NVIC_SetPriority+0x50>)
 800329c:	79fb      	ldrb	r3, [r7, #7]
 800329e:	f003 030f 	and.w	r3, r3, #15
 80032a2:	3b04      	subs	r3, #4
 80032a4:	0112      	lsls	r2, r2, #4
 80032a6:	b2d2      	uxtb	r2, r2
 80032a8:	440b      	add	r3, r1
 80032aa:	761a      	strb	r2, [r3, #24]
}
 80032ac:	bf00      	nop
 80032ae:	370c      	adds	r7, #12
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr
 80032b8:	e000e100 	.word	0xe000e100
 80032bc:	e000ed00 	.word	0xe000ed00

080032c0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80032c0:	b580      	push	{r7, lr}
 80032c2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80032c4:	4b05      	ldr	r3, [pc, #20]	@ (80032dc <SysTick_Handler+0x1c>)
 80032c6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80032c8:	f001 fd46 	bl	8004d58 <xTaskGetSchedulerState>
 80032cc:	4603      	mov	r3, r0
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d001      	beq.n	80032d6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80032d2:	f002 fb41 	bl	8005958 <xPortSysTickHandler>
  }
}
 80032d6:	bf00      	nop
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	e000e010 	.word	0xe000e010

080032e0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80032e0:	b580      	push	{r7, lr}
 80032e2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80032e4:	2100      	movs	r1, #0
 80032e6:	f06f 0004 	mvn.w	r0, #4
 80032ea:	f7ff ffbf 	bl	800326c <__NVIC_SetPriority>
#endif
}
 80032ee:	bf00      	nop
 80032f0:	bd80      	pop	{r7, pc}
	...

080032f4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80032f4:	b480      	push	{r7}
 80032f6:	b083      	sub	sp, #12
 80032f8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80032fa:	f3ef 8305 	mrs	r3, IPSR
 80032fe:	603b      	str	r3, [r7, #0]
  return(result);
 8003300:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003302:	2b00      	cmp	r3, #0
 8003304:	d003      	beq.n	800330e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003306:	f06f 0305 	mvn.w	r3, #5
 800330a:	607b      	str	r3, [r7, #4]
 800330c:	e00c      	b.n	8003328 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800330e:	4b0a      	ldr	r3, [pc, #40]	@ (8003338 <osKernelInitialize+0x44>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d105      	bne.n	8003322 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003316:	4b08      	ldr	r3, [pc, #32]	@ (8003338 <osKernelInitialize+0x44>)
 8003318:	2201      	movs	r2, #1
 800331a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800331c:	2300      	movs	r3, #0
 800331e:	607b      	str	r3, [r7, #4]
 8003320:	e002      	b.n	8003328 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003322:	f04f 33ff 	mov.w	r3, #4294967295
 8003326:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003328:	687b      	ldr	r3, [r7, #4]
}
 800332a:	4618      	mov	r0, r3
 800332c:	370c      	adds	r7, #12
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr
 8003336:	bf00      	nop
 8003338:	200001e4 	.word	0x200001e4

0800333c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800333c:	b580      	push	{r7, lr}
 800333e:	b082      	sub	sp, #8
 8003340:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003342:	f3ef 8305 	mrs	r3, IPSR
 8003346:	603b      	str	r3, [r7, #0]
  return(result);
 8003348:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800334a:	2b00      	cmp	r3, #0
 800334c:	d003      	beq.n	8003356 <osKernelStart+0x1a>
    stat = osErrorISR;
 800334e:	f06f 0305 	mvn.w	r3, #5
 8003352:	607b      	str	r3, [r7, #4]
 8003354:	e010      	b.n	8003378 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003356:	4b0b      	ldr	r3, [pc, #44]	@ (8003384 <osKernelStart+0x48>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	2b01      	cmp	r3, #1
 800335c:	d109      	bne.n	8003372 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800335e:	f7ff ffbf 	bl	80032e0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003362:	4b08      	ldr	r3, [pc, #32]	@ (8003384 <osKernelStart+0x48>)
 8003364:	2202      	movs	r2, #2
 8003366:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003368:	f001 f892 	bl	8004490 <vTaskStartScheduler>
      stat = osOK;
 800336c:	2300      	movs	r3, #0
 800336e:	607b      	str	r3, [r7, #4]
 8003370:	e002      	b.n	8003378 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003372:	f04f 33ff 	mov.w	r3, #4294967295
 8003376:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003378:	687b      	ldr	r3, [r7, #4]
}
 800337a:	4618      	mov	r0, r3
 800337c:	3708      	adds	r7, #8
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}
 8003382:	bf00      	nop
 8003384:	200001e4 	.word	0x200001e4

08003388 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003388:	b580      	push	{r7, lr}
 800338a:	b08e      	sub	sp, #56	@ 0x38
 800338c:	af04      	add	r7, sp, #16
 800338e:	60f8      	str	r0, [r7, #12]
 8003390:	60b9      	str	r1, [r7, #8]
 8003392:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003394:	2300      	movs	r3, #0
 8003396:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003398:	f3ef 8305 	mrs	r3, IPSR
 800339c:	617b      	str	r3, [r7, #20]
  return(result);
 800339e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d17e      	bne.n	80034a2 <osThreadNew+0x11a>
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d07b      	beq.n	80034a2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80033aa:	2380      	movs	r3, #128	@ 0x80
 80033ac:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80033ae:	2318      	movs	r3, #24
 80033b0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80033b2:	2300      	movs	r3, #0
 80033b4:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80033b6:	f04f 33ff 	mov.w	r3, #4294967295
 80033ba:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d045      	beq.n	800344e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d002      	beq.n	80033d0 <osThreadNew+0x48>
        name = attr->name;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	699b      	ldr	r3, [r3, #24]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d002      	beq.n	80033de <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	699b      	ldr	r3, [r3, #24]
 80033dc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80033de:	69fb      	ldr	r3, [r7, #28]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d008      	beq.n	80033f6 <osThreadNew+0x6e>
 80033e4:	69fb      	ldr	r3, [r7, #28]
 80033e6:	2b38      	cmp	r3, #56	@ 0x38
 80033e8:	d805      	bhi.n	80033f6 <osThreadNew+0x6e>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	f003 0301 	and.w	r3, r3, #1
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d001      	beq.n	80033fa <osThreadNew+0x72>
        return (NULL);
 80033f6:	2300      	movs	r3, #0
 80033f8:	e054      	b.n	80034a4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	695b      	ldr	r3, [r3, #20]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d003      	beq.n	800340a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	695b      	ldr	r3, [r3, #20]
 8003406:	089b      	lsrs	r3, r3, #2
 8003408:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d00e      	beq.n	8003430 <osThreadNew+0xa8>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	68db      	ldr	r3, [r3, #12]
 8003416:	2ba7      	cmp	r3, #167	@ 0xa7
 8003418:	d90a      	bls.n	8003430 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800341e:	2b00      	cmp	r3, #0
 8003420:	d006      	beq.n	8003430 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	695b      	ldr	r3, [r3, #20]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d002      	beq.n	8003430 <osThreadNew+0xa8>
        mem = 1;
 800342a:	2301      	movs	r3, #1
 800342c:	61bb      	str	r3, [r7, #24]
 800342e:	e010      	b.n	8003452 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d10c      	bne.n	8003452 <osThreadNew+0xca>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d108      	bne.n	8003452 <osThreadNew+0xca>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	691b      	ldr	r3, [r3, #16]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d104      	bne.n	8003452 <osThreadNew+0xca>
          mem = 0;
 8003448:	2300      	movs	r3, #0
 800344a:	61bb      	str	r3, [r7, #24]
 800344c:	e001      	b.n	8003452 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800344e:	2300      	movs	r3, #0
 8003450:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003452:	69bb      	ldr	r3, [r7, #24]
 8003454:	2b01      	cmp	r3, #1
 8003456:	d110      	bne.n	800347a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800345c:	687a      	ldr	r2, [r7, #4]
 800345e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003460:	9202      	str	r2, [sp, #8]
 8003462:	9301      	str	r3, [sp, #4]
 8003464:	69fb      	ldr	r3, [r7, #28]
 8003466:	9300      	str	r3, [sp, #0]
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	6a3a      	ldr	r2, [r7, #32]
 800346c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800346e:	68f8      	ldr	r0, [r7, #12]
 8003470:	f000 fe1a 	bl	80040a8 <xTaskCreateStatic>
 8003474:	4603      	mov	r3, r0
 8003476:	613b      	str	r3, [r7, #16]
 8003478:	e013      	b.n	80034a2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800347a:	69bb      	ldr	r3, [r7, #24]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d110      	bne.n	80034a2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003480:	6a3b      	ldr	r3, [r7, #32]
 8003482:	b29a      	uxth	r2, r3
 8003484:	f107 0310 	add.w	r3, r7, #16
 8003488:	9301      	str	r3, [sp, #4]
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	9300      	str	r3, [sp, #0]
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003492:	68f8      	ldr	r0, [r7, #12]
 8003494:	f000 fe68 	bl	8004168 <xTaskCreate>
 8003498:	4603      	mov	r3, r0
 800349a:	2b01      	cmp	r3, #1
 800349c:	d001      	beq.n	80034a2 <osThreadNew+0x11a>
            hTask = NULL;
 800349e:	2300      	movs	r3, #0
 80034a0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80034a2:	693b      	ldr	r3, [r7, #16]
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	3728      	adds	r7, #40	@ 0x28
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}

080034ac <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b084      	sub	sp, #16
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80034b4:	f3ef 8305 	mrs	r3, IPSR
 80034b8:	60bb      	str	r3, [r7, #8]
  return(result);
 80034ba:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d003      	beq.n	80034c8 <osDelay+0x1c>
    stat = osErrorISR;
 80034c0:	f06f 0305 	mvn.w	r3, #5
 80034c4:	60fb      	str	r3, [r7, #12]
 80034c6:	e007      	b.n	80034d8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80034c8:	2300      	movs	r3, #0
 80034ca:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d002      	beq.n	80034d8 <osDelay+0x2c>
      vTaskDelay(ticks);
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f000 ffa6 	bl	8004424 <vTaskDelay>
    }
  }

  return (stat);
 80034d8:	68fb      	ldr	r3, [r7, #12]
}
 80034da:	4618      	mov	r0, r3
 80034dc:	3710      	adds	r7, #16
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}
	...

080034e4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80034e4:	b480      	push	{r7}
 80034e6:	b085      	sub	sp, #20
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	60f8      	str	r0, [r7, #12]
 80034ec:	60b9      	str	r1, [r7, #8]
 80034ee:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	4a07      	ldr	r2, [pc, #28]	@ (8003510 <vApplicationGetIdleTaskMemory+0x2c>)
 80034f4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	4a06      	ldr	r2, [pc, #24]	@ (8003514 <vApplicationGetIdleTaskMemory+0x30>)
 80034fa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2280      	movs	r2, #128	@ 0x80
 8003500:	601a      	str	r2, [r3, #0]
}
 8003502:	bf00      	nop
 8003504:	3714      	adds	r7, #20
 8003506:	46bd      	mov	sp, r7
 8003508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350c:	4770      	bx	lr
 800350e:	bf00      	nop
 8003510:	200001e8 	.word	0x200001e8
 8003514:	20000290 	.word	0x20000290

08003518 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003518:	b480      	push	{r7}
 800351a:	b085      	sub	sp, #20
 800351c:	af00      	add	r7, sp, #0
 800351e:	60f8      	str	r0, [r7, #12]
 8003520:	60b9      	str	r1, [r7, #8]
 8003522:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	4a07      	ldr	r2, [pc, #28]	@ (8003544 <vApplicationGetTimerTaskMemory+0x2c>)
 8003528:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	4a06      	ldr	r2, [pc, #24]	@ (8003548 <vApplicationGetTimerTaskMemory+0x30>)
 800352e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003536:	601a      	str	r2, [r3, #0]
}
 8003538:	bf00      	nop
 800353a:	3714      	adds	r7, #20
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr
 8003544:	20000490 	.word	0x20000490
 8003548:	20000538 	.word	0x20000538

0800354c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800354c:	b480      	push	{r7}
 800354e:	b083      	sub	sp, #12
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	f103 0208 	add.w	r2, r3, #8
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	f04f 32ff 	mov.w	r2, #4294967295
 8003564:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	f103 0208 	add.w	r2, r3, #8
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f103 0208 	add.w	r2, r3, #8
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2200      	movs	r2, #0
 800357e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003580:	bf00      	nop
 8003582:	370c      	adds	r7, #12
 8003584:	46bd      	mov	sp, r7
 8003586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358a:	4770      	bx	lr

0800358c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800358c:	b480      	push	{r7}
 800358e:	b083      	sub	sp, #12
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2200      	movs	r2, #0
 8003598:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800359a:	bf00      	nop
 800359c:	370c      	adds	r7, #12
 800359e:	46bd      	mov	sp, r7
 80035a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a4:	4770      	bx	lr

080035a6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80035a6:	b480      	push	{r7}
 80035a8:	b085      	sub	sp, #20
 80035aa:	af00      	add	r7, sp, #0
 80035ac:	6078      	str	r0, [r7, #4]
 80035ae:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	68fa      	ldr	r2, [r7, #12]
 80035ba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	689a      	ldr	r2, [r3, #8]
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	683a      	ldr	r2, [r7, #0]
 80035ca:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	683a      	ldr	r2, [r7, #0]
 80035d0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	687a      	ldr	r2, [r7, #4]
 80035d6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	1c5a      	adds	r2, r3, #1
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	601a      	str	r2, [r3, #0]
}
 80035e2:	bf00      	nop
 80035e4:	3714      	adds	r7, #20
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr

080035ee <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80035ee:	b480      	push	{r7}
 80035f0:	b085      	sub	sp, #20
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	6078      	str	r0, [r7, #4]
 80035f6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003604:	d103      	bne.n	800360e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	691b      	ldr	r3, [r3, #16]
 800360a:	60fb      	str	r3, [r7, #12]
 800360c:	e00c      	b.n	8003628 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	3308      	adds	r3, #8
 8003612:	60fb      	str	r3, [r7, #12]
 8003614:	e002      	b.n	800361c <vListInsert+0x2e>
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	60fb      	str	r3, [r7, #12]
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	68ba      	ldr	r2, [r7, #8]
 8003624:	429a      	cmp	r2, r3
 8003626:	d2f6      	bcs.n	8003616 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	685a      	ldr	r2, [r3, #4]
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	683a      	ldr	r2, [r7, #0]
 8003636:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	68fa      	ldr	r2, [r7, #12]
 800363c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	683a      	ldr	r2, [r7, #0]
 8003642:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	687a      	ldr	r2, [r7, #4]
 8003648:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	1c5a      	adds	r2, r3, #1
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	601a      	str	r2, [r3, #0]
}
 8003654:	bf00      	nop
 8003656:	3714      	adds	r7, #20
 8003658:	46bd      	mov	sp, r7
 800365a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365e:	4770      	bx	lr

08003660 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003660:	b480      	push	{r7}
 8003662:	b085      	sub	sp, #20
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	691b      	ldr	r3, [r3, #16]
 800366c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	6892      	ldr	r2, [r2, #8]
 8003676:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	687a      	ldr	r2, [r7, #4]
 800367e:	6852      	ldr	r2, [r2, #4]
 8003680:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	687a      	ldr	r2, [r7, #4]
 8003688:	429a      	cmp	r2, r3
 800368a:	d103      	bne.n	8003694 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	689a      	ldr	r2, [r3, #8]
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2200      	movs	r2, #0
 8003698:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	1e5a      	subs	r2, r3, #1
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	3714      	adds	r7, #20
 80036ac:	46bd      	mov	sp, r7
 80036ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b2:	4770      	bx	lr

080036b4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b084      	sub	sp, #16
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
 80036bc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d10b      	bne.n	80036e0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80036c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036cc:	f383 8811 	msr	BASEPRI, r3
 80036d0:	f3bf 8f6f 	isb	sy
 80036d4:	f3bf 8f4f 	dsb	sy
 80036d8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80036da:	bf00      	nop
 80036dc:	bf00      	nop
 80036de:	e7fd      	b.n	80036dc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80036e0:	f002 f8aa 	bl	8005838 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036ec:	68f9      	ldr	r1, [r7, #12]
 80036ee:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80036f0:	fb01 f303 	mul.w	r3, r1, r3
 80036f4:	441a      	add	r2, r3
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2200      	movs	r2, #0
 80036fe:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003710:	3b01      	subs	r3, #1
 8003712:	68f9      	ldr	r1, [r7, #12]
 8003714:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003716:	fb01 f303 	mul.w	r3, r1, r3
 800371a:	441a      	add	r2, r3
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	22ff      	movs	r2, #255	@ 0xff
 8003724:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	22ff      	movs	r2, #255	@ 0xff
 800372c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d114      	bne.n	8003760 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	691b      	ldr	r3, [r3, #16]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d01a      	beq.n	8003774 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	3310      	adds	r3, #16
 8003742:	4618      	mov	r0, r3
 8003744:	f001 f942 	bl	80049cc <xTaskRemoveFromEventList>
 8003748:	4603      	mov	r3, r0
 800374a:	2b00      	cmp	r3, #0
 800374c:	d012      	beq.n	8003774 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800374e:	4b0d      	ldr	r3, [pc, #52]	@ (8003784 <xQueueGenericReset+0xd0>)
 8003750:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003754:	601a      	str	r2, [r3, #0]
 8003756:	f3bf 8f4f 	dsb	sy
 800375a:	f3bf 8f6f 	isb	sy
 800375e:	e009      	b.n	8003774 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	3310      	adds	r3, #16
 8003764:	4618      	mov	r0, r3
 8003766:	f7ff fef1 	bl	800354c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	3324      	adds	r3, #36	@ 0x24
 800376e:	4618      	mov	r0, r3
 8003770:	f7ff feec 	bl	800354c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003774:	f002 f892 	bl	800589c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003778:	2301      	movs	r3, #1
}
 800377a:	4618      	mov	r0, r3
 800377c:	3710      	adds	r7, #16
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}
 8003782:	bf00      	nop
 8003784:	e000ed04 	.word	0xe000ed04

08003788 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003788:	b580      	push	{r7, lr}
 800378a:	b08e      	sub	sp, #56	@ 0x38
 800378c:	af02      	add	r7, sp, #8
 800378e:	60f8      	str	r0, [r7, #12]
 8003790:	60b9      	str	r1, [r7, #8]
 8003792:	607a      	str	r2, [r7, #4]
 8003794:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d10b      	bne.n	80037b4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800379c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037a0:	f383 8811 	msr	BASEPRI, r3
 80037a4:	f3bf 8f6f 	isb	sy
 80037a8:	f3bf 8f4f 	dsb	sy
 80037ac:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80037ae:	bf00      	nop
 80037b0:	bf00      	nop
 80037b2:	e7fd      	b.n	80037b0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d10b      	bne.n	80037d2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80037ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037be:	f383 8811 	msr	BASEPRI, r3
 80037c2:	f3bf 8f6f 	isb	sy
 80037c6:	f3bf 8f4f 	dsb	sy
 80037ca:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80037cc:	bf00      	nop
 80037ce:	bf00      	nop
 80037d0:	e7fd      	b.n	80037ce <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d002      	beq.n	80037de <xQueueGenericCreateStatic+0x56>
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d001      	beq.n	80037e2 <xQueueGenericCreateStatic+0x5a>
 80037de:	2301      	movs	r3, #1
 80037e0:	e000      	b.n	80037e4 <xQueueGenericCreateStatic+0x5c>
 80037e2:	2300      	movs	r3, #0
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d10b      	bne.n	8003800 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80037e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037ec:	f383 8811 	msr	BASEPRI, r3
 80037f0:	f3bf 8f6f 	isb	sy
 80037f4:	f3bf 8f4f 	dsb	sy
 80037f8:	623b      	str	r3, [r7, #32]
}
 80037fa:	bf00      	nop
 80037fc:	bf00      	nop
 80037fe:	e7fd      	b.n	80037fc <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d102      	bne.n	800380c <xQueueGenericCreateStatic+0x84>
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d101      	bne.n	8003810 <xQueueGenericCreateStatic+0x88>
 800380c:	2301      	movs	r3, #1
 800380e:	e000      	b.n	8003812 <xQueueGenericCreateStatic+0x8a>
 8003810:	2300      	movs	r3, #0
 8003812:	2b00      	cmp	r3, #0
 8003814:	d10b      	bne.n	800382e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8003816:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800381a:	f383 8811 	msr	BASEPRI, r3
 800381e:	f3bf 8f6f 	isb	sy
 8003822:	f3bf 8f4f 	dsb	sy
 8003826:	61fb      	str	r3, [r7, #28]
}
 8003828:	bf00      	nop
 800382a:	bf00      	nop
 800382c:	e7fd      	b.n	800382a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800382e:	2350      	movs	r3, #80	@ 0x50
 8003830:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	2b50      	cmp	r3, #80	@ 0x50
 8003836:	d00b      	beq.n	8003850 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8003838:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800383c:	f383 8811 	msr	BASEPRI, r3
 8003840:	f3bf 8f6f 	isb	sy
 8003844:	f3bf 8f4f 	dsb	sy
 8003848:	61bb      	str	r3, [r7, #24]
}
 800384a:	bf00      	nop
 800384c:	bf00      	nop
 800384e:	e7fd      	b.n	800384c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003850:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8003856:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003858:	2b00      	cmp	r3, #0
 800385a:	d00d      	beq.n	8003878 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800385c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800385e:	2201      	movs	r2, #1
 8003860:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003864:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8003868:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800386a:	9300      	str	r3, [sp, #0]
 800386c:	4613      	mov	r3, r2
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	68b9      	ldr	r1, [r7, #8]
 8003872:	68f8      	ldr	r0, [r7, #12]
 8003874:	f000 f805 	bl	8003882 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003878:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800387a:	4618      	mov	r0, r3
 800387c:	3730      	adds	r7, #48	@ 0x30
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}

08003882 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003882:	b580      	push	{r7, lr}
 8003884:	b084      	sub	sp, #16
 8003886:	af00      	add	r7, sp, #0
 8003888:	60f8      	str	r0, [r7, #12]
 800388a:	60b9      	str	r1, [r7, #8]
 800388c:	607a      	str	r2, [r7, #4]
 800388e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d103      	bne.n	800389e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003896:	69bb      	ldr	r3, [r7, #24]
 8003898:	69ba      	ldr	r2, [r7, #24]
 800389a:	601a      	str	r2, [r3, #0]
 800389c:	e002      	b.n	80038a4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800389e:	69bb      	ldr	r3, [r7, #24]
 80038a0:	687a      	ldr	r2, [r7, #4]
 80038a2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80038a4:	69bb      	ldr	r3, [r7, #24]
 80038a6:	68fa      	ldr	r2, [r7, #12]
 80038a8:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80038aa:	69bb      	ldr	r3, [r7, #24]
 80038ac:	68ba      	ldr	r2, [r7, #8]
 80038ae:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80038b0:	2101      	movs	r1, #1
 80038b2:	69b8      	ldr	r0, [r7, #24]
 80038b4:	f7ff fefe 	bl	80036b4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80038b8:	69bb      	ldr	r3, [r7, #24]
 80038ba:	78fa      	ldrb	r2, [r7, #3]
 80038bc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80038c0:	bf00      	nop
 80038c2:	3710      	adds	r7, #16
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}

080038c8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b08e      	sub	sp, #56	@ 0x38
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	60f8      	str	r0, [r7, #12]
 80038d0:	60b9      	str	r1, [r7, #8]
 80038d2:	607a      	str	r2, [r7, #4]
 80038d4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80038d6:	2300      	movs	r3, #0
 80038d8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80038de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d10b      	bne.n	80038fc <xQueueGenericSend+0x34>
	__asm volatile
 80038e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038e8:	f383 8811 	msr	BASEPRI, r3
 80038ec:	f3bf 8f6f 	isb	sy
 80038f0:	f3bf 8f4f 	dsb	sy
 80038f4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80038f6:	bf00      	nop
 80038f8:	bf00      	nop
 80038fa:	e7fd      	b.n	80038f8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d103      	bne.n	800390a <xQueueGenericSend+0x42>
 8003902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003906:	2b00      	cmp	r3, #0
 8003908:	d101      	bne.n	800390e <xQueueGenericSend+0x46>
 800390a:	2301      	movs	r3, #1
 800390c:	e000      	b.n	8003910 <xQueueGenericSend+0x48>
 800390e:	2300      	movs	r3, #0
 8003910:	2b00      	cmp	r3, #0
 8003912:	d10b      	bne.n	800392c <xQueueGenericSend+0x64>
	__asm volatile
 8003914:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003918:	f383 8811 	msr	BASEPRI, r3
 800391c:	f3bf 8f6f 	isb	sy
 8003920:	f3bf 8f4f 	dsb	sy
 8003924:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003926:	bf00      	nop
 8003928:	bf00      	nop
 800392a:	e7fd      	b.n	8003928 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	2b02      	cmp	r3, #2
 8003930:	d103      	bne.n	800393a <xQueueGenericSend+0x72>
 8003932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003934:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003936:	2b01      	cmp	r3, #1
 8003938:	d101      	bne.n	800393e <xQueueGenericSend+0x76>
 800393a:	2301      	movs	r3, #1
 800393c:	e000      	b.n	8003940 <xQueueGenericSend+0x78>
 800393e:	2300      	movs	r3, #0
 8003940:	2b00      	cmp	r3, #0
 8003942:	d10b      	bne.n	800395c <xQueueGenericSend+0x94>
	__asm volatile
 8003944:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003948:	f383 8811 	msr	BASEPRI, r3
 800394c:	f3bf 8f6f 	isb	sy
 8003950:	f3bf 8f4f 	dsb	sy
 8003954:	623b      	str	r3, [r7, #32]
}
 8003956:	bf00      	nop
 8003958:	bf00      	nop
 800395a:	e7fd      	b.n	8003958 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800395c:	f001 f9fc 	bl	8004d58 <xTaskGetSchedulerState>
 8003960:	4603      	mov	r3, r0
 8003962:	2b00      	cmp	r3, #0
 8003964:	d102      	bne.n	800396c <xQueueGenericSend+0xa4>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d101      	bne.n	8003970 <xQueueGenericSend+0xa8>
 800396c:	2301      	movs	r3, #1
 800396e:	e000      	b.n	8003972 <xQueueGenericSend+0xaa>
 8003970:	2300      	movs	r3, #0
 8003972:	2b00      	cmp	r3, #0
 8003974:	d10b      	bne.n	800398e <xQueueGenericSend+0xc6>
	__asm volatile
 8003976:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800397a:	f383 8811 	msr	BASEPRI, r3
 800397e:	f3bf 8f6f 	isb	sy
 8003982:	f3bf 8f4f 	dsb	sy
 8003986:	61fb      	str	r3, [r7, #28]
}
 8003988:	bf00      	nop
 800398a:	bf00      	nop
 800398c:	e7fd      	b.n	800398a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800398e:	f001 ff53 	bl	8005838 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003994:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003996:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003998:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800399a:	429a      	cmp	r2, r3
 800399c:	d302      	bcc.n	80039a4 <xQueueGenericSend+0xdc>
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	2b02      	cmp	r3, #2
 80039a2:	d129      	bne.n	80039f8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80039a4:	683a      	ldr	r2, [r7, #0]
 80039a6:	68b9      	ldr	r1, [r7, #8]
 80039a8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80039aa:	f000 fa0f 	bl	8003dcc <prvCopyDataToQueue>
 80039ae:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80039b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d010      	beq.n	80039da <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80039b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039ba:	3324      	adds	r3, #36	@ 0x24
 80039bc:	4618      	mov	r0, r3
 80039be:	f001 f805 	bl	80049cc <xTaskRemoveFromEventList>
 80039c2:	4603      	mov	r3, r0
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d013      	beq.n	80039f0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80039c8:	4b3f      	ldr	r3, [pc, #252]	@ (8003ac8 <xQueueGenericSend+0x200>)
 80039ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80039ce:	601a      	str	r2, [r3, #0]
 80039d0:	f3bf 8f4f 	dsb	sy
 80039d4:	f3bf 8f6f 	isb	sy
 80039d8:	e00a      	b.n	80039f0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80039da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d007      	beq.n	80039f0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80039e0:	4b39      	ldr	r3, [pc, #228]	@ (8003ac8 <xQueueGenericSend+0x200>)
 80039e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80039e6:	601a      	str	r2, [r3, #0]
 80039e8:	f3bf 8f4f 	dsb	sy
 80039ec:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80039f0:	f001 ff54 	bl	800589c <vPortExitCritical>
				return pdPASS;
 80039f4:	2301      	movs	r3, #1
 80039f6:	e063      	b.n	8003ac0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d103      	bne.n	8003a06 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80039fe:	f001 ff4d 	bl	800589c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003a02:	2300      	movs	r3, #0
 8003a04:	e05c      	b.n	8003ac0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003a06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d106      	bne.n	8003a1a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003a0c:	f107 0314 	add.w	r3, r7, #20
 8003a10:	4618      	mov	r0, r3
 8003a12:	f001 f83f 	bl	8004a94 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003a16:	2301      	movs	r3, #1
 8003a18:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003a1a:	f001 ff3f 	bl	800589c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003a1e:	f000 fda7 	bl	8004570 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003a22:	f001 ff09 	bl	8005838 <vPortEnterCritical>
 8003a26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a28:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003a2c:	b25b      	sxtb	r3, r3
 8003a2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a32:	d103      	bne.n	8003a3c <xQueueGenericSend+0x174>
 8003a34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a36:	2200      	movs	r2, #0
 8003a38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003a3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a3e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003a42:	b25b      	sxtb	r3, r3
 8003a44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a48:	d103      	bne.n	8003a52 <xQueueGenericSend+0x18a>
 8003a4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003a52:	f001 ff23 	bl	800589c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003a56:	1d3a      	adds	r2, r7, #4
 8003a58:	f107 0314 	add.w	r3, r7, #20
 8003a5c:	4611      	mov	r1, r2
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f001 f82e 	bl	8004ac0 <xTaskCheckForTimeOut>
 8003a64:	4603      	mov	r3, r0
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d124      	bne.n	8003ab4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003a6a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003a6c:	f000 faa6 	bl	8003fbc <prvIsQueueFull>
 8003a70:	4603      	mov	r3, r0
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d018      	beq.n	8003aa8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003a76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a78:	3310      	adds	r3, #16
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	4611      	mov	r1, r2
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f000 ff52 	bl	8004928 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003a84:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003a86:	f000 fa31 	bl	8003eec <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003a8a:	f000 fd7f 	bl	800458c <xTaskResumeAll>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	f47f af7c 	bne.w	800398e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8003a96:	4b0c      	ldr	r3, [pc, #48]	@ (8003ac8 <xQueueGenericSend+0x200>)
 8003a98:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003a9c:	601a      	str	r2, [r3, #0]
 8003a9e:	f3bf 8f4f 	dsb	sy
 8003aa2:	f3bf 8f6f 	isb	sy
 8003aa6:	e772      	b.n	800398e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003aa8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003aaa:	f000 fa1f 	bl	8003eec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003aae:	f000 fd6d 	bl	800458c <xTaskResumeAll>
 8003ab2:	e76c      	b.n	800398e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003ab4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003ab6:	f000 fa19 	bl	8003eec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003aba:	f000 fd67 	bl	800458c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003abe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	3738      	adds	r7, #56	@ 0x38
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}
 8003ac8:	e000ed04 	.word	0xe000ed04

08003acc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b090      	sub	sp, #64	@ 0x40
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	60f8      	str	r0, [r7, #12]
 8003ad4:	60b9      	str	r1, [r7, #8]
 8003ad6:	607a      	str	r2, [r7, #4]
 8003ad8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8003ade:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d10b      	bne.n	8003afc <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8003ae4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ae8:	f383 8811 	msr	BASEPRI, r3
 8003aec:	f3bf 8f6f 	isb	sy
 8003af0:	f3bf 8f4f 	dsb	sy
 8003af4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003af6:	bf00      	nop
 8003af8:	bf00      	nop
 8003afa:	e7fd      	b.n	8003af8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d103      	bne.n	8003b0a <xQueueGenericSendFromISR+0x3e>
 8003b02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d101      	bne.n	8003b0e <xQueueGenericSendFromISR+0x42>
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e000      	b.n	8003b10 <xQueueGenericSendFromISR+0x44>
 8003b0e:	2300      	movs	r3, #0
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d10b      	bne.n	8003b2c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8003b14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b18:	f383 8811 	msr	BASEPRI, r3
 8003b1c:	f3bf 8f6f 	isb	sy
 8003b20:	f3bf 8f4f 	dsb	sy
 8003b24:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003b26:	bf00      	nop
 8003b28:	bf00      	nop
 8003b2a:	e7fd      	b.n	8003b28 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	2b02      	cmp	r3, #2
 8003b30:	d103      	bne.n	8003b3a <xQueueGenericSendFromISR+0x6e>
 8003b32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b36:	2b01      	cmp	r3, #1
 8003b38:	d101      	bne.n	8003b3e <xQueueGenericSendFromISR+0x72>
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e000      	b.n	8003b40 <xQueueGenericSendFromISR+0x74>
 8003b3e:	2300      	movs	r3, #0
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d10b      	bne.n	8003b5c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8003b44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b48:	f383 8811 	msr	BASEPRI, r3
 8003b4c:	f3bf 8f6f 	isb	sy
 8003b50:	f3bf 8f4f 	dsb	sy
 8003b54:	623b      	str	r3, [r7, #32]
}
 8003b56:	bf00      	nop
 8003b58:	bf00      	nop
 8003b5a:	e7fd      	b.n	8003b58 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003b5c:	f001 ff4c 	bl	80059f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003b60:	f3ef 8211 	mrs	r2, BASEPRI
 8003b64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b68:	f383 8811 	msr	BASEPRI, r3
 8003b6c:	f3bf 8f6f 	isb	sy
 8003b70:	f3bf 8f4f 	dsb	sy
 8003b74:	61fa      	str	r2, [r7, #28]
 8003b76:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003b78:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003b7a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003b7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b7e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003b80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d302      	bcc.n	8003b8e <xQueueGenericSendFromISR+0xc2>
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	2b02      	cmp	r3, #2
 8003b8c:	d12f      	bne.n	8003bee <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003b8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b90:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003b94:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003b98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003b9e:	683a      	ldr	r2, [r7, #0]
 8003ba0:	68b9      	ldr	r1, [r7, #8]
 8003ba2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003ba4:	f000 f912 	bl	8003dcc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003ba8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8003bac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bb0:	d112      	bne.n	8003bd8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003bb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d016      	beq.n	8003be8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003bba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bbc:	3324      	adds	r3, #36	@ 0x24
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f000 ff04 	bl	80049cc <xTaskRemoveFromEventList>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d00e      	beq.n	8003be8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d00b      	beq.n	8003be8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	601a      	str	r2, [r3, #0]
 8003bd6:	e007      	b.n	8003be8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003bd8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003bdc:	3301      	adds	r3, #1
 8003bde:	b2db      	uxtb	r3, r3
 8003be0:	b25a      	sxtb	r2, r3
 8003be2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003be4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8003be8:	2301      	movs	r3, #1
 8003bea:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8003bec:	e001      	b.n	8003bf2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003bf2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bf4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003bfc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003bfe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3740      	adds	r7, #64	@ 0x40
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}

08003c08 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b08c      	sub	sp, #48	@ 0x30
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	60f8      	str	r0, [r7, #12]
 8003c10:	60b9      	str	r1, [r7, #8]
 8003c12:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003c14:	2300      	movs	r3, #0
 8003c16:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003c1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d10b      	bne.n	8003c3a <xQueueReceive+0x32>
	__asm volatile
 8003c22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c26:	f383 8811 	msr	BASEPRI, r3
 8003c2a:	f3bf 8f6f 	isb	sy
 8003c2e:	f3bf 8f4f 	dsb	sy
 8003c32:	623b      	str	r3, [r7, #32]
}
 8003c34:	bf00      	nop
 8003c36:	bf00      	nop
 8003c38:	e7fd      	b.n	8003c36 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d103      	bne.n	8003c48 <xQueueReceive+0x40>
 8003c40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d101      	bne.n	8003c4c <xQueueReceive+0x44>
 8003c48:	2301      	movs	r3, #1
 8003c4a:	e000      	b.n	8003c4e <xQueueReceive+0x46>
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d10b      	bne.n	8003c6a <xQueueReceive+0x62>
	__asm volatile
 8003c52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c56:	f383 8811 	msr	BASEPRI, r3
 8003c5a:	f3bf 8f6f 	isb	sy
 8003c5e:	f3bf 8f4f 	dsb	sy
 8003c62:	61fb      	str	r3, [r7, #28]
}
 8003c64:	bf00      	nop
 8003c66:	bf00      	nop
 8003c68:	e7fd      	b.n	8003c66 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003c6a:	f001 f875 	bl	8004d58 <xTaskGetSchedulerState>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d102      	bne.n	8003c7a <xQueueReceive+0x72>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d101      	bne.n	8003c7e <xQueueReceive+0x76>
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e000      	b.n	8003c80 <xQueueReceive+0x78>
 8003c7e:	2300      	movs	r3, #0
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d10b      	bne.n	8003c9c <xQueueReceive+0x94>
	__asm volatile
 8003c84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c88:	f383 8811 	msr	BASEPRI, r3
 8003c8c:	f3bf 8f6f 	isb	sy
 8003c90:	f3bf 8f4f 	dsb	sy
 8003c94:	61bb      	str	r3, [r7, #24]
}
 8003c96:	bf00      	nop
 8003c98:	bf00      	nop
 8003c9a:	e7fd      	b.n	8003c98 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003c9c:	f001 fdcc 	bl	8005838 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003ca0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ca2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ca4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d01f      	beq.n	8003cec <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003cac:	68b9      	ldr	r1, [r7, #8]
 8003cae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003cb0:	f000 f8f6 	bl	8003ea0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cb6:	1e5a      	subs	r2, r3, #1
 8003cb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cba:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003cbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cbe:	691b      	ldr	r3, [r3, #16]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d00f      	beq.n	8003ce4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003cc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cc6:	3310      	adds	r3, #16
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f000 fe7f 	bl	80049cc <xTaskRemoveFromEventList>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d007      	beq.n	8003ce4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003cd4:	4b3c      	ldr	r3, [pc, #240]	@ (8003dc8 <xQueueReceive+0x1c0>)
 8003cd6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003cda:	601a      	str	r2, [r3, #0]
 8003cdc:	f3bf 8f4f 	dsb	sy
 8003ce0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003ce4:	f001 fdda 	bl	800589c <vPortExitCritical>
				return pdPASS;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	e069      	b.n	8003dc0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d103      	bne.n	8003cfa <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003cf2:	f001 fdd3 	bl	800589c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	e062      	b.n	8003dc0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003cfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d106      	bne.n	8003d0e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003d00:	f107 0310 	add.w	r3, r7, #16
 8003d04:	4618      	mov	r0, r3
 8003d06:	f000 fec5 	bl	8004a94 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003d0e:	f001 fdc5 	bl	800589c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003d12:	f000 fc2d 	bl	8004570 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003d16:	f001 fd8f 	bl	8005838 <vPortEnterCritical>
 8003d1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d1c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003d20:	b25b      	sxtb	r3, r3
 8003d22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d26:	d103      	bne.n	8003d30 <xQueueReceive+0x128>
 8003d28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003d30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d32:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003d36:	b25b      	sxtb	r3, r3
 8003d38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d3c:	d103      	bne.n	8003d46 <xQueueReceive+0x13e>
 8003d3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d40:	2200      	movs	r2, #0
 8003d42:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003d46:	f001 fda9 	bl	800589c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003d4a:	1d3a      	adds	r2, r7, #4
 8003d4c:	f107 0310 	add.w	r3, r7, #16
 8003d50:	4611      	mov	r1, r2
 8003d52:	4618      	mov	r0, r3
 8003d54:	f000 feb4 	bl	8004ac0 <xTaskCheckForTimeOut>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d123      	bne.n	8003da6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003d5e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003d60:	f000 f916 	bl	8003f90 <prvIsQueueEmpty>
 8003d64:	4603      	mov	r3, r0
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d017      	beq.n	8003d9a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003d6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d6c:	3324      	adds	r3, #36	@ 0x24
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	4611      	mov	r1, r2
 8003d72:	4618      	mov	r0, r3
 8003d74:	f000 fdd8 	bl	8004928 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003d78:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003d7a:	f000 f8b7 	bl	8003eec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003d7e:	f000 fc05 	bl	800458c <xTaskResumeAll>
 8003d82:	4603      	mov	r3, r0
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d189      	bne.n	8003c9c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8003d88:	4b0f      	ldr	r3, [pc, #60]	@ (8003dc8 <xQueueReceive+0x1c0>)
 8003d8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d8e:	601a      	str	r2, [r3, #0]
 8003d90:	f3bf 8f4f 	dsb	sy
 8003d94:	f3bf 8f6f 	isb	sy
 8003d98:	e780      	b.n	8003c9c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003d9a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003d9c:	f000 f8a6 	bl	8003eec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003da0:	f000 fbf4 	bl	800458c <xTaskResumeAll>
 8003da4:	e77a      	b.n	8003c9c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003da6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003da8:	f000 f8a0 	bl	8003eec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003dac:	f000 fbee 	bl	800458c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003db0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003db2:	f000 f8ed 	bl	8003f90 <prvIsQueueEmpty>
 8003db6:	4603      	mov	r3, r0
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	f43f af6f 	beq.w	8003c9c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003dbe:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3730      	adds	r7, #48	@ 0x30
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}
 8003dc8:	e000ed04 	.word	0xe000ed04

08003dcc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b086      	sub	sp, #24
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	60f8      	str	r0, [r7, #12]
 8003dd4:	60b9      	str	r1, [r7, #8]
 8003dd6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003de0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d10d      	bne.n	8003e06 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d14d      	bne.n	8003e8e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	4618      	mov	r0, r3
 8003df8:	f000 ffcc 	bl	8004d94 <xTaskPriorityDisinherit>
 8003dfc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2200      	movs	r2, #0
 8003e02:	609a      	str	r2, [r3, #8]
 8003e04:	e043      	b.n	8003e8e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d119      	bne.n	8003e40 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6858      	ldr	r0, [r3, #4]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e14:	461a      	mov	r2, r3
 8003e16:	68b9      	ldr	r1, [r7, #8]
 8003e18:	f002 f974 	bl	8006104 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	685a      	ldr	r2, [r3, #4]
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e24:	441a      	add	r2, r3
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	685a      	ldr	r2, [r3, #4]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	429a      	cmp	r2, r3
 8003e34:	d32b      	bcc.n	8003e8e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	605a      	str	r2, [r3, #4]
 8003e3e:	e026      	b.n	8003e8e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	68d8      	ldr	r0, [r3, #12]
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e48:	461a      	mov	r2, r3
 8003e4a:	68b9      	ldr	r1, [r7, #8]
 8003e4c:	f002 f95a 	bl	8006104 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	68da      	ldr	r2, [r3, #12]
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e58:	425b      	negs	r3, r3
 8003e5a:	441a      	add	r2, r3
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	68da      	ldr	r2, [r3, #12]
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d207      	bcs.n	8003e7c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	689a      	ldr	r2, [r3, #8]
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e74:	425b      	negs	r3, r3
 8003e76:	441a      	add	r2, r3
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2b02      	cmp	r3, #2
 8003e80:	d105      	bne.n	8003e8e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d002      	beq.n	8003e8e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	3b01      	subs	r3, #1
 8003e8c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	1c5a      	adds	r2, r3, #1
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8003e96:	697b      	ldr	r3, [r7, #20]
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	3718      	adds	r7, #24
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}

08003ea0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b082      	sub	sp, #8
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d018      	beq.n	8003ee4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	68da      	ldr	r2, [r3, #12]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eba:	441a      	add	r2, r3
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	68da      	ldr	r2, [r3, #12]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d303      	bcc.n	8003ed4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	68d9      	ldr	r1, [r3, #12]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003edc:	461a      	mov	r2, r3
 8003ede:	6838      	ldr	r0, [r7, #0]
 8003ee0:	f002 f910 	bl	8006104 <memcpy>
	}
}
 8003ee4:	bf00      	nop
 8003ee6:	3708      	adds	r7, #8
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}

08003eec <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b084      	sub	sp, #16
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003ef4:	f001 fca0 	bl	8005838 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003efe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003f00:	e011      	b.n	8003f26 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d012      	beq.n	8003f30 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	3324      	adds	r3, #36	@ 0x24
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f000 fd5c 	bl	80049cc <xTaskRemoveFromEventList>
 8003f14:	4603      	mov	r3, r0
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d001      	beq.n	8003f1e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003f1a:	f000 fe35 	bl	8004b88 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003f1e:	7bfb      	ldrb	r3, [r7, #15]
 8003f20:	3b01      	subs	r3, #1
 8003f22:	b2db      	uxtb	r3, r3
 8003f24:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003f26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	dce9      	bgt.n	8003f02 <prvUnlockQueue+0x16>
 8003f2e:	e000      	b.n	8003f32 <prvUnlockQueue+0x46>
					break;
 8003f30:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	22ff      	movs	r2, #255	@ 0xff
 8003f36:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8003f3a:	f001 fcaf 	bl	800589c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003f3e:	f001 fc7b 	bl	8005838 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003f48:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003f4a:	e011      	b.n	8003f70 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	691b      	ldr	r3, [r3, #16]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d012      	beq.n	8003f7a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	3310      	adds	r3, #16
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f000 fd37 	bl	80049cc <xTaskRemoveFromEventList>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d001      	beq.n	8003f68 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003f64:	f000 fe10 	bl	8004b88 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003f68:	7bbb      	ldrb	r3, [r7, #14]
 8003f6a:	3b01      	subs	r3, #1
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003f70:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	dce9      	bgt.n	8003f4c <prvUnlockQueue+0x60>
 8003f78:	e000      	b.n	8003f7c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003f7a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	22ff      	movs	r2, #255	@ 0xff
 8003f80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8003f84:	f001 fc8a 	bl	800589c <vPortExitCritical>
}
 8003f88:	bf00      	nop
 8003f8a:	3710      	adds	r7, #16
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}

08003f90 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b084      	sub	sp, #16
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003f98:	f001 fc4e 	bl	8005838 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d102      	bne.n	8003faa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	60fb      	str	r3, [r7, #12]
 8003fa8:	e001      	b.n	8003fae <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003faa:	2300      	movs	r3, #0
 8003fac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003fae:	f001 fc75 	bl	800589c <vPortExitCritical>

	return xReturn;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	3710      	adds	r7, #16
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}

08003fbc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b084      	sub	sp, #16
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003fc4:	f001 fc38 	bl	8005838 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d102      	bne.n	8003fda <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	60fb      	str	r3, [r7, #12]
 8003fd8:	e001      	b.n	8003fde <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003fde:	f001 fc5d 	bl	800589c <vPortExitCritical>

	return xReturn;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	3710      	adds	r7, #16
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}

08003fec <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003fec:	b480      	push	{r7}
 8003fee:	b085      	sub	sp, #20
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
 8003ff4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	60fb      	str	r3, [r7, #12]
 8003ffa:	e014      	b.n	8004026 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003ffc:	4a0f      	ldr	r2, [pc, #60]	@ (800403c <vQueueAddToRegistry+0x50>)
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d10b      	bne.n	8004020 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004008:	490c      	ldr	r1, [pc, #48]	@ (800403c <vQueueAddToRegistry+0x50>)
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	683a      	ldr	r2, [r7, #0]
 800400e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004012:	4a0a      	ldr	r2, [pc, #40]	@ (800403c <vQueueAddToRegistry+0x50>)
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	00db      	lsls	r3, r3, #3
 8004018:	4413      	add	r3, r2
 800401a:	687a      	ldr	r2, [r7, #4]
 800401c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800401e:	e006      	b.n	800402e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	3301      	adds	r3, #1
 8004024:	60fb      	str	r3, [r7, #12]
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2b07      	cmp	r3, #7
 800402a:	d9e7      	bls.n	8003ffc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800402c:	bf00      	nop
 800402e:	bf00      	nop
 8004030:	3714      	adds	r7, #20
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr
 800403a:	bf00      	nop
 800403c:	20000938 	.word	0x20000938

08004040 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004040:	b580      	push	{r7, lr}
 8004042:	b086      	sub	sp, #24
 8004044:	af00      	add	r7, sp, #0
 8004046:	60f8      	str	r0, [r7, #12]
 8004048:	60b9      	str	r1, [r7, #8]
 800404a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004050:	f001 fbf2 	bl	8005838 <vPortEnterCritical>
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800405a:	b25b      	sxtb	r3, r3
 800405c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004060:	d103      	bne.n	800406a <vQueueWaitForMessageRestricted+0x2a>
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	2200      	movs	r2, #0
 8004066:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004070:	b25b      	sxtb	r3, r3
 8004072:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004076:	d103      	bne.n	8004080 <vQueueWaitForMessageRestricted+0x40>
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	2200      	movs	r2, #0
 800407c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004080:	f001 fc0c 	bl	800589c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004088:	2b00      	cmp	r3, #0
 800408a:	d106      	bne.n	800409a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	3324      	adds	r3, #36	@ 0x24
 8004090:	687a      	ldr	r2, [r7, #4]
 8004092:	68b9      	ldr	r1, [r7, #8]
 8004094:	4618      	mov	r0, r3
 8004096:	f000 fc6d 	bl	8004974 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800409a:	6978      	ldr	r0, [r7, #20]
 800409c:	f7ff ff26 	bl	8003eec <prvUnlockQueue>
	}
 80040a0:	bf00      	nop
 80040a2:	3718      	adds	r7, #24
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}

080040a8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b08e      	sub	sp, #56	@ 0x38
 80040ac:	af04      	add	r7, sp, #16
 80040ae:	60f8      	str	r0, [r7, #12]
 80040b0:	60b9      	str	r1, [r7, #8]
 80040b2:	607a      	str	r2, [r7, #4]
 80040b4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80040b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d10b      	bne.n	80040d4 <xTaskCreateStatic+0x2c>
	__asm volatile
 80040bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040c0:	f383 8811 	msr	BASEPRI, r3
 80040c4:	f3bf 8f6f 	isb	sy
 80040c8:	f3bf 8f4f 	dsb	sy
 80040cc:	623b      	str	r3, [r7, #32]
}
 80040ce:	bf00      	nop
 80040d0:	bf00      	nop
 80040d2:	e7fd      	b.n	80040d0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80040d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d10b      	bne.n	80040f2 <xTaskCreateStatic+0x4a>
	__asm volatile
 80040da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040de:	f383 8811 	msr	BASEPRI, r3
 80040e2:	f3bf 8f6f 	isb	sy
 80040e6:	f3bf 8f4f 	dsb	sy
 80040ea:	61fb      	str	r3, [r7, #28]
}
 80040ec:	bf00      	nop
 80040ee:	bf00      	nop
 80040f0:	e7fd      	b.n	80040ee <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80040f2:	23a8      	movs	r3, #168	@ 0xa8
 80040f4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	2ba8      	cmp	r3, #168	@ 0xa8
 80040fa:	d00b      	beq.n	8004114 <xTaskCreateStatic+0x6c>
	__asm volatile
 80040fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004100:	f383 8811 	msr	BASEPRI, r3
 8004104:	f3bf 8f6f 	isb	sy
 8004108:	f3bf 8f4f 	dsb	sy
 800410c:	61bb      	str	r3, [r7, #24]
}
 800410e:	bf00      	nop
 8004110:	bf00      	nop
 8004112:	e7fd      	b.n	8004110 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004114:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004116:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004118:	2b00      	cmp	r3, #0
 800411a:	d01e      	beq.n	800415a <xTaskCreateStatic+0xb2>
 800411c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800411e:	2b00      	cmp	r3, #0
 8004120:	d01b      	beq.n	800415a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004122:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004124:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004128:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800412a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800412c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800412e:	2202      	movs	r2, #2
 8004130:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004134:	2300      	movs	r3, #0
 8004136:	9303      	str	r3, [sp, #12]
 8004138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800413a:	9302      	str	r3, [sp, #8]
 800413c:	f107 0314 	add.w	r3, r7, #20
 8004140:	9301      	str	r3, [sp, #4]
 8004142:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004144:	9300      	str	r3, [sp, #0]
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	687a      	ldr	r2, [r7, #4]
 800414a:	68b9      	ldr	r1, [r7, #8]
 800414c:	68f8      	ldr	r0, [r7, #12]
 800414e:	f000 f851 	bl	80041f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004152:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004154:	f000 f8f6 	bl	8004344 <prvAddNewTaskToReadyList>
 8004158:	e001      	b.n	800415e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800415a:	2300      	movs	r3, #0
 800415c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800415e:	697b      	ldr	r3, [r7, #20]
	}
 8004160:	4618      	mov	r0, r3
 8004162:	3728      	adds	r7, #40	@ 0x28
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}

08004168 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004168:	b580      	push	{r7, lr}
 800416a:	b08c      	sub	sp, #48	@ 0x30
 800416c:	af04      	add	r7, sp, #16
 800416e:	60f8      	str	r0, [r7, #12]
 8004170:	60b9      	str	r1, [r7, #8]
 8004172:	603b      	str	r3, [r7, #0]
 8004174:	4613      	mov	r3, r2
 8004176:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004178:	88fb      	ldrh	r3, [r7, #6]
 800417a:	009b      	lsls	r3, r3, #2
 800417c:	4618      	mov	r0, r3
 800417e:	f001 fc7d 	bl	8005a7c <pvPortMalloc>
 8004182:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d00e      	beq.n	80041a8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800418a:	20a8      	movs	r0, #168	@ 0xa8
 800418c:	f001 fc76 	bl	8005a7c <pvPortMalloc>
 8004190:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004192:	69fb      	ldr	r3, [r7, #28]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d003      	beq.n	80041a0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004198:	69fb      	ldr	r3, [r7, #28]
 800419a:	697a      	ldr	r2, [r7, #20]
 800419c:	631a      	str	r2, [r3, #48]	@ 0x30
 800419e:	e005      	b.n	80041ac <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80041a0:	6978      	ldr	r0, [r7, #20]
 80041a2:	f001 fd39 	bl	8005c18 <vPortFree>
 80041a6:	e001      	b.n	80041ac <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80041a8:	2300      	movs	r3, #0
 80041aa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80041ac:	69fb      	ldr	r3, [r7, #28]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d017      	beq.n	80041e2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80041b2:	69fb      	ldr	r3, [r7, #28]
 80041b4:	2200      	movs	r2, #0
 80041b6:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80041ba:	88fa      	ldrh	r2, [r7, #6]
 80041bc:	2300      	movs	r3, #0
 80041be:	9303      	str	r3, [sp, #12]
 80041c0:	69fb      	ldr	r3, [r7, #28]
 80041c2:	9302      	str	r3, [sp, #8]
 80041c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041c6:	9301      	str	r3, [sp, #4]
 80041c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041ca:	9300      	str	r3, [sp, #0]
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	68b9      	ldr	r1, [r7, #8]
 80041d0:	68f8      	ldr	r0, [r7, #12]
 80041d2:	f000 f80f 	bl	80041f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80041d6:	69f8      	ldr	r0, [r7, #28]
 80041d8:	f000 f8b4 	bl	8004344 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80041dc:	2301      	movs	r3, #1
 80041de:	61bb      	str	r3, [r7, #24]
 80041e0:	e002      	b.n	80041e8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80041e2:	f04f 33ff 	mov.w	r3, #4294967295
 80041e6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80041e8:	69bb      	ldr	r3, [r7, #24]
	}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3720      	adds	r7, #32
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}
	...

080041f4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b088      	sub	sp, #32
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	60f8      	str	r0, [r7, #12]
 80041fc:	60b9      	str	r1, [r7, #8]
 80041fe:	607a      	str	r2, [r7, #4]
 8004200:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004204:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	009b      	lsls	r3, r3, #2
 800420a:	461a      	mov	r2, r3
 800420c:	21a5      	movs	r1, #165	@ 0xa5
 800420e:	f001 fef5 	bl	8005ffc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004212:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004214:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800421c:	3b01      	subs	r3, #1
 800421e:	009b      	lsls	r3, r3, #2
 8004220:	4413      	add	r3, r2
 8004222:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004224:	69bb      	ldr	r3, [r7, #24]
 8004226:	f023 0307 	bic.w	r3, r3, #7
 800422a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800422c:	69bb      	ldr	r3, [r7, #24]
 800422e:	f003 0307 	and.w	r3, r3, #7
 8004232:	2b00      	cmp	r3, #0
 8004234:	d00b      	beq.n	800424e <prvInitialiseNewTask+0x5a>
	__asm volatile
 8004236:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800423a:	f383 8811 	msr	BASEPRI, r3
 800423e:	f3bf 8f6f 	isb	sy
 8004242:	f3bf 8f4f 	dsb	sy
 8004246:	617b      	str	r3, [r7, #20]
}
 8004248:	bf00      	nop
 800424a:	bf00      	nop
 800424c:	e7fd      	b.n	800424a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d01f      	beq.n	8004294 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004254:	2300      	movs	r3, #0
 8004256:	61fb      	str	r3, [r7, #28]
 8004258:	e012      	b.n	8004280 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800425a:	68ba      	ldr	r2, [r7, #8]
 800425c:	69fb      	ldr	r3, [r7, #28]
 800425e:	4413      	add	r3, r2
 8004260:	7819      	ldrb	r1, [r3, #0]
 8004262:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004264:	69fb      	ldr	r3, [r7, #28]
 8004266:	4413      	add	r3, r2
 8004268:	3334      	adds	r3, #52	@ 0x34
 800426a:	460a      	mov	r2, r1
 800426c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800426e:	68ba      	ldr	r2, [r7, #8]
 8004270:	69fb      	ldr	r3, [r7, #28]
 8004272:	4413      	add	r3, r2
 8004274:	781b      	ldrb	r3, [r3, #0]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d006      	beq.n	8004288 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800427a:	69fb      	ldr	r3, [r7, #28]
 800427c:	3301      	adds	r3, #1
 800427e:	61fb      	str	r3, [r7, #28]
 8004280:	69fb      	ldr	r3, [r7, #28]
 8004282:	2b0f      	cmp	r3, #15
 8004284:	d9e9      	bls.n	800425a <prvInitialiseNewTask+0x66>
 8004286:	e000      	b.n	800428a <prvInitialiseNewTask+0x96>
			{
				break;
 8004288:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800428a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800428c:	2200      	movs	r2, #0
 800428e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004292:	e003      	b.n	800429c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004294:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004296:	2200      	movs	r2, #0
 8004298:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800429c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800429e:	2b37      	cmp	r3, #55	@ 0x37
 80042a0:	d901      	bls.n	80042a6 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80042a2:	2337      	movs	r3, #55	@ 0x37
 80042a4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80042a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042a8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80042aa:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80042ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80042b0:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80042b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042b4:	2200      	movs	r2, #0
 80042b6:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80042b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042ba:	3304      	adds	r3, #4
 80042bc:	4618      	mov	r0, r3
 80042be:	f7ff f965 	bl	800358c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80042c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042c4:	3318      	adds	r3, #24
 80042c6:	4618      	mov	r0, r3
 80042c8:	f7ff f960 	bl	800358c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80042cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80042d0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042d4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80042d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042da:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80042dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80042e0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80042e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042e4:	2200      	movs	r2, #0
 80042e6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80042ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042ec:	2200      	movs	r2, #0
 80042ee:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80042f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042f4:	3354      	adds	r3, #84	@ 0x54
 80042f6:	224c      	movs	r2, #76	@ 0x4c
 80042f8:	2100      	movs	r1, #0
 80042fa:	4618      	mov	r0, r3
 80042fc:	f001 fe7e 	bl	8005ffc <memset>
 8004300:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004302:	4a0d      	ldr	r2, [pc, #52]	@ (8004338 <prvInitialiseNewTask+0x144>)
 8004304:	659a      	str	r2, [r3, #88]	@ 0x58
 8004306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004308:	4a0c      	ldr	r2, [pc, #48]	@ (800433c <prvInitialiseNewTask+0x148>)
 800430a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800430c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800430e:	4a0c      	ldr	r2, [pc, #48]	@ (8004340 <prvInitialiseNewTask+0x14c>)
 8004310:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004312:	683a      	ldr	r2, [r7, #0]
 8004314:	68f9      	ldr	r1, [r7, #12]
 8004316:	69b8      	ldr	r0, [r7, #24]
 8004318:	f001 f95a 	bl	80055d0 <pxPortInitialiseStack>
 800431c:	4602      	mov	r2, r0
 800431e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004320:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004322:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004324:	2b00      	cmp	r3, #0
 8004326:	d002      	beq.n	800432e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004328:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800432a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800432c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800432e:	bf00      	nop
 8004330:	3720      	adds	r7, #32
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}
 8004336:	bf00      	nop
 8004338:	20004bd4 	.word	0x20004bd4
 800433c:	20004c3c 	.word	0x20004c3c
 8004340:	20004ca4 	.word	0x20004ca4

08004344 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b082      	sub	sp, #8
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800434c:	f001 fa74 	bl	8005838 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004350:	4b2d      	ldr	r3, [pc, #180]	@ (8004408 <prvAddNewTaskToReadyList+0xc4>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	3301      	adds	r3, #1
 8004356:	4a2c      	ldr	r2, [pc, #176]	@ (8004408 <prvAddNewTaskToReadyList+0xc4>)
 8004358:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800435a:	4b2c      	ldr	r3, [pc, #176]	@ (800440c <prvAddNewTaskToReadyList+0xc8>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d109      	bne.n	8004376 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004362:	4a2a      	ldr	r2, [pc, #168]	@ (800440c <prvAddNewTaskToReadyList+0xc8>)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004368:	4b27      	ldr	r3, [pc, #156]	@ (8004408 <prvAddNewTaskToReadyList+0xc4>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	2b01      	cmp	r3, #1
 800436e:	d110      	bne.n	8004392 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004370:	f000 fc2e 	bl	8004bd0 <prvInitialiseTaskLists>
 8004374:	e00d      	b.n	8004392 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004376:	4b26      	ldr	r3, [pc, #152]	@ (8004410 <prvAddNewTaskToReadyList+0xcc>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d109      	bne.n	8004392 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800437e:	4b23      	ldr	r3, [pc, #140]	@ (800440c <prvAddNewTaskToReadyList+0xc8>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004388:	429a      	cmp	r2, r3
 800438a:	d802      	bhi.n	8004392 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800438c:	4a1f      	ldr	r2, [pc, #124]	@ (800440c <prvAddNewTaskToReadyList+0xc8>)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004392:	4b20      	ldr	r3, [pc, #128]	@ (8004414 <prvAddNewTaskToReadyList+0xd0>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	3301      	adds	r3, #1
 8004398:	4a1e      	ldr	r2, [pc, #120]	@ (8004414 <prvAddNewTaskToReadyList+0xd0>)
 800439a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800439c:	4b1d      	ldr	r3, [pc, #116]	@ (8004414 <prvAddNewTaskToReadyList+0xd0>)
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043a8:	4b1b      	ldr	r3, [pc, #108]	@ (8004418 <prvAddNewTaskToReadyList+0xd4>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	429a      	cmp	r2, r3
 80043ae:	d903      	bls.n	80043b8 <prvAddNewTaskToReadyList+0x74>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043b4:	4a18      	ldr	r2, [pc, #96]	@ (8004418 <prvAddNewTaskToReadyList+0xd4>)
 80043b6:	6013      	str	r3, [r2, #0]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043bc:	4613      	mov	r3, r2
 80043be:	009b      	lsls	r3, r3, #2
 80043c0:	4413      	add	r3, r2
 80043c2:	009b      	lsls	r3, r3, #2
 80043c4:	4a15      	ldr	r2, [pc, #84]	@ (800441c <prvAddNewTaskToReadyList+0xd8>)
 80043c6:	441a      	add	r2, r3
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	3304      	adds	r3, #4
 80043cc:	4619      	mov	r1, r3
 80043ce:	4610      	mov	r0, r2
 80043d0:	f7ff f8e9 	bl	80035a6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80043d4:	f001 fa62 	bl	800589c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80043d8:	4b0d      	ldr	r3, [pc, #52]	@ (8004410 <prvAddNewTaskToReadyList+0xcc>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d00e      	beq.n	80043fe <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80043e0:	4b0a      	ldr	r3, [pc, #40]	@ (800440c <prvAddNewTaskToReadyList+0xc8>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d207      	bcs.n	80043fe <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80043ee:	4b0c      	ldr	r3, [pc, #48]	@ (8004420 <prvAddNewTaskToReadyList+0xdc>)
 80043f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80043f4:	601a      	str	r2, [r3, #0]
 80043f6:	f3bf 8f4f 	dsb	sy
 80043fa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80043fe:	bf00      	nop
 8004400:	3708      	adds	r7, #8
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}
 8004406:	bf00      	nop
 8004408:	20000e4c 	.word	0x20000e4c
 800440c:	20000978 	.word	0x20000978
 8004410:	20000e58 	.word	0x20000e58
 8004414:	20000e68 	.word	0x20000e68
 8004418:	20000e54 	.word	0x20000e54
 800441c:	2000097c 	.word	0x2000097c
 8004420:	e000ed04 	.word	0xe000ed04

08004424 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004424:	b580      	push	{r7, lr}
 8004426:	b084      	sub	sp, #16
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800442c:	2300      	movs	r3, #0
 800442e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d018      	beq.n	8004468 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004436:	4b14      	ldr	r3, [pc, #80]	@ (8004488 <vTaskDelay+0x64>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d00b      	beq.n	8004456 <vTaskDelay+0x32>
	__asm volatile
 800443e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004442:	f383 8811 	msr	BASEPRI, r3
 8004446:	f3bf 8f6f 	isb	sy
 800444a:	f3bf 8f4f 	dsb	sy
 800444e:	60bb      	str	r3, [r7, #8]
}
 8004450:	bf00      	nop
 8004452:	bf00      	nop
 8004454:	e7fd      	b.n	8004452 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004456:	f000 f88b 	bl	8004570 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800445a:	2100      	movs	r1, #0
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	f000 fd09 	bl	8004e74 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004462:	f000 f893 	bl	800458c <xTaskResumeAll>
 8004466:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d107      	bne.n	800447e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800446e:	4b07      	ldr	r3, [pc, #28]	@ (800448c <vTaskDelay+0x68>)
 8004470:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004474:	601a      	str	r2, [r3, #0]
 8004476:	f3bf 8f4f 	dsb	sy
 800447a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800447e:	bf00      	nop
 8004480:	3710      	adds	r7, #16
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}
 8004486:	bf00      	nop
 8004488:	20000e74 	.word	0x20000e74
 800448c:	e000ed04 	.word	0xe000ed04

08004490 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b08a      	sub	sp, #40	@ 0x28
 8004494:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004496:	2300      	movs	r3, #0
 8004498:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800449a:	2300      	movs	r3, #0
 800449c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800449e:	463a      	mov	r2, r7
 80044a0:	1d39      	adds	r1, r7, #4
 80044a2:	f107 0308 	add.w	r3, r7, #8
 80044a6:	4618      	mov	r0, r3
 80044a8:	f7ff f81c 	bl	80034e4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80044ac:	6839      	ldr	r1, [r7, #0]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	68ba      	ldr	r2, [r7, #8]
 80044b2:	9202      	str	r2, [sp, #8]
 80044b4:	9301      	str	r3, [sp, #4]
 80044b6:	2300      	movs	r3, #0
 80044b8:	9300      	str	r3, [sp, #0]
 80044ba:	2300      	movs	r3, #0
 80044bc:	460a      	mov	r2, r1
 80044be:	4924      	ldr	r1, [pc, #144]	@ (8004550 <vTaskStartScheduler+0xc0>)
 80044c0:	4824      	ldr	r0, [pc, #144]	@ (8004554 <vTaskStartScheduler+0xc4>)
 80044c2:	f7ff fdf1 	bl	80040a8 <xTaskCreateStatic>
 80044c6:	4603      	mov	r3, r0
 80044c8:	4a23      	ldr	r2, [pc, #140]	@ (8004558 <vTaskStartScheduler+0xc8>)
 80044ca:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80044cc:	4b22      	ldr	r3, [pc, #136]	@ (8004558 <vTaskStartScheduler+0xc8>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d002      	beq.n	80044da <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80044d4:	2301      	movs	r3, #1
 80044d6:	617b      	str	r3, [r7, #20]
 80044d8:	e001      	b.n	80044de <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80044da:	2300      	movs	r3, #0
 80044dc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d102      	bne.n	80044ea <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80044e4:	f000 fd1a 	bl	8004f1c <xTimerCreateTimerTask>
 80044e8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	2b01      	cmp	r3, #1
 80044ee:	d11b      	bne.n	8004528 <vTaskStartScheduler+0x98>
	__asm volatile
 80044f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044f4:	f383 8811 	msr	BASEPRI, r3
 80044f8:	f3bf 8f6f 	isb	sy
 80044fc:	f3bf 8f4f 	dsb	sy
 8004500:	613b      	str	r3, [r7, #16]
}
 8004502:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004504:	4b15      	ldr	r3, [pc, #84]	@ (800455c <vTaskStartScheduler+0xcc>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	3354      	adds	r3, #84	@ 0x54
 800450a:	4a15      	ldr	r2, [pc, #84]	@ (8004560 <vTaskStartScheduler+0xd0>)
 800450c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800450e:	4b15      	ldr	r3, [pc, #84]	@ (8004564 <vTaskStartScheduler+0xd4>)
 8004510:	f04f 32ff 	mov.w	r2, #4294967295
 8004514:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004516:	4b14      	ldr	r3, [pc, #80]	@ (8004568 <vTaskStartScheduler+0xd8>)
 8004518:	2201      	movs	r2, #1
 800451a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800451c:	4b13      	ldr	r3, [pc, #76]	@ (800456c <vTaskStartScheduler+0xdc>)
 800451e:	2200      	movs	r2, #0
 8004520:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004522:	f001 f8e5 	bl	80056f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004526:	e00f      	b.n	8004548 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800452e:	d10b      	bne.n	8004548 <vTaskStartScheduler+0xb8>
	__asm volatile
 8004530:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004534:	f383 8811 	msr	BASEPRI, r3
 8004538:	f3bf 8f6f 	isb	sy
 800453c:	f3bf 8f4f 	dsb	sy
 8004540:	60fb      	str	r3, [r7, #12]
}
 8004542:	bf00      	nop
 8004544:	bf00      	nop
 8004546:	e7fd      	b.n	8004544 <vTaskStartScheduler+0xb4>
}
 8004548:	bf00      	nop
 800454a:	3718      	adds	r7, #24
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}
 8004550:	08006200 	.word	0x08006200
 8004554:	08004ba1 	.word	0x08004ba1
 8004558:	20000e70 	.word	0x20000e70
 800455c:	20000978 	.word	0x20000978
 8004560:	20000014 	.word	0x20000014
 8004564:	20000e6c 	.word	0x20000e6c
 8004568:	20000e58 	.word	0x20000e58
 800456c:	20000e50 	.word	0x20000e50

08004570 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004570:	b480      	push	{r7}
 8004572:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004574:	4b04      	ldr	r3, [pc, #16]	@ (8004588 <vTaskSuspendAll+0x18>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	3301      	adds	r3, #1
 800457a:	4a03      	ldr	r2, [pc, #12]	@ (8004588 <vTaskSuspendAll+0x18>)
 800457c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800457e:	bf00      	nop
 8004580:	46bd      	mov	sp, r7
 8004582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004586:	4770      	bx	lr
 8004588:	20000e74 	.word	0x20000e74

0800458c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b084      	sub	sp, #16
 8004590:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004592:	2300      	movs	r3, #0
 8004594:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004596:	2300      	movs	r3, #0
 8004598:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800459a:	4b42      	ldr	r3, [pc, #264]	@ (80046a4 <xTaskResumeAll+0x118>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d10b      	bne.n	80045ba <xTaskResumeAll+0x2e>
	__asm volatile
 80045a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045a6:	f383 8811 	msr	BASEPRI, r3
 80045aa:	f3bf 8f6f 	isb	sy
 80045ae:	f3bf 8f4f 	dsb	sy
 80045b2:	603b      	str	r3, [r7, #0]
}
 80045b4:	bf00      	nop
 80045b6:	bf00      	nop
 80045b8:	e7fd      	b.n	80045b6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80045ba:	f001 f93d 	bl	8005838 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80045be:	4b39      	ldr	r3, [pc, #228]	@ (80046a4 <xTaskResumeAll+0x118>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	3b01      	subs	r3, #1
 80045c4:	4a37      	ldr	r2, [pc, #220]	@ (80046a4 <xTaskResumeAll+0x118>)
 80045c6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80045c8:	4b36      	ldr	r3, [pc, #216]	@ (80046a4 <xTaskResumeAll+0x118>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d162      	bne.n	8004696 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80045d0:	4b35      	ldr	r3, [pc, #212]	@ (80046a8 <xTaskResumeAll+0x11c>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d05e      	beq.n	8004696 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80045d8:	e02f      	b.n	800463a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045da:	4b34      	ldr	r3, [pc, #208]	@ (80046ac <xTaskResumeAll+0x120>)
 80045dc:	68db      	ldr	r3, [r3, #12]
 80045de:	68db      	ldr	r3, [r3, #12]
 80045e0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	3318      	adds	r3, #24
 80045e6:	4618      	mov	r0, r3
 80045e8:	f7ff f83a 	bl	8003660 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	3304      	adds	r3, #4
 80045f0:	4618      	mov	r0, r3
 80045f2:	f7ff f835 	bl	8003660 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045fa:	4b2d      	ldr	r3, [pc, #180]	@ (80046b0 <xTaskResumeAll+0x124>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	429a      	cmp	r2, r3
 8004600:	d903      	bls.n	800460a <xTaskResumeAll+0x7e>
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004606:	4a2a      	ldr	r2, [pc, #168]	@ (80046b0 <xTaskResumeAll+0x124>)
 8004608:	6013      	str	r3, [r2, #0]
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800460e:	4613      	mov	r3, r2
 8004610:	009b      	lsls	r3, r3, #2
 8004612:	4413      	add	r3, r2
 8004614:	009b      	lsls	r3, r3, #2
 8004616:	4a27      	ldr	r2, [pc, #156]	@ (80046b4 <xTaskResumeAll+0x128>)
 8004618:	441a      	add	r2, r3
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	3304      	adds	r3, #4
 800461e:	4619      	mov	r1, r3
 8004620:	4610      	mov	r0, r2
 8004622:	f7fe ffc0 	bl	80035a6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800462a:	4b23      	ldr	r3, [pc, #140]	@ (80046b8 <xTaskResumeAll+0x12c>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004630:	429a      	cmp	r2, r3
 8004632:	d302      	bcc.n	800463a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8004634:	4b21      	ldr	r3, [pc, #132]	@ (80046bc <xTaskResumeAll+0x130>)
 8004636:	2201      	movs	r2, #1
 8004638:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800463a:	4b1c      	ldr	r3, [pc, #112]	@ (80046ac <xTaskResumeAll+0x120>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d1cb      	bne.n	80045da <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d001      	beq.n	800464c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004648:	f000 fb66 	bl	8004d18 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800464c:	4b1c      	ldr	r3, [pc, #112]	@ (80046c0 <xTaskResumeAll+0x134>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d010      	beq.n	800467a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004658:	f000 f846 	bl	80046e8 <xTaskIncrementTick>
 800465c:	4603      	mov	r3, r0
 800465e:	2b00      	cmp	r3, #0
 8004660:	d002      	beq.n	8004668 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8004662:	4b16      	ldr	r3, [pc, #88]	@ (80046bc <xTaskResumeAll+0x130>)
 8004664:	2201      	movs	r2, #1
 8004666:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	3b01      	subs	r3, #1
 800466c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d1f1      	bne.n	8004658 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8004674:	4b12      	ldr	r3, [pc, #72]	@ (80046c0 <xTaskResumeAll+0x134>)
 8004676:	2200      	movs	r2, #0
 8004678:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800467a:	4b10      	ldr	r3, [pc, #64]	@ (80046bc <xTaskResumeAll+0x130>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d009      	beq.n	8004696 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004682:	2301      	movs	r3, #1
 8004684:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004686:	4b0f      	ldr	r3, [pc, #60]	@ (80046c4 <xTaskResumeAll+0x138>)
 8004688:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800468c:	601a      	str	r2, [r3, #0]
 800468e:	f3bf 8f4f 	dsb	sy
 8004692:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004696:	f001 f901 	bl	800589c <vPortExitCritical>

	return xAlreadyYielded;
 800469a:	68bb      	ldr	r3, [r7, #8]
}
 800469c:	4618      	mov	r0, r3
 800469e:	3710      	adds	r7, #16
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}
 80046a4:	20000e74 	.word	0x20000e74
 80046a8:	20000e4c 	.word	0x20000e4c
 80046ac:	20000e0c 	.word	0x20000e0c
 80046b0:	20000e54 	.word	0x20000e54
 80046b4:	2000097c 	.word	0x2000097c
 80046b8:	20000978 	.word	0x20000978
 80046bc:	20000e60 	.word	0x20000e60
 80046c0:	20000e5c 	.word	0x20000e5c
 80046c4:	e000ed04 	.word	0xe000ed04

080046c8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80046c8:	b480      	push	{r7}
 80046ca:	b083      	sub	sp, #12
 80046cc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80046ce:	4b05      	ldr	r3, [pc, #20]	@ (80046e4 <xTaskGetTickCount+0x1c>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80046d4:	687b      	ldr	r3, [r7, #4]
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	370c      	adds	r7, #12
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr
 80046e2:	bf00      	nop
 80046e4:	20000e50 	.word	0x20000e50

080046e8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b086      	sub	sp, #24
 80046ec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80046ee:	2300      	movs	r3, #0
 80046f0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80046f2:	4b4f      	ldr	r3, [pc, #316]	@ (8004830 <xTaskIncrementTick+0x148>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	f040 8090 	bne.w	800481c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80046fc:	4b4d      	ldr	r3, [pc, #308]	@ (8004834 <xTaskIncrementTick+0x14c>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	3301      	adds	r3, #1
 8004702:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004704:	4a4b      	ldr	r2, [pc, #300]	@ (8004834 <xTaskIncrementTick+0x14c>)
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d121      	bne.n	8004754 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004710:	4b49      	ldr	r3, [pc, #292]	@ (8004838 <xTaskIncrementTick+0x150>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d00b      	beq.n	8004732 <xTaskIncrementTick+0x4a>
	__asm volatile
 800471a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800471e:	f383 8811 	msr	BASEPRI, r3
 8004722:	f3bf 8f6f 	isb	sy
 8004726:	f3bf 8f4f 	dsb	sy
 800472a:	603b      	str	r3, [r7, #0]
}
 800472c:	bf00      	nop
 800472e:	bf00      	nop
 8004730:	e7fd      	b.n	800472e <xTaskIncrementTick+0x46>
 8004732:	4b41      	ldr	r3, [pc, #260]	@ (8004838 <xTaskIncrementTick+0x150>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	60fb      	str	r3, [r7, #12]
 8004738:	4b40      	ldr	r3, [pc, #256]	@ (800483c <xTaskIncrementTick+0x154>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a3e      	ldr	r2, [pc, #248]	@ (8004838 <xTaskIncrementTick+0x150>)
 800473e:	6013      	str	r3, [r2, #0]
 8004740:	4a3e      	ldr	r2, [pc, #248]	@ (800483c <xTaskIncrementTick+0x154>)
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	6013      	str	r3, [r2, #0]
 8004746:	4b3e      	ldr	r3, [pc, #248]	@ (8004840 <xTaskIncrementTick+0x158>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	3301      	adds	r3, #1
 800474c:	4a3c      	ldr	r2, [pc, #240]	@ (8004840 <xTaskIncrementTick+0x158>)
 800474e:	6013      	str	r3, [r2, #0]
 8004750:	f000 fae2 	bl	8004d18 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004754:	4b3b      	ldr	r3, [pc, #236]	@ (8004844 <xTaskIncrementTick+0x15c>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	693a      	ldr	r2, [r7, #16]
 800475a:	429a      	cmp	r2, r3
 800475c:	d349      	bcc.n	80047f2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800475e:	4b36      	ldr	r3, [pc, #216]	@ (8004838 <xTaskIncrementTick+0x150>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d104      	bne.n	8004772 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004768:	4b36      	ldr	r3, [pc, #216]	@ (8004844 <xTaskIncrementTick+0x15c>)
 800476a:	f04f 32ff 	mov.w	r2, #4294967295
 800476e:	601a      	str	r2, [r3, #0]
					break;
 8004770:	e03f      	b.n	80047f2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004772:	4b31      	ldr	r3, [pc, #196]	@ (8004838 <xTaskIncrementTick+0x150>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	68db      	ldr	r3, [r3, #12]
 8004778:	68db      	ldr	r3, [r3, #12]
 800477a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004782:	693a      	ldr	r2, [r7, #16]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	429a      	cmp	r2, r3
 8004788:	d203      	bcs.n	8004792 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800478a:	4a2e      	ldr	r2, [pc, #184]	@ (8004844 <xTaskIncrementTick+0x15c>)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004790:	e02f      	b.n	80047f2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	3304      	adds	r3, #4
 8004796:	4618      	mov	r0, r3
 8004798:	f7fe ff62 	bl	8003660 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d004      	beq.n	80047ae <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	3318      	adds	r3, #24
 80047a8:	4618      	mov	r0, r3
 80047aa:	f7fe ff59 	bl	8003660 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047b2:	4b25      	ldr	r3, [pc, #148]	@ (8004848 <xTaskIncrementTick+0x160>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	429a      	cmp	r2, r3
 80047b8:	d903      	bls.n	80047c2 <xTaskIncrementTick+0xda>
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047be:	4a22      	ldr	r2, [pc, #136]	@ (8004848 <xTaskIncrementTick+0x160>)
 80047c0:	6013      	str	r3, [r2, #0]
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047c6:	4613      	mov	r3, r2
 80047c8:	009b      	lsls	r3, r3, #2
 80047ca:	4413      	add	r3, r2
 80047cc:	009b      	lsls	r3, r3, #2
 80047ce:	4a1f      	ldr	r2, [pc, #124]	@ (800484c <xTaskIncrementTick+0x164>)
 80047d0:	441a      	add	r2, r3
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	3304      	adds	r3, #4
 80047d6:	4619      	mov	r1, r3
 80047d8:	4610      	mov	r0, r2
 80047da:	f7fe fee4 	bl	80035a6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047e2:	4b1b      	ldr	r3, [pc, #108]	@ (8004850 <xTaskIncrementTick+0x168>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d3b8      	bcc.n	800475e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80047ec:	2301      	movs	r3, #1
 80047ee:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80047f0:	e7b5      	b.n	800475e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80047f2:	4b17      	ldr	r3, [pc, #92]	@ (8004850 <xTaskIncrementTick+0x168>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047f8:	4914      	ldr	r1, [pc, #80]	@ (800484c <xTaskIncrementTick+0x164>)
 80047fa:	4613      	mov	r3, r2
 80047fc:	009b      	lsls	r3, r3, #2
 80047fe:	4413      	add	r3, r2
 8004800:	009b      	lsls	r3, r3, #2
 8004802:	440b      	add	r3, r1
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	2b01      	cmp	r3, #1
 8004808:	d901      	bls.n	800480e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800480a:	2301      	movs	r3, #1
 800480c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800480e:	4b11      	ldr	r3, [pc, #68]	@ (8004854 <xTaskIncrementTick+0x16c>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d007      	beq.n	8004826 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8004816:	2301      	movs	r3, #1
 8004818:	617b      	str	r3, [r7, #20]
 800481a:	e004      	b.n	8004826 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800481c:	4b0e      	ldr	r3, [pc, #56]	@ (8004858 <xTaskIncrementTick+0x170>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	3301      	adds	r3, #1
 8004822:	4a0d      	ldr	r2, [pc, #52]	@ (8004858 <xTaskIncrementTick+0x170>)
 8004824:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004826:	697b      	ldr	r3, [r7, #20]
}
 8004828:	4618      	mov	r0, r3
 800482a:	3718      	adds	r7, #24
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}
 8004830:	20000e74 	.word	0x20000e74
 8004834:	20000e50 	.word	0x20000e50
 8004838:	20000e04 	.word	0x20000e04
 800483c:	20000e08 	.word	0x20000e08
 8004840:	20000e64 	.word	0x20000e64
 8004844:	20000e6c 	.word	0x20000e6c
 8004848:	20000e54 	.word	0x20000e54
 800484c:	2000097c 	.word	0x2000097c
 8004850:	20000978 	.word	0x20000978
 8004854:	20000e60 	.word	0x20000e60
 8004858:	20000e5c 	.word	0x20000e5c

0800485c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800485c:	b480      	push	{r7}
 800485e:	b085      	sub	sp, #20
 8004860:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004862:	4b2b      	ldr	r3, [pc, #172]	@ (8004910 <vTaskSwitchContext+0xb4>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d003      	beq.n	8004872 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800486a:	4b2a      	ldr	r3, [pc, #168]	@ (8004914 <vTaskSwitchContext+0xb8>)
 800486c:	2201      	movs	r2, #1
 800486e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004870:	e047      	b.n	8004902 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8004872:	4b28      	ldr	r3, [pc, #160]	@ (8004914 <vTaskSwitchContext+0xb8>)
 8004874:	2200      	movs	r2, #0
 8004876:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004878:	4b27      	ldr	r3, [pc, #156]	@ (8004918 <vTaskSwitchContext+0xbc>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	60fb      	str	r3, [r7, #12]
 800487e:	e011      	b.n	80048a4 <vTaskSwitchContext+0x48>
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d10b      	bne.n	800489e <vTaskSwitchContext+0x42>
	__asm volatile
 8004886:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800488a:	f383 8811 	msr	BASEPRI, r3
 800488e:	f3bf 8f6f 	isb	sy
 8004892:	f3bf 8f4f 	dsb	sy
 8004896:	607b      	str	r3, [r7, #4]
}
 8004898:	bf00      	nop
 800489a:	bf00      	nop
 800489c:	e7fd      	b.n	800489a <vTaskSwitchContext+0x3e>
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	3b01      	subs	r3, #1
 80048a2:	60fb      	str	r3, [r7, #12]
 80048a4:	491d      	ldr	r1, [pc, #116]	@ (800491c <vTaskSwitchContext+0xc0>)
 80048a6:	68fa      	ldr	r2, [r7, #12]
 80048a8:	4613      	mov	r3, r2
 80048aa:	009b      	lsls	r3, r3, #2
 80048ac:	4413      	add	r3, r2
 80048ae:	009b      	lsls	r3, r3, #2
 80048b0:	440b      	add	r3, r1
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d0e3      	beq.n	8004880 <vTaskSwitchContext+0x24>
 80048b8:	68fa      	ldr	r2, [r7, #12]
 80048ba:	4613      	mov	r3, r2
 80048bc:	009b      	lsls	r3, r3, #2
 80048be:	4413      	add	r3, r2
 80048c0:	009b      	lsls	r3, r3, #2
 80048c2:	4a16      	ldr	r2, [pc, #88]	@ (800491c <vTaskSwitchContext+0xc0>)
 80048c4:	4413      	add	r3, r2
 80048c6:	60bb      	str	r3, [r7, #8]
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	685a      	ldr	r2, [r3, #4]
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	605a      	str	r2, [r3, #4]
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	685a      	ldr	r2, [r3, #4]
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	3308      	adds	r3, #8
 80048da:	429a      	cmp	r2, r3
 80048dc:	d104      	bne.n	80048e8 <vTaskSwitchContext+0x8c>
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	685a      	ldr	r2, [r3, #4]
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	605a      	str	r2, [r3, #4]
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	68db      	ldr	r3, [r3, #12]
 80048ee:	4a0c      	ldr	r2, [pc, #48]	@ (8004920 <vTaskSwitchContext+0xc4>)
 80048f0:	6013      	str	r3, [r2, #0]
 80048f2:	4a09      	ldr	r2, [pc, #36]	@ (8004918 <vTaskSwitchContext+0xbc>)
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80048f8:	4b09      	ldr	r3, [pc, #36]	@ (8004920 <vTaskSwitchContext+0xc4>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	3354      	adds	r3, #84	@ 0x54
 80048fe:	4a09      	ldr	r2, [pc, #36]	@ (8004924 <vTaskSwitchContext+0xc8>)
 8004900:	6013      	str	r3, [r2, #0]
}
 8004902:	bf00      	nop
 8004904:	3714      	adds	r7, #20
 8004906:	46bd      	mov	sp, r7
 8004908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490c:	4770      	bx	lr
 800490e:	bf00      	nop
 8004910:	20000e74 	.word	0x20000e74
 8004914:	20000e60 	.word	0x20000e60
 8004918:	20000e54 	.word	0x20000e54
 800491c:	2000097c 	.word	0x2000097c
 8004920:	20000978 	.word	0x20000978
 8004924:	20000014 	.word	0x20000014

08004928 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b084      	sub	sp, #16
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
 8004930:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d10b      	bne.n	8004950 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8004938:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800493c:	f383 8811 	msr	BASEPRI, r3
 8004940:	f3bf 8f6f 	isb	sy
 8004944:	f3bf 8f4f 	dsb	sy
 8004948:	60fb      	str	r3, [r7, #12]
}
 800494a:	bf00      	nop
 800494c:	bf00      	nop
 800494e:	e7fd      	b.n	800494c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004950:	4b07      	ldr	r3, [pc, #28]	@ (8004970 <vTaskPlaceOnEventList+0x48>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	3318      	adds	r3, #24
 8004956:	4619      	mov	r1, r3
 8004958:	6878      	ldr	r0, [r7, #4]
 800495a:	f7fe fe48 	bl	80035ee <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800495e:	2101      	movs	r1, #1
 8004960:	6838      	ldr	r0, [r7, #0]
 8004962:	f000 fa87 	bl	8004e74 <prvAddCurrentTaskToDelayedList>
}
 8004966:	bf00      	nop
 8004968:	3710      	adds	r7, #16
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}
 800496e:	bf00      	nop
 8004970:	20000978 	.word	0x20000978

08004974 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004974:	b580      	push	{r7, lr}
 8004976:	b086      	sub	sp, #24
 8004978:	af00      	add	r7, sp, #0
 800497a:	60f8      	str	r0, [r7, #12]
 800497c:	60b9      	str	r1, [r7, #8]
 800497e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d10b      	bne.n	800499e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8004986:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800498a:	f383 8811 	msr	BASEPRI, r3
 800498e:	f3bf 8f6f 	isb	sy
 8004992:	f3bf 8f4f 	dsb	sy
 8004996:	617b      	str	r3, [r7, #20]
}
 8004998:	bf00      	nop
 800499a:	bf00      	nop
 800499c:	e7fd      	b.n	800499a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800499e:	4b0a      	ldr	r3, [pc, #40]	@ (80049c8 <vTaskPlaceOnEventListRestricted+0x54>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	3318      	adds	r3, #24
 80049a4:	4619      	mov	r1, r3
 80049a6:	68f8      	ldr	r0, [r7, #12]
 80049a8:	f7fe fdfd 	bl	80035a6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d002      	beq.n	80049b8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80049b2:	f04f 33ff 	mov.w	r3, #4294967295
 80049b6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80049b8:	6879      	ldr	r1, [r7, #4]
 80049ba:	68b8      	ldr	r0, [r7, #8]
 80049bc:	f000 fa5a 	bl	8004e74 <prvAddCurrentTaskToDelayedList>
	}
 80049c0:	bf00      	nop
 80049c2:	3718      	adds	r7, #24
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}
 80049c8:	20000978 	.word	0x20000978

080049cc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b086      	sub	sp, #24
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	68db      	ldr	r3, [r3, #12]
 80049d8:	68db      	ldr	r3, [r3, #12]
 80049da:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d10b      	bne.n	80049fa <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80049e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049e6:	f383 8811 	msr	BASEPRI, r3
 80049ea:	f3bf 8f6f 	isb	sy
 80049ee:	f3bf 8f4f 	dsb	sy
 80049f2:	60fb      	str	r3, [r7, #12]
}
 80049f4:	bf00      	nop
 80049f6:	bf00      	nop
 80049f8:	e7fd      	b.n	80049f6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	3318      	adds	r3, #24
 80049fe:	4618      	mov	r0, r3
 8004a00:	f7fe fe2e 	bl	8003660 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a04:	4b1d      	ldr	r3, [pc, #116]	@ (8004a7c <xTaskRemoveFromEventList+0xb0>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d11d      	bne.n	8004a48 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	3304      	adds	r3, #4
 8004a10:	4618      	mov	r0, r3
 8004a12:	f7fe fe25 	bl	8003660 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a1a:	4b19      	ldr	r3, [pc, #100]	@ (8004a80 <xTaskRemoveFromEventList+0xb4>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	429a      	cmp	r2, r3
 8004a20:	d903      	bls.n	8004a2a <xTaskRemoveFromEventList+0x5e>
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a26:	4a16      	ldr	r2, [pc, #88]	@ (8004a80 <xTaskRemoveFromEventList+0xb4>)
 8004a28:	6013      	str	r3, [r2, #0]
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a2e:	4613      	mov	r3, r2
 8004a30:	009b      	lsls	r3, r3, #2
 8004a32:	4413      	add	r3, r2
 8004a34:	009b      	lsls	r3, r3, #2
 8004a36:	4a13      	ldr	r2, [pc, #76]	@ (8004a84 <xTaskRemoveFromEventList+0xb8>)
 8004a38:	441a      	add	r2, r3
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	3304      	adds	r3, #4
 8004a3e:	4619      	mov	r1, r3
 8004a40:	4610      	mov	r0, r2
 8004a42:	f7fe fdb0 	bl	80035a6 <vListInsertEnd>
 8004a46:	e005      	b.n	8004a54 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	3318      	adds	r3, #24
 8004a4c:	4619      	mov	r1, r3
 8004a4e:	480e      	ldr	r0, [pc, #56]	@ (8004a88 <xTaskRemoveFromEventList+0xbc>)
 8004a50:	f7fe fda9 	bl	80035a6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a58:	4b0c      	ldr	r3, [pc, #48]	@ (8004a8c <xTaskRemoveFromEventList+0xc0>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a5e:	429a      	cmp	r2, r3
 8004a60:	d905      	bls.n	8004a6e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004a62:	2301      	movs	r3, #1
 8004a64:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004a66:	4b0a      	ldr	r3, [pc, #40]	@ (8004a90 <xTaskRemoveFromEventList+0xc4>)
 8004a68:	2201      	movs	r2, #1
 8004a6a:	601a      	str	r2, [r3, #0]
 8004a6c:	e001      	b.n	8004a72 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004a72:	697b      	ldr	r3, [r7, #20]
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	3718      	adds	r7, #24
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}
 8004a7c:	20000e74 	.word	0x20000e74
 8004a80:	20000e54 	.word	0x20000e54
 8004a84:	2000097c 	.word	0x2000097c
 8004a88:	20000e0c 	.word	0x20000e0c
 8004a8c:	20000978 	.word	0x20000978
 8004a90:	20000e60 	.word	0x20000e60

08004a94 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004a94:	b480      	push	{r7}
 8004a96:	b083      	sub	sp, #12
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004a9c:	4b06      	ldr	r3, [pc, #24]	@ (8004ab8 <vTaskInternalSetTimeOutState+0x24>)
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004aa4:	4b05      	ldr	r3, [pc, #20]	@ (8004abc <vTaskInternalSetTimeOutState+0x28>)
 8004aa6:	681a      	ldr	r2, [r3, #0]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	605a      	str	r2, [r3, #4]
}
 8004aac:	bf00      	nop
 8004aae:	370c      	adds	r7, #12
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab6:	4770      	bx	lr
 8004ab8:	20000e64 	.word	0x20000e64
 8004abc:	20000e50 	.word	0x20000e50

08004ac0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b088      	sub	sp, #32
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
 8004ac8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d10b      	bne.n	8004ae8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8004ad0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ad4:	f383 8811 	msr	BASEPRI, r3
 8004ad8:	f3bf 8f6f 	isb	sy
 8004adc:	f3bf 8f4f 	dsb	sy
 8004ae0:	613b      	str	r3, [r7, #16]
}
 8004ae2:	bf00      	nop
 8004ae4:	bf00      	nop
 8004ae6:	e7fd      	b.n	8004ae4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d10b      	bne.n	8004b06 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8004aee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004af2:	f383 8811 	msr	BASEPRI, r3
 8004af6:	f3bf 8f6f 	isb	sy
 8004afa:	f3bf 8f4f 	dsb	sy
 8004afe:	60fb      	str	r3, [r7, #12]
}
 8004b00:	bf00      	nop
 8004b02:	bf00      	nop
 8004b04:	e7fd      	b.n	8004b02 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8004b06:	f000 fe97 	bl	8005838 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004b0a:	4b1d      	ldr	r3, [pc, #116]	@ (8004b80 <xTaskCheckForTimeOut+0xc0>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	69ba      	ldr	r2, [r7, #24]
 8004b16:	1ad3      	subs	r3, r2, r3
 8004b18:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b22:	d102      	bne.n	8004b2a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004b24:	2300      	movs	r3, #0
 8004b26:	61fb      	str	r3, [r7, #28]
 8004b28:	e023      	b.n	8004b72 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681a      	ldr	r2, [r3, #0]
 8004b2e:	4b15      	ldr	r3, [pc, #84]	@ (8004b84 <xTaskCheckForTimeOut+0xc4>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d007      	beq.n	8004b46 <xTaskCheckForTimeOut+0x86>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	69ba      	ldr	r2, [r7, #24]
 8004b3c:	429a      	cmp	r2, r3
 8004b3e:	d302      	bcc.n	8004b46 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004b40:	2301      	movs	r3, #1
 8004b42:	61fb      	str	r3, [r7, #28]
 8004b44:	e015      	b.n	8004b72 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	697a      	ldr	r2, [r7, #20]
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	d20b      	bcs.n	8004b68 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	681a      	ldr	r2, [r3, #0]
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	1ad2      	subs	r2, r2, r3
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	f7ff ff99 	bl	8004a94 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004b62:	2300      	movs	r3, #0
 8004b64:	61fb      	str	r3, [r7, #28]
 8004b66:	e004      	b.n	8004b72 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004b72:	f000 fe93 	bl	800589c <vPortExitCritical>

	return xReturn;
 8004b76:	69fb      	ldr	r3, [r7, #28]
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	3720      	adds	r7, #32
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}
 8004b80:	20000e50 	.word	0x20000e50
 8004b84:	20000e64 	.word	0x20000e64

08004b88 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004b88:	b480      	push	{r7}
 8004b8a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004b8c:	4b03      	ldr	r3, [pc, #12]	@ (8004b9c <vTaskMissedYield+0x14>)
 8004b8e:	2201      	movs	r2, #1
 8004b90:	601a      	str	r2, [r3, #0]
}
 8004b92:	bf00      	nop
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr
 8004b9c:	20000e60 	.word	0x20000e60

08004ba0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b082      	sub	sp, #8
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004ba8:	f000 f852 	bl	8004c50 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004bac:	4b06      	ldr	r3, [pc, #24]	@ (8004bc8 <prvIdleTask+0x28>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	d9f9      	bls.n	8004ba8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004bb4:	4b05      	ldr	r3, [pc, #20]	@ (8004bcc <prvIdleTask+0x2c>)
 8004bb6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004bba:	601a      	str	r2, [r3, #0]
 8004bbc:	f3bf 8f4f 	dsb	sy
 8004bc0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004bc4:	e7f0      	b.n	8004ba8 <prvIdleTask+0x8>
 8004bc6:	bf00      	nop
 8004bc8:	2000097c 	.word	0x2000097c
 8004bcc:	e000ed04 	.word	0xe000ed04

08004bd0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b082      	sub	sp, #8
 8004bd4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	607b      	str	r3, [r7, #4]
 8004bda:	e00c      	b.n	8004bf6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004bdc:	687a      	ldr	r2, [r7, #4]
 8004bde:	4613      	mov	r3, r2
 8004be0:	009b      	lsls	r3, r3, #2
 8004be2:	4413      	add	r3, r2
 8004be4:	009b      	lsls	r3, r3, #2
 8004be6:	4a12      	ldr	r2, [pc, #72]	@ (8004c30 <prvInitialiseTaskLists+0x60>)
 8004be8:	4413      	add	r3, r2
 8004bea:	4618      	mov	r0, r3
 8004bec:	f7fe fcae 	bl	800354c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	3301      	adds	r3, #1
 8004bf4:	607b      	str	r3, [r7, #4]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2b37      	cmp	r3, #55	@ 0x37
 8004bfa:	d9ef      	bls.n	8004bdc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004bfc:	480d      	ldr	r0, [pc, #52]	@ (8004c34 <prvInitialiseTaskLists+0x64>)
 8004bfe:	f7fe fca5 	bl	800354c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004c02:	480d      	ldr	r0, [pc, #52]	@ (8004c38 <prvInitialiseTaskLists+0x68>)
 8004c04:	f7fe fca2 	bl	800354c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004c08:	480c      	ldr	r0, [pc, #48]	@ (8004c3c <prvInitialiseTaskLists+0x6c>)
 8004c0a:	f7fe fc9f 	bl	800354c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004c0e:	480c      	ldr	r0, [pc, #48]	@ (8004c40 <prvInitialiseTaskLists+0x70>)
 8004c10:	f7fe fc9c 	bl	800354c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004c14:	480b      	ldr	r0, [pc, #44]	@ (8004c44 <prvInitialiseTaskLists+0x74>)
 8004c16:	f7fe fc99 	bl	800354c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004c1a:	4b0b      	ldr	r3, [pc, #44]	@ (8004c48 <prvInitialiseTaskLists+0x78>)
 8004c1c:	4a05      	ldr	r2, [pc, #20]	@ (8004c34 <prvInitialiseTaskLists+0x64>)
 8004c1e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004c20:	4b0a      	ldr	r3, [pc, #40]	@ (8004c4c <prvInitialiseTaskLists+0x7c>)
 8004c22:	4a05      	ldr	r2, [pc, #20]	@ (8004c38 <prvInitialiseTaskLists+0x68>)
 8004c24:	601a      	str	r2, [r3, #0]
}
 8004c26:	bf00      	nop
 8004c28:	3708      	adds	r7, #8
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}
 8004c2e:	bf00      	nop
 8004c30:	2000097c 	.word	0x2000097c
 8004c34:	20000ddc 	.word	0x20000ddc
 8004c38:	20000df0 	.word	0x20000df0
 8004c3c:	20000e0c 	.word	0x20000e0c
 8004c40:	20000e20 	.word	0x20000e20
 8004c44:	20000e38 	.word	0x20000e38
 8004c48:	20000e04 	.word	0x20000e04
 8004c4c:	20000e08 	.word	0x20000e08

08004c50 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b082      	sub	sp, #8
 8004c54:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004c56:	e019      	b.n	8004c8c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004c58:	f000 fdee 	bl	8005838 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c5c:	4b10      	ldr	r3, [pc, #64]	@ (8004ca0 <prvCheckTasksWaitingTermination+0x50>)
 8004c5e:	68db      	ldr	r3, [r3, #12]
 8004c60:	68db      	ldr	r3, [r3, #12]
 8004c62:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	3304      	adds	r3, #4
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f7fe fcf9 	bl	8003660 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004c6e:	4b0d      	ldr	r3, [pc, #52]	@ (8004ca4 <prvCheckTasksWaitingTermination+0x54>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	3b01      	subs	r3, #1
 8004c74:	4a0b      	ldr	r2, [pc, #44]	@ (8004ca4 <prvCheckTasksWaitingTermination+0x54>)
 8004c76:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004c78:	4b0b      	ldr	r3, [pc, #44]	@ (8004ca8 <prvCheckTasksWaitingTermination+0x58>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	3b01      	subs	r3, #1
 8004c7e:	4a0a      	ldr	r2, [pc, #40]	@ (8004ca8 <prvCheckTasksWaitingTermination+0x58>)
 8004c80:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004c82:	f000 fe0b 	bl	800589c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f000 f810 	bl	8004cac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004c8c:	4b06      	ldr	r3, [pc, #24]	@ (8004ca8 <prvCheckTasksWaitingTermination+0x58>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d1e1      	bne.n	8004c58 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004c94:	bf00      	nop
 8004c96:	bf00      	nop
 8004c98:	3708      	adds	r7, #8
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}
 8004c9e:	bf00      	nop
 8004ca0:	20000e20 	.word	0x20000e20
 8004ca4:	20000e4c 	.word	0x20000e4c
 8004ca8:	20000e34 	.word	0x20000e34

08004cac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b084      	sub	sp, #16
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	3354      	adds	r3, #84	@ 0x54
 8004cb8:	4618      	mov	r0, r3
 8004cba:	f001 f9a7 	bl	800600c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d108      	bne.n	8004cda <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f000 ffa3 	bl	8005c18 <vPortFree>
				vPortFree( pxTCB );
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f000 ffa0 	bl	8005c18 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004cd8:	e019      	b.n	8004d0e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004ce0:	2b01      	cmp	r3, #1
 8004ce2:	d103      	bne.n	8004cec <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004ce4:	6878      	ldr	r0, [r7, #4]
 8004ce6:	f000 ff97 	bl	8005c18 <vPortFree>
	}
 8004cea:	e010      	b.n	8004d0e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004cf2:	2b02      	cmp	r3, #2
 8004cf4:	d00b      	beq.n	8004d0e <prvDeleteTCB+0x62>
	__asm volatile
 8004cf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cfa:	f383 8811 	msr	BASEPRI, r3
 8004cfe:	f3bf 8f6f 	isb	sy
 8004d02:	f3bf 8f4f 	dsb	sy
 8004d06:	60fb      	str	r3, [r7, #12]
}
 8004d08:	bf00      	nop
 8004d0a:	bf00      	nop
 8004d0c:	e7fd      	b.n	8004d0a <prvDeleteTCB+0x5e>
	}
 8004d0e:	bf00      	nop
 8004d10:	3710      	adds	r7, #16
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}
	...

08004d18 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b083      	sub	sp, #12
 8004d1c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004d1e:	4b0c      	ldr	r3, [pc, #48]	@ (8004d50 <prvResetNextTaskUnblockTime+0x38>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d104      	bne.n	8004d32 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004d28:	4b0a      	ldr	r3, [pc, #40]	@ (8004d54 <prvResetNextTaskUnblockTime+0x3c>)
 8004d2a:	f04f 32ff 	mov.w	r2, #4294967295
 8004d2e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004d30:	e008      	b.n	8004d44 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d32:	4b07      	ldr	r3, [pc, #28]	@ (8004d50 <prvResetNextTaskUnblockTime+0x38>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	68db      	ldr	r3, [r3, #12]
 8004d38:	68db      	ldr	r3, [r3, #12]
 8004d3a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	4a04      	ldr	r2, [pc, #16]	@ (8004d54 <prvResetNextTaskUnblockTime+0x3c>)
 8004d42:	6013      	str	r3, [r2, #0]
}
 8004d44:	bf00      	nop
 8004d46:	370c      	adds	r7, #12
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4e:	4770      	bx	lr
 8004d50:	20000e04 	.word	0x20000e04
 8004d54:	20000e6c 	.word	0x20000e6c

08004d58 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004d58:	b480      	push	{r7}
 8004d5a:	b083      	sub	sp, #12
 8004d5c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004d5e:	4b0b      	ldr	r3, [pc, #44]	@ (8004d8c <xTaskGetSchedulerState+0x34>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d102      	bne.n	8004d6c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004d66:	2301      	movs	r3, #1
 8004d68:	607b      	str	r3, [r7, #4]
 8004d6a:	e008      	b.n	8004d7e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d6c:	4b08      	ldr	r3, [pc, #32]	@ (8004d90 <xTaskGetSchedulerState+0x38>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d102      	bne.n	8004d7a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004d74:	2302      	movs	r3, #2
 8004d76:	607b      	str	r3, [r7, #4]
 8004d78:	e001      	b.n	8004d7e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004d7e:	687b      	ldr	r3, [r7, #4]
	}
 8004d80:	4618      	mov	r0, r3
 8004d82:	370c      	adds	r7, #12
 8004d84:	46bd      	mov	sp, r7
 8004d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8a:	4770      	bx	lr
 8004d8c:	20000e58 	.word	0x20000e58
 8004d90:	20000e74 	.word	0x20000e74

08004d94 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b086      	sub	sp, #24
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004da0:	2300      	movs	r3, #0
 8004da2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d058      	beq.n	8004e5c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004daa:	4b2f      	ldr	r3, [pc, #188]	@ (8004e68 <xTaskPriorityDisinherit+0xd4>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	693a      	ldr	r2, [r7, #16]
 8004db0:	429a      	cmp	r2, r3
 8004db2:	d00b      	beq.n	8004dcc <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004db4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004db8:	f383 8811 	msr	BASEPRI, r3
 8004dbc:	f3bf 8f6f 	isb	sy
 8004dc0:	f3bf 8f4f 	dsb	sy
 8004dc4:	60fb      	str	r3, [r7, #12]
}
 8004dc6:	bf00      	nop
 8004dc8:	bf00      	nop
 8004dca:	e7fd      	b.n	8004dc8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d10b      	bne.n	8004dec <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004dd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dd8:	f383 8811 	msr	BASEPRI, r3
 8004ddc:	f3bf 8f6f 	isb	sy
 8004de0:	f3bf 8f4f 	dsb	sy
 8004de4:	60bb      	str	r3, [r7, #8]
}
 8004de6:	bf00      	nop
 8004de8:	bf00      	nop
 8004dea:	e7fd      	b.n	8004de8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004df0:	1e5a      	subs	r2, r3, #1
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004dfe:	429a      	cmp	r2, r3
 8004e00:	d02c      	beq.n	8004e5c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d128      	bne.n	8004e5c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	3304      	adds	r3, #4
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f7fe fc26 	bl	8003660 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e20:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e2c:	4b0f      	ldr	r3, [pc, #60]	@ (8004e6c <xTaskPriorityDisinherit+0xd8>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	429a      	cmp	r2, r3
 8004e32:	d903      	bls.n	8004e3c <xTaskPriorityDisinherit+0xa8>
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e38:	4a0c      	ldr	r2, [pc, #48]	@ (8004e6c <xTaskPriorityDisinherit+0xd8>)
 8004e3a:	6013      	str	r3, [r2, #0]
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e40:	4613      	mov	r3, r2
 8004e42:	009b      	lsls	r3, r3, #2
 8004e44:	4413      	add	r3, r2
 8004e46:	009b      	lsls	r3, r3, #2
 8004e48:	4a09      	ldr	r2, [pc, #36]	@ (8004e70 <xTaskPriorityDisinherit+0xdc>)
 8004e4a:	441a      	add	r2, r3
 8004e4c:	693b      	ldr	r3, [r7, #16]
 8004e4e:	3304      	adds	r3, #4
 8004e50:	4619      	mov	r1, r3
 8004e52:	4610      	mov	r0, r2
 8004e54:	f7fe fba7 	bl	80035a6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004e5c:	697b      	ldr	r3, [r7, #20]
	}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	3718      	adds	r7, #24
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}
 8004e66:	bf00      	nop
 8004e68:	20000978 	.word	0x20000978
 8004e6c:	20000e54 	.word	0x20000e54
 8004e70:	2000097c 	.word	0x2000097c

08004e74 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b084      	sub	sp, #16
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
 8004e7c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004e7e:	4b21      	ldr	r3, [pc, #132]	@ (8004f04 <prvAddCurrentTaskToDelayedList+0x90>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004e84:	4b20      	ldr	r3, [pc, #128]	@ (8004f08 <prvAddCurrentTaskToDelayedList+0x94>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	3304      	adds	r3, #4
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f7fe fbe8 	bl	8003660 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e96:	d10a      	bne.n	8004eae <prvAddCurrentTaskToDelayedList+0x3a>
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d007      	beq.n	8004eae <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004e9e:	4b1a      	ldr	r3, [pc, #104]	@ (8004f08 <prvAddCurrentTaskToDelayedList+0x94>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	3304      	adds	r3, #4
 8004ea4:	4619      	mov	r1, r3
 8004ea6:	4819      	ldr	r0, [pc, #100]	@ (8004f0c <prvAddCurrentTaskToDelayedList+0x98>)
 8004ea8:	f7fe fb7d 	bl	80035a6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004eac:	e026      	b.n	8004efc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004eae:	68fa      	ldr	r2, [r7, #12]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	4413      	add	r3, r2
 8004eb4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004eb6:	4b14      	ldr	r3, [pc, #80]	@ (8004f08 <prvAddCurrentTaskToDelayedList+0x94>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	68ba      	ldr	r2, [r7, #8]
 8004ebc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004ebe:	68ba      	ldr	r2, [r7, #8]
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	429a      	cmp	r2, r3
 8004ec4:	d209      	bcs.n	8004eda <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ec6:	4b12      	ldr	r3, [pc, #72]	@ (8004f10 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004ec8:	681a      	ldr	r2, [r3, #0]
 8004eca:	4b0f      	ldr	r3, [pc, #60]	@ (8004f08 <prvAddCurrentTaskToDelayedList+0x94>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	3304      	adds	r3, #4
 8004ed0:	4619      	mov	r1, r3
 8004ed2:	4610      	mov	r0, r2
 8004ed4:	f7fe fb8b 	bl	80035ee <vListInsert>
}
 8004ed8:	e010      	b.n	8004efc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004eda:	4b0e      	ldr	r3, [pc, #56]	@ (8004f14 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004edc:	681a      	ldr	r2, [r3, #0]
 8004ede:	4b0a      	ldr	r3, [pc, #40]	@ (8004f08 <prvAddCurrentTaskToDelayedList+0x94>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	3304      	adds	r3, #4
 8004ee4:	4619      	mov	r1, r3
 8004ee6:	4610      	mov	r0, r2
 8004ee8:	f7fe fb81 	bl	80035ee <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004eec:	4b0a      	ldr	r3, [pc, #40]	@ (8004f18 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	68ba      	ldr	r2, [r7, #8]
 8004ef2:	429a      	cmp	r2, r3
 8004ef4:	d202      	bcs.n	8004efc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004ef6:	4a08      	ldr	r2, [pc, #32]	@ (8004f18 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	6013      	str	r3, [r2, #0]
}
 8004efc:	bf00      	nop
 8004efe:	3710      	adds	r7, #16
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bd80      	pop	{r7, pc}
 8004f04:	20000e50 	.word	0x20000e50
 8004f08:	20000978 	.word	0x20000978
 8004f0c:	20000e38 	.word	0x20000e38
 8004f10:	20000e08 	.word	0x20000e08
 8004f14:	20000e04 	.word	0x20000e04
 8004f18:	20000e6c 	.word	0x20000e6c

08004f1c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b08a      	sub	sp, #40	@ 0x28
 8004f20:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004f22:	2300      	movs	r3, #0
 8004f24:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004f26:	f000 fb13 	bl	8005550 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004f2a:	4b1d      	ldr	r3, [pc, #116]	@ (8004fa0 <xTimerCreateTimerTask+0x84>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d021      	beq.n	8004f76 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004f32:	2300      	movs	r3, #0
 8004f34:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004f36:	2300      	movs	r3, #0
 8004f38:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004f3a:	1d3a      	adds	r2, r7, #4
 8004f3c:	f107 0108 	add.w	r1, r7, #8
 8004f40:	f107 030c 	add.w	r3, r7, #12
 8004f44:	4618      	mov	r0, r3
 8004f46:	f7fe fae7 	bl	8003518 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004f4a:	6879      	ldr	r1, [r7, #4]
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	68fa      	ldr	r2, [r7, #12]
 8004f50:	9202      	str	r2, [sp, #8]
 8004f52:	9301      	str	r3, [sp, #4]
 8004f54:	2302      	movs	r3, #2
 8004f56:	9300      	str	r3, [sp, #0]
 8004f58:	2300      	movs	r3, #0
 8004f5a:	460a      	mov	r2, r1
 8004f5c:	4911      	ldr	r1, [pc, #68]	@ (8004fa4 <xTimerCreateTimerTask+0x88>)
 8004f5e:	4812      	ldr	r0, [pc, #72]	@ (8004fa8 <xTimerCreateTimerTask+0x8c>)
 8004f60:	f7ff f8a2 	bl	80040a8 <xTaskCreateStatic>
 8004f64:	4603      	mov	r3, r0
 8004f66:	4a11      	ldr	r2, [pc, #68]	@ (8004fac <xTimerCreateTimerTask+0x90>)
 8004f68:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004f6a:	4b10      	ldr	r3, [pc, #64]	@ (8004fac <xTimerCreateTimerTask+0x90>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d001      	beq.n	8004f76 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004f72:	2301      	movs	r3, #1
 8004f74:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d10b      	bne.n	8004f94 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8004f7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f80:	f383 8811 	msr	BASEPRI, r3
 8004f84:	f3bf 8f6f 	isb	sy
 8004f88:	f3bf 8f4f 	dsb	sy
 8004f8c:	613b      	str	r3, [r7, #16]
}
 8004f8e:	bf00      	nop
 8004f90:	bf00      	nop
 8004f92:	e7fd      	b.n	8004f90 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004f94:	697b      	ldr	r3, [r7, #20]
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	3718      	adds	r7, #24
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}
 8004f9e:	bf00      	nop
 8004fa0:	20000ea8 	.word	0x20000ea8
 8004fa4:	08006208 	.word	0x08006208
 8004fa8:	080050e9 	.word	0x080050e9
 8004fac:	20000eac 	.word	0x20000eac

08004fb0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b08a      	sub	sp, #40	@ 0x28
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	60f8      	str	r0, [r7, #12]
 8004fb8:	60b9      	str	r1, [r7, #8]
 8004fba:	607a      	str	r2, [r7, #4]
 8004fbc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d10b      	bne.n	8004fe0 <xTimerGenericCommand+0x30>
	__asm volatile
 8004fc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fcc:	f383 8811 	msr	BASEPRI, r3
 8004fd0:	f3bf 8f6f 	isb	sy
 8004fd4:	f3bf 8f4f 	dsb	sy
 8004fd8:	623b      	str	r3, [r7, #32]
}
 8004fda:	bf00      	nop
 8004fdc:	bf00      	nop
 8004fde:	e7fd      	b.n	8004fdc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004fe0:	4b19      	ldr	r3, [pc, #100]	@ (8005048 <xTimerGenericCommand+0x98>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d02a      	beq.n	800503e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	2b05      	cmp	r3, #5
 8004ff8:	dc18      	bgt.n	800502c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004ffa:	f7ff fead 	bl	8004d58 <xTaskGetSchedulerState>
 8004ffe:	4603      	mov	r3, r0
 8005000:	2b02      	cmp	r3, #2
 8005002:	d109      	bne.n	8005018 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005004:	4b10      	ldr	r3, [pc, #64]	@ (8005048 <xTimerGenericCommand+0x98>)
 8005006:	6818      	ldr	r0, [r3, #0]
 8005008:	f107 0110 	add.w	r1, r7, #16
 800500c:	2300      	movs	r3, #0
 800500e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005010:	f7fe fc5a 	bl	80038c8 <xQueueGenericSend>
 8005014:	6278      	str	r0, [r7, #36]	@ 0x24
 8005016:	e012      	b.n	800503e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005018:	4b0b      	ldr	r3, [pc, #44]	@ (8005048 <xTimerGenericCommand+0x98>)
 800501a:	6818      	ldr	r0, [r3, #0]
 800501c:	f107 0110 	add.w	r1, r7, #16
 8005020:	2300      	movs	r3, #0
 8005022:	2200      	movs	r2, #0
 8005024:	f7fe fc50 	bl	80038c8 <xQueueGenericSend>
 8005028:	6278      	str	r0, [r7, #36]	@ 0x24
 800502a:	e008      	b.n	800503e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800502c:	4b06      	ldr	r3, [pc, #24]	@ (8005048 <xTimerGenericCommand+0x98>)
 800502e:	6818      	ldr	r0, [r3, #0]
 8005030:	f107 0110 	add.w	r1, r7, #16
 8005034:	2300      	movs	r3, #0
 8005036:	683a      	ldr	r2, [r7, #0]
 8005038:	f7fe fd48 	bl	8003acc <xQueueGenericSendFromISR>
 800503c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800503e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005040:	4618      	mov	r0, r3
 8005042:	3728      	adds	r7, #40	@ 0x28
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}
 8005048:	20000ea8 	.word	0x20000ea8

0800504c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b088      	sub	sp, #32
 8005050:	af02      	add	r7, sp, #8
 8005052:	6078      	str	r0, [r7, #4]
 8005054:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005056:	4b23      	ldr	r3, [pc, #140]	@ (80050e4 <prvProcessExpiredTimer+0x98>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	68db      	ldr	r3, [r3, #12]
 800505c:	68db      	ldr	r3, [r3, #12]
 800505e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	3304      	adds	r3, #4
 8005064:	4618      	mov	r0, r3
 8005066:	f7fe fafb 	bl	8003660 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005070:	f003 0304 	and.w	r3, r3, #4
 8005074:	2b00      	cmp	r3, #0
 8005076:	d023      	beq.n	80050c0 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	699a      	ldr	r2, [r3, #24]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	18d1      	adds	r1, r2, r3
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	683a      	ldr	r2, [r7, #0]
 8005084:	6978      	ldr	r0, [r7, #20]
 8005086:	f000 f8d5 	bl	8005234 <prvInsertTimerInActiveList>
 800508a:	4603      	mov	r3, r0
 800508c:	2b00      	cmp	r3, #0
 800508e:	d020      	beq.n	80050d2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005090:	2300      	movs	r3, #0
 8005092:	9300      	str	r3, [sp, #0]
 8005094:	2300      	movs	r3, #0
 8005096:	687a      	ldr	r2, [r7, #4]
 8005098:	2100      	movs	r1, #0
 800509a:	6978      	ldr	r0, [r7, #20]
 800509c:	f7ff ff88 	bl	8004fb0 <xTimerGenericCommand>
 80050a0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d114      	bne.n	80050d2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 80050a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050ac:	f383 8811 	msr	BASEPRI, r3
 80050b0:	f3bf 8f6f 	isb	sy
 80050b4:	f3bf 8f4f 	dsb	sy
 80050b8:	60fb      	str	r3, [r7, #12]
}
 80050ba:	bf00      	nop
 80050bc:	bf00      	nop
 80050be:	e7fd      	b.n	80050bc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80050c6:	f023 0301 	bic.w	r3, r3, #1
 80050ca:	b2da      	uxtb	r2, r3
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	6a1b      	ldr	r3, [r3, #32]
 80050d6:	6978      	ldr	r0, [r7, #20]
 80050d8:	4798      	blx	r3
}
 80050da:	bf00      	nop
 80050dc:	3718      	adds	r7, #24
 80050de:	46bd      	mov	sp, r7
 80050e0:	bd80      	pop	{r7, pc}
 80050e2:	bf00      	nop
 80050e4:	20000ea0 	.word	0x20000ea0

080050e8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b084      	sub	sp, #16
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80050f0:	f107 0308 	add.w	r3, r7, #8
 80050f4:	4618      	mov	r0, r3
 80050f6:	f000 f859 	bl	80051ac <prvGetNextExpireTime>
 80050fa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	4619      	mov	r1, r3
 8005100:	68f8      	ldr	r0, [r7, #12]
 8005102:	f000 f805 	bl	8005110 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005106:	f000 f8d7 	bl	80052b8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800510a:	bf00      	nop
 800510c:	e7f0      	b.n	80050f0 <prvTimerTask+0x8>
	...

08005110 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b084      	sub	sp, #16
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
 8005118:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800511a:	f7ff fa29 	bl	8004570 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800511e:	f107 0308 	add.w	r3, r7, #8
 8005122:	4618      	mov	r0, r3
 8005124:	f000 f866 	bl	80051f4 <prvSampleTimeNow>
 8005128:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d130      	bne.n	8005192 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d10a      	bne.n	800514c <prvProcessTimerOrBlockTask+0x3c>
 8005136:	687a      	ldr	r2, [r7, #4]
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	429a      	cmp	r2, r3
 800513c:	d806      	bhi.n	800514c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800513e:	f7ff fa25 	bl	800458c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005142:	68f9      	ldr	r1, [r7, #12]
 8005144:	6878      	ldr	r0, [r7, #4]
 8005146:	f7ff ff81 	bl	800504c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800514a:	e024      	b.n	8005196 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d008      	beq.n	8005164 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005152:	4b13      	ldr	r3, [pc, #76]	@ (80051a0 <prvProcessTimerOrBlockTask+0x90>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d101      	bne.n	8005160 <prvProcessTimerOrBlockTask+0x50>
 800515c:	2301      	movs	r3, #1
 800515e:	e000      	b.n	8005162 <prvProcessTimerOrBlockTask+0x52>
 8005160:	2300      	movs	r3, #0
 8005162:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005164:	4b0f      	ldr	r3, [pc, #60]	@ (80051a4 <prvProcessTimerOrBlockTask+0x94>)
 8005166:	6818      	ldr	r0, [r3, #0]
 8005168:	687a      	ldr	r2, [r7, #4]
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	1ad3      	subs	r3, r2, r3
 800516e:	683a      	ldr	r2, [r7, #0]
 8005170:	4619      	mov	r1, r3
 8005172:	f7fe ff65 	bl	8004040 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005176:	f7ff fa09 	bl	800458c <xTaskResumeAll>
 800517a:	4603      	mov	r3, r0
 800517c:	2b00      	cmp	r3, #0
 800517e:	d10a      	bne.n	8005196 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005180:	4b09      	ldr	r3, [pc, #36]	@ (80051a8 <prvProcessTimerOrBlockTask+0x98>)
 8005182:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005186:	601a      	str	r2, [r3, #0]
 8005188:	f3bf 8f4f 	dsb	sy
 800518c:	f3bf 8f6f 	isb	sy
}
 8005190:	e001      	b.n	8005196 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005192:	f7ff f9fb 	bl	800458c <xTaskResumeAll>
}
 8005196:	bf00      	nop
 8005198:	3710      	adds	r7, #16
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}
 800519e:	bf00      	nop
 80051a0:	20000ea4 	.word	0x20000ea4
 80051a4:	20000ea8 	.word	0x20000ea8
 80051a8:	e000ed04 	.word	0xe000ed04

080051ac <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80051ac:	b480      	push	{r7}
 80051ae:	b085      	sub	sp, #20
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80051b4:	4b0e      	ldr	r3, [pc, #56]	@ (80051f0 <prvGetNextExpireTime+0x44>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d101      	bne.n	80051c2 <prvGetNextExpireTime+0x16>
 80051be:	2201      	movs	r2, #1
 80051c0:	e000      	b.n	80051c4 <prvGetNextExpireTime+0x18>
 80051c2:	2200      	movs	r2, #0
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d105      	bne.n	80051dc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80051d0:	4b07      	ldr	r3, [pc, #28]	@ (80051f0 <prvGetNextExpireTime+0x44>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	68db      	ldr	r3, [r3, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	60fb      	str	r3, [r7, #12]
 80051da:	e001      	b.n	80051e0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80051dc:	2300      	movs	r3, #0
 80051de:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80051e0:	68fb      	ldr	r3, [r7, #12]
}
 80051e2:	4618      	mov	r0, r3
 80051e4:	3714      	adds	r7, #20
 80051e6:	46bd      	mov	sp, r7
 80051e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ec:	4770      	bx	lr
 80051ee:	bf00      	nop
 80051f0:	20000ea0 	.word	0x20000ea0

080051f4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b084      	sub	sp, #16
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80051fc:	f7ff fa64 	bl	80046c8 <xTaskGetTickCount>
 8005200:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005202:	4b0b      	ldr	r3, [pc, #44]	@ (8005230 <prvSampleTimeNow+0x3c>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	68fa      	ldr	r2, [r7, #12]
 8005208:	429a      	cmp	r2, r3
 800520a:	d205      	bcs.n	8005218 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800520c:	f000 f93a 	bl	8005484 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2201      	movs	r2, #1
 8005214:	601a      	str	r2, [r3, #0]
 8005216:	e002      	b.n	800521e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2200      	movs	r2, #0
 800521c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800521e:	4a04      	ldr	r2, [pc, #16]	@ (8005230 <prvSampleTimeNow+0x3c>)
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005224:	68fb      	ldr	r3, [r7, #12]
}
 8005226:	4618      	mov	r0, r3
 8005228:	3710      	adds	r7, #16
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}
 800522e:	bf00      	nop
 8005230:	20000eb0 	.word	0x20000eb0

08005234 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b086      	sub	sp, #24
 8005238:	af00      	add	r7, sp, #0
 800523a:	60f8      	str	r0, [r7, #12]
 800523c:	60b9      	str	r1, [r7, #8]
 800523e:	607a      	str	r2, [r7, #4]
 8005240:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005242:	2300      	movs	r3, #0
 8005244:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	68ba      	ldr	r2, [r7, #8]
 800524a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	68fa      	ldr	r2, [r7, #12]
 8005250:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005252:	68ba      	ldr	r2, [r7, #8]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	429a      	cmp	r2, r3
 8005258:	d812      	bhi.n	8005280 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800525a:	687a      	ldr	r2, [r7, #4]
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	1ad2      	subs	r2, r2, r3
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	699b      	ldr	r3, [r3, #24]
 8005264:	429a      	cmp	r2, r3
 8005266:	d302      	bcc.n	800526e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005268:	2301      	movs	r3, #1
 800526a:	617b      	str	r3, [r7, #20]
 800526c:	e01b      	b.n	80052a6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800526e:	4b10      	ldr	r3, [pc, #64]	@ (80052b0 <prvInsertTimerInActiveList+0x7c>)
 8005270:	681a      	ldr	r2, [r3, #0]
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	3304      	adds	r3, #4
 8005276:	4619      	mov	r1, r3
 8005278:	4610      	mov	r0, r2
 800527a:	f7fe f9b8 	bl	80035ee <vListInsert>
 800527e:	e012      	b.n	80052a6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005280:	687a      	ldr	r2, [r7, #4]
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	429a      	cmp	r2, r3
 8005286:	d206      	bcs.n	8005296 <prvInsertTimerInActiveList+0x62>
 8005288:	68ba      	ldr	r2, [r7, #8]
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	429a      	cmp	r2, r3
 800528e:	d302      	bcc.n	8005296 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005290:	2301      	movs	r3, #1
 8005292:	617b      	str	r3, [r7, #20]
 8005294:	e007      	b.n	80052a6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005296:	4b07      	ldr	r3, [pc, #28]	@ (80052b4 <prvInsertTimerInActiveList+0x80>)
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	3304      	adds	r3, #4
 800529e:	4619      	mov	r1, r3
 80052a0:	4610      	mov	r0, r2
 80052a2:	f7fe f9a4 	bl	80035ee <vListInsert>
		}
	}

	return xProcessTimerNow;
 80052a6:	697b      	ldr	r3, [r7, #20]
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	3718      	adds	r7, #24
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bd80      	pop	{r7, pc}
 80052b0:	20000ea4 	.word	0x20000ea4
 80052b4:	20000ea0 	.word	0x20000ea0

080052b8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b08e      	sub	sp, #56	@ 0x38
 80052bc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80052be:	e0ce      	b.n	800545e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	da19      	bge.n	80052fa <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80052c6:	1d3b      	adds	r3, r7, #4
 80052c8:	3304      	adds	r3, #4
 80052ca:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80052cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d10b      	bne.n	80052ea <prvProcessReceivedCommands+0x32>
	__asm volatile
 80052d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052d6:	f383 8811 	msr	BASEPRI, r3
 80052da:	f3bf 8f6f 	isb	sy
 80052de:	f3bf 8f4f 	dsb	sy
 80052e2:	61fb      	str	r3, [r7, #28]
}
 80052e4:	bf00      	nop
 80052e6:	bf00      	nop
 80052e8:	e7fd      	b.n	80052e6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80052ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80052f0:	6850      	ldr	r0, [r2, #4]
 80052f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80052f4:	6892      	ldr	r2, [r2, #8]
 80052f6:	4611      	mov	r1, r2
 80052f8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	f2c0 80ae 	blt.w	800545e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005306:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005308:	695b      	ldr	r3, [r3, #20]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d004      	beq.n	8005318 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800530e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005310:	3304      	adds	r3, #4
 8005312:	4618      	mov	r0, r3
 8005314:	f7fe f9a4 	bl	8003660 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005318:	463b      	mov	r3, r7
 800531a:	4618      	mov	r0, r3
 800531c:	f7ff ff6a 	bl	80051f4 <prvSampleTimeNow>
 8005320:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2b09      	cmp	r3, #9
 8005326:	f200 8097 	bhi.w	8005458 <prvProcessReceivedCommands+0x1a0>
 800532a:	a201      	add	r2, pc, #4	@ (adr r2, 8005330 <prvProcessReceivedCommands+0x78>)
 800532c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005330:	08005359 	.word	0x08005359
 8005334:	08005359 	.word	0x08005359
 8005338:	08005359 	.word	0x08005359
 800533c:	080053cf 	.word	0x080053cf
 8005340:	080053e3 	.word	0x080053e3
 8005344:	0800542f 	.word	0x0800542f
 8005348:	08005359 	.word	0x08005359
 800534c:	08005359 	.word	0x08005359
 8005350:	080053cf 	.word	0x080053cf
 8005354:	080053e3 	.word	0x080053e3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005358:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800535a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800535e:	f043 0301 	orr.w	r3, r3, #1
 8005362:	b2da      	uxtb	r2, r3
 8005364:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005366:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800536a:	68ba      	ldr	r2, [r7, #8]
 800536c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800536e:	699b      	ldr	r3, [r3, #24]
 8005370:	18d1      	adds	r1, r2, r3
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005376:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005378:	f7ff ff5c 	bl	8005234 <prvInsertTimerInActiveList>
 800537c:	4603      	mov	r3, r0
 800537e:	2b00      	cmp	r3, #0
 8005380:	d06c      	beq.n	800545c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005382:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005384:	6a1b      	ldr	r3, [r3, #32]
 8005386:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005388:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800538a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800538c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005390:	f003 0304 	and.w	r3, r3, #4
 8005394:	2b00      	cmp	r3, #0
 8005396:	d061      	beq.n	800545c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005398:	68ba      	ldr	r2, [r7, #8]
 800539a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800539c:	699b      	ldr	r3, [r3, #24]
 800539e:	441a      	add	r2, r3
 80053a0:	2300      	movs	r3, #0
 80053a2:	9300      	str	r3, [sp, #0]
 80053a4:	2300      	movs	r3, #0
 80053a6:	2100      	movs	r1, #0
 80053a8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80053aa:	f7ff fe01 	bl	8004fb0 <xTimerGenericCommand>
 80053ae:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80053b0:	6a3b      	ldr	r3, [r7, #32]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d152      	bne.n	800545c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80053b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053ba:	f383 8811 	msr	BASEPRI, r3
 80053be:	f3bf 8f6f 	isb	sy
 80053c2:	f3bf 8f4f 	dsb	sy
 80053c6:	61bb      	str	r3, [r7, #24]
}
 80053c8:	bf00      	nop
 80053ca:	bf00      	nop
 80053cc:	e7fd      	b.n	80053ca <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80053ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053d0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80053d4:	f023 0301 	bic.w	r3, r3, #1
 80053d8:	b2da      	uxtb	r2, r3
 80053da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053dc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80053e0:	e03d      	b.n	800545e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80053e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053e4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80053e8:	f043 0301 	orr.w	r3, r3, #1
 80053ec:	b2da      	uxtb	r2, r3
 80053ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053f0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80053f4:	68ba      	ldr	r2, [r7, #8]
 80053f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053f8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80053fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053fc:	699b      	ldr	r3, [r3, #24]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d10b      	bne.n	800541a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8005402:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005406:	f383 8811 	msr	BASEPRI, r3
 800540a:	f3bf 8f6f 	isb	sy
 800540e:	f3bf 8f4f 	dsb	sy
 8005412:	617b      	str	r3, [r7, #20]
}
 8005414:	bf00      	nop
 8005416:	bf00      	nop
 8005418:	e7fd      	b.n	8005416 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800541a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800541c:	699a      	ldr	r2, [r3, #24]
 800541e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005420:	18d1      	adds	r1, r2, r3
 8005422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005424:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005426:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005428:	f7ff ff04 	bl	8005234 <prvInsertTimerInActiveList>
					break;
 800542c:	e017      	b.n	800545e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800542e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005430:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005434:	f003 0302 	and.w	r3, r3, #2
 8005438:	2b00      	cmp	r3, #0
 800543a:	d103      	bne.n	8005444 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800543c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800543e:	f000 fbeb 	bl	8005c18 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005442:	e00c      	b.n	800545e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005444:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005446:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800544a:	f023 0301 	bic.w	r3, r3, #1
 800544e:	b2da      	uxtb	r2, r3
 8005450:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005452:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005456:	e002      	b.n	800545e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8005458:	bf00      	nop
 800545a:	e000      	b.n	800545e <prvProcessReceivedCommands+0x1a6>
					break;
 800545c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800545e:	4b08      	ldr	r3, [pc, #32]	@ (8005480 <prvProcessReceivedCommands+0x1c8>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	1d39      	adds	r1, r7, #4
 8005464:	2200      	movs	r2, #0
 8005466:	4618      	mov	r0, r3
 8005468:	f7fe fbce 	bl	8003c08 <xQueueReceive>
 800546c:	4603      	mov	r3, r0
 800546e:	2b00      	cmp	r3, #0
 8005470:	f47f af26 	bne.w	80052c0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005474:	bf00      	nop
 8005476:	bf00      	nop
 8005478:	3730      	adds	r7, #48	@ 0x30
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}
 800547e:	bf00      	nop
 8005480:	20000ea8 	.word	0x20000ea8

08005484 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b088      	sub	sp, #32
 8005488:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800548a:	e049      	b.n	8005520 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800548c:	4b2e      	ldr	r3, [pc, #184]	@ (8005548 <prvSwitchTimerLists+0xc4>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	68db      	ldr	r3, [r3, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005496:	4b2c      	ldr	r3, [pc, #176]	@ (8005548 <prvSwitchTimerLists+0xc4>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	68db      	ldr	r3, [r3, #12]
 800549c:	68db      	ldr	r3, [r3, #12]
 800549e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	3304      	adds	r3, #4
 80054a4:	4618      	mov	r0, r3
 80054a6:	f7fe f8db 	bl	8003660 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	6a1b      	ldr	r3, [r3, #32]
 80054ae:	68f8      	ldr	r0, [r7, #12]
 80054b0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80054b8:	f003 0304 	and.w	r3, r3, #4
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d02f      	beq.n	8005520 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	699b      	ldr	r3, [r3, #24]
 80054c4:	693a      	ldr	r2, [r7, #16]
 80054c6:	4413      	add	r3, r2
 80054c8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80054ca:	68ba      	ldr	r2, [r7, #8]
 80054cc:	693b      	ldr	r3, [r7, #16]
 80054ce:	429a      	cmp	r2, r3
 80054d0:	d90e      	bls.n	80054f0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	68ba      	ldr	r2, [r7, #8]
 80054d6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	68fa      	ldr	r2, [r7, #12]
 80054dc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80054de:	4b1a      	ldr	r3, [pc, #104]	@ (8005548 <prvSwitchTimerLists+0xc4>)
 80054e0:	681a      	ldr	r2, [r3, #0]
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	3304      	adds	r3, #4
 80054e6:	4619      	mov	r1, r3
 80054e8:	4610      	mov	r0, r2
 80054ea:	f7fe f880 	bl	80035ee <vListInsert>
 80054ee:	e017      	b.n	8005520 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80054f0:	2300      	movs	r3, #0
 80054f2:	9300      	str	r3, [sp, #0]
 80054f4:	2300      	movs	r3, #0
 80054f6:	693a      	ldr	r2, [r7, #16]
 80054f8:	2100      	movs	r1, #0
 80054fa:	68f8      	ldr	r0, [r7, #12]
 80054fc:	f7ff fd58 	bl	8004fb0 <xTimerGenericCommand>
 8005500:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d10b      	bne.n	8005520 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8005508:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800550c:	f383 8811 	msr	BASEPRI, r3
 8005510:	f3bf 8f6f 	isb	sy
 8005514:	f3bf 8f4f 	dsb	sy
 8005518:	603b      	str	r3, [r7, #0]
}
 800551a:	bf00      	nop
 800551c:	bf00      	nop
 800551e:	e7fd      	b.n	800551c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005520:	4b09      	ldr	r3, [pc, #36]	@ (8005548 <prvSwitchTimerLists+0xc4>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d1b0      	bne.n	800548c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800552a:	4b07      	ldr	r3, [pc, #28]	@ (8005548 <prvSwitchTimerLists+0xc4>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005530:	4b06      	ldr	r3, [pc, #24]	@ (800554c <prvSwitchTimerLists+0xc8>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a04      	ldr	r2, [pc, #16]	@ (8005548 <prvSwitchTimerLists+0xc4>)
 8005536:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005538:	4a04      	ldr	r2, [pc, #16]	@ (800554c <prvSwitchTimerLists+0xc8>)
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	6013      	str	r3, [r2, #0]
}
 800553e:	bf00      	nop
 8005540:	3718      	adds	r7, #24
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}
 8005546:	bf00      	nop
 8005548:	20000ea0 	.word	0x20000ea0
 800554c:	20000ea4 	.word	0x20000ea4

08005550 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b082      	sub	sp, #8
 8005554:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005556:	f000 f96f 	bl	8005838 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800555a:	4b15      	ldr	r3, [pc, #84]	@ (80055b0 <prvCheckForValidListAndQueue+0x60>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d120      	bne.n	80055a4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005562:	4814      	ldr	r0, [pc, #80]	@ (80055b4 <prvCheckForValidListAndQueue+0x64>)
 8005564:	f7fd fff2 	bl	800354c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005568:	4813      	ldr	r0, [pc, #76]	@ (80055b8 <prvCheckForValidListAndQueue+0x68>)
 800556a:	f7fd ffef 	bl	800354c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800556e:	4b13      	ldr	r3, [pc, #76]	@ (80055bc <prvCheckForValidListAndQueue+0x6c>)
 8005570:	4a10      	ldr	r2, [pc, #64]	@ (80055b4 <prvCheckForValidListAndQueue+0x64>)
 8005572:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005574:	4b12      	ldr	r3, [pc, #72]	@ (80055c0 <prvCheckForValidListAndQueue+0x70>)
 8005576:	4a10      	ldr	r2, [pc, #64]	@ (80055b8 <prvCheckForValidListAndQueue+0x68>)
 8005578:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800557a:	2300      	movs	r3, #0
 800557c:	9300      	str	r3, [sp, #0]
 800557e:	4b11      	ldr	r3, [pc, #68]	@ (80055c4 <prvCheckForValidListAndQueue+0x74>)
 8005580:	4a11      	ldr	r2, [pc, #68]	@ (80055c8 <prvCheckForValidListAndQueue+0x78>)
 8005582:	2110      	movs	r1, #16
 8005584:	200a      	movs	r0, #10
 8005586:	f7fe f8ff 	bl	8003788 <xQueueGenericCreateStatic>
 800558a:	4603      	mov	r3, r0
 800558c:	4a08      	ldr	r2, [pc, #32]	@ (80055b0 <prvCheckForValidListAndQueue+0x60>)
 800558e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005590:	4b07      	ldr	r3, [pc, #28]	@ (80055b0 <prvCheckForValidListAndQueue+0x60>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d005      	beq.n	80055a4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005598:	4b05      	ldr	r3, [pc, #20]	@ (80055b0 <prvCheckForValidListAndQueue+0x60>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	490b      	ldr	r1, [pc, #44]	@ (80055cc <prvCheckForValidListAndQueue+0x7c>)
 800559e:	4618      	mov	r0, r3
 80055a0:	f7fe fd24 	bl	8003fec <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80055a4:	f000 f97a 	bl	800589c <vPortExitCritical>
}
 80055a8:	bf00      	nop
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}
 80055ae:	bf00      	nop
 80055b0:	20000ea8 	.word	0x20000ea8
 80055b4:	20000e78 	.word	0x20000e78
 80055b8:	20000e8c 	.word	0x20000e8c
 80055bc:	20000ea0 	.word	0x20000ea0
 80055c0:	20000ea4 	.word	0x20000ea4
 80055c4:	20000f54 	.word	0x20000f54
 80055c8:	20000eb4 	.word	0x20000eb4
 80055cc:	08006210 	.word	0x08006210

080055d0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80055d0:	b480      	push	{r7}
 80055d2:	b085      	sub	sp, #20
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	60f8      	str	r0, [r7, #12]
 80055d8:	60b9      	str	r1, [r7, #8]
 80055da:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	3b04      	subs	r3, #4
 80055e0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80055e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	3b04      	subs	r3, #4
 80055ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	f023 0201 	bic.w	r2, r3, #1
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	3b04      	subs	r3, #4
 80055fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005600:	4a0c      	ldr	r2, [pc, #48]	@ (8005634 <pxPortInitialiseStack+0x64>)
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	3b14      	subs	r3, #20
 800560a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800560c:	687a      	ldr	r2, [r7, #4]
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	3b04      	subs	r3, #4
 8005616:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	f06f 0202 	mvn.w	r2, #2
 800561e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	3b20      	subs	r3, #32
 8005624:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005626:	68fb      	ldr	r3, [r7, #12]
}
 8005628:	4618      	mov	r0, r3
 800562a:	3714      	adds	r7, #20
 800562c:	46bd      	mov	sp, r7
 800562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005632:	4770      	bx	lr
 8005634:	08005639 	.word	0x08005639

08005638 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005638:	b480      	push	{r7}
 800563a:	b085      	sub	sp, #20
 800563c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800563e:	2300      	movs	r3, #0
 8005640:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005642:	4b13      	ldr	r3, [pc, #76]	@ (8005690 <prvTaskExitError+0x58>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f1b3 3fff 	cmp.w	r3, #4294967295
 800564a:	d00b      	beq.n	8005664 <prvTaskExitError+0x2c>
	__asm volatile
 800564c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005650:	f383 8811 	msr	BASEPRI, r3
 8005654:	f3bf 8f6f 	isb	sy
 8005658:	f3bf 8f4f 	dsb	sy
 800565c:	60fb      	str	r3, [r7, #12]
}
 800565e:	bf00      	nop
 8005660:	bf00      	nop
 8005662:	e7fd      	b.n	8005660 <prvTaskExitError+0x28>
	__asm volatile
 8005664:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005668:	f383 8811 	msr	BASEPRI, r3
 800566c:	f3bf 8f6f 	isb	sy
 8005670:	f3bf 8f4f 	dsb	sy
 8005674:	60bb      	str	r3, [r7, #8]
}
 8005676:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005678:	bf00      	nop
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d0fc      	beq.n	800567a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005680:	bf00      	nop
 8005682:	bf00      	nop
 8005684:	3714      	adds	r7, #20
 8005686:	46bd      	mov	sp, r7
 8005688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568c:	4770      	bx	lr
 800568e:	bf00      	nop
 8005690:	2000000c 	.word	0x2000000c
	...

080056a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80056a0:	4b07      	ldr	r3, [pc, #28]	@ (80056c0 <pxCurrentTCBConst2>)
 80056a2:	6819      	ldr	r1, [r3, #0]
 80056a4:	6808      	ldr	r0, [r1, #0]
 80056a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056aa:	f380 8809 	msr	PSP, r0
 80056ae:	f3bf 8f6f 	isb	sy
 80056b2:	f04f 0000 	mov.w	r0, #0
 80056b6:	f380 8811 	msr	BASEPRI, r0
 80056ba:	4770      	bx	lr
 80056bc:	f3af 8000 	nop.w

080056c0 <pxCurrentTCBConst2>:
 80056c0:	20000978 	.word	0x20000978
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80056c4:	bf00      	nop
 80056c6:	bf00      	nop

080056c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80056c8:	4808      	ldr	r0, [pc, #32]	@ (80056ec <prvPortStartFirstTask+0x24>)
 80056ca:	6800      	ldr	r0, [r0, #0]
 80056cc:	6800      	ldr	r0, [r0, #0]
 80056ce:	f380 8808 	msr	MSP, r0
 80056d2:	f04f 0000 	mov.w	r0, #0
 80056d6:	f380 8814 	msr	CONTROL, r0
 80056da:	b662      	cpsie	i
 80056dc:	b661      	cpsie	f
 80056de:	f3bf 8f4f 	dsb	sy
 80056e2:	f3bf 8f6f 	isb	sy
 80056e6:	df00      	svc	0
 80056e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80056ea:	bf00      	nop
 80056ec:	e000ed08 	.word	0xe000ed08

080056f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b086      	sub	sp, #24
 80056f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80056f6:	4b47      	ldr	r3, [pc, #284]	@ (8005814 <xPortStartScheduler+0x124>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a47      	ldr	r2, [pc, #284]	@ (8005818 <xPortStartScheduler+0x128>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d10b      	bne.n	8005718 <xPortStartScheduler+0x28>
	__asm volatile
 8005700:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005704:	f383 8811 	msr	BASEPRI, r3
 8005708:	f3bf 8f6f 	isb	sy
 800570c:	f3bf 8f4f 	dsb	sy
 8005710:	613b      	str	r3, [r7, #16]
}
 8005712:	bf00      	nop
 8005714:	bf00      	nop
 8005716:	e7fd      	b.n	8005714 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005718:	4b3e      	ldr	r3, [pc, #248]	@ (8005814 <xPortStartScheduler+0x124>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a3f      	ldr	r2, [pc, #252]	@ (800581c <xPortStartScheduler+0x12c>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d10b      	bne.n	800573a <xPortStartScheduler+0x4a>
	__asm volatile
 8005722:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005726:	f383 8811 	msr	BASEPRI, r3
 800572a:	f3bf 8f6f 	isb	sy
 800572e:	f3bf 8f4f 	dsb	sy
 8005732:	60fb      	str	r3, [r7, #12]
}
 8005734:	bf00      	nop
 8005736:	bf00      	nop
 8005738:	e7fd      	b.n	8005736 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800573a:	4b39      	ldr	r3, [pc, #228]	@ (8005820 <xPortStartScheduler+0x130>)
 800573c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	781b      	ldrb	r3, [r3, #0]
 8005742:	b2db      	uxtb	r3, r3
 8005744:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	22ff      	movs	r2, #255	@ 0xff
 800574a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	781b      	ldrb	r3, [r3, #0]
 8005750:	b2db      	uxtb	r3, r3
 8005752:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005754:	78fb      	ldrb	r3, [r7, #3]
 8005756:	b2db      	uxtb	r3, r3
 8005758:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800575c:	b2da      	uxtb	r2, r3
 800575e:	4b31      	ldr	r3, [pc, #196]	@ (8005824 <xPortStartScheduler+0x134>)
 8005760:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005762:	4b31      	ldr	r3, [pc, #196]	@ (8005828 <xPortStartScheduler+0x138>)
 8005764:	2207      	movs	r2, #7
 8005766:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005768:	e009      	b.n	800577e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800576a:	4b2f      	ldr	r3, [pc, #188]	@ (8005828 <xPortStartScheduler+0x138>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	3b01      	subs	r3, #1
 8005770:	4a2d      	ldr	r2, [pc, #180]	@ (8005828 <xPortStartScheduler+0x138>)
 8005772:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005774:	78fb      	ldrb	r3, [r7, #3]
 8005776:	b2db      	uxtb	r3, r3
 8005778:	005b      	lsls	r3, r3, #1
 800577a:	b2db      	uxtb	r3, r3
 800577c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800577e:	78fb      	ldrb	r3, [r7, #3]
 8005780:	b2db      	uxtb	r3, r3
 8005782:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005786:	2b80      	cmp	r3, #128	@ 0x80
 8005788:	d0ef      	beq.n	800576a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800578a:	4b27      	ldr	r3, [pc, #156]	@ (8005828 <xPortStartScheduler+0x138>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f1c3 0307 	rsb	r3, r3, #7
 8005792:	2b04      	cmp	r3, #4
 8005794:	d00b      	beq.n	80057ae <xPortStartScheduler+0xbe>
	__asm volatile
 8005796:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800579a:	f383 8811 	msr	BASEPRI, r3
 800579e:	f3bf 8f6f 	isb	sy
 80057a2:	f3bf 8f4f 	dsb	sy
 80057a6:	60bb      	str	r3, [r7, #8]
}
 80057a8:	bf00      	nop
 80057aa:	bf00      	nop
 80057ac:	e7fd      	b.n	80057aa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80057ae:	4b1e      	ldr	r3, [pc, #120]	@ (8005828 <xPortStartScheduler+0x138>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	021b      	lsls	r3, r3, #8
 80057b4:	4a1c      	ldr	r2, [pc, #112]	@ (8005828 <xPortStartScheduler+0x138>)
 80057b6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80057b8:	4b1b      	ldr	r3, [pc, #108]	@ (8005828 <xPortStartScheduler+0x138>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80057c0:	4a19      	ldr	r2, [pc, #100]	@ (8005828 <xPortStartScheduler+0x138>)
 80057c2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	b2da      	uxtb	r2, r3
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80057cc:	4b17      	ldr	r3, [pc, #92]	@ (800582c <xPortStartScheduler+0x13c>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a16      	ldr	r2, [pc, #88]	@ (800582c <xPortStartScheduler+0x13c>)
 80057d2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80057d6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80057d8:	4b14      	ldr	r3, [pc, #80]	@ (800582c <xPortStartScheduler+0x13c>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a13      	ldr	r2, [pc, #76]	@ (800582c <xPortStartScheduler+0x13c>)
 80057de:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80057e2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80057e4:	f000 f8da 	bl	800599c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80057e8:	4b11      	ldr	r3, [pc, #68]	@ (8005830 <xPortStartScheduler+0x140>)
 80057ea:	2200      	movs	r2, #0
 80057ec:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80057ee:	f000 f8f9 	bl	80059e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80057f2:	4b10      	ldr	r3, [pc, #64]	@ (8005834 <xPortStartScheduler+0x144>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4a0f      	ldr	r2, [pc, #60]	@ (8005834 <xPortStartScheduler+0x144>)
 80057f8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80057fc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80057fe:	f7ff ff63 	bl	80056c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005802:	f7ff f82b 	bl	800485c <vTaskSwitchContext>
	prvTaskExitError();
 8005806:	f7ff ff17 	bl	8005638 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800580a:	2300      	movs	r3, #0
}
 800580c:	4618      	mov	r0, r3
 800580e:	3718      	adds	r7, #24
 8005810:	46bd      	mov	sp, r7
 8005812:	bd80      	pop	{r7, pc}
 8005814:	e000ed00 	.word	0xe000ed00
 8005818:	410fc271 	.word	0x410fc271
 800581c:	410fc270 	.word	0x410fc270
 8005820:	e000e400 	.word	0xe000e400
 8005824:	20000fa4 	.word	0x20000fa4
 8005828:	20000fa8 	.word	0x20000fa8
 800582c:	e000ed20 	.word	0xe000ed20
 8005830:	2000000c 	.word	0x2000000c
 8005834:	e000ef34 	.word	0xe000ef34

08005838 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005838:	b480      	push	{r7}
 800583a:	b083      	sub	sp, #12
 800583c:	af00      	add	r7, sp, #0
	__asm volatile
 800583e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005842:	f383 8811 	msr	BASEPRI, r3
 8005846:	f3bf 8f6f 	isb	sy
 800584a:	f3bf 8f4f 	dsb	sy
 800584e:	607b      	str	r3, [r7, #4]
}
 8005850:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005852:	4b10      	ldr	r3, [pc, #64]	@ (8005894 <vPortEnterCritical+0x5c>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	3301      	adds	r3, #1
 8005858:	4a0e      	ldr	r2, [pc, #56]	@ (8005894 <vPortEnterCritical+0x5c>)
 800585a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800585c:	4b0d      	ldr	r3, [pc, #52]	@ (8005894 <vPortEnterCritical+0x5c>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	2b01      	cmp	r3, #1
 8005862:	d110      	bne.n	8005886 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005864:	4b0c      	ldr	r3, [pc, #48]	@ (8005898 <vPortEnterCritical+0x60>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	b2db      	uxtb	r3, r3
 800586a:	2b00      	cmp	r3, #0
 800586c:	d00b      	beq.n	8005886 <vPortEnterCritical+0x4e>
	__asm volatile
 800586e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005872:	f383 8811 	msr	BASEPRI, r3
 8005876:	f3bf 8f6f 	isb	sy
 800587a:	f3bf 8f4f 	dsb	sy
 800587e:	603b      	str	r3, [r7, #0]
}
 8005880:	bf00      	nop
 8005882:	bf00      	nop
 8005884:	e7fd      	b.n	8005882 <vPortEnterCritical+0x4a>
	}
}
 8005886:	bf00      	nop
 8005888:	370c      	adds	r7, #12
 800588a:	46bd      	mov	sp, r7
 800588c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005890:	4770      	bx	lr
 8005892:	bf00      	nop
 8005894:	2000000c 	.word	0x2000000c
 8005898:	e000ed04 	.word	0xe000ed04

0800589c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800589c:	b480      	push	{r7}
 800589e:	b083      	sub	sp, #12
 80058a0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80058a2:	4b12      	ldr	r3, [pc, #72]	@ (80058ec <vPortExitCritical+0x50>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d10b      	bne.n	80058c2 <vPortExitCritical+0x26>
	__asm volatile
 80058aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058ae:	f383 8811 	msr	BASEPRI, r3
 80058b2:	f3bf 8f6f 	isb	sy
 80058b6:	f3bf 8f4f 	dsb	sy
 80058ba:	607b      	str	r3, [r7, #4]
}
 80058bc:	bf00      	nop
 80058be:	bf00      	nop
 80058c0:	e7fd      	b.n	80058be <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80058c2:	4b0a      	ldr	r3, [pc, #40]	@ (80058ec <vPortExitCritical+0x50>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	3b01      	subs	r3, #1
 80058c8:	4a08      	ldr	r2, [pc, #32]	@ (80058ec <vPortExitCritical+0x50>)
 80058ca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80058cc:	4b07      	ldr	r3, [pc, #28]	@ (80058ec <vPortExitCritical+0x50>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d105      	bne.n	80058e0 <vPortExitCritical+0x44>
 80058d4:	2300      	movs	r3, #0
 80058d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	f383 8811 	msr	BASEPRI, r3
}
 80058de:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80058e0:	bf00      	nop
 80058e2:	370c      	adds	r7, #12
 80058e4:	46bd      	mov	sp, r7
 80058e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ea:	4770      	bx	lr
 80058ec:	2000000c 	.word	0x2000000c

080058f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80058f0:	f3ef 8009 	mrs	r0, PSP
 80058f4:	f3bf 8f6f 	isb	sy
 80058f8:	4b15      	ldr	r3, [pc, #84]	@ (8005950 <pxCurrentTCBConst>)
 80058fa:	681a      	ldr	r2, [r3, #0]
 80058fc:	f01e 0f10 	tst.w	lr, #16
 8005900:	bf08      	it	eq
 8005902:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005906:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800590a:	6010      	str	r0, [r2, #0]
 800590c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005910:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005914:	f380 8811 	msr	BASEPRI, r0
 8005918:	f3bf 8f4f 	dsb	sy
 800591c:	f3bf 8f6f 	isb	sy
 8005920:	f7fe ff9c 	bl	800485c <vTaskSwitchContext>
 8005924:	f04f 0000 	mov.w	r0, #0
 8005928:	f380 8811 	msr	BASEPRI, r0
 800592c:	bc09      	pop	{r0, r3}
 800592e:	6819      	ldr	r1, [r3, #0]
 8005930:	6808      	ldr	r0, [r1, #0]
 8005932:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005936:	f01e 0f10 	tst.w	lr, #16
 800593a:	bf08      	it	eq
 800593c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005940:	f380 8809 	msr	PSP, r0
 8005944:	f3bf 8f6f 	isb	sy
 8005948:	4770      	bx	lr
 800594a:	bf00      	nop
 800594c:	f3af 8000 	nop.w

08005950 <pxCurrentTCBConst>:
 8005950:	20000978 	.word	0x20000978
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005954:	bf00      	nop
 8005956:	bf00      	nop

08005958 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b082      	sub	sp, #8
 800595c:	af00      	add	r7, sp, #0
	__asm volatile
 800595e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005962:	f383 8811 	msr	BASEPRI, r3
 8005966:	f3bf 8f6f 	isb	sy
 800596a:	f3bf 8f4f 	dsb	sy
 800596e:	607b      	str	r3, [r7, #4]
}
 8005970:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005972:	f7fe feb9 	bl	80046e8 <xTaskIncrementTick>
 8005976:	4603      	mov	r3, r0
 8005978:	2b00      	cmp	r3, #0
 800597a:	d003      	beq.n	8005984 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800597c:	4b06      	ldr	r3, [pc, #24]	@ (8005998 <xPortSysTickHandler+0x40>)
 800597e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005982:	601a      	str	r2, [r3, #0]
 8005984:	2300      	movs	r3, #0
 8005986:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	f383 8811 	msr	BASEPRI, r3
}
 800598e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005990:	bf00      	nop
 8005992:	3708      	adds	r7, #8
 8005994:	46bd      	mov	sp, r7
 8005996:	bd80      	pop	{r7, pc}
 8005998:	e000ed04 	.word	0xe000ed04

0800599c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800599c:	b480      	push	{r7}
 800599e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80059a0:	4b0b      	ldr	r3, [pc, #44]	@ (80059d0 <vPortSetupTimerInterrupt+0x34>)
 80059a2:	2200      	movs	r2, #0
 80059a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80059a6:	4b0b      	ldr	r3, [pc, #44]	@ (80059d4 <vPortSetupTimerInterrupt+0x38>)
 80059a8:	2200      	movs	r2, #0
 80059aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80059ac:	4b0a      	ldr	r3, [pc, #40]	@ (80059d8 <vPortSetupTimerInterrupt+0x3c>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a0a      	ldr	r2, [pc, #40]	@ (80059dc <vPortSetupTimerInterrupt+0x40>)
 80059b2:	fba2 2303 	umull	r2, r3, r2, r3
 80059b6:	099b      	lsrs	r3, r3, #6
 80059b8:	4a09      	ldr	r2, [pc, #36]	@ (80059e0 <vPortSetupTimerInterrupt+0x44>)
 80059ba:	3b01      	subs	r3, #1
 80059bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80059be:	4b04      	ldr	r3, [pc, #16]	@ (80059d0 <vPortSetupTimerInterrupt+0x34>)
 80059c0:	2207      	movs	r2, #7
 80059c2:	601a      	str	r2, [r3, #0]
}
 80059c4:	bf00      	nop
 80059c6:	46bd      	mov	sp, r7
 80059c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059cc:	4770      	bx	lr
 80059ce:	bf00      	nop
 80059d0:	e000e010 	.word	0xe000e010
 80059d4:	e000e018 	.word	0xe000e018
 80059d8:	20000000 	.word	0x20000000
 80059dc:	10624dd3 	.word	0x10624dd3
 80059e0:	e000e014 	.word	0xe000e014

080059e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80059e4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80059f4 <vPortEnableVFP+0x10>
 80059e8:	6801      	ldr	r1, [r0, #0]
 80059ea:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80059ee:	6001      	str	r1, [r0, #0]
 80059f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80059f2:	bf00      	nop
 80059f4:	e000ed88 	.word	0xe000ed88

080059f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80059f8:	b480      	push	{r7}
 80059fa:	b085      	sub	sp, #20
 80059fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80059fe:	f3ef 8305 	mrs	r3, IPSR
 8005a02:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	2b0f      	cmp	r3, #15
 8005a08:	d915      	bls.n	8005a36 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005a0a:	4a18      	ldr	r2, [pc, #96]	@ (8005a6c <vPortValidateInterruptPriority+0x74>)
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	4413      	add	r3, r2
 8005a10:	781b      	ldrb	r3, [r3, #0]
 8005a12:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005a14:	4b16      	ldr	r3, [pc, #88]	@ (8005a70 <vPortValidateInterruptPriority+0x78>)
 8005a16:	781b      	ldrb	r3, [r3, #0]
 8005a18:	7afa      	ldrb	r2, [r7, #11]
 8005a1a:	429a      	cmp	r2, r3
 8005a1c:	d20b      	bcs.n	8005a36 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8005a1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a22:	f383 8811 	msr	BASEPRI, r3
 8005a26:	f3bf 8f6f 	isb	sy
 8005a2a:	f3bf 8f4f 	dsb	sy
 8005a2e:	607b      	str	r3, [r7, #4]
}
 8005a30:	bf00      	nop
 8005a32:	bf00      	nop
 8005a34:	e7fd      	b.n	8005a32 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005a36:	4b0f      	ldr	r3, [pc, #60]	@ (8005a74 <vPortValidateInterruptPriority+0x7c>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005a3e:	4b0e      	ldr	r3, [pc, #56]	@ (8005a78 <vPortValidateInterruptPriority+0x80>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	429a      	cmp	r2, r3
 8005a44:	d90b      	bls.n	8005a5e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8005a46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a4a:	f383 8811 	msr	BASEPRI, r3
 8005a4e:	f3bf 8f6f 	isb	sy
 8005a52:	f3bf 8f4f 	dsb	sy
 8005a56:	603b      	str	r3, [r7, #0]
}
 8005a58:	bf00      	nop
 8005a5a:	bf00      	nop
 8005a5c:	e7fd      	b.n	8005a5a <vPortValidateInterruptPriority+0x62>
	}
 8005a5e:	bf00      	nop
 8005a60:	3714      	adds	r7, #20
 8005a62:	46bd      	mov	sp, r7
 8005a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a68:	4770      	bx	lr
 8005a6a:	bf00      	nop
 8005a6c:	e000e3f0 	.word	0xe000e3f0
 8005a70:	20000fa4 	.word	0x20000fa4
 8005a74:	e000ed0c 	.word	0xe000ed0c
 8005a78:	20000fa8 	.word	0x20000fa8

08005a7c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b08a      	sub	sp, #40	@ 0x28
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005a84:	2300      	movs	r3, #0
 8005a86:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005a88:	f7fe fd72 	bl	8004570 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005a8c:	4b5c      	ldr	r3, [pc, #368]	@ (8005c00 <pvPortMalloc+0x184>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d101      	bne.n	8005a98 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005a94:	f000 f924 	bl	8005ce0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005a98:	4b5a      	ldr	r3, [pc, #360]	@ (8005c04 <pvPortMalloc+0x188>)
 8005a9a:	681a      	ldr	r2, [r3, #0]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	4013      	ands	r3, r2
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	f040 8095 	bne.w	8005bd0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d01e      	beq.n	8005aea <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005aac:	2208      	movs	r2, #8
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	4413      	add	r3, r2
 8005ab2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	f003 0307 	and.w	r3, r3, #7
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d015      	beq.n	8005aea <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	f023 0307 	bic.w	r3, r3, #7
 8005ac4:	3308      	adds	r3, #8
 8005ac6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	f003 0307 	and.w	r3, r3, #7
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d00b      	beq.n	8005aea <pvPortMalloc+0x6e>
	__asm volatile
 8005ad2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ad6:	f383 8811 	msr	BASEPRI, r3
 8005ada:	f3bf 8f6f 	isb	sy
 8005ade:	f3bf 8f4f 	dsb	sy
 8005ae2:	617b      	str	r3, [r7, #20]
}
 8005ae4:	bf00      	nop
 8005ae6:	bf00      	nop
 8005ae8:	e7fd      	b.n	8005ae6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d06f      	beq.n	8005bd0 <pvPortMalloc+0x154>
 8005af0:	4b45      	ldr	r3, [pc, #276]	@ (8005c08 <pvPortMalloc+0x18c>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	687a      	ldr	r2, [r7, #4]
 8005af6:	429a      	cmp	r2, r3
 8005af8:	d86a      	bhi.n	8005bd0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005afa:	4b44      	ldr	r3, [pc, #272]	@ (8005c0c <pvPortMalloc+0x190>)
 8005afc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005afe:	4b43      	ldr	r3, [pc, #268]	@ (8005c0c <pvPortMalloc+0x190>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005b04:	e004      	b.n	8005b10 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b08:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005b10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b12:	685b      	ldr	r3, [r3, #4]
 8005b14:	687a      	ldr	r2, [r7, #4]
 8005b16:	429a      	cmp	r2, r3
 8005b18:	d903      	bls.n	8005b22 <pvPortMalloc+0xa6>
 8005b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d1f1      	bne.n	8005b06 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005b22:	4b37      	ldr	r3, [pc, #220]	@ (8005c00 <pvPortMalloc+0x184>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b28:	429a      	cmp	r2, r3
 8005b2a:	d051      	beq.n	8005bd0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005b2c:	6a3b      	ldr	r3, [r7, #32]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	2208      	movs	r2, #8
 8005b32:	4413      	add	r3, r2
 8005b34:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b38:	681a      	ldr	r2, [r3, #0]
 8005b3a:	6a3b      	ldr	r3, [r7, #32]
 8005b3c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b40:	685a      	ldr	r2, [r3, #4]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	1ad2      	subs	r2, r2, r3
 8005b46:	2308      	movs	r3, #8
 8005b48:	005b      	lsls	r3, r3, #1
 8005b4a:	429a      	cmp	r2, r3
 8005b4c:	d920      	bls.n	8005b90 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005b4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	4413      	add	r3, r2
 8005b54:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005b56:	69bb      	ldr	r3, [r7, #24]
 8005b58:	f003 0307 	and.w	r3, r3, #7
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d00b      	beq.n	8005b78 <pvPortMalloc+0xfc>
	__asm volatile
 8005b60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b64:	f383 8811 	msr	BASEPRI, r3
 8005b68:	f3bf 8f6f 	isb	sy
 8005b6c:	f3bf 8f4f 	dsb	sy
 8005b70:	613b      	str	r3, [r7, #16]
}
 8005b72:	bf00      	nop
 8005b74:	bf00      	nop
 8005b76:	e7fd      	b.n	8005b74 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005b78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b7a:	685a      	ldr	r2, [r3, #4]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	1ad2      	subs	r2, r2, r3
 8005b80:	69bb      	ldr	r3, [r7, #24]
 8005b82:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005b84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b86:	687a      	ldr	r2, [r7, #4]
 8005b88:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005b8a:	69b8      	ldr	r0, [r7, #24]
 8005b8c:	f000 f90a 	bl	8005da4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005b90:	4b1d      	ldr	r3, [pc, #116]	@ (8005c08 <pvPortMalloc+0x18c>)
 8005b92:	681a      	ldr	r2, [r3, #0]
 8005b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	1ad3      	subs	r3, r2, r3
 8005b9a:	4a1b      	ldr	r2, [pc, #108]	@ (8005c08 <pvPortMalloc+0x18c>)
 8005b9c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005b9e:	4b1a      	ldr	r3, [pc, #104]	@ (8005c08 <pvPortMalloc+0x18c>)
 8005ba0:	681a      	ldr	r2, [r3, #0]
 8005ba2:	4b1b      	ldr	r3, [pc, #108]	@ (8005c10 <pvPortMalloc+0x194>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	429a      	cmp	r2, r3
 8005ba8:	d203      	bcs.n	8005bb2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005baa:	4b17      	ldr	r3, [pc, #92]	@ (8005c08 <pvPortMalloc+0x18c>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4a18      	ldr	r2, [pc, #96]	@ (8005c10 <pvPortMalloc+0x194>)
 8005bb0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bb4:	685a      	ldr	r2, [r3, #4]
 8005bb6:	4b13      	ldr	r3, [pc, #76]	@ (8005c04 <pvPortMalloc+0x188>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	431a      	orrs	r2, r3
 8005bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bbe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005bc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005bc6:	4b13      	ldr	r3, [pc, #76]	@ (8005c14 <pvPortMalloc+0x198>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	3301      	adds	r3, #1
 8005bcc:	4a11      	ldr	r2, [pc, #68]	@ (8005c14 <pvPortMalloc+0x198>)
 8005bce:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005bd0:	f7fe fcdc 	bl	800458c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005bd4:	69fb      	ldr	r3, [r7, #28]
 8005bd6:	f003 0307 	and.w	r3, r3, #7
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d00b      	beq.n	8005bf6 <pvPortMalloc+0x17a>
	__asm volatile
 8005bde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005be2:	f383 8811 	msr	BASEPRI, r3
 8005be6:	f3bf 8f6f 	isb	sy
 8005bea:	f3bf 8f4f 	dsb	sy
 8005bee:	60fb      	str	r3, [r7, #12]
}
 8005bf0:	bf00      	nop
 8005bf2:	bf00      	nop
 8005bf4:	e7fd      	b.n	8005bf2 <pvPortMalloc+0x176>
	return pvReturn;
 8005bf6:	69fb      	ldr	r3, [r7, #28]
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	3728      	adds	r7, #40	@ 0x28
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bd80      	pop	{r7, pc}
 8005c00:	20004bb4 	.word	0x20004bb4
 8005c04:	20004bc8 	.word	0x20004bc8
 8005c08:	20004bb8 	.word	0x20004bb8
 8005c0c:	20004bac 	.word	0x20004bac
 8005c10:	20004bbc 	.word	0x20004bbc
 8005c14:	20004bc0 	.word	0x20004bc0

08005c18 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b086      	sub	sp, #24
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d04f      	beq.n	8005cca <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005c2a:	2308      	movs	r3, #8
 8005c2c:	425b      	negs	r3, r3
 8005c2e:	697a      	ldr	r2, [r7, #20]
 8005c30:	4413      	add	r3, r2
 8005c32:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	685a      	ldr	r2, [r3, #4]
 8005c3c:	4b25      	ldr	r3, [pc, #148]	@ (8005cd4 <vPortFree+0xbc>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4013      	ands	r3, r2
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d10b      	bne.n	8005c5e <vPortFree+0x46>
	__asm volatile
 8005c46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c4a:	f383 8811 	msr	BASEPRI, r3
 8005c4e:	f3bf 8f6f 	isb	sy
 8005c52:	f3bf 8f4f 	dsb	sy
 8005c56:	60fb      	str	r3, [r7, #12]
}
 8005c58:	bf00      	nop
 8005c5a:	bf00      	nop
 8005c5c:	e7fd      	b.n	8005c5a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d00b      	beq.n	8005c7e <vPortFree+0x66>
	__asm volatile
 8005c66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c6a:	f383 8811 	msr	BASEPRI, r3
 8005c6e:	f3bf 8f6f 	isb	sy
 8005c72:	f3bf 8f4f 	dsb	sy
 8005c76:	60bb      	str	r3, [r7, #8]
}
 8005c78:	bf00      	nop
 8005c7a:	bf00      	nop
 8005c7c:	e7fd      	b.n	8005c7a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	685a      	ldr	r2, [r3, #4]
 8005c82:	4b14      	ldr	r3, [pc, #80]	@ (8005cd4 <vPortFree+0xbc>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4013      	ands	r3, r2
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d01e      	beq.n	8005cca <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d11a      	bne.n	8005cca <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	685a      	ldr	r2, [r3, #4]
 8005c98:	4b0e      	ldr	r3, [pc, #56]	@ (8005cd4 <vPortFree+0xbc>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	43db      	mvns	r3, r3
 8005c9e:	401a      	ands	r2, r3
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005ca4:	f7fe fc64 	bl	8004570 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005ca8:	693b      	ldr	r3, [r7, #16]
 8005caa:	685a      	ldr	r2, [r3, #4]
 8005cac:	4b0a      	ldr	r3, [pc, #40]	@ (8005cd8 <vPortFree+0xc0>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4413      	add	r3, r2
 8005cb2:	4a09      	ldr	r2, [pc, #36]	@ (8005cd8 <vPortFree+0xc0>)
 8005cb4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005cb6:	6938      	ldr	r0, [r7, #16]
 8005cb8:	f000 f874 	bl	8005da4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005cbc:	4b07      	ldr	r3, [pc, #28]	@ (8005cdc <vPortFree+0xc4>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	3301      	adds	r3, #1
 8005cc2:	4a06      	ldr	r2, [pc, #24]	@ (8005cdc <vPortFree+0xc4>)
 8005cc4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005cc6:	f7fe fc61 	bl	800458c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005cca:	bf00      	nop
 8005ccc:	3718      	adds	r7, #24
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bd80      	pop	{r7, pc}
 8005cd2:	bf00      	nop
 8005cd4:	20004bc8 	.word	0x20004bc8
 8005cd8:	20004bb8 	.word	0x20004bb8
 8005cdc:	20004bc4 	.word	0x20004bc4

08005ce0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b085      	sub	sp, #20
 8005ce4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005ce6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8005cea:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005cec:	4b27      	ldr	r3, [pc, #156]	@ (8005d8c <prvHeapInit+0xac>)
 8005cee:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	f003 0307 	and.w	r3, r3, #7
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d00c      	beq.n	8005d14 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	3307      	adds	r3, #7
 8005cfe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	f023 0307 	bic.w	r3, r3, #7
 8005d06:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005d08:	68ba      	ldr	r2, [r7, #8]
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	1ad3      	subs	r3, r2, r3
 8005d0e:	4a1f      	ldr	r2, [pc, #124]	@ (8005d8c <prvHeapInit+0xac>)
 8005d10:	4413      	add	r3, r2
 8005d12:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005d18:	4a1d      	ldr	r2, [pc, #116]	@ (8005d90 <prvHeapInit+0xb0>)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005d1e:	4b1c      	ldr	r3, [pc, #112]	@ (8005d90 <prvHeapInit+0xb0>)
 8005d20:	2200      	movs	r2, #0
 8005d22:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	68ba      	ldr	r2, [r7, #8]
 8005d28:	4413      	add	r3, r2
 8005d2a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005d2c:	2208      	movs	r2, #8
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	1a9b      	subs	r3, r3, r2
 8005d32:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	f023 0307 	bic.w	r3, r3, #7
 8005d3a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	4a15      	ldr	r2, [pc, #84]	@ (8005d94 <prvHeapInit+0xb4>)
 8005d40:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005d42:	4b14      	ldr	r3, [pc, #80]	@ (8005d94 <prvHeapInit+0xb4>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	2200      	movs	r2, #0
 8005d48:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005d4a:	4b12      	ldr	r3, [pc, #72]	@ (8005d94 <prvHeapInit+0xb4>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	68fa      	ldr	r2, [r7, #12]
 8005d5a:	1ad2      	subs	r2, r2, r3
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005d60:	4b0c      	ldr	r3, [pc, #48]	@ (8005d94 <prvHeapInit+0xb4>)
 8005d62:	681a      	ldr	r2, [r3, #0]
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	4a0a      	ldr	r2, [pc, #40]	@ (8005d98 <prvHeapInit+0xb8>)
 8005d6e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	4a09      	ldr	r2, [pc, #36]	@ (8005d9c <prvHeapInit+0xbc>)
 8005d76:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005d78:	4b09      	ldr	r3, [pc, #36]	@ (8005da0 <prvHeapInit+0xc0>)
 8005d7a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005d7e:	601a      	str	r2, [r3, #0]
}
 8005d80:	bf00      	nop
 8005d82:	3714      	adds	r7, #20
 8005d84:	46bd      	mov	sp, r7
 8005d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8a:	4770      	bx	lr
 8005d8c:	20000fac 	.word	0x20000fac
 8005d90:	20004bac 	.word	0x20004bac
 8005d94:	20004bb4 	.word	0x20004bb4
 8005d98:	20004bbc 	.word	0x20004bbc
 8005d9c:	20004bb8 	.word	0x20004bb8
 8005da0:	20004bc8 	.word	0x20004bc8

08005da4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005da4:	b480      	push	{r7}
 8005da6:	b085      	sub	sp, #20
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005dac:	4b28      	ldr	r3, [pc, #160]	@ (8005e50 <prvInsertBlockIntoFreeList+0xac>)
 8005dae:	60fb      	str	r3, [r7, #12]
 8005db0:	e002      	b.n	8005db8 <prvInsertBlockIntoFreeList+0x14>
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	60fb      	str	r3, [r7, #12]
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	687a      	ldr	r2, [r7, #4]
 8005dbe:	429a      	cmp	r2, r3
 8005dc0:	d8f7      	bhi.n	8005db2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	68ba      	ldr	r2, [r7, #8]
 8005dcc:	4413      	add	r3, r2
 8005dce:	687a      	ldr	r2, [r7, #4]
 8005dd0:	429a      	cmp	r2, r3
 8005dd2:	d108      	bne.n	8005de6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	685a      	ldr	r2, [r3, #4]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	685b      	ldr	r3, [r3, #4]
 8005ddc:	441a      	add	r2, r3
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	685b      	ldr	r3, [r3, #4]
 8005dee:	68ba      	ldr	r2, [r7, #8]
 8005df0:	441a      	add	r2, r3
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	429a      	cmp	r2, r3
 8005df8:	d118      	bne.n	8005e2c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681a      	ldr	r2, [r3, #0]
 8005dfe:	4b15      	ldr	r3, [pc, #84]	@ (8005e54 <prvInsertBlockIntoFreeList+0xb0>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	429a      	cmp	r2, r3
 8005e04:	d00d      	beq.n	8005e22 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	685a      	ldr	r2, [r3, #4]
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	441a      	add	r2, r3
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	681a      	ldr	r2, [r3, #0]
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	601a      	str	r2, [r3, #0]
 8005e20:	e008      	b.n	8005e34 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005e22:	4b0c      	ldr	r3, [pc, #48]	@ (8005e54 <prvInsertBlockIntoFreeList+0xb0>)
 8005e24:	681a      	ldr	r2, [r3, #0]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	601a      	str	r2, [r3, #0]
 8005e2a:	e003      	b.n	8005e34 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681a      	ldr	r2, [r3, #0]
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005e34:	68fa      	ldr	r2, [r7, #12]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	429a      	cmp	r2, r3
 8005e3a:	d002      	beq.n	8005e42 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	687a      	ldr	r2, [r7, #4]
 8005e40:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005e42:	bf00      	nop
 8005e44:	3714      	adds	r7, #20
 8005e46:	46bd      	mov	sp, r7
 8005e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4c:	4770      	bx	lr
 8005e4e:	bf00      	nop
 8005e50:	20004bac 	.word	0x20004bac
 8005e54:	20004bb4 	.word	0x20004bb4

08005e58 <apInit>:
uint8_t current_floor;
extern uint8_t target_floor;
uint8_t temp[2];

// Initialization of app
void apInit() {
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b082      	sub	sp, #8
 8005e5c:	af00      	add	r7, sp, #0
	while(1) {
		uint8_t first_floor_sensor = HAL_GPIO_ReadPin(FIRST_FLOOR_SENSOR_PORT, GPIO_PIN_8);
 8005e5e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005e62:	480d      	ldr	r0, [pc, #52]	@ (8005e98 <apInit+0x40>)
 8005e64:	f7fb fd5a 	bl	800191c <HAL_GPIO_ReadPin>
 8005e68:	4603      	mov	r3, r0
 8005e6a:	71fb      	strb	r3, [r7, #7]

		if(first_floor_sensor) {
 8005e6c:	79fb      	ldrb	r3, [r7, #7]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d00a      	beq.n	8005e88 <apInit+0x30>
			// Turn off the step motor
			control_step_motor(0, 0);
 8005e72:	2100      	movs	r1, #0
 8005e74:	2000      	movs	r0, #0
 8005e76:	f000 f825 	bl	8005ec4 <control_step_motor>
			current_floor = 1;
 8005e7a:	4b08      	ldr	r3, [pc, #32]	@ (8005e9c <apInit+0x44>)
 8005e7c:	2201      	movs	r2, #1
 8005e7e:	701a      	strb	r2, [r3, #0]
			target_floor = 1;
 8005e80:	4b07      	ldr	r3, [pc, #28]	@ (8005ea0 <apInit+0x48>)
 8005e82:	2201      	movs	r2, #1
 8005e84:	701a      	strb	r2, [r3, #0]
			return;
 8005e86:	e004      	b.n	8005e92 <apInit+0x3a>
		}

		// Lift Down
		control_step_motor(0, 1);
 8005e88:	2101      	movs	r1, #1
 8005e8a:	2000      	movs	r0, #0
 8005e8c:	f000 f81a 	bl	8005ec4 <control_step_motor>
	while(1) {
 8005e90:	e7e5      	b.n	8005e5e <apInit+0x6>
	}
}
 8005e92:	3708      	adds	r7, #8
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bd80      	pop	{r7, pc}
 8005e98:	40020800 	.word	0x40020800
 8005e9c:	20004bcd 	.word	0x20004bcd
 8005ea0:	20000080 	.word	0x20000080

08005ea4 <apMain>:

// New Main Functions
void apMain() {
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(&huart1, receive_data, sizeof(receive_data));
 8005ea8:	2201      	movs	r2, #1
 8005eaa:	4904      	ldr	r1, [pc, #16]	@ (8005ebc <apMain+0x18>)
 8005eac:	4804      	ldr	r0, [pc, #16]	@ (8005ec0 <apMain+0x1c>)
 8005eae:	f7fc fcf5 	bl	800289c <HAL_UART_Receive_DMA>

    osKernelStart();
 8005eb2:	f7fd fa43 	bl	800333c <osKernelStart>
}
 8005eb6:	bf00      	nop
 8005eb8:	bd80      	pop	{r7, pc}
 8005eba:	bf00      	nop
 8005ebc:	20004bcc 	.word	0x20004bcc
 8005ec0:	200000d8 	.word	0x200000d8

08005ec4 <control_step_motor>:
 *  Created on: Sep 29, 2024
 *      Author: OMG
 */
#include "step_motor.h"

void control_step_motor(uint8_t up_down, uint8_t motor_enable) {
 8005ec4:	b5b0      	push	{r4, r5, r7, lr}
 8005ec6:	b08a      	sub	sp, #40	@ 0x28
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	4603      	mov	r3, r0
 8005ecc:	460a      	mov	r2, r1
 8005ece:	71fb      	strb	r3, [r7, #7]
 8005ed0:	4613      	mov	r3, r2
 8005ed2:	71bb      	strb	r3, [r7, #6]
	uint8_t board[8][4] = {
 8005ed4:	4b30      	ldr	r3, [pc, #192]	@ (8005f98 <control_step_motor+0xd4>)
 8005ed6:	f107 0408 	add.w	r4, r7, #8
 8005eda:	461d      	mov	r5, r3
 8005edc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005ede:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005ee0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8005ee4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	};

	static uint16_t delay_time = 1002;
	static int board_index = 0;

	if(motor_enable) {
 8005ee8:	79bb      	ldrb	r3, [r7, #6]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d050      	beq.n	8005f90 <control_step_motor+0xcc>
		switch(up_down) {
 8005eee:	79fb      	ldrb	r3, [r7, #7]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d027      	beq.n	8005f44 <control_step_motor+0x80>
 8005ef4:	2b01      	cmp	r3, #1
 8005ef6:	d14b      	bne.n	8005f90 <control_step_motor+0xcc>
		case 1 :
				for(board_index = 0; board_index <8; board_index++) {
 8005ef8:	4b28      	ldr	r3, [pc, #160]	@ (8005f9c <control_step_motor+0xd8>)
 8005efa:	2200      	movs	r2, #0
 8005efc:	601a      	str	r2, [r3, #0]
 8005efe:	e01c      	b.n	8005f3a <control_step_motor+0x76>
					enter_IN_value(board[board_index]);
 8005f00:	4b26      	ldr	r3, [pc, #152]	@ (8005f9c <control_step_motor+0xd8>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f107 0208 	add.w	r2, r7, #8
 8005f08:	009b      	lsls	r3, r3, #2
 8005f0a:	4413      	add	r3, r2
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	f000 f849 	bl	8005fa4 <enter_IN_value>
					HAL_Delay(delay_time);
 8005f12:	4b23      	ldr	r3, [pc, #140]	@ (8005fa0 <control_step_motor+0xdc>)
 8005f14:	881b      	ldrh	r3, [r3, #0]
 8005f16:	4618      	mov	r0, r3
 8005f18:	f7fa ff06 	bl	8000d28 <HAL_Delay>

					if(delay_time>2) delay_time-=50;
 8005f1c:	4b20      	ldr	r3, [pc, #128]	@ (8005fa0 <control_step_motor+0xdc>)
 8005f1e:	881b      	ldrh	r3, [r3, #0]
 8005f20:	2b02      	cmp	r3, #2
 8005f22:	d905      	bls.n	8005f30 <control_step_motor+0x6c>
 8005f24:	4b1e      	ldr	r3, [pc, #120]	@ (8005fa0 <control_step_motor+0xdc>)
 8005f26:	881b      	ldrh	r3, [r3, #0]
 8005f28:	3b32      	subs	r3, #50	@ 0x32
 8005f2a:	b29a      	uxth	r2, r3
 8005f2c:	4b1c      	ldr	r3, [pc, #112]	@ (8005fa0 <control_step_motor+0xdc>)
 8005f2e:	801a      	strh	r2, [r3, #0]
				for(board_index = 0; board_index <8; board_index++) {
 8005f30:	4b1a      	ldr	r3, [pc, #104]	@ (8005f9c <control_step_motor+0xd8>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	3301      	adds	r3, #1
 8005f36:	4a19      	ldr	r2, [pc, #100]	@ (8005f9c <control_step_motor+0xd8>)
 8005f38:	6013      	str	r3, [r2, #0]
 8005f3a:	4b18      	ldr	r3, [pc, #96]	@ (8005f9c <control_step_motor+0xd8>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	2b07      	cmp	r3, #7
 8005f40:	ddde      	ble.n	8005f00 <control_step_motor+0x3c>
				}
			break;
 8005f42:	e025      	b.n	8005f90 <control_step_motor+0xcc>
		case 0:
				for(board_index = 7; board_index >= 0; board_index--) {
 8005f44:	4b15      	ldr	r3, [pc, #84]	@ (8005f9c <control_step_motor+0xd8>)
 8005f46:	2207      	movs	r2, #7
 8005f48:	601a      	str	r2, [r3, #0]
 8005f4a:	e01c      	b.n	8005f86 <control_step_motor+0xc2>
					enter_IN_value(board[board_index]);
 8005f4c:	4b13      	ldr	r3, [pc, #76]	@ (8005f9c <control_step_motor+0xd8>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f107 0208 	add.w	r2, r7, #8
 8005f54:	009b      	lsls	r3, r3, #2
 8005f56:	4413      	add	r3, r2
 8005f58:	4618      	mov	r0, r3
 8005f5a:	f000 f823 	bl	8005fa4 <enter_IN_value>
					HAL_Delay(delay_time);
 8005f5e:	4b10      	ldr	r3, [pc, #64]	@ (8005fa0 <control_step_motor+0xdc>)
 8005f60:	881b      	ldrh	r3, [r3, #0]
 8005f62:	4618      	mov	r0, r3
 8005f64:	f7fa fee0 	bl	8000d28 <HAL_Delay>

					if(delay_time>2) delay_time-=50;
 8005f68:	4b0d      	ldr	r3, [pc, #52]	@ (8005fa0 <control_step_motor+0xdc>)
 8005f6a:	881b      	ldrh	r3, [r3, #0]
 8005f6c:	2b02      	cmp	r3, #2
 8005f6e:	d905      	bls.n	8005f7c <control_step_motor+0xb8>
 8005f70:	4b0b      	ldr	r3, [pc, #44]	@ (8005fa0 <control_step_motor+0xdc>)
 8005f72:	881b      	ldrh	r3, [r3, #0]
 8005f74:	3b32      	subs	r3, #50	@ 0x32
 8005f76:	b29a      	uxth	r2, r3
 8005f78:	4b09      	ldr	r3, [pc, #36]	@ (8005fa0 <control_step_motor+0xdc>)
 8005f7a:	801a      	strh	r2, [r3, #0]
				for(board_index = 7; board_index >= 0; board_index--) {
 8005f7c:	4b07      	ldr	r3, [pc, #28]	@ (8005f9c <control_step_motor+0xd8>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	3b01      	subs	r3, #1
 8005f82:	4a06      	ldr	r2, [pc, #24]	@ (8005f9c <control_step_motor+0xd8>)
 8005f84:	6013      	str	r3, [r2, #0]
 8005f86:	4b05      	ldr	r3, [pc, #20]	@ (8005f9c <control_step_motor+0xd8>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	dade      	bge.n	8005f4c <control_step_motor+0x88>
				}

			break;
 8005f8e:	bf00      	nop
		}
	}
}
 8005f90:	bf00      	nop
 8005f92:	3728      	adds	r7, #40	@ 0x28
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bdb0      	pop	{r4, r5, r7, pc}
 8005f98:	08006218 	.word	0x08006218
 8005f9c:	20004bd0 	.word	0x20004bd0
 8005fa0:	20000010 	.word	0x20000010

08005fa4 <enter_IN_value>:

void enter_IN_value (uint8_t* p_board) {
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b082      	sub	sp, #8
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(IN1_PORT, IN1_PIN, p_board[0]);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	781b      	ldrb	r3, [r3, #0]
 8005fb0:	461a      	mov	r2, r3
 8005fb2:	2120      	movs	r1, #32
 8005fb4:	480f      	ldr	r0, [pc, #60]	@ (8005ff4 <enter_IN_value+0x50>)
 8005fb6:	f7fb fcc9 	bl	800194c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN2_PORT, IN2_PIN, p_board[1]);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	3301      	adds	r3, #1
 8005fbe:	781b      	ldrb	r3, [r3, #0]
 8005fc0:	461a      	mov	r2, r3
 8005fc2:	2140      	movs	r1, #64	@ 0x40
 8005fc4:	480b      	ldr	r0, [pc, #44]	@ (8005ff4 <enter_IN_value+0x50>)
 8005fc6:	f7fb fcc1 	bl	800194c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN3_PORT, IN3_PIN, p_board[2]);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	3302      	adds	r3, #2
 8005fce:	781b      	ldrb	r3, [r3, #0]
 8005fd0:	461a      	mov	r2, r3
 8005fd2:	2180      	movs	r1, #128	@ 0x80
 8005fd4:	4807      	ldr	r0, [pc, #28]	@ (8005ff4 <enter_IN_value+0x50>)
 8005fd6:	f7fb fcb9 	bl	800194c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN4_PORT, IN4_PIN, p_board[3]);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	3303      	adds	r3, #3
 8005fde:	781b      	ldrb	r3, [r3, #0]
 8005fe0:	461a      	mov	r2, r3
 8005fe2:	2140      	movs	r1, #64	@ 0x40
 8005fe4:	4804      	ldr	r0, [pc, #16]	@ (8005ff8 <enter_IN_value+0x54>)
 8005fe6:	f7fb fcb1 	bl	800194c <HAL_GPIO_WritePin>
}
 8005fea:	bf00      	nop
 8005fec:	3708      	adds	r7, #8
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}
 8005ff2:	bf00      	nop
 8005ff4:	40020000 	.word	0x40020000
 8005ff8:	40020400 	.word	0x40020400

08005ffc <memset>:
 8005ffc:	4402      	add	r2, r0
 8005ffe:	4603      	mov	r3, r0
 8006000:	4293      	cmp	r3, r2
 8006002:	d100      	bne.n	8006006 <memset+0xa>
 8006004:	4770      	bx	lr
 8006006:	f803 1b01 	strb.w	r1, [r3], #1
 800600a:	e7f9      	b.n	8006000 <memset+0x4>

0800600c <_reclaim_reent>:
 800600c:	4b29      	ldr	r3, [pc, #164]	@ (80060b4 <_reclaim_reent+0xa8>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4283      	cmp	r3, r0
 8006012:	b570      	push	{r4, r5, r6, lr}
 8006014:	4604      	mov	r4, r0
 8006016:	d04b      	beq.n	80060b0 <_reclaim_reent+0xa4>
 8006018:	69c3      	ldr	r3, [r0, #28]
 800601a:	b1ab      	cbz	r3, 8006048 <_reclaim_reent+0x3c>
 800601c:	68db      	ldr	r3, [r3, #12]
 800601e:	b16b      	cbz	r3, 800603c <_reclaim_reent+0x30>
 8006020:	2500      	movs	r5, #0
 8006022:	69e3      	ldr	r3, [r4, #28]
 8006024:	68db      	ldr	r3, [r3, #12]
 8006026:	5959      	ldr	r1, [r3, r5]
 8006028:	2900      	cmp	r1, #0
 800602a:	d13b      	bne.n	80060a4 <_reclaim_reent+0x98>
 800602c:	3504      	adds	r5, #4
 800602e:	2d80      	cmp	r5, #128	@ 0x80
 8006030:	d1f7      	bne.n	8006022 <_reclaim_reent+0x16>
 8006032:	69e3      	ldr	r3, [r4, #28]
 8006034:	4620      	mov	r0, r4
 8006036:	68d9      	ldr	r1, [r3, #12]
 8006038:	f000 f872 	bl	8006120 <_free_r>
 800603c:	69e3      	ldr	r3, [r4, #28]
 800603e:	6819      	ldr	r1, [r3, #0]
 8006040:	b111      	cbz	r1, 8006048 <_reclaim_reent+0x3c>
 8006042:	4620      	mov	r0, r4
 8006044:	f000 f86c 	bl	8006120 <_free_r>
 8006048:	6961      	ldr	r1, [r4, #20]
 800604a:	b111      	cbz	r1, 8006052 <_reclaim_reent+0x46>
 800604c:	4620      	mov	r0, r4
 800604e:	f000 f867 	bl	8006120 <_free_r>
 8006052:	69e1      	ldr	r1, [r4, #28]
 8006054:	b111      	cbz	r1, 800605c <_reclaim_reent+0x50>
 8006056:	4620      	mov	r0, r4
 8006058:	f000 f862 	bl	8006120 <_free_r>
 800605c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800605e:	b111      	cbz	r1, 8006066 <_reclaim_reent+0x5a>
 8006060:	4620      	mov	r0, r4
 8006062:	f000 f85d 	bl	8006120 <_free_r>
 8006066:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006068:	b111      	cbz	r1, 8006070 <_reclaim_reent+0x64>
 800606a:	4620      	mov	r0, r4
 800606c:	f000 f858 	bl	8006120 <_free_r>
 8006070:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8006072:	b111      	cbz	r1, 800607a <_reclaim_reent+0x6e>
 8006074:	4620      	mov	r0, r4
 8006076:	f000 f853 	bl	8006120 <_free_r>
 800607a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800607c:	b111      	cbz	r1, 8006084 <_reclaim_reent+0x78>
 800607e:	4620      	mov	r0, r4
 8006080:	f000 f84e 	bl	8006120 <_free_r>
 8006084:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8006086:	b111      	cbz	r1, 800608e <_reclaim_reent+0x82>
 8006088:	4620      	mov	r0, r4
 800608a:	f000 f849 	bl	8006120 <_free_r>
 800608e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8006090:	b111      	cbz	r1, 8006098 <_reclaim_reent+0x8c>
 8006092:	4620      	mov	r0, r4
 8006094:	f000 f844 	bl	8006120 <_free_r>
 8006098:	6a23      	ldr	r3, [r4, #32]
 800609a:	b14b      	cbz	r3, 80060b0 <_reclaim_reent+0xa4>
 800609c:	4620      	mov	r0, r4
 800609e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80060a2:	4718      	bx	r3
 80060a4:	680e      	ldr	r6, [r1, #0]
 80060a6:	4620      	mov	r0, r4
 80060a8:	f000 f83a 	bl	8006120 <_free_r>
 80060ac:	4631      	mov	r1, r6
 80060ae:	e7bb      	b.n	8006028 <_reclaim_reent+0x1c>
 80060b0:	bd70      	pop	{r4, r5, r6, pc}
 80060b2:	bf00      	nop
 80060b4:	20000014 	.word	0x20000014

080060b8 <__libc_init_array>:
 80060b8:	b570      	push	{r4, r5, r6, lr}
 80060ba:	4d0d      	ldr	r5, [pc, #52]	@ (80060f0 <__libc_init_array+0x38>)
 80060bc:	4c0d      	ldr	r4, [pc, #52]	@ (80060f4 <__libc_init_array+0x3c>)
 80060be:	1b64      	subs	r4, r4, r5
 80060c0:	10a4      	asrs	r4, r4, #2
 80060c2:	2600      	movs	r6, #0
 80060c4:	42a6      	cmp	r6, r4
 80060c6:	d109      	bne.n	80060dc <__libc_init_array+0x24>
 80060c8:	4d0b      	ldr	r5, [pc, #44]	@ (80060f8 <__libc_init_array+0x40>)
 80060ca:	4c0c      	ldr	r4, [pc, #48]	@ (80060fc <__libc_init_array+0x44>)
 80060cc:	f000 f87e 	bl	80061cc <_init>
 80060d0:	1b64      	subs	r4, r4, r5
 80060d2:	10a4      	asrs	r4, r4, #2
 80060d4:	2600      	movs	r6, #0
 80060d6:	42a6      	cmp	r6, r4
 80060d8:	d105      	bne.n	80060e6 <__libc_init_array+0x2e>
 80060da:	bd70      	pop	{r4, r5, r6, pc}
 80060dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80060e0:	4798      	blx	r3
 80060e2:	3601      	adds	r6, #1
 80060e4:	e7ee      	b.n	80060c4 <__libc_init_array+0xc>
 80060e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80060ea:	4798      	blx	r3
 80060ec:	3601      	adds	r6, #1
 80060ee:	e7f2      	b.n	80060d6 <__libc_init_array+0x1e>
 80060f0:	080062cc 	.word	0x080062cc
 80060f4:	080062cc 	.word	0x080062cc
 80060f8:	080062cc 	.word	0x080062cc
 80060fc:	080062d0 	.word	0x080062d0

08006100 <__retarget_lock_acquire_recursive>:
 8006100:	4770      	bx	lr

08006102 <__retarget_lock_release_recursive>:
 8006102:	4770      	bx	lr

08006104 <memcpy>:
 8006104:	440a      	add	r2, r1
 8006106:	4291      	cmp	r1, r2
 8006108:	f100 33ff 	add.w	r3, r0, #4294967295
 800610c:	d100      	bne.n	8006110 <memcpy+0xc>
 800610e:	4770      	bx	lr
 8006110:	b510      	push	{r4, lr}
 8006112:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006116:	f803 4f01 	strb.w	r4, [r3, #1]!
 800611a:	4291      	cmp	r1, r2
 800611c:	d1f9      	bne.n	8006112 <memcpy+0xe>
 800611e:	bd10      	pop	{r4, pc}

08006120 <_free_r>:
 8006120:	b538      	push	{r3, r4, r5, lr}
 8006122:	4605      	mov	r5, r0
 8006124:	2900      	cmp	r1, #0
 8006126:	d041      	beq.n	80061ac <_free_r+0x8c>
 8006128:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800612c:	1f0c      	subs	r4, r1, #4
 800612e:	2b00      	cmp	r3, #0
 8006130:	bfb8      	it	lt
 8006132:	18e4      	addlt	r4, r4, r3
 8006134:	f000 f83e 	bl	80061b4 <__malloc_lock>
 8006138:	4a1d      	ldr	r2, [pc, #116]	@ (80061b0 <_free_r+0x90>)
 800613a:	6813      	ldr	r3, [r2, #0]
 800613c:	b933      	cbnz	r3, 800614c <_free_r+0x2c>
 800613e:	6063      	str	r3, [r4, #4]
 8006140:	6014      	str	r4, [r2, #0]
 8006142:	4628      	mov	r0, r5
 8006144:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006148:	f000 b83a 	b.w	80061c0 <__malloc_unlock>
 800614c:	42a3      	cmp	r3, r4
 800614e:	d908      	bls.n	8006162 <_free_r+0x42>
 8006150:	6820      	ldr	r0, [r4, #0]
 8006152:	1821      	adds	r1, r4, r0
 8006154:	428b      	cmp	r3, r1
 8006156:	bf01      	itttt	eq
 8006158:	6819      	ldreq	r1, [r3, #0]
 800615a:	685b      	ldreq	r3, [r3, #4]
 800615c:	1809      	addeq	r1, r1, r0
 800615e:	6021      	streq	r1, [r4, #0]
 8006160:	e7ed      	b.n	800613e <_free_r+0x1e>
 8006162:	461a      	mov	r2, r3
 8006164:	685b      	ldr	r3, [r3, #4]
 8006166:	b10b      	cbz	r3, 800616c <_free_r+0x4c>
 8006168:	42a3      	cmp	r3, r4
 800616a:	d9fa      	bls.n	8006162 <_free_r+0x42>
 800616c:	6811      	ldr	r1, [r2, #0]
 800616e:	1850      	adds	r0, r2, r1
 8006170:	42a0      	cmp	r0, r4
 8006172:	d10b      	bne.n	800618c <_free_r+0x6c>
 8006174:	6820      	ldr	r0, [r4, #0]
 8006176:	4401      	add	r1, r0
 8006178:	1850      	adds	r0, r2, r1
 800617a:	4283      	cmp	r3, r0
 800617c:	6011      	str	r1, [r2, #0]
 800617e:	d1e0      	bne.n	8006142 <_free_r+0x22>
 8006180:	6818      	ldr	r0, [r3, #0]
 8006182:	685b      	ldr	r3, [r3, #4]
 8006184:	6053      	str	r3, [r2, #4]
 8006186:	4408      	add	r0, r1
 8006188:	6010      	str	r0, [r2, #0]
 800618a:	e7da      	b.n	8006142 <_free_r+0x22>
 800618c:	d902      	bls.n	8006194 <_free_r+0x74>
 800618e:	230c      	movs	r3, #12
 8006190:	602b      	str	r3, [r5, #0]
 8006192:	e7d6      	b.n	8006142 <_free_r+0x22>
 8006194:	6820      	ldr	r0, [r4, #0]
 8006196:	1821      	adds	r1, r4, r0
 8006198:	428b      	cmp	r3, r1
 800619a:	bf04      	itt	eq
 800619c:	6819      	ldreq	r1, [r3, #0]
 800619e:	685b      	ldreq	r3, [r3, #4]
 80061a0:	6063      	str	r3, [r4, #4]
 80061a2:	bf04      	itt	eq
 80061a4:	1809      	addeq	r1, r1, r0
 80061a6:	6021      	streq	r1, [r4, #0]
 80061a8:	6054      	str	r4, [r2, #4]
 80061aa:	e7ca      	b.n	8006142 <_free_r+0x22>
 80061ac:	bd38      	pop	{r3, r4, r5, pc}
 80061ae:	bf00      	nop
 80061b0:	20004d10 	.word	0x20004d10

080061b4 <__malloc_lock>:
 80061b4:	4801      	ldr	r0, [pc, #4]	@ (80061bc <__malloc_lock+0x8>)
 80061b6:	f7ff bfa3 	b.w	8006100 <__retarget_lock_acquire_recursive>
 80061ba:	bf00      	nop
 80061bc:	20004d0c 	.word	0x20004d0c

080061c0 <__malloc_unlock>:
 80061c0:	4801      	ldr	r0, [pc, #4]	@ (80061c8 <__malloc_unlock+0x8>)
 80061c2:	f7ff bf9e 	b.w	8006102 <__retarget_lock_release_recursive>
 80061c6:	bf00      	nop
 80061c8:	20004d0c 	.word	0x20004d0c

080061cc <_init>:
 80061cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061ce:	bf00      	nop
 80061d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061d2:	bc08      	pop	{r3}
 80061d4:	469e      	mov	lr, r3
 80061d6:	4770      	bx	lr

080061d8 <_fini>:
 80061d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061da:	bf00      	nop
 80061dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061de:	bc08      	pop	{r3}
 80061e0:	469e      	mov	lr, r3
 80061e2:	4770      	bx	lr
