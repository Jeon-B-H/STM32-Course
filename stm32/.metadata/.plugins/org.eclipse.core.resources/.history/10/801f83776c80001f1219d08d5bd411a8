
Project_Auto_RC_Car.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000035f8  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08003790  08003790  00004790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080037b0  080037b0  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  080037b0  080037b0  000047b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080037b8  080037b8  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080037b8  080037b8  000047b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080037bc  080037bc  000047bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080037c0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c4  2000000c  080037cc  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d0  080037cc  000051d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d479  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002202  00000000  00000000  000124b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cd8  00000000  00000000  000146b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009fb  00000000  00000000  00015390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016ef9  00000000  00000000  00015d8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000104dc  00000000  00000000  0002cc84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e029  00000000  00000000  0003d160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cb189  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034a4  00000000  00000000  000cb1cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  000ce670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08003778 	.word	0x08003778

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08003778 	.word	0x08003778

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80004ce:	2300      	movs	r3, #0
 80004d0:	607b      	str	r3, [r7, #4]
 80004d2:	4b10      	ldr	r3, [pc, #64]	@ (8000514 <MX_DMA_Init+0x4c>)
 80004d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004d6:	4a0f      	ldr	r2, [pc, #60]	@ (8000514 <MX_DMA_Init+0x4c>)
 80004d8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80004dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80004de:	4b0d      	ldr	r3, [pc, #52]	@ (8000514 <MX_DMA_Init+0x4c>)
 80004e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80004e6:	607b      	str	r3, [r7, #4]
 80004e8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80004ea:	2200      	movs	r2, #0
 80004ec:	2100      	movs	r1, #0
 80004ee:	203a      	movs	r0, #58	@ 0x3a
 80004f0:	f000 fd5d 	bl	8000fae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80004f4:	203a      	movs	r0, #58	@ 0x3a
 80004f6:	f000 fd76 	bl	8000fe6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 80004fa:	2200      	movs	r2, #0
 80004fc:	2100      	movs	r1, #0
 80004fe:	2046      	movs	r0, #70	@ 0x46
 8000500:	f000 fd55 	bl	8000fae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8000504:	2046      	movs	r0, #70	@ 0x46
 8000506:	f000 fd6e 	bl	8000fe6 <HAL_NVIC_EnableIRQ>

}
 800050a:	bf00      	nop
 800050c:	3708      	adds	r7, #8
 800050e:	46bd      	mov	sp, r7
 8000510:	bd80      	pop	{r7, pc}
 8000512:	bf00      	nop
 8000514:	40023800 	.word	0x40023800

08000518 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b08a      	sub	sp, #40	@ 0x28
 800051c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800051e:	f107 0314 	add.w	r3, r7, #20
 8000522:	2200      	movs	r2, #0
 8000524:	601a      	str	r2, [r3, #0]
 8000526:	605a      	str	r2, [r3, #4]
 8000528:	609a      	str	r2, [r3, #8]
 800052a:	60da      	str	r2, [r3, #12]
 800052c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800052e:	2300      	movs	r3, #0
 8000530:	613b      	str	r3, [r7, #16]
 8000532:	4b36      	ldr	r3, [pc, #216]	@ (800060c <MX_GPIO_Init+0xf4>)
 8000534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000536:	4a35      	ldr	r2, [pc, #212]	@ (800060c <MX_GPIO_Init+0xf4>)
 8000538:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800053c:	6313      	str	r3, [r2, #48]	@ 0x30
 800053e:	4b33      	ldr	r3, [pc, #204]	@ (800060c <MX_GPIO_Init+0xf4>)
 8000540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000542:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000546:	613b      	str	r3, [r7, #16]
 8000548:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800054a:	2300      	movs	r3, #0
 800054c:	60fb      	str	r3, [r7, #12]
 800054e:	4b2f      	ldr	r3, [pc, #188]	@ (800060c <MX_GPIO_Init+0xf4>)
 8000550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000552:	4a2e      	ldr	r2, [pc, #184]	@ (800060c <MX_GPIO_Init+0xf4>)
 8000554:	f043 0301 	orr.w	r3, r3, #1
 8000558:	6313      	str	r3, [r2, #48]	@ 0x30
 800055a:	4b2c      	ldr	r3, [pc, #176]	@ (800060c <MX_GPIO_Init+0xf4>)
 800055c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800055e:	f003 0301 	and.w	r3, r3, #1
 8000562:	60fb      	str	r3, [r7, #12]
 8000564:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000566:	2300      	movs	r3, #0
 8000568:	60bb      	str	r3, [r7, #8]
 800056a:	4b28      	ldr	r3, [pc, #160]	@ (800060c <MX_GPIO_Init+0xf4>)
 800056c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800056e:	4a27      	ldr	r2, [pc, #156]	@ (800060c <MX_GPIO_Init+0xf4>)
 8000570:	f043 0304 	orr.w	r3, r3, #4
 8000574:	6313      	str	r3, [r2, #48]	@ 0x30
 8000576:	4b25      	ldr	r3, [pc, #148]	@ (800060c <MX_GPIO_Init+0xf4>)
 8000578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800057a:	f003 0304 	and.w	r3, r3, #4
 800057e:	60bb      	str	r3, [r7, #8]
 8000580:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000582:	2300      	movs	r3, #0
 8000584:	607b      	str	r3, [r7, #4]
 8000586:	4b21      	ldr	r3, [pc, #132]	@ (800060c <MX_GPIO_Init+0xf4>)
 8000588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800058a:	4a20      	ldr	r2, [pc, #128]	@ (800060c <MX_GPIO_Init+0xf4>)
 800058c:	f043 0302 	orr.w	r3, r3, #2
 8000590:	6313      	str	r3, [r2, #48]	@ 0x30
 8000592:	4b1e      	ldr	r3, [pc, #120]	@ (800060c <MX_GPIO_Init+0xf4>)
 8000594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000596:	f003 0302 	and.w	r3, r3, #2
 800059a:	607b      	str	r3, [r7, #4]
 800059c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 800059e:	2200      	movs	r2, #0
 80005a0:	21c0      	movs	r1, #192	@ 0xc0
 80005a2:	481b      	ldr	r0, [pc, #108]	@ (8000610 <MX_GPIO_Init+0xf8>)
 80005a4:	f001 fa2e 	bl	8001a04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80005a8:	2200      	movs	r2, #0
 80005aa:	2140      	movs	r1, #64	@ 0x40
 80005ac:	4819      	ldr	r0, [pc, #100]	@ (8000614 <MX_GPIO_Init+0xfc>)
 80005ae:	f001 fa29 	bl	8001a04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80005b2:	2320      	movs	r3, #32
 80005b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005b6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80005ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005bc:	2300      	movs	r3, #0
 80005be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005c0:	f107 0314 	add.w	r3, r7, #20
 80005c4:	4619      	mov	r1, r3
 80005c6:	4812      	ldr	r0, [pc, #72]	@ (8000610 <MX_GPIO_Init+0xf8>)
 80005c8:	f001 f898 	bl	80016fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80005cc:	23c0      	movs	r3, #192	@ 0xc0
 80005ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005d0:	2301      	movs	r3, #1
 80005d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d4:	2300      	movs	r3, #0
 80005d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005d8:	2300      	movs	r3, #0
 80005da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005dc:	f107 0314 	add.w	r3, r7, #20
 80005e0:	4619      	mov	r1, r3
 80005e2:	480b      	ldr	r0, [pc, #44]	@ (8000610 <MX_GPIO_Init+0xf8>)
 80005e4:	f001 f88a 	bl	80016fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80005e8:	2340      	movs	r3, #64	@ 0x40
 80005ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ec:	2301      	movs	r3, #1
 80005ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f0:	2300      	movs	r3, #0
 80005f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005f4:	2300      	movs	r3, #0
 80005f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005f8:	f107 0314 	add.w	r3, r7, #20
 80005fc:	4619      	mov	r1, r3
 80005fe:	4805      	ldr	r0, [pc, #20]	@ (8000614 <MX_GPIO_Init+0xfc>)
 8000600:	f001 f87c 	bl	80016fc <HAL_GPIO_Init>

}
 8000604:	bf00      	nop
 8000606:	3728      	adds	r7, #40	@ 0x28
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}
 800060c:	40023800 	.word	0x40023800
 8000610:	40020000 	.word	0x40020000
 8000614:	40020400 	.word	0x40020400

08000618 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800061c:	f000 fb7a 	bl	8000d14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000620:	f000 f810 	bl	8000644 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000624:	f7ff ff78 	bl	8000518 <MX_GPIO_Init>
  MX_DMA_Init();
 8000628:	f7ff ff4e 	bl	80004c8 <MX_DMA_Init>
  MX_TIM1_Init();
 800062c:	f000 f8f6 	bl	800081c <MX_TIM1_Init>
  MX_TIM3_Init();
 8000630:	f000 f978 	bl	8000924 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000634:	f000 fa6a 	bl	8000b0c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  apInit();
 8000638:	f002 ffb8 	bl	80035ac <apInit>
  apMain();
 800063c:	f002 ffbe 	bl	80035bc <apMain>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000640:	bf00      	nop
 8000642:	e7fd      	b.n	8000640 <main+0x28>

08000644 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b094      	sub	sp, #80	@ 0x50
 8000648:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064a:	f107 0320 	add.w	r3, r7, #32
 800064e:	2230      	movs	r2, #48	@ 0x30
 8000650:	2100      	movs	r1, #0
 8000652:	4618      	mov	r0, r3
 8000654:	f003 f864 	bl	8003720 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000658:	f107 030c 	add.w	r3, r7, #12
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	605a      	str	r2, [r3, #4]
 8000662:	609a      	str	r2, [r3, #8]
 8000664:	60da      	str	r2, [r3, #12]
 8000666:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000668:	2300      	movs	r3, #0
 800066a:	60bb      	str	r3, [r7, #8]
 800066c:	4b27      	ldr	r3, [pc, #156]	@ (800070c <SystemClock_Config+0xc8>)
 800066e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000670:	4a26      	ldr	r2, [pc, #152]	@ (800070c <SystemClock_Config+0xc8>)
 8000672:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000676:	6413      	str	r3, [r2, #64]	@ 0x40
 8000678:	4b24      	ldr	r3, [pc, #144]	@ (800070c <SystemClock_Config+0xc8>)
 800067a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800067c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000680:	60bb      	str	r3, [r7, #8]
 8000682:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000684:	2300      	movs	r3, #0
 8000686:	607b      	str	r3, [r7, #4]
 8000688:	4b21      	ldr	r3, [pc, #132]	@ (8000710 <SystemClock_Config+0xcc>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a20      	ldr	r2, [pc, #128]	@ (8000710 <SystemClock_Config+0xcc>)
 800068e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000692:	6013      	str	r3, [r2, #0]
 8000694:	4b1e      	ldr	r3, [pc, #120]	@ (8000710 <SystemClock_Config+0xcc>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800069c:	607b      	str	r3, [r7, #4]
 800069e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006a0:	2301      	movs	r3, #1
 80006a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006a4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006a8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006aa:	2302      	movs	r3, #2
 80006ac:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ae:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80006b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006b4:	2304      	movs	r3, #4
 80006b6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80006b8:	2364      	movs	r3, #100	@ 0x64
 80006ba:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006bc:	2302      	movs	r3, #2
 80006be:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006c0:	2304      	movs	r3, #4
 80006c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c4:	f107 0320 	add.w	r3, r7, #32
 80006c8:	4618      	mov	r0, r3
 80006ca:	f001 f9b5 	bl	8001a38 <HAL_RCC_OscConfig>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006d4:	f000 f81e 	bl	8000714 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d8:	230f      	movs	r3, #15
 80006da:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006dc:	2302      	movs	r3, #2
 80006de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e0:	2300      	movs	r3, #0
 80006e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ea:	2300      	movs	r3, #0
 80006ec:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006ee:	f107 030c 	add.w	r3, r7, #12
 80006f2:	2103      	movs	r1, #3
 80006f4:	4618      	mov	r0, r3
 80006f6:	f001 fc17 	bl	8001f28 <HAL_RCC_ClockConfig>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000700:	f000 f808 	bl	8000714 <Error_Handler>
  }
}
 8000704:	bf00      	nop
 8000706:	3750      	adds	r7, #80	@ 0x50
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	40023800 	.word	0x40023800
 8000710:	40007000 	.word	0x40007000

08000714 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000718:	b672      	cpsid	i
}
 800071a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800071c:	bf00      	nop
 800071e:	e7fd      	b.n	800071c <Error_Handler+0x8>

08000720 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000720:	b480      	push	{r7}
 8000722:	b083      	sub	sp, #12
 8000724:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000726:	2300      	movs	r3, #0
 8000728:	607b      	str	r3, [r7, #4]
 800072a:	4b10      	ldr	r3, [pc, #64]	@ (800076c <HAL_MspInit+0x4c>)
 800072c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800072e:	4a0f      	ldr	r2, [pc, #60]	@ (800076c <HAL_MspInit+0x4c>)
 8000730:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000734:	6453      	str	r3, [r2, #68]	@ 0x44
 8000736:	4b0d      	ldr	r3, [pc, #52]	@ (800076c <HAL_MspInit+0x4c>)
 8000738:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800073a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800073e:	607b      	str	r3, [r7, #4]
 8000740:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000742:	2300      	movs	r3, #0
 8000744:	603b      	str	r3, [r7, #0]
 8000746:	4b09      	ldr	r3, [pc, #36]	@ (800076c <HAL_MspInit+0x4c>)
 8000748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800074a:	4a08      	ldr	r2, [pc, #32]	@ (800076c <HAL_MspInit+0x4c>)
 800074c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000750:	6413      	str	r3, [r2, #64]	@ 0x40
 8000752:	4b06      	ldr	r3, [pc, #24]	@ (800076c <HAL_MspInit+0x4c>)
 8000754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000756:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800075a:	603b      	str	r3, [r7, #0]
 800075c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800075e:	bf00      	nop
 8000760:	370c      	adds	r7, #12
 8000762:	46bd      	mov	sp, r7
 8000764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	40023800 	.word	0x40023800

08000770 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000774:	bf00      	nop
 8000776:	e7fd      	b.n	8000774 <NMI_Handler+0x4>

08000778 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800077c:	bf00      	nop
 800077e:	e7fd      	b.n	800077c <HardFault_Handler+0x4>

08000780 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000784:	bf00      	nop
 8000786:	e7fd      	b.n	8000784 <MemManage_Handler+0x4>

08000788 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800078c:	bf00      	nop
 800078e:	e7fd      	b.n	800078c <BusFault_Handler+0x4>

08000790 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000794:	bf00      	nop
 8000796:	e7fd      	b.n	8000794 <UsageFault_Handler+0x4>

08000798 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800079c:	bf00      	nop
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr

080007a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007a6:	b480      	push	{r7}
 80007a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007aa:	bf00      	nop
 80007ac:	46bd      	mov	sp, r7
 80007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b2:	4770      	bx	lr

080007b4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007b8:	bf00      	nop
 80007ba:	46bd      	mov	sp, r7
 80007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c0:	4770      	bx	lr

080007c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007c2:	b580      	push	{r7, lr}
 80007c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007c6:	f000 faf7 	bl	8000db8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007ca:	bf00      	nop
 80007cc:	bd80      	pop	{r7, pc}
	...

080007d0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80007d4:	4802      	ldr	r0, [pc, #8]	@ (80007e0 <DMA2_Stream2_IRQHandler+0x10>)
 80007d6:	f000 fd27 	bl	8001228 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80007da:	bf00      	nop
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	20000100 	.word	0x20000100

080007e4 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80007e8:	4802      	ldr	r0, [pc, #8]	@ (80007f4 <DMA2_Stream7_IRQHandler+0x10>)
 80007ea:	f000 fd1d 	bl	8001228 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80007ee:	bf00      	nop
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	20000160 	.word	0x20000160

080007f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007fc:	4b06      	ldr	r3, [pc, #24]	@ (8000818 <SystemInit+0x20>)
 80007fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000802:	4a05      	ldr	r2, [pc, #20]	@ (8000818 <SystemInit+0x20>)
 8000804:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000808:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800080c:	bf00      	nop
 800080e:	46bd      	mov	sp, r7
 8000810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000814:	4770      	bx	lr
 8000816:	bf00      	nop
 8000818:	e000ed00 	.word	0xe000ed00

0800081c <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b092      	sub	sp, #72	@ 0x48
 8000820:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000822:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000826:	2200      	movs	r2, #0
 8000828:	601a      	str	r2, [r3, #0]
 800082a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800082c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]
 800083a:	611a      	str	r2, [r3, #16]
 800083c:	615a      	str	r2, [r3, #20]
 800083e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000840:	1d3b      	adds	r3, r7, #4
 8000842:	2220      	movs	r2, #32
 8000844:	2100      	movs	r1, #0
 8000846:	4618      	mov	r0, r3
 8000848:	f002 ff6a 	bl	8003720 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800084c:	4b33      	ldr	r3, [pc, #204]	@ (800091c <MX_TIM1_Init+0x100>)
 800084e:	4a34      	ldr	r2, [pc, #208]	@ (8000920 <MX_TIM1_Init+0x104>)
 8000850:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10000-1;
 8000852:	4b32      	ldr	r3, [pc, #200]	@ (800091c <MX_TIM1_Init+0x100>)
 8000854:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000858:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800085a:	4b30      	ldr	r3, [pc, #192]	@ (800091c <MX_TIM1_Init+0x100>)
 800085c:	2200      	movs	r2, #0
 800085e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8000860:	4b2e      	ldr	r3, [pc, #184]	@ (800091c <MX_TIM1_Init+0x100>)
 8000862:	2263      	movs	r2, #99	@ 0x63
 8000864:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000866:	4b2d      	ldr	r3, [pc, #180]	@ (800091c <MX_TIM1_Init+0x100>)
 8000868:	2200      	movs	r2, #0
 800086a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800086c:	4b2b      	ldr	r3, [pc, #172]	@ (800091c <MX_TIM1_Init+0x100>)
 800086e:	2200      	movs	r2, #0
 8000870:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000872:	4b2a      	ldr	r3, [pc, #168]	@ (800091c <MX_TIM1_Init+0x100>)
 8000874:	2200      	movs	r2, #0
 8000876:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000878:	4828      	ldr	r0, [pc, #160]	@ (800091c <MX_TIM1_Init+0x100>)
 800087a:	f001 fd75 	bl	8002368 <HAL_TIM_PWM_Init>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8000884:	f7ff ff46 	bl	8000714 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000888:	2300      	movs	r3, #0
 800088a:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800088c:	2300      	movs	r3, #0
 800088e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000890:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000894:	4619      	mov	r1, r3
 8000896:	4821      	ldr	r0, [pc, #132]	@ (800091c <MX_TIM1_Init+0x100>)
 8000898:	f002 f890 	bl	80029bc <HAL_TIMEx_MasterConfigSynchronization>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80008a2:	f7ff ff37 	bl	8000714 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008a6:	2360      	movs	r3, #96	@ 0x60
 80008a8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 500;
 80008aa:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80008ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008b0:	2300      	movs	r3, #0
 80008b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80008b4:	2300      	movs	r3, #0
 80008b6:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008b8:	2300      	movs	r3, #0
 80008ba:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80008bc:	2300      	movs	r3, #0
 80008be:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80008c0:	2300      	movs	r3, #0
 80008c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80008c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008c8:	2204      	movs	r2, #4
 80008ca:	4619      	mov	r1, r3
 80008cc:	4813      	ldr	r0, [pc, #76]	@ (800091c <MX_TIM1_Init+0x100>)
 80008ce:	f001 fd9b 	bl	8002408 <HAL_TIM_PWM_ConfigChannel>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 80008d8:	f7ff ff1c 	bl	8000714 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80008dc:	2300      	movs	r3, #0
 80008de:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80008e0:	2300      	movs	r3, #0
 80008e2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80008e4:	2300      	movs	r3, #0
 80008e6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80008e8:	2300      	movs	r3, #0
 80008ea:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80008ec:	2300      	movs	r3, #0
 80008ee:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80008f0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008f4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80008f6:	2300      	movs	r3, #0
 80008f8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80008fa:	1d3b      	adds	r3, r7, #4
 80008fc:	4619      	mov	r1, r3
 80008fe:	4807      	ldr	r0, [pc, #28]	@ (800091c <MX_TIM1_Init+0x100>)
 8000900:	f002 f8ca 	bl	8002a98 <HAL_TIMEx_ConfigBreakDeadTime>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_TIM1_Init+0xf2>
  {
    Error_Handler();
 800090a:	f7ff ff03 	bl	8000714 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800090e:	4803      	ldr	r0, [pc, #12]	@ (800091c <MX_TIM1_Init+0x100>)
 8000910:	f000 f89a 	bl	8000a48 <HAL_TIM_MspPostInit>

}
 8000914:	bf00      	nop
 8000916:	3748      	adds	r7, #72	@ 0x48
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	20000028 	.word	0x20000028
 8000920:	40010000 	.word	0x40010000

08000924 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b08a      	sub	sp, #40	@ 0x28
 8000928:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800092a:	f107 0320 	add.w	r3, r7, #32
 800092e:	2200      	movs	r2, #0
 8000930:	601a      	str	r2, [r3, #0]
 8000932:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000934:	1d3b      	adds	r3, r7, #4
 8000936:	2200      	movs	r2, #0
 8000938:	601a      	str	r2, [r3, #0]
 800093a:	605a      	str	r2, [r3, #4]
 800093c:	609a      	str	r2, [r3, #8]
 800093e:	60da      	str	r2, [r3, #12]
 8000940:	611a      	str	r2, [r3, #16]
 8000942:	615a      	str	r2, [r3, #20]
 8000944:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000946:	4b22      	ldr	r3, [pc, #136]	@ (80009d0 <MX_TIM3_Init+0xac>)
 8000948:	4a22      	ldr	r2, [pc, #136]	@ (80009d4 <MX_TIM3_Init+0xb0>)
 800094a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10000-1;
 800094c:	4b20      	ldr	r3, [pc, #128]	@ (80009d0 <MX_TIM3_Init+0xac>)
 800094e:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000952:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000954:	4b1e      	ldr	r3, [pc, #120]	@ (80009d0 <MX_TIM3_Init+0xac>)
 8000956:	2200      	movs	r2, #0
 8000958:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 800095a:	4b1d      	ldr	r3, [pc, #116]	@ (80009d0 <MX_TIM3_Init+0xac>)
 800095c:	2263      	movs	r2, #99	@ 0x63
 800095e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000960:	4b1b      	ldr	r3, [pc, #108]	@ (80009d0 <MX_TIM3_Init+0xac>)
 8000962:	2200      	movs	r2, #0
 8000964:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000966:	4b1a      	ldr	r3, [pc, #104]	@ (80009d0 <MX_TIM3_Init+0xac>)
 8000968:	2200      	movs	r2, #0
 800096a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800096c:	4818      	ldr	r0, [pc, #96]	@ (80009d0 <MX_TIM3_Init+0xac>)
 800096e:	f001 fcfb 	bl	8002368 <HAL_TIM_PWM_Init>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000978:	f7ff fecc 	bl	8000714 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800097c:	2300      	movs	r3, #0
 800097e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000980:	2300      	movs	r3, #0
 8000982:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000984:	f107 0320 	add.w	r3, r7, #32
 8000988:	4619      	mov	r1, r3
 800098a:	4811      	ldr	r0, [pc, #68]	@ (80009d0 <MX_TIM3_Init+0xac>)
 800098c:	f002 f816 	bl	80029bc <HAL_TIMEx_MasterConfigSynchronization>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000996:	f7ff febd 	bl	8000714 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800099a:	2360      	movs	r3, #96	@ 0x60
 800099c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 800099e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80009a2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009a4:	2300      	movs	r3, #0
 80009a6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009a8:	2300      	movs	r3, #0
 80009aa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80009ac:	1d3b      	adds	r3, r7, #4
 80009ae:	2204      	movs	r2, #4
 80009b0:	4619      	mov	r1, r3
 80009b2:	4807      	ldr	r0, [pc, #28]	@ (80009d0 <MX_TIM3_Init+0xac>)
 80009b4:	f001 fd28 	bl	8002408 <HAL_TIM_PWM_ConfigChannel>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 80009be:	f7ff fea9 	bl	8000714 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80009c2:	4803      	ldr	r0, [pc, #12]	@ (80009d0 <MX_TIM3_Init+0xac>)
 80009c4:	f000 f840 	bl	8000a48 <HAL_TIM_MspPostInit>

}
 80009c8:	bf00      	nop
 80009ca:	3728      	adds	r7, #40	@ 0x28
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	20000070 	.word	0x20000070
 80009d4:	40000400 	.word	0x40000400

080009d8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80009d8:	b480      	push	{r7}
 80009da:	b085      	sub	sp, #20
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a15      	ldr	r2, [pc, #84]	@ (8000a3c <HAL_TIM_PWM_MspInit+0x64>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d10e      	bne.n	8000a08 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	60fb      	str	r3, [r7, #12]
 80009ee:	4b14      	ldr	r3, [pc, #80]	@ (8000a40 <HAL_TIM_PWM_MspInit+0x68>)
 80009f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009f2:	4a13      	ldr	r2, [pc, #76]	@ (8000a40 <HAL_TIM_PWM_MspInit+0x68>)
 80009f4:	f043 0301 	orr.w	r3, r3, #1
 80009f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80009fa:	4b11      	ldr	r3, [pc, #68]	@ (8000a40 <HAL_TIM_PWM_MspInit+0x68>)
 80009fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009fe:	f003 0301 	and.w	r3, r3, #1
 8000a02:	60fb      	str	r3, [r7, #12]
 8000a04:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000a06:	e012      	b.n	8000a2e <HAL_TIM_PWM_MspInit+0x56>
  else if(tim_pwmHandle->Instance==TIM3)
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4a0d      	ldr	r2, [pc, #52]	@ (8000a44 <HAL_TIM_PWM_MspInit+0x6c>)
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	d10d      	bne.n	8000a2e <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000a12:	2300      	movs	r3, #0
 8000a14:	60bb      	str	r3, [r7, #8]
 8000a16:	4b0a      	ldr	r3, [pc, #40]	@ (8000a40 <HAL_TIM_PWM_MspInit+0x68>)
 8000a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a1a:	4a09      	ldr	r2, [pc, #36]	@ (8000a40 <HAL_TIM_PWM_MspInit+0x68>)
 8000a1c:	f043 0302 	orr.w	r3, r3, #2
 8000a20:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a22:	4b07      	ldr	r3, [pc, #28]	@ (8000a40 <HAL_TIM_PWM_MspInit+0x68>)
 8000a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a26:	f003 0302 	and.w	r3, r3, #2
 8000a2a:	60bb      	str	r3, [r7, #8]
 8000a2c:	68bb      	ldr	r3, [r7, #8]
}
 8000a2e:	bf00      	nop
 8000a30:	3714      	adds	r7, #20
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop
 8000a3c:	40010000 	.word	0x40010000
 8000a40:	40023800 	.word	0x40023800
 8000a44:	40000400 	.word	0x40000400

08000a48 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b08a      	sub	sp, #40	@ 0x28
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a50:	f107 0314 	add.w	r3, r7, #20
 8000a54:	2200      	movs	r2, #0
 8000a56:	601a      	str	r2, [r3, #0]
 8000a58:	605a      	str	r2, [r3, #4]
 8000a5a:	609a      	str	r2, [r3, #8]
 8000a5c:	60da      	str	r2, [r3, #12]
 8000a5e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a24      	ldr	r2, [pc, #144]	@ (8000af8 <HAL_TIM_MspPostInit+0xb0>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d11f      	bne.n	8000aaa <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	613b      	str	r3, [r7, #16]
 8000a6e:	4b23      	ldr	r3, [pc, #140]	@ (8000afc <HAL_TIM_MspPostInit+0xb4>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a72:	4a22      	ldr	r2, [pc, #136]	@ (8000afc <HAL_TIM_MspPostInit+0xb4>)
 8000a74:	f043 0301 	orr.w	r3, r3, #1
 8000a78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a7a:	4b20      	ldr	r3, [pc, #128]	@ (8000afc <HAL_TIM_MspPostInit+0xb4>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a7e:	f003 0301 	and.w	r3, r3, #1
 8000a82:	613b      	str	r3, [r7, #16]
 8000a84:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000a86:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000a8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a90:	2300      	movs	r3, #0
 8000a92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a94:	2300      	movs	r3, #0
 8000a96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000a98:	2301      	movs	r3, #1
 8000a9a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a9c:	f107 0314 	add.w	r3, r7, #20
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4817      	ldr	r0, [pc, #92]	@ (8000b00 <HAL_TIM_MspPostInit+0xb8>)
 8000aa4:	f000 fe2a 	bl	80016fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000aa8:	e022      	b.n	8000af0 <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM3)
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	4a15      	ldr	r2, [pc, #84]	@ (8000b04 <HAL_TIM_MspPostInit+0xbc>)
 8000ab0:	4293      	cmp	r3, r2
 8000ab2:	d11d      	bne.n	8000af0 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	60fb      	str	r3, [r7, #12]
 8000ab8:	4b10      	ldr	r3, [pc, #64]	@ (8000afc <HAL_TIM_MspPostInit+0xb4>)
 8000aba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000abc:	4a0f      	ldr	r2, [pc, #60]	@ (8000afc <HAL_TIM_MspPostInit+0xb4>)
 8000abe:	f043 0304 	orr.w	r3, r3, #4
 8000ac2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ac4:	4b0d      	ldr	r3, [pc, #52]	@ (8000afc <HAL_TIM_MspPostInit+0xb4>)
 8000ac6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ac8:	f003 0304 	and.w	r3, r3, #4
 8000acc:	60fb      	str	r3, [r7, #12]
 8000ace:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000ad0:	2380      	movs	r3, #128	@ 0x80
 8000ad2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad4:	2302      	movs	r3, #2
 8000ad6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000adc:	2300      	movs	r3, #0
 8000ade:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ae4:	f107 0314 	add.w	r3, r7, #20
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4807      	ldr	r0, [pc, #28]	@ (8000b08 <HAL_TIM_MspPostInit+0xc0>)
 8000aec:	f000 fe06 	bl	80016fc <HAL_GPIO_Init>
}
 8000af0:	bf00      	nop
 8000af2:	3728      	adds	r7, #40	@ 0x28
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	40010000 	.word	0x40010000
 8000afc:	40023800 	.word	0x40023800
 8000b00:	40020000 	.word	0x40020000
 8000b04:	40000400 	.word	0x40000400
 8000b08:	40020800 	.word	0x40020800

08000b0c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b10:	4b11      	ldr	r3, [pc, #68]	@ (8000b58 <MX_USART1_UART_Init+0x4c>)
 8000b12:	4a12      	ldr	r2, [pc, #72]	@ (8000b5c <MX_USART1_UART_Init+0x50>)
 8000b14:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000b16:	4b10      	ldr	r3, [pc, #64]	@ (8000b58 <MX_USART1_UART_Init+0x4c>)
 8000b18:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000b1c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b1e:	4b0e      	ldr	r3, [pc, #56]	@ (8000b58 <MX_USART1_UART_Init+0x4c>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b24:	4b0c      	ldr	r3, [pc, #48]	@ (8000b58 <MX_USART1_UART_Init+0x4c>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b2a:	4b0b      	ldr	r3, [pc, #44]	@ (8000b58 <MX_USART1_UART_Init+0x4c>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b30:	4b09      	ldr	r3, [pc, #36]	@ (8000b58 <MX_USART1_UART_Init+0x4c>)
 8000b32:	220c      	movs	r2, #12
 8000b34:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b36:	4b08      	ldr	r3, [pc, #32]	@ (8000b58 <MX_USART1_UART_Init+0x4c>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b3c:	4b06      	ldr	r3, [pc, #24]	@ (8000b58 <MX_USART1_UART_Init+0x4c>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b42:	4805      	ldr	r0, [pc, #20]	@ (8000b58 <MX_USART1_UART_Init+0x4c>)
 8000b44:	f001 fffa 	bl	8002b3c <HAL_UART_Init>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000b4e:	f7ff fde1 	bl	8000714 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b52:	bf00      	nop
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	200000b8 	.word	0x200000b8
 8000b5c:	40011000 	.word	0x40011000

08000b60 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b08a      	sub	sp, #40	@ 0x28
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b68:	f107 0314 	add.w	r3, r7, #20
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	601a      	str	r2, [r3, #0]
 8000b70:	605a      	str	r2, [r3, #4]
 8000b72:	609a      	str	r2, [r3, #8]
 8000b74:	60da      	str	r2, [r3, #12]
 8000b76:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a49      	ldr	r2, [pc, #292]	@ (8000ca4 <HAL_UART_MspInit+0x144>)
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	f040 808b 	bne.w	8000c9a <HAL_UART_MspInit+0x13a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b84:	2300      	movs	r3, #0
 8000b86:	613b      	str	r3, [r7, #16]
 8000b88:	4b47      	ldr	r3, [pc, #284]	@ (8000ca8 <HAL_UART_MspInit+0x148>)
 8000b8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b8c:	4a46      	ldr	r2, [pc, #280]	@ (8000ca8 <HAL_UART_MspInit+0x148>)
 8000b8e:	f043 0310 	orr.w	r3, r3, #16
 8000b92:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b94:	4b44      	ldr	r3, [pc, #272]	@ (8000ca8 <HAL_UART_MspInit+0x148>)
 8000b96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b98:	f003 0310 	and.w	r3, r3, #16
 8000b9c:	613b      	str	r3, [r7, #16]
 8000b9e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	60fb      	str	r3, [r7, #12]
 8000ba4:	4b40      	ldr	r3, [pc, #256]	@ (8000ca8 <HAL_UART_MspInit+0x148>)
 8000ba6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba8:	4a3f      	ldr	r2, [pc, #252]	@ (8000ca8 <HAL_UART_MspInit+0x148>)
 8000baa:	f043 0301 	orr.w	r3, r3, #1
 8000bae:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bb0:	4b3d      	ldr	r3, [pc, #244]	@ (8000ca8 <HAL_UART_MspInit+0x148>)
 8000bb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb4:	f003 0301 	and.w	r3, r3, #1
 8000bb8:	60fb      	str	r3, [r7, #12]
 8000bba:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA15     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 8000bbc:	f44f 4304 	mov.w	r3, #33792	@ 0x8400
 8000bc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc2:	2302      	movs	r3, #2
 8000bc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bca:	2303      	movs	r3, #3
 8000bcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000bce:	2307      	movs	r3, #7
 8000bd0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd2:	f107 0314 	add.w	r3, r7, #20
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	4834      	ldr	r0, [pc, #208]	@ (8000cac <HAL_UART_MspInit+0x14c>)
 8000bda:	f000 fd8f 	bl	80016fc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8000bde:	4b34      	ldr	r3, [pc, #208]	@ (8000cb0 <HAL_UART_MspInit+0x150>)
 8000be0:	4a34      	ldr	r2, [pc, #208]	@ (8000cb4 <HAL_UART_MspInit+0x154>)
 8000be2:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8000be4:	4b32      	ldr	r3, [pc, #200]	@ (8000cb0 <HAL_UART_MspInit+0x150>)
 8000be6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000bea:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000bec:	4b30      	ldr	r3, [pc, #192]	@ (8000cb0 <HAL_UART_MspInit+0x150>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bf2:	4b2f      	ldr	r3, [pc, #188]	@ (8000cb0 <HAL_UART_MspInit+0x150>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000bf8:	4b2d      	ldr	r3, [pc, #180]	@ (8000cb0 <HAL_UART_MspInit+0x150>)
 8000bfa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000bfe:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c00:	4b2b      	ldr	r3, [pc, #172]	@ (8000cb0 <HAL_UART_MspInit+0x150>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c06:	4b2a      	ldr	r3, [pc, #168]	@ (8000cb0 <HAL_UART_MspInit+0x150>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8000c0c:	4b28      	ldr	r3, [pc, #160]	@ (8000cb0 <HAL_UART_MspInit+0x150>)
 8000c0e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000c12:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000c14:	4b26      	ldr	r3, [pc, #152]	@ (8000cb0 <HAL_UART_MspInit+0x150>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c1a:	4b25      	ldr	r3, [pc, #148]	@ (8000cb0 <HAL_UART_MspInit+0x150>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000c20:	4823      	ldr	r0, [pc, #140]	@ (8000cb0 <HAL_UART_MspInit+0x150>)
 8000c22:	f000 f9fb 	bl	800101c <HAL_DMA_Init>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8000c2c:	f7ff fd72 	bl	8000714 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	4a1f      	ldr	r2, [pc, #124]	@ (8000cb0 <HAL_UART_MspInit+0x150>)
 8000c34:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000c36:	4a1e      	ldr	r2, [pc, #120]	@ (8000cb0 <HAL_UART_MspInit+0x150>)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8000c3c:	4b1e      	ldr	r3, [pc, #120]	@ (8000cb8 <HAL_UART_MspInit+0x158>)
 8000c3e:	4a1f      	ldr	r2, [pc, #124]	@ (8000cbc <HAL_UART_MspInit+0x15c>)
 8000c40:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8000c42:	4b1d      	ldr	r3, [pc, #116]	@ (8000cb8 <HAL_UART_MspInit+0x158>)
 8000c44:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000c48:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c4a:	4b1b      	ldr	r3, [pc, #108]	@ (8000cb8 <HAL_UART_MspInit+0x158>)
 8000c4c:	2240      	movs	r2, #64	@ 0x40
 8000c4e:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c50:	4b19      	ldr	r3, [pc, #100]	@ (8000cb8 <HAL_UART_MspInit+0x158>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000c56:	4b18      	ldr	r3, [pc, #96]	@ (8000cb8 <HAL_UART_MspInit+0x158>)
 8000c58:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c5c:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c5e:	4b16      	ldr	r3, [pc, #88]	@ (8000cb8 <HAL_UART_MspInit+0x158>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c64:	4b14      	ldr	r3, [pc, #80]	@ (8000cb8 <HAL_UART_MspInit+0x158>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
 8000c6a:	4b13      	ldr	r3, [pc, #76]	@ (8000cb8 <HAL_UART_MspInit+0x158>)
 8000c6c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000c70:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000c72:	4b11      	ldr	r3, [pc, #68]	@ (8000cb8 <HAL_UART_MspInit+0x158>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c78:	4b0f      	ldr	r3, [pc, #60]	@ (8000cb8 <HAL_UART_MspInit+0x158>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000c7e:	480e      	ldr	r0, [pc, #56]	@ (8000cb8 <HAL_UART_MspInit+0x158>)
 8000c80:	f000 f9cc 	bl	800101c <HAL_DMA_Init>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 8000c8a:	f7ff fd43 	bl	8000714 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	4a09      	ldr	r2, [pc, #36]	@ (8000cb8 <HAL_UART_MspInit+0x158>)
 8000c92:	639a      	str	r2, [r3, #56]	@ 0x38
 8000c94:	4a08      	ldr	r2, [pc, #32]	@ (8000cb8 <HAL_UART_MspInit+0x158>)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000c9a:	bf00      	nop
 8000c9c:	3728      	adds	r7, #40	@ 0x28
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	40011000 	.word	0x40011000
 8000ca8:	40023800 	.word	0x40023800
 8000cac:	40020000 	.word	0x40020000
 8000cb0:	20000100 	.word	0x20000100
 8000cb4:	40026440 	.word	0x40026440
 8000cb8:	20000160 	.word	0x20000160
 8000cbc:	400264b8 	.word	0x400264b8

08000cc0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000cc0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000cf8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000cc4:	f7ff fd98 	bl	80007f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cc8:	480c      	ldr	r0, [pc, #48]	@ (8000cfc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000cca:	490d      	ldr	r1, [pc, #52]	@ (8000d00 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ccc:	4a0d      	ldr	r2, [pc, #52]	@ (8000d04 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000cce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cd0:	e002      	b.n	8000cd8 <LoopCopyDataInit>

08000cd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cd6:	3304      	adds	r3, #4

08000cd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cdc:	d3f9      	bcc.n	8000cd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cde:	4a0a      	ldr	r2, [pc, #40]	@ (8000d08 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ce0:	4c0a      	ldr	r4, [pc, #40]	@ (8000d0c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ce2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ce4:	e001      	b.n	8000cea <LoopFillZerobss>

08000ce6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ce6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ce8:	3204      	adds	r2, #4

08000cea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cec:	d3fb      	bcc.n	8000ce6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cee:	f002 fd1f 	bl	8003730 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cf2:	f7ff fc91 	bl	8000618 <main>
  bx  lr    
 8000cf6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000cf8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d00:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d04:	080037c0 	.word	0x080037c0
  ldr r2, =_sbss
 8000d08:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000d0c:	200001d0 	.word	0x200001d0

08000d10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d10:	e7fe      	b.n	8000d10 <ADC_IRQHandler>
	...

08000d14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d18:	4b0e      	ldr	r3, [pc, #56]	@ (8000d54 <HAL_Init+0x40>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a0d      	ldr	r2, [pc, #52]	@ (8000d54 <HAL_Init+0x40>)
 8000d1e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d24:	4b0b      	ldr	r3, [pc, #44]	@ (8000d54 <HAL_Init+0x40>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a0a      	ldr	r2, [pc, #40]	@ (8000d54 <HAL_Init+0x40>)
 8000d2a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d30:	4b08      	ldr	r3, [pc, #32]	@ (8000d54 <HAL_Init+0x40>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a07      	ldr	r2, [pc, #28]	@ (8000d54 <HAL_Init+0x40>)
 8000d36:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d3c:	2003      	movs	r0, #3
 8000d3e:	f000 f92b 	bl	8000f98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d42:	200f      	movs	r0, #15
 8000d44:	f000 f808 	bl	8000d58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d48:	f7ff fcea 	bl	8000720 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d4c:	2300      	movs	r3, #0
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	40023c00 	.word	0x40023c00

08000d58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d60:	4b12      	ldr	r3, [pc, #72]	@ (8000dac <HAL_InitTick+0x54>)
 8000d62:	681a      	ldr	r2, [r3, #0]
 8000d64:	4b12      	ldr	r3, [pc, #72]	@ (8000db0 <HAL_InitTick+0x58>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	4619      	mov	r1, r3
 8000d6a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d72:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d76:	4618      	mov	r0, r3
 8000d78:	f000 f943 	bl	8001002 <HAL_SYSTICK_Config>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d82:	2301      	movs	r3, #1
 8000d84:	e00e      	b.n	8000da4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	2b0f      	cmp	r3, #15
 8000d8a:	d80a      	bhi.n	8000da2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	6879      	ldr	r1, [r7, #4]
 8000d90:	f04f 30ff 	mov.w	r0, #4294967295
 8000d94:	f000 f90b 	bl	8000fae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d98:	4a06      	ldr	r2, [pc, #24]	@ (8000db4 <HAL_InitTick+0x5c>)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	e000      	b.n	8000da4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000da2:	2301      	movs	r3, #1
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	3708      	adds	r7, #8
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	20000000 	.word	0x20000000
 8000db0:	20000008 	.word	0x20000008
 8000db4:	20000004 	.word	0x20000004

08000db8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dbc:	4b06      	ldr	r3, [pc, #24]	@ (8000dd8 <HAL_IncTick+0x20>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	461a      	mov	r2, r3
 8000dc2:	4b06      	ldr	r3, [pc, #24]	@ (8000ddc <HAL_IncTick+0x24>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4413      	add	r3, r2
 8000dc8:	4a04      	ldr	r2, [pc, #16]	@ (8000ddc <HAL_IncTick+0x24>)
 8000dca:	6013      	str	r3, [r2, #0]
}
 8000dcc:	bf00      	nop
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	20000008 	.word	0x20000008
 8000ddc:	200001c0 	.word	0x200001c0

08000de0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  return uwTick;
 8000de4:	4b03      	ldr	r3, [pc, #12]	@ (8000df4 <HAL_GetTick+0x14>)
 8000de6:	681b      	ldr	r3, [r3, #0]
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	200001c0 	.word	0x200001c0

08000df8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b085      	sub	sp, #20
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	f003 0307 	and.w	r3, r3, #7
 8000e06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e08:	4b0c      	ldr	r3, [pc, #48]	@ (8000e3c <__NVIC_SetPriorityGrouping+0x44>)
 8000e0a:	68db      	ldr	r3, [r3, #12]
 8000e0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e0e:	68ba      	ldr	r2, [r7, #8]
 8000e10:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e14:	4013      	ands	r3, r2
 8000e16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e1c:	68bb      	ldr	r3, [r7, #8]
 8000e1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e20:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e2a:	4a04      	ldr	r2, [pc, #16]	@ (8000e3c <__NVIC_SetPriorityGrouping+0x44>)
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	60d3      	str	r3, [r2, #12]
}
 8000e30:	bf00      	nop
 8000e32:	3714      	adds	r7, #20
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr
 8000e3c:	e000ed00 	.word	0xe000ed00

08000e40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e44:	4b04      	ldr	r3, [pc, #16]	@ (8000e58 <__NVIC_GetPriorityGrouping+0x18>)
 8000e46:	68db      	ldr	r3, [r3, #12]
 8000e48:	0a1b      	lsrs	r3, r3, #8
 8000e4a:	f003 0307 	and.w	r3, r3, #7
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr
 8000e58:	e000ed00 	.word	0xe000ed00

08000e5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b083      	sub	sp, #12
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	4603      	mov	r3, r0
 8000e64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	db0b      	blt.n	8000e86 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e6e:	79fb      	ldrb	r3, [r7, #7]
 8000e70:	f003 021f 	and.w	r2, r3, #31
 8000e74:	4907      	ldr	r1, [pc, #28]	@ (8000e94 <__NVIC_EnableIRQ+0x38>)
 8000e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7a:	095b      	lsrs	r3, r3, #5
 8000e7c:	2001      	movs	r0, #1
 8000e7e:	fa00 f202 	lsl.w	r2, r0, r2
 8000e82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e86:	bf00      	nop
 8000e88:	370c      	adds	r7, #12
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	e000e100 	.word	0xe000e100

08000e98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	6039      	str	r1, [r7, #0]
 8000ea2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ea4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	db0a      	blt.n	8000ec2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	b2da      	uxtb	r2, r3
 8000eb0:	490c      	ldr	r1, [pc, #48]	@ (8000ee4 <__NVIC_SetPriority+0x4c>)
 8000eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb6:	0112      	lsls	r2, r2, #4
 8000eb8:	b2d2      	uxtb	r2, r2
 8000eba:	440b      	add	r3, r1
 8000ebc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ec0:	e00a      	b.n	8000ed8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	b2da      	uxtb	r2, r3
 8000ec6:	4908      	ldr	r1, [pc, #32]	@ (8000ee8 <__NVIC_SetPriority+0x50>)
 8000ec8:	79fb      	ldrb	r3, [r7, #7]
 8000eca:	f003 030f 	and.w	r3, r3, #15
 8000ece:	3b04      	subs	r3, #4
 8000ed0:	0112      	lsls	r2, r2, #4
 8000ed2:	b2d2      	uxtb	r2, r2
 8000ed4:	440b      	add	r3, r1
 8000ed6:	761a      	strb	r2, [r3, #24]
}
 8000ed8:	bf00      	nop
 8000eda:	370c      	adds	r7, #12
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr
 8000ee4:	e000e100 	.word	0xe000e100
 8000ee8:	e000ed00 	.word	0xe000ed00

08000eec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b089      	sub	sp, #36	@ 0x24
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	60f8      	str	r0, [r7, #12]
 8000ef4:	60b9      	str	r1, [r7, #8]
 8000ef6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	f003 0307 	and.w	r3, r3, #7
 8000efe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f00:	69fb      	ldr	r3, [r7, #28]
 8000f02:	f1c3 0307 	rsb	r3, r3, #7
 8000f06:	2b04      	cmp	r3, #4
 8000f08:	bf28      	it	cs
 8000f0a:	2304      	movcs	r3, #4
 8000f0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	3304      	adds	r3, #4
 8000f12:	2b06      	cmp	r3, #6
 8000f14:	d902      	bls.n	8000f1c <NVIC_EncodePriority+0x30>
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	3b03      	subs	r3, #3
 8000f1a:	e000      	b.n	8000f1e <NVIC_EncodePriority+0x32>
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f20:	f04f 32ff 	mov.w	r2, #4294967295
 8000f24:	69bb      	ldr	r3, [r7, #24]
 8000f26:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2a:	43da      	mvns	r2, r3
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	401a      	ands	r2, r3
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f34:	f04f 31ff 	mov.w	r1, #4294967295
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f3e:	43d9      	mvns	r1, r3
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f44:	4313      	orrs	r3, r2
         );
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	3724      	adds	r7, #36	@ 0x24
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
	...

08000f54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	3b01      	subs	r3, #1
 8000f60:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f64:	d301      	bcc.n	8000f6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f66:	2301      	movs	r3, #1
 8000f68:	e00f      	b.n	8000f8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f6a:	4a0a      	ldr	r2, [pc, #40]	@ (8000f94 <SysTick_Config+0x40>)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	3b01      	subs	r3, #1
 8000f70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f72:	210f      	movs	r1, #15
 8000f74:	f04f 30ff 	mov.w	r0, #4294967295
 8000f78:	f7ff ff8e 	bl	8000e98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f7c:	4b05      	ldr	r3, [pc, #20]	@ (8000f94 <SysTick_Config+0x40>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f82:	4b04      	ldr	r3, [pc, #16]	@ (8000f94 <SysTick_Config+0x40>)
 8000f84:	2207      	movs	r2, #7
 8000f86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f88:	2300      	movs	r3, #0
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3708      	adds	r7, #8
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	e000e010 	.word	0xe000e010

08000f98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fa0:	6878      	ldr	r0, [r7, #4]
 8000fa2:	f7ff ff29 	bl	8000df8 <__NVIC_SetPriorityGrouping>
}
 8000fa6:	bf00      	nop
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}

08000fae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fae:	b580      	push	{r7, lr}
 8000fb0:	b086      	sub	sp, #24
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	60b9      	str	r1, [r7, #8]
 8000fb8:	607a      	str	r2, [r7, #4]
 8000fba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fc0:	f7ff ff3e 	bl	8000e40 <__NVIC_GetPriorityGrouping>
 8000fc4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fc6:	687a      	ldr	r2, [r7, #4]
 8000fc8:	68b9      	ldr	r1, [r7, #8]
 8000fca:	6978      	ldr	r0, [r7, #20]
 8000fcc:	f7ff ff8e 	bl	8000eec <NVIC_EncodePriority>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fd6:	4611      	mov	r1, r2
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f7ff ff5d 	bl	8000e98 <__NVIC_SetPriority>
}
 8000fde:	bf00      	nop
 8000fe0:	3718      	adds	r7, #24
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}

08000fe6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fe6:	b580      	push	{r7, lr}
 8000fe8:	b082      	sub	sp, #8
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	4603      	mov	r3, r0
 8000fee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ff0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f7ff ff31 	bl	8000e5c <__NVIC_EnableIRQ>
}
 8000ffa:	bf00      	nop
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}

08001002 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001002:	b580      	push	{r7, lr}
 8001004:	b082      	sub	sp, #8
 8001006:	af00      	add	r7, sp, #0
 8001008:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800100a:	6878      	ldr	r0, [r7, #4]
 800100c:	f7ff ffa2 	bl	8000f54 <SysTick_Config>
 8001010:	4603      	mov	r3, r0
}
 8001012:	4618      	mov	r0, r3
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
	...

0800101c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b086      	sub	sp, #24
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001024:	2300      	movs	r3, #0
 8001026:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001028:	f7ff feda 	bl	8000de0 <HAL_GetTick>
 800102c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d101      	bne.n	8001038 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001034:	2301      	movs	r3, #1
 8001036:	e099      	b.n	800116c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2202      	movs	r2, #2
 800103c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2200      	movs	r2, #0
 8001044:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f022 0201 	bic.w	r2, r2, #1
 8001056:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001058:	e00f      	b.n	800107a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800105a:	f7ff fec1 	bl	8000de0 <HAL_GetTick>
 800105e:	4602      	mov	r2, r0
 8001060:	693b      	ldr	r3, [r7, #16]
 8001062:	1ad3      	subs	r3, r2, r3
 8001064:	2b05      	cmp	r3, #5
 8001066:	d908      	bls.n	800107a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2220      	movs	r2, #32
 800106c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2203      	movs	r2, #3
 8001072:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001076:	2303      	movs	r3, #3
 8001078:	e078      	b.n	800116c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f003 0301 	and.w	r3, r3, #1
 8001084:	2b00      	cmp	r3, #0
 8001086:	d1e8      	bne.n	800105a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001090:	697a      	ldr	r2, [r7, #20]
 8001092:	4b38      	ldr	r3, [pc, #224]	@ (8001174 <HAL_DMA_Init+0x158>)
 8001094:	4013      	ands	r3, r2
 8001096:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	685a      	ldr	r2, [r3, #4]
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	689b      	ldr	r3, [r3, #8]
 80010a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80010a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	691b      	ldr	r3, [r3, #16]
 80010ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	699b      	ldr	r3, [r3, #24]
 80010b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6a1b      	ldr	r3, [r3, #32]
 80010c4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80010c6:	697a      	ldr	r2, [r7, #20]
 80010c8:	4313      	orrs	r3, r2
 80010ca:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010d0:	2b04      	cmp	r3, #4
 80010d2:	d107      	bne.n	80010e4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010dc:	4313      	orrs	r3, r2
 80010de:	697a      	ldr	r2, [r7, #20]
 80010e0:	4313      	orrs	r3, r2
 80010e2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	697a      	ldr	r2, [r7, #20]
 80010ea:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	695b      	ldr	r3, [r3, #20]
 80010f2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	f023 0307 	bic.w	r3, r3, #7
 80010fa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001100:	697a      	ldr	r2, [r7, #20]
 8001102:	4313      	orrs	r3, r2
 8001104:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800110a:	2b04      	cmp	r3, #4
 800110c:	d117      	bne.n	800113e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001112:	697a      	ldr	r2, [r7, #20]
 8001114:	4313      	orrs	r3, r2
 8001116:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800111c:	2b00      	cmp	r3, #0
 800111e:	d00e      	beq.n	800113e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001120:	6878      	ldr	r0, [r7, #4]
 8001122:	f000 fa6f 	bl	8001604 <DMA_CheckFifoParam>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d008      	beq.n	800113e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2240      	movs	r2, #64	@ 0x40
 8001130:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2201      	movs	r2, #1
 8001136:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800113a:	2301      	movs	r3, #1
 800113c:	e016      	b.n	800116c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	697a      	ldr	r2, [r7, #20]
 8001144:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001146:	6878      	ldr	r0, [r7, #4]
 8001148:	f000 fa26 	bl	8001598 <DMA_CalcBaseAndBitshift>
 800114c:	4603      	mov	r3, r0
 800114e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001154:	223f      	movs	r2, #63	@ 0x3f
 8001156:	409a      	lsls	r2, r3
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2200      	movs	r2, #0
 8001160:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2201      	movs	r2, #1
 8001166:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800116a:	2300      	movs	r3, #0
}
 800116c:	4618      	mov	r0, r3
 800116e:	3718      	adds	r7, #24
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	f010803f 	.word	0xf010803f

08001178 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b086      	sub	sp, #24
 800117c:	af00      	add	r7, sp, #0
 800117e:	60f8      	str	r0, [r7, #12]
 8001180:	60b9      	str	r1, [r7, #8]
 8001182:	607a      	str	r2, [r7, #4]
 8001184:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001186:	2300      	movs	r3, #0
 8001188:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800118e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001196:	2b01      	cmp	r3, #1
 8001198:	d101      	bne.n	800119e <HAL_DMA_Start_IT+0x26>
 800119a:	2302      	movs	r3, #2
 800119c:	e040      	b.n	8001220 <HAL_DMA_Start_IT+0xa8>
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	2201      	movs	r2, #1
 80011a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	2b01      	cmp	r3, #1
 80011b0:	d12f      	bne.n	8001212 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	2202      	movs	r2, #2
 80011b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	2200      	movs	r2, #0
 80011be:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	687a      	ldr	r2, [r7, #4]
 80011c4:	68b9      	ldr	r1, [r7, #8]
 80011c6:	68f8      	ldr	r0, [r7, #12]
 80011c8:	f000 f9b8 	bl	800153c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80011d0:	223f      	movs	r2, #63	@ 0x3f
 80011d2:	409a      	lsls	r2, r3
 80011d4:	693b      	ldr	r3, [r7, #16]
 80011d6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	681a      	ldr	r2, [r3, #0]
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f042 0216 	orr.w	r2, r2, #22
 80011e6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d007      	beq.n	8001200 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f042 0208 	orr.w	r2, r2, #8
 80011fe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f042 0201 	orr.w	r2, r2, #1
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	e005      	b.n	800121e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	2200      	movs	r2, #0
 8001216:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800121a:	2302      	movs	r3, #2
 800121c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800121e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001220:	4618      	mov	r0, r3
 8001222:	3718      	adds	r7, #24
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}

08001228 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b086      	sub	sp, #24
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001230:	2300      	movs	r3, #0
 8001232:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001234:	4b8e      	ldr	r3, [pc, #568]	@ (8001470 <HAL_DMA_IRQHandler+0x248>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a8e      	ldr	r2, [pc, #568]	@ (8001474 <HAL_DMA_IRQHandler+0x24c>)
 800123a:	fba2 2303 	umull	r2, r3, r2, r3
 800123e:	0a9b      	lsrs	r3, r3, #10
 8001240:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001246:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001252:	2208      	movs	r2, #8
 8001254:	409a      	lsls	r2, r3
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	4013      	ands	r3, r2
 800125a:	2b00      	cmp	r3, #0
 800125c:	d01a      	beq.n	8001294 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f003 0304 	and.w	r3, r3, #4
 8001268:	2b00      	cmp	r3, #0
 800126a:	d013      	beq.n	8001294 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f022 0204 	bic.w	r2, r2, #4
 800127a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001280:	2208      	movs	r2, #8
 8001282:	409a      	lsls	r2, r3
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800128c:	f043 0201 	orr.w	r2, r3, #1
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001298:	2201      	movs	r2, #1
 800129a:	409a      	lsls	r2, r3
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	4013      	ands	r3, r2
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d012      	beq.n	80012ca <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	695b      	ldr	r3, [r3, #20]
 80012aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d00b      	beq.n	80012ca <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012b6:	2201      	movs	r2, #1
 80012b8:	409a      	lsls	r2, r3
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80012c2:	f043 0202 	orr.w	r2, r3, #2
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012ce:	2204      	movs	r2, #4
 80012d0:	409a      	lsls	r2, r3
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	4013      	ands	r3, r2
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d012      	beq.n	8001300 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f003 0302 	and.w	r3, r3, #2
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d00b      	beq.n	8001300 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012ec:	2204      	movs	r2, #4
 80012ee:	409a      	lsls	r2, r3
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80012f8:	f043 0204 	orr.w	r2, r3, #4
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001304:	2210      	movs	r2, #16
 8001306:	409a      	lsls	r2, r3
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	4013      	ands	r3, r2
 800130c:	2b00      	cmp	r3, #0
 800130e:	d043      	beq.n	8001398 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f003 0308 	and.w	r3, r3, #8
 800131a:	2b00      	cmp	r3, #0
 800131c:	d03c      	beq.n	8001398 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001322:	2210      	movs	r2, #16
 8001324:	409a      	lsls	r2, r3
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001334:	2b00      	cmp	r3, #0
 8001336:	d018      	beq.n	800136a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001342:	2b00      	cmp	r3, #0
 8001344:	d108      	bne.n	8001358 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800134a:	2b00      	cmp	r3, #0
 800134c:	d024      	beq.n	8001398 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001352:	6878      	ldr	r0, [r7, #4]
 8001354:	4798      	blx	r3
 8001356:	e01f      	b.n	8001398 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800135c:	2b00      	cmp	r3, #0
 800135e:	d01b      	beq.n	8001398 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001364:	6878      	ldr	r0, [r7, #4]
 8001366:	4798      	blx	r3
 8001368:	e016      	b.n	8001398 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001374:	2b00      	cmp	r3, #0
 8001376:	d107      	bne.n	8001388 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f022 0208 	bic.w	r2, r2, #8
 8001386:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800138c:	2b00      	cmp	r3, #0
 800138e:	d003      	beq.n	8001398 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001394:	6878      	ldr	r0, [r7, #4]
 8001396:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800139c:	2220      	movs	r2, #32
 800139e:	409a      	lsls	r2, r3
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	4013      	ands	r3, r2
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	f000 808f 	beq.w	80014c8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f003 0310 	and.w	r3, r3, #16
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	f000 8087 	beq.w	80014c8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013be:	2220      	movs	r2, #32
 80013c0:	409a      	lsls	r2, r3
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	2b05      	cmp	r3, #5
 80013d0:	d136      	bne.n	8001440 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f022 0216 	bic.w	r2, r2, #22
 80013e0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	695a      	ldr	r2, [r3, #20]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80013f0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d103      	bne.n	8001402 <HAL_DMA_IRQHandler+0x1da>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d007      	beq.n	8001412 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f022 0208 	bic.w	r2, r2, #8
 8001410:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001416:	223f      	movs	r2, #63	@ 0x3f
 8001418:	409a      	lsls	r2, r3
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2201      	movs	r2, #1
 8001422:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2200      	movs	r2, #0
 800142a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001432:	2b00      	cmp	r3, #0
 8001434:	d07e      	beq.n	8001534 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	4798      	blx	r3
        }
        return;
 800143e:	e079      	b.n	8001534 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800144a:	2b00      	cmp	r3, #0
 800144c:	d01d      	beq.n	800148a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001458:	2b00      	cmp	r3, #0
 800145a:	d10d      	bne.n	8001478 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001460:	2b00      	cmp	r3, #0
 8001462:	d031      	beq.n	80014c8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001468:	6878      	ldr	r0, [r7, #4]
 800146a:	4798      	blx	r3
 800146c:	e02c      	b.n	80014c8 <HAL_DMA_IRQHandler+0x2a0>
 800146e:	bf00      	nop
 8001470:	20000000 	.word	0x20000000
 8001474:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800147c:	2b00      	cmp	r3, #0
 800147e:	d023      	beq.n	80014c8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001484:	6878      	ldr	r0, [r7, #4]
 8001486:	4798      	blx	r3
 8001488:	e01e      	b.n	80014c8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001494:	2b00      	cmp	r3, #0
 8001496:	d10f      	bne.n	80014b8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f022 0210 	bic.w	r2, r2, #16
 80014a6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2201      	movs	r2, #1
 80014ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2200      	movs	r2, #0
 80014b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d003      	beq.n	80014c8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80014c4:	6878      	ldr	r0, [r7, #4]
 80014c6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d032      	beq.n	8001536 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014d4:	f003 0301 	and.w	r3, r3, #1
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d022      	beq.n	8001522 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2205      	movs	r2, #5
 80014e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f022 0201 	bic.w	r2, r2, #1
 80014f2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	3301      	adds	r3, #1
 80014f8:	60bb      	str	r3, [r7, #8]
 80014fa:	697a      	ldr	r2, [r7, #20]
 80014fc:	429a      	cmp	r2, r3
 80014fe:	d307      	bcc.n	8001510 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f003 0301 	and.w	r3, r3, #1
 800150a:	2b00      	cmp	r3, #0
 800150c:	d1f2      	bne.n	80014f4 <HAL_DMA_IRQHandler+0x2cc>
 800150e:	e000      	b.n	8001512 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001510:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2201      	movs	r2, #1
 8001516:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2200      	movs	r2, #0
 800151e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001526:	2b00      	cmp	r3, #0
 8001528:	d005      	beq.n	8001536 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	4798      	blx	r3
 8001532:	e000      	b.n	8001536 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001534:	bf00      	nop
    }
  }
}
 8001536:	3718      	adds	r7, #24
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}

0800153c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800153c:	b480      	push	{r7}
 800153e:	b085      	sub	sp, #20
 8001540:	af00      	add	r7, sp, #0
 8001542:	60f8      	str	r0, [r7, #12]
 8001544:	60b9      	str	r1, [r7, #8]
 8001546:	607a      	str	r2, [r7, #4]
 8001548:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001558:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	683a      	ldr	r2, [r7, #0]
 8001560:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	2b40      	cmp	r3, #64	@ 0x40
 8001568:	d108      	bne.n	800157c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	687a      	ldr	r2, [r7, #4]
 8001570:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	68ba      	ldr	r2, [r7, #8]
 8001578:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800157a:	e007      	b.n	800158c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	68ba      	ldr	r2, [r7, #8]
 8001582:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	687a      	ldr	r2, [r7, #4]
 800158a:	60da      	str	r2, [r3, #12]
}
 800158c:	bf00      	nop
 800158e:	3714      	adds	r7, #20
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr

08001598 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001598:	b480      	push	{r7}
 800159a:	b085      	sub	sp, #20
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	3b10      	subs	r3, #16
 80015a8:	4a14      	ldr	r2, [pc, #80]	@ (80015fc <DMA_CalcBaseAndBitshift+0x64>)
 80015aa:	fba2 2303 	umull	r2, r3, r2, r3
 80015ae:	091b      	lsrs	r3, r3, #4
 80015b0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80015b2:	4a13      	ldr	r2, [pc, #76]	@ (8001600 <DMA_CalcBaseAndBitshift+0x68>)
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	4413      	add	r3, r2
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	461a      	mov	r2, r3
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	2b03      	cmp	r3, #3
 80015c4:	d909      	bls.n	80015da <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80015ce:	f023 0303 	bic.w	r3, r3, #3
 80015d2:	1d1a      	adds	r2, r3, #4
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	659a      	str	r2, [r3, #88]	@ 0x58
 80015d8:	e007      	b.n	80015ea <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80015e2:	f023 0303 	bic.w	r3, r3, #3
 80015e6:	687a      	ldr	r2, [r7, #4]
 80015e8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3714      	adds	r7, #20
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	aaaaaaab 	.word	0xaaaaaaab
 8001600:	080037a8 	.word	0x080037a8

08001604 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001604:	b480      	push	{r7}
 8001606:	b085      	sub	sp, #20
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800160c:	2300      	movs	r3, #0
 800160e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001614:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	699b      	ldr	r3, [r3, #24]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d11f      	bne.n	800165e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800161e:	68bb      	ldr	r3, [r7, #8]
 8001620:	2b03      	cmp	r3, #3
 8001622:	d856      	bhi.n	80016d2 <DMA_CheckFifoParam+0xce>
 8001624:	a201      	add	r2, pc, #4	@ (adr r2, 800162c <DMA_CheckFifoParam+0x28>)
 8001626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800162a:	bf00      	nop
 800162c:	0800163d 	.word	0x0800163d
 8001630:	0800164f 	.word	0x0800164f
 8001634:	0800163d 	.word	0x0800163d
 8001638:	080016d3 	.word	0x080016d3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001640:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001644:	2b00      	cmp	r3, #0
 8001646:	d046      	beq.n	80016d6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800164c:	e043      	b.n	80016d6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001652:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001656:	d140      	bne.n	80016da <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001658:	2301      	movs	r3, #1
 800165a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800165c:	e03d      	b.n	80016da <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	699b      	ldr	r3, [r3, #24]
 8001662:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001666:	d121      	bne.n	80016ac <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	2b03      	cmp	r3, #3
 800166c:	d837      	bhi.n	80016de <DMA_CheckFifoParam+0xda>
 800166e:	a201      	add	r2, pc, #4	@ (adr r2, 8001674 <DMA_CheckFifoParam+0x70>)
 8001670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001674:	08001685 	.word	0x08001685
 8001678:	0800168b 	.word	0x0800168b
 800167c:	08001685 	.word	0x08001685
 8001680:	0800169d 	.word	0x0800169d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001684:	2301      	movs	r3, #1
 8001686:	73fb      	strb	r3, [r7, #15]
      break;
 8001688:	e030      	b.n	80016ec <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800168e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001692:	2b00      	cmp	r3, #0
 8001694:	d025      	beq.n	80016e2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800169a:	e022      	b.n	80016e2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016a0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80016a4:	d11f      	bne.n	80016e6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80016aa:	e01c      	b.n	80016e6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	2b02      	cmp	r3, #2
 80016b0:	d903      	bls.n	80016ba <DMA_CheckFifoParam+0xb6>
 80016b2:	68bb      	ldr	r3, [r7, #8]
 80016b4:	2b03      	cmp	r3, #3
 80016b6:	d003      	beq.n	80016c0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80016b8:	e018      	b.n	80016ec <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	73fb      	strb	r3, [r7, #15]
      break;
 80016be:	e015      	b.n	80016ec <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016c4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d00e      	beq.n	80016ea <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80016cc:	2301      	movs	r3, #1
 80016ce:	73fb      	strb	r3, [r7, #15]
      break;
 80016d0:	e00b      	b.n	80016ea <DMA_CheckFifoParam+0xe6>
      break;
 80016d2:	bf00      	nop
 80016d4:	e00a      	b.n	80016ec <DMA_CheckFifoParam+0xe8>
      break;
 80016d6:	bf00      	nop
 80016d8:	e008      	b.n	80016ec <DMA_CheckFifoParam+0xe8>
      break;
 80016da:	bf00      	nop
 80016dc:	e006      	b.n	80016ec <DMA_CheckFifoParam+0xe8>
      break;
 80016de:	bf00      	nop
 80016e0:	e004      	b.n	80016ec <DMA_CheckFifoParam+0xe8>
      break;
 80016e2:	bf00      	nop
 80016e4:	e002      	b.n	80016ec <DMA_CheckFifoParam+0xe8>
      break;   
 80016e6:	bf00      	nop
 80016e8:	e000      	b.n	80016ec <DMA_CheckFifoParam+0xe8>
      break;
 80016ea:	bf00      	nop
    }
  } 
  
  return status; 
 80016ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3714      	adds	r7, #20
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop

080016fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b089      	sub	sp, #36	@ 0x24
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
 8001704:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001706:	2300      	movs	r3, #0
 8001708:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800170a:	2300      	movs	r3, #0
 800170c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800170e:	2300      	movs	r3, #0
 8001710:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001712:	2300      	movs	r3, #0
 8001714:	61fb      	str	r3, [r7, #28]
 8001716:	e159      	b.n	80019cc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001718:	2201      	movs	r2, #1
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	fa02 f303 	lsl.w	r3, r2, r3
 8001720:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	697a      	ldr	r2, [r7, #20]
 8001728:	4013      	ands	r3, r2
 800172a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800172c:	693a      	ldr	r2, [r7, #16]
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	429a      	cmp	r2, r3
 8001732:	f040 8148 	bne.w	80019c6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	f003 0303 	and.w	r3, r3, #3
 800173e:	2b01      	cmp	r3, #1
 8001740:	d005      	beq.n	800174e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800174a:	2b02      	cmp	r3, #2
 800174c:	d130      	bne.n	80017b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001754:	69fb      	ldr	r3, [r7, #28]
 8001756:	005b      	lsls	r3, r3, #1
 8001758:	2203      	movs	r2, #3
 800175a:	fa02 f303 	lsl.w	r3, r2, r3
 800175e:	43db      	mvns	r3, r3
 8001760:	69ba      	ldr	r2, [r7, #24]
 8001762:	4013      	ands	r3, r2
 8001764:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	68da      	ldr	r2, [r3, #12]
 800176a:	69fb      	ldr	r3, [r7, #28]
 800176c:	005b      	lsls	r3, r3, #1
 800176e:	fa02 f303 	lsl.w	r3, r2, r3
 8001772:	69ba      	ldr	r2, [r7, #24]
 8001774:	4313      	orrs	r3, r2
 8001776:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	69ba      	ldr	r2, [r7, #24]
 800177c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001784:	2201      	movs	r2, #1
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	fa02 f303 	lsl.w	r3, r2, r3
 800178c:	43db      	mvns	r3, r3
 800178e:	69ba      	ldr	r2, [r7, #24]
 8001790:	4013      	ands	r3, r2
 8001792:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	091b      	lsrs	r3, r3, #4
 800179a:	f003 0201 	and.w	r2, r3, #1
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	fa02 f303 	lsl.w	r3, r2, r3
 80017a4:	69ba      	ldr	r2, [r7, #24]
 80017a6:	4313      	orrs	r3, r2
 80017a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	69ba      	ldr	r2, [r7, #24]
 80017ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f003 0303 	and.w	r3, r3, #3
 80017b8:	2b03      	cmp	r3, #3
 80017ba:	d017      	beq.n	80017ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	005b      	lsls	r3, r3, #1
 80017c6:	2203      	movs	r2, #3
 80017c8:	fa02 f303 	lsl.w	r3, r2, r3
 80017cc:	43db      	mvns	r3, r3
 80017ce:	69ba      	ldr	r2, [r7, #24]
 80017d0:	4013      	ands	r3, r2
 80017d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	689a      	ldr	r2, [r3, #8]
 80017d8:	69fb      	ldr	r3, [r7, #28]
 80017da:	005b      	lsls	r3, r3, #1
 80017dc:	fa02 f303 	lsl.w	r3, r2, r3
 80017e0:	69ba      	ldr	r2, [r7, #24]
 80017e2:	4313      	orrs	r3, r2
 80017e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	69ba      	ldr	r2, [r7, #24]
 80017ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f003 0303 	and.w	r3, r3, #3
 80017f4:	2b02      	cmp	r3, #2
 80017f6:	d123      	bne.n	8001840 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017f8:	69fb      	ldr	r3, [r7, #28]
 80017fa:	08da      	lsrs	r2, r3, #3
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	3208      	adds	r2, #8
 8001800:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001804:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	f003 0307 	and.w	r3, r3, #7
 800180c:	009b      	lsls	r3, r3, #2
 800180e:	220f      	movs	r2, #15
 8001810:	fa02 f303 	lsl.w	r3, r2, r3
 8001814:	43db      	mvns	r3, r3
 8001816:	69ba      	ldr	r2, [r7, #24]
 8001818:	4013      	ands	r3, r2
 800181a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	691a      	ldr	r2, [r3, #16]
 8001820:	69fb      	ldr	r3, [r7, #28]
 8001822:	f003 0307 	and.w	r3, r3, #7
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	fa02 f303 	lsl.w	r3, r2, r3
 800182c:	69ba      	ldr	r2, [r7, #24]
 800182e:	4313      	orrs	r3, r2
 8001830:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001832:	69fb      	ldr	r3, [r7, #28]
 8001834:	08da      	lsrs	r2, r3, #3
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	3208      	adds	r2, #8
 800183a:	69b9      	ldr	r1, [r7, #24]
 800183c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	005b      	lsls	r3, r3, #1
 800184a:	2203      	movs	r2, #3
 800184c:	fa02 f303 	lsl.w	r3, r2, r3
 8001850:	43db      	mvns	r3, r3
 8001852:	69ba      	ldr	r2, [r7, #24]
 8001854:	4013      	ands	r3, r2
 8001856:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	f003 0203 	and.w	r2, r3, #3
 8001860:	69fb      	ldr	r3, [r7, #28]
 8001862:	005b      	lsls	r3, r3, #1
 8001864:	fa02 f303 	lsl.w	r3, r2, r3
 8001868:	69ba      	ldr	r2, [r7, #24]
 800186a:	4313      	orrs	r3, r2
 800186c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	69ba      	ldr	r2, [r7, #24]
 8001872:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800187c:	2b00      	cmp	r3, #0
 800187e:	f000 80a2 	beq.w	80019c6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001882:	2300      	movs	r3, #0
 8001884:	60fb      	str	r3, [r7, #12]
 8001886:	4b57      	ldr	r3, [pc, #348]	@ (80019e4 <HAL_GPIO_Init+0x2e8>)
 8001888:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800188a:	4a56      	ldr	r2, [pc, #344]	@ (80019e4 <HAL_GPIO_Init+0x2e8>)
 800188c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001890:	6453      	str	r3, [r2, #68]	@ 0x44
 8001892:	4b54      	ldr	r3, [pc, #336]	@ (80019e4 <HAL_GPIO_Init+0x2e8>)
 8001894:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001896:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800189a:	60fb      	str	r3, [r7, #12]
 800189c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800189e:	4a52      	ldr	r2, [pc, #328]	@ (80019e8 <HAL_GPIO_Init+0x2ec>)
 80018a0:	69fb      	ldr	r3, [r7, #28]
 80018a2:	089b      	lsrs	r3, r3, #2
 80018a4:	3302      	adds	r3, #2
 80018a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	f003 0303 	and.w	r3, r3, #3
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	220f      	movs	r2, #15
 80018b6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ba:	43db      	mvns	r3, r3
 80018bc:	69ba      	ldr	r2, [r7, #24]
 80018be:	4013      	ands	r3, r2
 80018c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	4a49      	ldr	r2, [pc, #292]	@ (80019ec <HAL_GPIO_Init+0x2f0>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d019      	beq.n	80018fe <HAL_GPIO_Init+0x202>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	4a48      	ldr	r2, [pc, #288]	@ (80019f0 <HAL_GPIO_Init+0x2f4>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d013      	beq.n	80018fa <HAL_GPIO_Init+0x1fe>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4a47      	ldr	r2, [pc, #284]	@ (80019f4 <HAL_GPIO_Init+0x2f8>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d00d      	beq.n	80018f6 <HAL_GPIO_Init+0x1fa>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4a46      	ldr	r2, [pc, #280]	@ (80019f8 <HAL_GPIO_Init+0x2fc>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d007      	beq.n	80018f2 <HAL_GPIO_Init+0x1f6>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4a45      	ldr	r2, [pc, #276]	@ (80019fc <HAL_GPIO_Init+0x300>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d101      	bne.n	80018ee <HAL_GPIO_Init+0x1f2>
 80018ea:	2304      	movs	r3, #4
 80018ec:	e008      	b.n	8001900 <HAL_GPIO_Init+0x204>
 80018ee:	2307      	movs	r3, #7
 80018f0:	e006      	b.n	8001900 <HAL_GPIO_Init+0x204>
 80018f2:	2303      	movs	r3, #3
 80018f4:	e004      	b.n	8001900 <HAL_GPIO_Init+0x204>
 80018f6:	2302      	movs	r3, #2
 80018f8:	e002      	b.n	8001900 <HAL_GPIO_Init+0x204>
 80018fa:	2301      	movs	r3, #1
 80018fc:	e000      	b.n	8001900 <HAL_GPIO_Init+0x204>
 80018fe:	2300      	movs	r3, #0
 8001900:	69fa      	ldr	r2, [r7, #28]
 8001902:	f002 0203 	and.w	r2, r2, #3
 8001906:	0092      	lsls	r2, r2, #2
 8001908:	4093      	lsls	r3, r2
 800190a:	69ba      	ldr	r2, [r7, #24]
 800190c:	4313      	orrs	r3, r2
 800190e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001910:	4935      	ldr	r1, [pc, #212]	@ (80019e8 <HAL_GPIO_Init+0x2ec>)
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	089b      	lsrs	r3, r3, #2
 8001916:	3302      	adds	r3, #2
 8001918:	69ba      	ldr	r2, [r7, #24]
 800191a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800191e:	4b38      	ldr	r3, [pc, #224]	@ (8001a00 <HAL_GPIO_Init+0x304>)
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	43db      	mvns	r3, r3
 8001928:	69ba      	ldr	r2, [r7, #24]
 800192a:	4013      	ands	r3, r2
 800192c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001936:	2b00      	cmp	r3, #0
 8001938:	d003      	beq.n	8001942 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800193a:	69ba      	ldr	r2, [r7, #24]
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	4313      	orrs	r3, r2
 8001940:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001942:	4a2f      	ldr	r2, [pc, #188]	@ (8001a00 <HAL_GPIO_Init+0x304>)
 8001944:	69bb      	ldr	r3, [r7, #24]
 8001946:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001948:	4b2d      	ldr	r3, [pc, #180]	@ (8001a00 <HAL_GPIO_Init+0x304>)
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	43db      	mvns	r3, r3
 8001952:	69ba      	ldr	r2, [r7, #24]
 8001954:	4013      	ands	r3, r2
 8001956:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001960:	2b00      	cmp	r3, #0
 8001962:	d003      	beq.n	800196c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001964:	69ba      	ldr	r2, [r7, #24]
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	4313      	orrs	r3, r2
 800196a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800196c:	4a24      	ldr	r2, [pc, #144]	@ (8001a00 <HAL_GPIO_Init+0x304>)
 800196e:	69bb      	ldr	r3, [r7, #24]
 8001970:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001972:	4b23      	ldr	r3, [pc, #140]	@ (8001a00 <HAL_GPIO_Init+0x304>)
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	43db      	mvns	r3, r3
 800197c:	69ba      	ldr	r2, [r7, #24]
 800197e:	4013      	ands	r3, r2
 8001980:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800198a:	2b00      	cmp	r3, #0
 800198c:	d003      	beq.n	8001996 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800198e:	69ba      	ldr	r2, [r7, #24]
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	4313      	orrs	r3, r2
 8001994:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001996:	4a1a      	ldr	r2, [pc, #104]	@ (8001a00 <HAL_GPIO_Init+0x304>)
 8001998:	69bb      	ldr	r3, [r7, #24]
 800199a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800199c:	4b18      	ldr	r3, [pc, #96]	@ (8001a00 <HAL_GPIO_Init+0x304>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	43db      	mvns	r3, r3
 80019a6:	69ba      	ldr	r2, [r7, #24]
 80019a8:	4013      	ands	r3, r2
 80019aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d003      	beq.n	80019c0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80019b8:	69ba      	ldr	r2, [r7, #24]
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	4313      	orrs	r3, r2
 80019be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80019c0:	4a0f      	ldr	r2, [pc, #60]	@ (8001a00 <HAL_GPIO_Init+0x304>)
 80019c2:	69bb      	ldr	r3, [r7, #24]
 80019c4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	3301      	adds	r3, #1
 80019ca:	61fb      	str	r3, [r7, #28]
 80019cc:	69fb      	ldr	r3, [r7, #28]
 80019ce:	2b0f      	cmp	r3, #15
 80019d0:	f67f aea2 	bls.w	8001718 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80019d4:	bf00      	nop
 80019d6:	bf00      	nop
 80019d8:	3724      	adds	r7, #36	@ 0x24
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	40023800 	.word	0x40023800
 80019e8:	40013800 	.word	0x40013800
 80019ec:	40020000 	.word	0x40020000
 80019f0:	40020400 	.word	0x40020400
 80019f4:	40020800 	.word	0x40020800
 80019f8:	40020c00 	.word	0x40020c00
 80019fc:	40021000 	.word	0x40021000
 8001a00:	40013c00 	.word	0x40013c00

08001a04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	460b      	mov	r3, r1
 8001a0e:	807b      	strh	r3, [r7, #2]
 8001a10:	4613      	mov	r3, r2
 8001a12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a14:	787b      	ldrb	r3, [r7, #1]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d003      	beq.n	8001a22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a1a:	887a      	ldrh	r2, [r7, #2]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a20:	e003      	b.n	8001a2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a22:	887b      	ldrh	r3, [r7, #2]
 8001a24:	041a      	lsls	r2, r3, #16
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	619a      	str	r2, [r3, #24]
}
 8001a2a:	bf00      	nop
 8001a2c:	370c      	adds	r7, #12
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
	...

08001a38 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b086      	sub	sp, #24
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d101      	bne.n	8001a4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e267      	b.n	8001f1a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 0301 	and.w	r3, r3, #1
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d075      	beq.n	8001b42 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001a56:	4b88      	ldr	r3, [pc, #544]	@ (8001c78 <HAL_RCC_OscConfig+0x240>)
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	f003 030c 	and.w	r3, r3, #12
 8001a5e:	2b04      	cmp	r3, #4
 8001a60:	d00c      	beq.n	8001a7c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a62:	4b85      	ldr	r3, [pc, #532]	@ (8001c78 <HAL_RCC_OscConfig+0x240>)
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001a6a:	2b08      	cmp	r3, #8
 8001a6c:	d112      	bne.n	8001a94 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a6e:	4b82      	ldr	r3, [pc, #520]	@ (8001c78 <HAL_RCC_OscConfig+0x240>)
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a76:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001a7a:	d10b      	bne.n	8001a94 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a7c:	4b7e      	ldr	r3, [pc, #504]	@ (8001c78 <HAL_RCC_OscConfig+0x240>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d05b      	beq.n	8001b40 <HAL_RCC_OscConfig+0x108>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d157      	bne.n	8001b40 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	e242      	b.n	8001f1a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a9c:	d106      	bne.n	8001aac <HAL_RCC_OscConfig+0x74>
 8001a9e:	4b76      	ldr	r3, [pc, #472]	@ (8001c78 <HAL_RCC_OscConfig+0x240>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a75      	ldr	r2, [pc, #468]	@ (8001c78 <HAL_RCC_OscConfig+0x240>)
 8001aa4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001aa8:	6013      	str	r3, [r2, #0]
 8001aaa:	e01d      	b.n	8001ae8 <HAL_RCC_OscConfig+0xb0>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ab4:	d10c      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x98>
 8001ab6:	4b70      	ldr	r3, [pc, #448]	@ (8001c78 <HAL_RCC_OscConfig+0x240>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a6f      	ldr	r2, [pc, #444]	@ (8001c78 <HAL_RCC_OscConfig+0x240>)
 8001abc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ac0:	6013      	str	r3, [r2, #0]
 8001ac2:	4b6d      	ldr	r3, [pc, #436]	@ (8001c78 <HAL_RCC_OscConfig+0x240>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a6c      	ldr	r2, [pc, #432]	@ (8001c78 <HAL_RCC_OscConfig+0x240>)
 8001ac8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001acc:	6013      	str	r3, [r2, #0]
 8001ace:	e00b      	b.n	8001ae8 <HAL_RCC_OscConfig+0xb0>
 8001ad0:	4b69      	ldr	r3, [pc, #420]	@ (8001c78 <HAL_RCC_OscConfig+0x240>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a68      	ldr	r2, [pc, #416]	@ (8001c78 <HAL_RCC_OscConfig+0x240>)
 8001ad6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ada:	6013      	str	r3, [r2, #0]
 8001adc:	4b66      	ldr	r3, [pc, #408]	@ (8001c78 <HAL_RCC_OscConfig+0x240>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a65      	ldr	r2, [pc, #404]	@ (8001c78 <HAL_RCC_OscConfig+0x240>)
 8001ae2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ae6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d013      	beq.n	8001b18 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001af0:	f7ff f976 	bl	8000de0 <HAL_GetTick>
 8001af4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001af6:	e008      	b.n	8001b0a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001af8:	f7ff f972 	bl	8000de0 <HAL_GetTick>
 8001afc:	4602      	mov	r2, r0
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	2b64      	cmp	r3, #100	@ 0x64
 8001b04:	d901      	bls.n	8001b0a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001b06:	2303      	movs	r3, #3
 8001b08:	e207      	b.n	8001f1a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b0a:	4b5b      	ldr	r3, [pc, #364]	@ (8001c78 <HAL_RCC_OscConfig+0x240>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d0f0      	beq.n	8001af8 <HAL_RCC_OscConfig+0xc0>
 8001b16:	e014      	b.n	8001b42 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b18:	f7ff f962 	bl	8000de0 <HAL_GetTick>
 8001b1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b1e:	e008      	b.n	8001b32 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b20:	f7ff f95e 	bl	8000de0 <HAL_GetTick>
 8001b24:	4602      	mov	r2, r0
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	2b64      	cmp	r3, #100	@ 0x64
 8001b2c:	d901      	bls.n	8001b32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	e1f3      	b.n	8001f1a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b32:	4b51      	ldr	r3, [pc, #324]	@ (8001c78 <HAL_RCC_OscConfig+0x240>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d1f0      	bne.n	8001b20 <HAL_RCC_OscConfig+0xe8>
 8001b3e:	e000      	b.n	8001b42 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 0302 	and.w	r3, r3, #2
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d063      	beq.n	8001c16 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001b4e:	4b4a      	ldr	r3, [pc, #296]	@ (8001c78 <HAL_RCC_OscConfig+0x240>)
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	f003 030c 	and.w	r3, r3, #12
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d00b      	beq.n	8001b72 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b5a:	4b47      	ldr	r3, [pc, #284]	@ (8001c78 <HAL_RCC_OscConfig+0x240>)
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001b62:	2b08      	cmp	r3, #8
 8001b64:	d11c      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b66:	4b44      	ldr	r3, [pc, #272]	@ (8001c78 <HAL_RCC_OscConfig+0x240>)
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d116      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b72:	4b41      	ldr	r3, [pc, #260]	@ (8001c78 <HAL_RCC_OscConfig+0x240>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 0302 	and.w	r3, r3, #2
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d005      	beq.n	8001b8a <HAL_RCC_OscConfig+0x152>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	68db      	ldr	r3, [r3, #12]
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d001      	beq.n	8001b8a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e1c7      	b.n	8001f1a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b8a:	4b3b      	ldr	r3, [pc, #236]	@ (8001c78 <HAL_RCC_OscConfig+0x240>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	691b      	ldr	r3, [r3, #16]
 8001b96:	00db      	lsls	r3, r3, #3
 8001b98:	4937      	ldr	r1, [pc, #220]	@ (8001c78 <HAL_RCC_OscConfig+0x240>)
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b9e:	e03a      	b.n	8001c16 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d020      	beq.n	8001bea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ba8:	4b34      	ldr	r3, [pc, #208]	@ (8001c7c <HAL_RCC_OscConfig+0x244>)
 8001baa:	2201      	movs	r2, #1
 8001bac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bae:	f7ff f917 	bl	8000de0 <HAL_GetTick>
 8001bb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bb4:	e008      	b.n	8001bc8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bb6:	f7ff f913 	bl	8000de0 <HAL_GetTick>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	1ad3      	subs	r3, r2, r3
 8001bc0:	2b02      	cmp	r3, #2
 8001bc2:	d901      	bls.n	8001bc8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	e1a8      	b.n	8001f1a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bc8:	4b2b      	ldr	r3, [pc, #172]	@ (8001c78 <HAL_RCC_OscConfig+0x240>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 0302 	and.w	r3, r3, #2
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d0f0      	beq.n	8001bb6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bd4:	4b28      	ldr	r3, [pc, #160]	@ (8001c78 <HAL_RCC_OscConfig+0x240>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	691b      	ldr	r3, [r3, #16]
 8001be0:	00db      	lsls	r3, r3, #3
 8001be2:	4925      	ldr	r1, [pc, #148]	@ (8001c78 <HAL_RCC_OscConfig+0x240>)
 8001be4:	4313      	orrs	r3, r2
 8001be6:	600b      	str	r3, [r1, #0]
 8001be8:	e015      	b.n	8001c16 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bea:	4b24      	ldr	r3, [pc, #144]	@ (8001c7c <HAL_RCC_OscConfig+0x244>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bf0:	f7ff f8f6 	bl	8000de0 <HAL_GetTick>
 8001bf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bf6:	e008      	b.n	8001c0a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bf8:	f7ff f8f2 	bl	8000de0 <HAL_GetTick>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	2b02      	cmp	r3, #2
 8001c04:	d901      	bls.n	8001c0a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001c06:	2303      	movs	r3, #3
 8001c08:	e187      	b.n	8001f1a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c0a:	4b1b      	ldr	r3, [pc, #108]	@ (8001c78 <HAL_RCC_OscConfig+0x240>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 0302 	and.w	r3, r3, #2
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d1f0      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0308 	and.w	r3, r3, #8
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d036      	beq.n	8001c90 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	695b      	ldr	r3, [r3, #20]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d016      	beq.n	8001c58 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c2a:	4b15      	ldr	r3, [pc, #84]	@ (8001c80 <HAL_RCC_OscConfig+0x248>)
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c30:	f7ff f8d6 	bl	8000de0 <HAL_GetTick>
 8001c34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c36:	e008      	b.n	8001c4a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c38:	f7ff f8d2 	bl	8000de0 <HAL_GetTick>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d901      	bls.n	8001c4a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001c46:	2303      	movs	r3, #3
 8001c48:	e167      	b.n	8001f1a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c4a:	4b0b      	ldr	r3, [pc, #44]	@ (8001c78 <HAL_RCC_OscConfig+0x240>)
 8001c4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c4e:	f003 0302 	and.w	r3, r3, #2
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d0f0      	beq.n	8001c38 <HAL_RCC_OscConfig+0x200>
 8001c56:	e01b      	b.n	8001c90 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c58:	4b09      	ldr	r3, [pc, #36]	@ (8001c80 <HAL_RCC_OscConfig+0x248>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c5e:	f7ff f8bf 	bl	8000de0 <HAL_GetTick>
 8001c62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c64:	e00e      	b.n	8001c84 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c66:	f7ff f8bb 	bl	8000de0 <HAL_GetTick>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	1ad3      	subs	r3, r2, r3
 8001c70:	2b02      	cmp	r3, #2
 8001c72:	d907      	bls.n	8001c84 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001c74:	2303      	movs	r3, #3
 8001c76:	e150      	b.n	8001f1a <HAL_RCC_OscConfig+0x4e2>
 8001c78:	40023800 	.word	0x40023800
 8001c7c:	42470000 	.word	0x42470000
 8001c80:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c84:	4b88      	ldr	r3, [pc, #544]	@ (8001ea8 <HAL_RCC_OscConfig+0x470>)
 8001c86:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c88:	f003 0302 	and.w	r3, r3, #2
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d1ea      	bne.n	8001c66 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 0304 	and.w	r3, r3, #4
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	f000 8097 	beq.w	8001dcc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ca2:	4b81      	ldr	r3, [pc, #516]	@ (8001ea8 <HAL_RCC_OscConfig+0x470>)
 8001ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ca6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d10f      	bne.n	8001cce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cae:	2300      	movs	r3, #0
 8001cb0:	60bb      	str	r3, [r7, #8]
 8001cb2:	4b7d      	ldr	r3, [pc, #500]	@ (8001ea8 <HAL_RCC_OscConfig+0x470>)
 8001cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cb6:	4a7c      	ldr	r2, [pc, #496]	@ (8001ea8 <HAL_RCC_OscConfig+0x470>)
 8001cb8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cbc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cbe:	4b7a      	ldr	r3, [pc, #488]	@ (8001ea8 <HAL_RCC_OscConfig+0x470>)
 8001cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cc6:	60bb      	str	r3, [r7, #8]
 8001cc8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cce:	4b77      	ldr	r3, [pc, #476]	@ (8001eac <HAL_RCC_OscConfig+0x474>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d118      	bne.n	8001d0c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cda:	4b74      	ldr	r3, [pc, #464]	@ (8001eac <HAL_RCC_OscConfig+0x474>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a73      	ldr	r2, [pc, #460]	@ (8001eac <HAL_RCC_OscConfig+0x474>)
 8001ce0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ce4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ce6:	f7ff f87b 	bl	8000de0 <HAL_GetTick>
 8001cea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cec:	e008      	b.n	8001d00 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cee:	f7ff f877 	bl	8000de0 <HAL_GetTick>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	1ad3      	subs	r3, r2, r3
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	d901      	bls.n	8001d00 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001cfc:	2303      	movs	r3, #3
 8001cfe:	e10c      	b.n	8001f1a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d00:	4b6a      	ldr	r3, [pc, #424]	@ (8001eac <HAL_RCC_OscConfig+0x474>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d0f0      	beq.n	8001cee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	d106      	bne.n	8001d22 <HAL_RCC_OscConfig+0x2ea>
 8001d14:	4b64      	ldr	r3, [pc, #400]	@ (8001ea8 <HAL_RCC_OscConfig+0x470>)
 8001d16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d18:	4a63      	ldr	r2, [pc, #396]	@ (8001ea8 <HAL_RCC_OscConfig+0x470>)
 8001d1a:	f043 0301 	orr.w	r3, r3, #1
 8001d1e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d20:	e01c      	b.n	8001d5c <HAL_RCC_OscConfig+0x324>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	2b05      	cmp	r3, #5
 8001d28:	d10c      	bne.n	8001d44 <HAL_RCC_OscConfig+0x30c>
 8001d2a:	4b5f      	ldr	r3, [pc, #380]	@ (8001ea8 <HAL_RCC_OscConfig+0x470>)
 8001d2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d2e:	4a5e      	ldr	r2, [pc, #376]	@ (8001ea8 <HAL_RCC_OscConfig+0x470>)
 8001d30:	f043 0304 	orr.w	r3, r3, #4
 8001d34:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d36:	4b5c      	ldr	r3, [pc, #368]	@ (8001ea8 <HAL_RCC_OscConfig+0x470>)
 8001d38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d3a:	4a5b      	ldr	r2, [pc, #364]	@ (8001ea8 <HAL_RCC_OscConfig+0x470>)
 8001d3c:	f043 0301 	orr.w	r3, r3, #1
 8001d40:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d42:	e00b      	b.n	8001d5c <HAL_RCC_OscConfig+0x324>
 8001d44:	4b58      	ldr	r3, [pc, #352]	@ (8001ea8 <HAL_RCC_OscConfig+0x470>)
 8001d46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d48:	4a57      	ldr	r2, [pc, #348]	@ (8001ea8 <HAL_RCC_OscConfig+0x470>)
 8001d4a:	f023 0301 	bic.w	r3, r3, #1
 8001d4e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d50:	4b55      	ldr	r3, [pc, #340]	@ (8001ea8 <HAL_RCC_OscConfig+0x470>)
 8001d52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d54:	4a54      	ldr	r2, [pc, #336]	@ (8001ea8 <HAL_RCC_OscConfig+0x470>)
 8001d56:	f023 0304 	bic.w	r3, r3, #4
 8001d5a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d015      	beq.n	8001d90 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d64:	f7ff f83c 	bl	8000de0 <HAL_GetTick>
 8001d68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d6a:	e00a      	b.n	8001d82 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d6c:	f7ff f838 	bl	8000de0 <HAL_GetTick>
 8001d70:	4602      	mov	r2, r0
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d901      	bls.n	8001d82 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	e0cb      	b.n	8001f1a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d82:	4b49      	ldr	r3, [pc, #292]	@ (8001ea8 <HAL_RCC_OscConfig+0x470>)
 8001d84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d86:	f003 0302 	and.w	r3, r3, #2
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d0ee      	beq.n	8001d6c <HAL_RCC_OscConfig+0x334>
 8001d8e:	e014      	b.n	8001dba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d90:	f7ff f826 	bl	8000de0 <HAL_GetTick>
 8001d94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d96:	e00a      	b.n	8001dae <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d98:	f7ff f822 	bl	8000de0 <HAL_GetTick>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d901      	bls.n	8001dae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001daa:	2303      	movs	r3, #3
 8001dac:	e0b5      	b.n	8001f1a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dae:	4b3e      	ldr	r3, [pc, #248]	@ (8001ea8 <HAL_RCC_OscConfig+0x470>)
 8001db0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001db2:	f003 0302 	and.w	r3, r3, #2
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d1ee      	bne.n	8001d98 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001dba:	7dfb      	ldrb	r3, [r7, #23]
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d105      	bne.n	8001dcc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dc0:	4b39      	ldr	r3, [pc, #228]	@ (8001ea8 <HAL_RCC_OscConfig+0x470>)
 8001dc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dc4:	4a38      	ldr	r2, [pc, #224]	@ (8001ea8 <HAL_RCC_OscConfig+0x470>)
 8001dc6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001dca:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	699b      	ldr	r3, [r3, #24]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	f000 80a1 	beq.w	8001f18 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001dd6:	4b34      	ldr	r3, [pc, #208]	@ (8001ea8 <HAL_RCC_OscConfig+0x470>)
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	f003 030c 	and.w	r3, r3, #12
 8001dde:	2b08      	cmp	r3, #8
 8001de0:	d05c      	beq.n	8001e9c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	699b      	ldr	r3, [r3, #24]
 8001de6:	2b02      	cmp	r3, #2
 8001de8:	d141      	bne.n	8001e6e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dea:	4b31      	ldr	r3, [pc, #196]	@ (8001eb0 <HAL_RCC_OscConfig+0x478>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001df0:	f7fe fff6 	bl	8000de0 <HAL_GetTick>
 8001df4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001df6:	e008      	b.n	8001e0a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001df8:	f7fe fff2 	bl	8000de0 <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d901      	bls.n	8001e0a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e087      	b.n	8001f1a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e0a:	4b27      	ldr	r3, [pc, #156]	@ (8001ea8 <HAL_RCC_OscConfig+0x470>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d1f0      	bne.n	8001df8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	69da      	ldr	r2, [r3, #28]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6a1b      	ldr	r3, [r3, #32]
 8001e1e:	431a      	orrs	r2, r3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e24:	019b      	lsls	r3, r3, #6
 8001e26:	431a      	orrs	r2, r3
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e2c:	085b      	lsrs	r3, r3, #1
 8001e2e:	3b01      	subs	r3, #1
 8001e30:	041b      	lsls	r3, r3, #16
 8001e32:	431a      	orrs	r2, r3
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e38:	061b      	lsls	r3, r3, #24
 8001e3a:	491b      	ldr	r1, [pc, #108]	@ (8001ea8 <HAL_RCC_OscConfig+0x470>)
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e40:	4b1b      	ldr	r3, [pc, #108]	@ (8001eb0 <HAL_RCC_OscConfig+0x478>)
 8001e42:	2201      	movs	r2, #1
 8001e44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e46:	f7fe ffcb 	bl	8000de0 <HAL_GetTick>
 8001e4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e4c:	e008      	b.n	8001e60 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e4e:	f7fe ffc7 	bl	8000de0 <HAL_GetTick>
 8001e52:	4602      	mov	r2, r0
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	1ad3      	subs	r3, r2, r3
 8001e58:	2b02      	cmp	r3, #2
 8001e5a:	d901      	bls.n	8001e60 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	e05c      	b.n	8001f1a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e60:	4b11      	ldr	r3, [pc, #68]	@ (8001ea8 <HAL_RCC_OscConfig+0x470>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d0f0      	beq.n	8001e4e <HAL_RCC_OscConfig+0x416>
 8001e6c:	e054      	b.n	8001f18 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e6e:	4b10      	ldr	r3, [pc, #64]	@ (8001eb0 <HAL_RCC_OscConfig+0x478>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e74:	f7fe ffb4 	bl	8000de0 <HAL_GetTick>
 8001e78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e7a:	e008      	b.n	8001e8e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e7c:	f7fe ffb0 	bl	8000de0 <HAL_GetTick>
 8001e80:	4602      	mov	r2, r0
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d901      	bls.n	8001e8e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	e045      	b.n	8001f1a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e8e:	4b06      	ldr	r3, [pc, #24]	@ (8001ea8 <HAL_RCC_OscConfig+0x470>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d1f0      	bne.n	8001e7c <HAL_RCC_OscConfig+0x444>
 8001e9a:	e03d      	b.n	8001f18 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	699b      	ldr	r3, [r3, #24]
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d107      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	e038      	b.n	8001f1a <HAL_RCC_OscConfig+0x4e2>
 8001ea8:	40023800 	.word	0x40023800
 8001eac:	40007000 	.word	0x40007000
 8001eb0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001eb4:	4b1b      	ldr	r3, [pc, #108]	@ (8001f24 <HAL_RCC_OscConfig+0x4ec>)
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	699b      	ldr	r3, [r3, #24]
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d028      	beq.n	8001f14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d121      	bne.n	8001f14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eda:	429a      	cmp	r2, r3
 8001edc:	d11a      	bne.n	8001f14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ede:	68fa      	ldr	r2, [r7, #12]
 8001ee0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	687a      	ldr	r2, [r7, #4]
 8001ee8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001eea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d111      	bne.n	8001f14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001efa:	085b      	lsrs	r3, r3, #1
 8001efc:	3b01      	subs	r3, #1
 8001efe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d107      	bne.n	8001f14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f0e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d001      	beq.n	8001f18 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e000      	b.n	8001f1a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001f18:	2300      	movs	r3, #0
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3718      	adds	r7, #24
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	40023800 	.word	0x40023800

08001f28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b084      	sub	sp, #16
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
 8001f30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d101      	bne.n	8001f3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e0cc      	b.n	80020d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f3c:	4b68      	ldr	r3, [pc, #416]	@ (80020e0 <HAL_RCC_ClockConfig+0x1b8>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 0307 	and.w	r3, r3, #7
 8001f44:	683a      	ldr	r2, [r7, #0]
 8001f46:	429a      	cmp	r2, r3
 8001f48:	d90c      	bls.n	8001f64 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f4a:	4b65      	ldr	r3, [pc, #404]	@ (80020e0 <HAL_RCC_ClockConfig+0x1b8>)
 8001f4c:	683a      	ldr	r2, [r7, #0]
 8001f4e:	b2d2      	uxtb	r2, r2
 8001f50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f52:	4b63      	ldr	r3, [pc, #396]	@ (80020e0 <HAL_RCC_ClockConfig+0x1b8>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 0307 	and.w	r3, r3, #7
 8001f5a:	683a      	ldr	r2, [r7, #0]
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d001      	beq.n	8001f64 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e0b8      	b.n	80020d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 0302 	and.w	r3, r3, #2
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d020      	beq.n	8001fb2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 0304 	and.w	r3, r3, #4
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d005      	beq.n	8001f88 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f7c:	4b59      	ldr	r3, [pc, #356]	@ (80020e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	4a58      	ldr	r2, [pc, #352]	@ (80020e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f82:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001f86:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 0308 	and.w	r3, r3, #8
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d005      	beq.n	8001fa0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f94:	4b53      	ldr	r3, [pc, #332]	@ (80020e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	4a52      	ldr	r2, [pc, #328]	@ (80020e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f9a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001f9e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fa0:	4b50      	ldr	r3, [pc, #320]	@ (80020e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	494d      	ldr	r1, [pc, #308]	@ (80020e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 0301 	and.w	r3, r3, #1
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d044      	beq.n	8002048 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d107      	bne.n	8001fd6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fc6:	4b47      	ldr	r3, [pc, #284]	@ (80020e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d119      	bne.n	8002006 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e07f      	b.n	80020d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	2b02      	cmp	r3, #2
 8001fdc:	d003      	beq.n	8001fe6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001fe2:	2b03      	cmp	r3, #3
 8001fe4:	d107      	bne.n	8001ff6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fe6:	4b3f      	ldr	r3, [pc, #252]	@ (80020e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d109      	bne.n	8002006 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e06f      	b.n	80020d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ff6:	4b3b      	ldr	r3, [pc, #236]	@ (80020e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0302 	and.w	r3, r3, #2
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d101      	bne.n	8002006 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e067      	b.n	80020d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002006:	4b37      	ldr	r3, [pc, #220]	@ (80020e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	f023 0203 	bic.w	r2, r3, #3
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	4934      	ldr	r1, [pc, #208]	@ (80020e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002014:	4313      	orrs	r3, r2
 8002016:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002018:	f7fe fee2 	bl	8000de0 <HAL_GetTick>
 800201c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800201e:	e00a      	b.n	8002036 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002020:	f7fe fede 	bl	8000de0 <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800202e:	4293      	cmp	r3, r2
 8002030:	d901      	bls.n	8002036 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002032:	2303      	movs	r3, #3
 8002034:	e04f      	b.n	80020d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002036:	4b2b      	ldr	r3, [pc, #172]	@ (80020e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	f003 020c 	and.w	r2, r3, #12
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	429a      	cmp	r2, r3
 8002046:	d1eb      	bne.n	8002020 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002048:	4b25      	ldr	r3, [pc, #148]	@ (80020e0 <HAL_RCC_ClockConfig+0x1b8>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 0307 	and.w	r3, r3, #7
 8002050:	683a      	ldr	r2, [r7, #0]
 8002052:	429a      	cmp	r2, r3
 8002054:	d20c      	bcs.n	8002070 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002056:	4b22      	ldr	r3, [pc, #136]	@ (80020e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002058:	683a      	ldr	r2, [r7, #0]
 800205a:	b2d2      	uxtb	r2, r2
 800205c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800205e:	4b20      	ldr	r3, [pc, #128]	@ (80020e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0307 	and.w	r3, r3, #7
 8002066:	683a      	ldr	r2, [r7, #0]
 8002068:	429a      	cmp	r2, r3
 800206a:	d001      	beq.n	8002070 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	e032      	b.n	80020d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 0304 	and.w	r3, r3, #4
 8002078:	2b00      	cmp	r3, #0
 800207a:	d008      	beq.n	800208e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800207c:	4b19      	ldr	r3, [pc, #100]	@ (80020e4 <HAL_RCC_ClockConfig+0x1bc>)
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	4916      	ldr	r1, [pc, #88]	@ (80020e4 <HAL_RCC_ClockConfig+0x1bc>)
 800208a:	4313      	orrs	r3, r2
 800208c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0308 	and.w	r3, r3, #8
 8002096:	2b00      	cmp	r3, #0
 8002098:	d009      	beq.n	80020ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800209a:	4b12      	ldr	r3, [pc, #72]	@ (80020e4 <HAL_RCC_ClockConfig+0x1bc>)
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	691b      	ldr	r3, [r3, #16]
 80020a6:	00db      	lsls	r3, r3, #3
 80020a8:	490e      	ldr	r1, [pc, #56]	@ (80020e4 <HAL_RCC_ClockConfig+0x1bc>)
 80020aa:	4313      	orrs	r3, r2
 80020ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80020ae:	f000 f821 	bl	80020f4 <HAL_RCC_GetSysClockFreq>
 80020b2:	4602      	mov	r2, r0
 80020b4:	4b0b      	ldr	r3, [pc, #44]	@ (80020e4 <HAL_RCC_ClockConfig+0x1bc>)
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	091b      	lsrs	r3, r3, #4
 80020ba:	f003 030f 	and.w	r3, r3, #15
 80020be:	490a      	ldr	r1, [pc, #40]	@ (80020e8 <HAL_RCC_ClockConfig+0x1c0>)
 80020c0:	5ccb      	ldrb	r3, [r1, r3]
 80020c2:	fa22 f303 	lsr.w	r3, r2, r3
 80020c6:	4a09      	ldr	r2, [pc, #36]	@ (80020ec <HAL_RCC_ClockConfig+0x1c4>)
 80020c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80020ca:	4b09      	ldr	r3, [pc, #36]	@ (80020f0 <HAL_RCC_ClockConfig+0x1c8>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4618      	mov	r0, r3
 80020d0:	f7fe fe42 	bl	8000d58 <HAL_InitTick>

  return HAL_OK;
 80020d4:	2300      	movs	r3, #0
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3710      	adds	r7, #16
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	40023c00 	.word	0x40023c00
 80020e4:	40023800 	.word	0x40023800
 80020e8:	08003790 	.word	0x08003790
 80020ec:	20000000 	.word	0x20000000
 80020f0:	20000004 	.word	0x20000004

080020f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80020f8:	b094      	sub	sp, #80	@ 0x50
 80020fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80020fc:	2300      	movs	r3, #0
 80020fe:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002100:	2300      	movs	r3, #0
 8002102:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002104:	2300      	movs	r3, #0
 8002106:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002108:	2300      	movs	r3, #0
 800210a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800210c:	4b79      	ldr	r3, [pc, #484]	@ (80022f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	f003 030c 	and.w	r3, r3, #12
 8002114:	2b08      	cmp	r3, #8
 8002116:	d00d      	beq.n	8002134 <HAL_RCC_GetSysClockFreq+0x40>
 8002118:	2b08      	cmp	r3, #8
 800211a:	f200 80e1 	bhi.w	80022e0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800211e:	2b00      	cmp	r3, #0
 8002120:	d002      	beq.n	8002128 <HAL_RCC_GetSysClockFreq+0x34>
 8002122:	2b04      	cmp	r3, #4
 8002124:	d003      	beq.n	800212e <HAL_RCC_GetSysClockFreq+0x3a>
 8002126:	e0db      	b.n	80022e0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002128:	4b73      	ldr	r3, [pc, #460]	@ (80022f8 <HAL_RCC_GetSysClockFreq+0x204>)
 800212a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800212c:	e0db      	b.n	80022e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800212e:	4b73      	ldr	r3, [pc, #460]	@ (80022fc <HAL_RCC_GetSysClockFreq+0x208>)
 8002130:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002132:	e0d8      	b.n	80022e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002134:	4b6f      	ldr	r3, [pc, #444]	@ (80022f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800213c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800213e:	4b6d      	ldr	r3, [pc, #436]	@ (80022f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002146:	2b00      	cmp	r3, #0
 8002148:	d063      	beq.n	8002212 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800214a:	4b6a      	ldr	r3, [pc, #424]	@ (80022f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	099b      	lsrs	r3, r3, #6
 8002150:	2200      	movs	r2, #0
 8002152:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002154:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002156:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002158:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800215c:	633b      	str	r3, [r7, #48]	@ 0x30
 800215e:	2300      	movs	r3, #0
 8002160:	637b      	str	r3, [r7, #52]	@ 0x34
 8002162:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002166:	4622      	mov	r2, r4
 8002168:	462b      	mov	r3, r5
 800216a:	f04f 0000 	mov.w	r0, #0
 800216e:	f04f 0100 	mov.w	r1, #0
 8002172:	0159      	lsls	r1, r3, #5
 8002174:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002178:	0150      	lsls	r0, r2, #5
 800217a:	4602      	mov	r2, r0
 800217c:	460b      	mov	r3, r1
 800217e:	4621      	mov	r1, r4
 8002180:	1a51      	subs	r1, r2, r1
 8002182:	6139      	str	r1, [r7, #16]
 8002184:	4629      	mov	r1, r5
 8002186:	eb63 0301 	sbc.w	r3, r3, r1
 800218a:	617b      	str	r3, [r7, #20]
 800218c:	f04f 0200 	mov.w	r2, #0
 8002190:	f04f 0300 	mov.w	r3, #0
 8002194:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002198:	4659      	mov	r1, fp
 800219a:	018b      	lsls	r3, r1, #6
 800219c:	4651      	mov	r1, sl
 800219e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80021a2:	4651      	mov	r1, sl
 80021a4:	018a      	lsls	r2, r1, #6
 80021a6:	4651      	mov	r1, sl
 80021a8:	ebb2 0801 	subs.w	r8, r2, r1
 80021ac:	4659      	mov	r1, fp
 80021ae:	eb63 0901 	sbc.w	r9, r3, r1
 80021b2:	f04f 0200 	mov.w	r2, #0
 80021b6:	f04f 0300 	mov.w	r3, #0
 80021ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80021be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80021c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80021c6:	4690      	mov	r8, r2
 80021c8:	4699      	mov	r9, r3
 80021ca:	4623      	mov	r3, r4
 80021cc:	eb18 0303 	adds.w	r3, r8, r3
 80021d0:	60bb      	str	r3, [r7, #8]
 80021d2:	462b      	mov	r3, r5
 80021d4:	eb49 0303 	adc.w	r3, r9, r3
 80021d8:	60fb      	str	r3, [r7, #12]
 80021da:	f04f 0200 	mov.w	r2, #0
 80021de:	f04f 0300 	mov.w	r3, #0
 80021e2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80021e6:	4629      	mov	r1, r5
 80021e8:	024b      	lsls	r3, r1, #9
 80021ea:	4621      	mov	r1, r4
 80021ec:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80021f0:	4621      	mov	r1, r4
 80021f2:	024a      	lsls	r2, r1, #9
 80021f4:	4610      	mov	r0, r2
 80021f6:	4619      	mov	r1, r3
 80021f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80021fa:	2200      	movs	r2, #0
 80021fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80021fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002200:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002204:	f7fd ffe8 	bl	80001d8 <__aeabi_uldivmod>
 8002208:	4602      	mov	r2, r0
 800220a:	460b      	mov	r3, r1
 800220c:	4613      	mov	r3, r2
 800220e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002210:	e058      	b.n	80022c4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002212:	4b38      	ldr	r3, [pc, #224]	@ (80022f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	099b      	lsrs	r3, r3, #6
 8002218:	2200      	movs	r2, #0
 800221a:	4618      	mov	r0, r3
 800221c:	4611      	mov	r1, r2
 800221e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002222:	623b      	str	r3, [r7, #32]
 8002224:	2300      	movs	r3, #0
 8002226:	627b      	str	r3, [r7, #36]	@ 0x24
 8002228:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800222c:	4642      	mov	r2, r8
 800222e:	464b      	mov	r3, r9
 8002230:	f04f 0000 	mov.w	r0, #0
 8002234:	f04f 0100 	mov.w	r1, #0
 8002238:	0159      	lsls	r1, r3, #5
 800223a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800223e:	0150      	lsls	r0, r2, #5
 8002240:	4602      	mov	r2, r0
 8002242:	460b      	mov	r3, r1
 8002244:	4641      	mov	r1, r8
 8002246:	ebb2 0a01 	subs.w	sl, r2, r1
 800224a:	4649      	mov	r1, r9
 800224c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002250:	f04f 0200 	mov.w	r2, #0
 8002254:	f04f 0300 	mov.w	r3, #0
 8002258:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800225c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002260:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002264:	ebb2 040a 	subs.w	r4, r2, sl
 8002268:	eb63 050b 	sbc.w	r5, r3, fp
 800226c:	f04f 0200 	mov.w	r2, #0
 8002270:	f04f 0300 	mov.w	r3, #0
 8002274:	00eb      	lsls	r3, r5, #3
 8002276:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800227a:	00e2      	lsls	r2, r4, #3
 800227c:	4614      	mov	r4, r2
 800227e:	461d      	mov	r5, r3
 8002280:	4643      	mov	r3, r8
 8002282:	18e3      	adds	r3, r4, r3
 8002284:	603b      	str	r3, [r7, #0]
 8002286:	464b      	mov	r3, r9
 8002288:	eb45 0303 	adc.w	r3, r5, r3
 800228c:	607b      	str	r3, [r7, #4]
 800228e:	f04f 0200 	mov.w	r2, #0
 8002292:	f04f 0300 	mov.w	r3, #0
 8002296:	e9d7 4500 	ldrd	r4, r5, [r7]
 800229a:	4629      	mov	r1, r5
 800229c:	028b      	lsls	r3, r1, #10
 800229e:	4621      	mov	r1, r4
 80022a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80022a4:	4621      	mov	r1, r4
 80022a6:	028a      	lsls	r2, r1, #10
 80022a8:	4610      	mov	r0, r2
 80022aa:	4619      	mov	r1, r3
 80022ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80022ae:	2200      	movs	r2, #0
 80022b0:	61bb      	str	r3, [r7, #24]
 80022b2:	61fa      	str	r2, [r7, #28]
 80022b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80022b8:	f7fd ff8e 	bl	80001d8 <__aeabi_uldivmod>
 80022bc:	4602      	mov	r2, r0
 80022be:	460b      	mov	r3, r1
 80022c0:	4613      	mov	r3, r2
 80022c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80022c4:	4b0b      	ldr	r3, [pc, #44]	@ (80022f4 <HAL_RCC_GetSysClockFreq+0x200>)
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	0c1b      	lsrs	r3, r3, #16
 80022ca:	f003 0303 	and.w	r3, r3, #3
 80022ce:	3301      	adds	r3, #1
 80022d0:	005b      	lsls	r3, r3, #1
 80022d2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80022d4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80022d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80022d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80022dc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80022de:	e002      	b.n	80022e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80022e0:	4b05      	ldr	r3, [pc, #20]	@ (80022f8 <HAL_RCC_GetSysClockFreq+0x204>)
 80022e2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80022e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3750      	adds	r7, #80	@ 0x50
 80022ec:	46bd      	mov	sp, r7
 80022ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80022f2:	bf00      	nop
 80022f4:	40023800 	.word	0x40023800
 80022f8:	00f42400 	.word	0x00f42400
 80022fc:	007a1200 	.word	0x007a1200

08002300 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002304:	4b03      	ldr	r3, [pc, #12]	@ (8002314 <HAL_RCC_GetHCLKFreq+0x14>)
 8002306:	681b      	ldr	r3, [r3, #0]
}
 8002308:	4618      	mov	r0, r3
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr
 8002312:	bf00      	nop
 8002314:	20000000 	.word	0x20000000

08002318 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800231c:	f7ff fff0 	bl	8002300 <HAL_RCC_GetHCLKFreq>
 8002320:	4602      	mov	r2, r0
 8002322:	4b05      	ldr	r3, [pc, #20]	@ (8002338 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	0a9b      	lsrs	r3, r3, #10
 8002328:	f003 0307 	and.w	r3, r3, #7
 800232c:	4903      	ldr	r1, [pc, #12]	@ (800233c <HAL_RCC_GetPCLK1Freq+0x24>)
 800232e:	5ccb      	ldrb	r3, [r1, r3]
 8002330:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002334:	4618      	mov	r0, r3
 8002336:	bd80      	pop	{r7, pc}
 8002338:	40023800 	.word	0x40023800
 800233c:	080037a0 	.word	0x080037a0

08002340 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002344:	f7ff ffdc 	bl	8002300 <HAL_RCC_GetHCLKFreq>
 8002348:	4602      	mov	r2, r0
 800234a:	4b05      	ldr	r3, [pc, #20]	@ (8002360 <HAL_RCC_GetPCLK2Freq+0x20>)
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	0b5b      	lsrs	r3, r3, #13
 8002350:	f003 0307 	and.w	r3, r3, #7
 8002354:	4903      	ldr	r1, [pc, #12]	@ (8002364 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002356:	5ccb      	ldrb	r3, [r1, r3]
 8002358:	fa22 f303 	lsr.w	r3, r2, r3
}
 800235c:	4618      	mov	r0, r3
 800235e:	bd80      	pop	{r7, pc}
 8002360:	40023800 	.word	0x40023800
 8002364:	080037a0 	.word	0x080037a0

08002368 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b082      	sub	sp, #8
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d101      	bne.n	800237a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e041      	b.n	80023fe <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002380:	b2db      	uxtb	r3, r3
 8002382:	2b00      	cmp	r3, #0
 8002384:	d106      	bne.n	8002394 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2200      	movs	r2, #0
 800238a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f7fe fb22 	bl	80009d8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2202      	movs	r2, #2
 8002398:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	3304      	adds	r3, #4
 80023a4:	4619      	mov	r1, r3
 80023a6:	4610      	mov	r0, r2
 80023a8:	f000 f8f0 	bl	800258c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2201      	movs	r2, #1
 80023b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2201      	movs	r2, #1
 80023b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2201      	movs	r2, #1
 80023c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2201      	movs	r2, #1
 80023c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2201      	movs	r2, #1
 80023d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2201      	movs	r2, #1
 80023d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2201      	movs	r2, #1
 80023e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2201      	movs	r2, #1
 80023e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2201      	movs	r2, #1
 80023f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2201      	movs	r2, #1
 80023f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80023fc:	2300      	movs	r3, #0
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3708      	adds	r7, #8
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
	...

08002408 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b086      	sub	sp, #24
 800240c:	af00      	add	r7, sp, #0
 800240e:	60f8      	str	r0, [r7, #12]
 8002410:	60b9      	str	r1, [r7, #8]
 8002412:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002414:	2300      	movs	r3, #0
 8002416:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800241e:	2b01      	cmp	r3, #1
 8002420:	d101      	bne.n	8002426 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002422:	2302      	movs	r3, #2
 8002424:	e0ae      	b.n	8002584 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2201      	movs	r2, #1
 800242a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2b0c      	cmp	r3, #12
 8002432:	f200 809f 	bhi.w	8002574 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002436:	a201      	add	r2, pc, #4	@ (adr r2, 800243c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800243c:	08002471 	.word	0x08002471
 8002440:	08002575 	.word	0x08002575
 8002444:	08002575 	.word	0x08002575
 8002448:	08002575 	.word	0x08002575
 800244c:	080024b1 	.word	0x080024b1
 8002450:	08002575 	.word	0x08002575
 8002454:	08002575 	.word	0x08002575
 8002458:	08002575 	.word	0x08002575
 800245c:	080024f3 	.word	0x080024f3
 8002460:	08002575 	.word	0x08002575
 8002464:	08002575 	.word	0x08002575
 8002468:	08002575 	.word	0x08002575
 800246c:	08002533 	.word	0x08002533
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	68b9      	ldr	r1, [r7, #8]
 8002476:	4618      	mov	r0, r3
 8002478:	f000 f914 	bl	80026a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	699a      	ldr	r2, [r3, #24]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f042 0208 	orr.w	r2, r2, #8
 800248a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	699a      	ldr	r2, [r3, #24]
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f022 0204 	bic.w	r2, r2, #4
 800249a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	6999      	ldr	r1, [r3, #24]
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	691a      	ldr	r2, [r3, #16]
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	430a      	orrs	r2, r1
 80024ac:	619a      	str	r2, [r3, #24]
      break;
 80024ae:	e064      	b.n	800257a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	68b9      	ldr	r1, [r7, #8]
 80024b6:	4618      	mov	r0, r3
 80024b8:	f000 f95a 	bl	8002770 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	699a      	ldr	r2, [r3, #24]
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80024ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	699a      	ldr	r2, [r3, #24]
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80024da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	6999      	ldr	r1, [r3, #24]
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	691b      	ldr	r3, [r3, #16]
 80024e6:	021a      	lsls	r2, r3, #8
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	430a      	orrs	r2, r1
 80024ee:	619a      	str	r2, [r3, #24]
      break;
 80024f0:	e043      	b.n	800257a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	68b9      	ldr	r1, [r7, #8]
 80024f8:	4618      	mov	r0, r3
 80024fa:	f000 f9a5 	bl	8002848 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	69da      	ldr	r2, [r3, #28]
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f042 0208 	orr.w	r2, r2, #8
 800250c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	69da      	ldr	r2, [r3, #28]
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f022 0204 	bic.w	r2, r2, #4
 800251c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	69d9      	ldr	r1, [r3, #28]
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	691a      	ldr	r2, [r3, #16]
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	430a      	orrs	r2, r1
 800252e:	61da      	str	r2, [r3, #28]
      break;
 8002530:	e023      	b.n	800257a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	68b9      	ldr	r1, [r7, #8]
 8002538:	4618      	mov	r0, r3
 800253a:	f000 f9ef 	bl	800291c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	69da      	ldr	r2, [r3, #28]
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800254c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	69da      	ldr	r2, [r3, #28]
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800255c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	69d9      	ldr	r1, [r3, #28]
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	691b      	ldr	r3, [r3, #16]
 8002568:	021a      	lsls	r2, r3, #8
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	430a      	orrs	r2, r1
 8002570:	61da      	str	r2, [r3, #28]
      break;
 8002572:	e002      	b.n	800257a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	75fb      	strb	r3, [r7, #23]
      break;
 8002578:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	2200      	movs	r2, #0
 800257e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002582:	7dfb      	ldrb	r3, [r7, #23]
}
 8002584:	4618      	mov	r0, r3
 8002586:	3718      	adds	r7, #24
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}

0800258c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800258c:	b480      	push	{r7}
 800258e:	b085      	sub	sp, #20
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
 8002594:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	4a3a      	ldr	r2, [pc, #232]	@ (8002688 <TIM_Base_SetConfig+0xfc>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d00f      	beq.n	80025c4 <TIM_Base_SetConfig+0x38>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025aa:	d00b      	beq.n	80025c4 <TIM_Base_SetConfig+0x38>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	4a37      	ldr	r2, [pc, #220]	@ (800268c <TIM_Base_SetConfig+0x100>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d007      	beq.n	80025c4 <TIM_Base_SetConfig+0x38>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	4a36      	ldr	r2, [pc, #216]	@ (8002690 <TIM_Base_SetConfig+0x104>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d003      	beq.n	80025c4 <TIM_Base_SetConfig+0x38>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	4a35      	ldr	r2, [pc, #212]	@ (8002694 <TIM_Base_SetConfig+0x108>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d108      	bne.n	80025d6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80025ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	68fa      	ldr	r2, [r7, #12]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	4a2b      	ldr	r2, [pc, #172]	@ (8002688 <TIM_Base_SetConfig+0xfc>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d01b      	beq.n	8002616 <TIM_Base_SetConfig+0x8a>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025e4:	d017      	beq.n	8002616 <TIM_Base_SetConfig+0x8a>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	4a28      	ldr	r2, [pc, #160]	@ (800268c <TIM_Base_SetConfig+0x100>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d013      	beq.n	8002616 <TIM_Base_SetConfig+0x8a>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	4a27      	ldr	r2, [pc, #156]	@ (8002690 <TIM_Base_SetConfig+0x104>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d00f      	beq.n	8002616 <TIM_Base_SetConfig+0x8a>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	4a26      	ldr	r2, [pc, #152]	@ (8002694 <TIM_Base_SetConfig+0x108>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d00b      	beq.n	8002616 <TIM_Base_SetConfig+0x8a>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	4a25      	ldr	r2, [pc, #148]	@ (8002698 <TIM_Base_SetConfig+0x10c>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d007      	beq.n	8002616 <TIM_Base_SetConfig+0x8a>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	4a24      	ldr	r2, [pc, #144]	@ (800269c <TIM_Base_SetConfig+0x110>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d003      	beq.n	8002616 <TIM_Base_SetConfig+0x8a>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4a23      	ldr	r2, [pc, #140]	@ (80026a0 <TIM_Base_SetConfig+0x114>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d108      	bne.n	8002628 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800261c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	68db      	ldr	r3, [r3, #12]
 8002622:	68fa      	ldr	r2, [r7, #12]
 8002624:	4313      	orrs	r3, r2
 8002626:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	695b      	ldr	r3, [r3, #20]
 8002632:	4313      	orrs	r3, r2
 8002634:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	68fa      	ldr	r2, [r7, #12]
 800263a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	689a      	ldr	r2, [r3, #8]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	4a0e      	ldr	r2, [pc, #56]	@ (8002688 <TIM_Base_SetConfig+0xfc>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d103      	bne.n	800265c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	691a      	ldr	r2, [r3, #16]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2201      	movs	r2, #1
 8002660:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	691b      	ldr	r3, [r3, #16]
 8002666:	f003 0301 	and.w	r3, r3, #1
 800266a:	2b01      	cmp	r3, #1
 800266c:	d105      	bne.n	800267a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	691b      	ldr	r3, [r3, #16]
 8002672:	f023 0201 	bic.w	r2, r3, #1
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	611a      	str	r2, [r3, #16]
  }
}
 800267a:	bf00      	nop
 800267c:	3714      	adds	r7, #20
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr
 8002686:	bf00      	nop
 8002688:	40010000 	.word	0x40010000
 800268c:	40000400 	.word	0x40000400
 8002690:	40000800 	.word	0x40000800
 8002694:	40000c00 	.word	0x40000c00
 8002698:	40014000 	.word	0x40014000
 800269c:	40014400 	.word	0x40014400
 80026a0:	40014800 	.word	0x40014800

080026a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b087      	sub	sp, #28
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6a1b      	ldr	r3, [r3, #32]
 80026b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6a1b      	ldr	r3, [r3, #32]
 80026b8:	f023 0201 	bic.w	r2, r3, #1
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	699b      	ldr	r3, [r3, #24]
 80026ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80026d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	f023 0303 	bic.w	r3, r3, #3
 80026da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	68fa      	ldr	r2, [r7, #12]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	f023 0302 	bic.w	r3, r3, #2
 80026ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	697a      	ldr	r2, [r7, #20]
 80026f4:	4313      	orrs	r3, r2
 80026f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	4a1c      	ldr	r2, [pc, #112]	@ (800276c <TIM_OC1_SetConfig+0xc8>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d10c      	bne.n	800271a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	f023 0308 	bic.w	r3, r3, #8
 8002706:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	697a      	ldr	r2, [r7, #20]
 800270e:	4313      	orrs	r3, r2
 8002710:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	f023 0304 	bic.w	r3, r3, #4
 8002718:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4a13      	ldr	r2, [pc, #76]	@ (800276c <TIM_OC1_SetConfig+0xc8>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d111      	bne.n	8002746 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002728:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002730:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	695b      	ldr	r3, [r3, #20]
 8002736:	693a      	ldr	r2, [r7, #16]
 8002738:	4313      	orrs	r3, r2
 800273a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	699b      	ldr	r3, [r3, #24]
 8002740:	693a      	ldr	r2, [r7, #16]
 8002742:	4313      	orrs	r3, r2
 8002744:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	693a      	ldr	r2, [r7, #16]
 800274a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	68fa      	ldr	r2, [r7, #12]
 8002750:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	685a      	ldr	r2, [r3, #4]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	697a      	ldr	r2, [r7, #20]
 800275e:	621a      	str	r2, [r3, #32]
}
 8002760:	bf00      	nop
 8002762:	371c      	adds	r7, #28
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr
 800276c:	40010000 	.word	0x40010000

08002770 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002770:	b480      	push	{r7}
 8002772:	b087      	sub	sp, #28
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
 8002778:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6a1b      	ldr	r3, [r3, #32]
 800277e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6a1b      	ldr	r3, [r3, #32]
 8002784:	f023 0210 	bic.w	r2, r3, #16
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	699b      	ldr	r3, [r3, #24]
 8002796:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800279e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80027a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	021b      	lsls	r3, r3, #8
 80027ae:	68fa      	ldr	r2, [r7, #12]
 80027b0:	4313      	orrs	r3, r2
 80027b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	f023 0320 	bic.w	r3, r3, #32
 80027ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	011b      	lsls	r3, r3, #4
 80027c2:	697a      	ldr	r2, [r7, #20]
 80027c4:	4313      	orrs	r3, r2
 80027c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	4a1e      	ldr	r2, [pc, #120]	@ (8002844 <TIM_OC2_SetConfig+0xd4>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d10d      	bne.n	80027ec <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80027d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	011b      	lsls	r3, r3, #4
 80027de:	697a      	ldr	r2, [r7, #20]
 80027e0:	4313      	orrs	r3, r2
 80027e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80027ea:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	4a15      	ldr	r2, [pc, #84]	@ (8002844 <TIM_OC2_SetConfig+0xd4>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d113      	bne.n	800281c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80027fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002802:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	695b      	ldr	r3, [r3, #20]
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	693a      	ldr	r2, [r7, #16]
 800280c:	4313      	orrs	r3, r2
 800280e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	699b      	ldr	r3, [r3, #24]
 8002814:	009b      	lsls	r3, r3, #2
 8002816:	693a      	ldr	r2, [r7, #16]
 8002818:	4313      	orrs	r3, r2
 800281a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	693a      	ldr	r2, [r7, #16]
 8002820:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	68fa      	ldr	r2, [r7, #12]
 8002826:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	685a      	ldr	r2, [r3, #4]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	697a      	ldr	r2, [r7, #20]
 8002834:	621a      	str	r2, [r3, #32]
}
 8002836:	bf00      	nop
 8002838:	371c      	adds	r7, #28
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr
 8002842:	bf00      	nop
 8002844:	40010000 	.word	0x40010000

08002848 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002848:	b480      	push	{r7}
 800284a:	b087      	sub	sp, #28
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
 8002850:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6a1b      	ldr	r3, [r3, #32]
 8002856:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6a1b      	ldr	r3, [r3, #32]
 800285c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	69db      	ldr	r3, [r3, #28]
 800286e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002876:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	f023 0303 	bic.w	r3, r3, #3
 800287e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	68fa      	ldr	r2, [r7, #12]
 8002886:	4313      	orrs	r3, r2
 8002888:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002890:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	021b      	lsls	r3, r3, #8
 8002898:	697a      	ldr	r2, [r7, #20]
 800289a:	4313      	orrs	r3, r2
 800289c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	4a1d      	ldr	r2, [pc, #116]	@ (8002918 <TIM_OC3_SetConfig+0xd0>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d10d      	bne.n	80028c2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80028ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	68db      	ldr	r3, [r3, #12]
 80028b2:	021b      	lsls	r3, r3, #8
 80028b4:	697a      	ldr	r2, [r7, #20]
 80028b6:	4313      	orrs	r3, r2
 80028b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80028c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4a14      	ldr	r2, [pc, #80]	@ (8002918 <TIM_OC3_SetConfig+0xd0>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d113      	bne.n	80028f2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80028d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80028d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	695b      	ldr	r3, [r3, #20]
 80028de:	011b      	lsls	r3, r3, #4
 80028e0:	693a      	ldr	r2, [r7, #16]
 80028e2:	4313      	orrs	r3, r2
 80028e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	699b      	ldr	r3, [r3, #24]
 80028ea:	011b      	lsls	r3, r3, #4
 80028ec:	693a      	ldr	r2, [r7, #16]
 80028ee:	4313      	orrs	r3, r2
 80028f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	693a      	ldr	r2, [r7, #16]
 80028f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	68fa      	ldr	r2, [r7, #12]
 80028fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	685a      	ldr	r2, [r3, #4]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	697a      	ldr	r2, [r7, #20]
 800290a:	621a      	str	r2, [r3, #32]
}
 800290c:	bf00      	nop
 800290e:	371c      	adds	r7, #28
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr
 8002918:	40010000 	.word	0x40010000

0800291c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800291c:	b480      	push	{r7}
 800291e:	b087      	sub	sp, #28
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
 8002924:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6a1b      	ldr	r3, [r3, #32]
 800292a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6a1b      	ldr	r3, [r3, #32]
 8002930:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	69db      	ldr	r3, [r3, #28]
 8002942:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800294a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002952:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	021b      	lsls	r3, r3, #8
 800295a:	68fa      	ldr	r2, [r7, #12]
 800295c:	4313      	orrs	r3, r2
 800295e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002966:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	031b      	lsls	r3, r3, #12
 800296e:	693a      	ldr	r2, [r7, #16]
 8002970:	4313      	orrs	r3, r2
 8002972:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	4a10      	ldr	r2, [pc, #64]	@ (80029b8 <TIM_OC4_SetConfig+0x9c>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d109      	bne.n	8002990 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002982:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	695b      	ldr	r3, [r3, #20]
 8002988:	019b      	lsls	r3, r3, #6
 800298a:	697a      	ldr	r2, [r7, #20]
 800298c:	4313      	orrs	r3, r2
 800298e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	697a      	ldr	r2, [r7, #20]
 8002994:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	68fa      	ldr	r2, [r7, #12]
 800299a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	685a      	ldr	r2, [r3, #4]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	693a      	ldr	r2, [r7, #16]
 80029a8:	621a      	str	r2, [r3, #32]
}
 80029aa:	bf00      	nop
 80029ac:	371c      	adds	r7, #28
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr
 80029b6:	bf00      	nop
 80029b8:	40010000 	.word	0x40010000

080029bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80029bc:	b480      	push	{r7}
 80029be:	b085      	sub	sp, #20
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d101      	bne.n	80029d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80029d0:	2302      	movs	r3, #2
 80029d2:	e050      	b.n	8002a76 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2201      	movs	r2, #1
 80029d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2202      	movs	r2, #2
 80029e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80029fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	68fa      	ldr	r2, [r7, #12]
 8002a02:	4313      	orrs	r3, r2
 8002a04:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	68fa      	ldr	r2, [r7, #12]
 8002a0c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a1c      	ldr	r2, [pc, #112]	@ (8002a84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d018      	beq.n	8002a4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a20:	d013      	beq.n	8002a4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a18      	ldr	r2, [pc, #96]	@ (8002a88 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d00e      	beq.n	8002a4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a16      	ldr	r2, [pc, #88]	@ (8002a8c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d009      	beq.n	8002a4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a15      	ldr	r2, [pc, #84]	@ (8002a90 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d004      	beq.n	8002a4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a13      	ldr	r2, [pc, #76]	@ (8002a94 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d10c      	bne.n	8002a64 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002a50:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	68ba      	ldr	r2, [r7, #8]
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	68ba      	ldr	r2, [r7, #8]
 8002a62:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2201      	movs	r2, #1
 8002a68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002a74:	2300      	movs	r3, #0
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3714      	adds	r7, #20
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr
 8002a82:	bf00      	nop
 8002a84:	40010000 	.word	0x40010000
 8002a88:	40000400 	.word	0x40000400
 8002a8c:	40000800 	.word	0x40000800
 8002a90:	40000c00 	.word	0x40000c00
 8002a94:	40014000 	.word	0x40014000

08002a98 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b085      	sub	sp, #20
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d101      	bne.n	8002ab4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002ab0:	2302      	movs	r3, #2
 8002ab2:	e03d      	b.n	8002b30 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	691b      	ldr	r3, [r3, #16]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	695b      	ldr	r3, [r3, #20]
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	69db      	ldr	r3, [r3, #28]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	68fa      	ldr	r2, [r7, #12]
 8002b24:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002b2e:	2300      	movs	r3, #0
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	3714      	adds	r7, #20
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr

08002b3c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b082      	sub	sp, #8
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d101      	bne.n	8002b4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e042      	b.n	8002bd4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d106      	bne.n	8002b68 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f7fd fffc 	bl	8000b60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2224      	movs	r2, #36	@ 0x24
 8002b6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	68da      	ldr	r2, [r3, #12]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002b7e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	f000 fa9f 	bl	80030c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	691a      	ldr	r2, [r3, #16]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002b94:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	695a      	ldr	r2, [r3, #20]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002ba4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	68da      	ldr	r2, [r3, #12]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002bb4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2220      	movs	r2, #32
 8002bc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2220      	movs	r2, #32
 8002bc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002bd2:	2300      	movs	r3, #0
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	3708      	adds	r7, #8
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}

08002bdc <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b084      	sub	sp, #16
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	60f8      	str	r0, [r7, #12]
 8002be4:	60b9      	str	r1, [r7, #8]
 8002be6:	4613      	mov	r3, r2
 8002be8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	2b20      	cmp	r3, #32
 8002bf4:	d112      	bne.n	8002c1c <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d002      	beq.n	8002c02 <HAL_UART_Receive_DMA+0x26>
 8002bfc:	88fb      	ldrh	r3, [r7, #6]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d101      	bne.n	8002c06 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e00b      	b.n	8002c1e <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8002c0c:	88fb      	ldrh	r3, [r7, #6]
 8002c0e:	461a      	mov	r2, r3
 8002c10:	68b9      	ldr	r1, [r7, #8]
 8002c12:	68f8      	ldr	r0, [r7, #12]
 8002c14:	f000 f930 	bl	8002e78 <UART_Start_Receive_DMA>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	e000      	b.n	8002c1e <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002c1c:	2302      	movs	r3, #2
  }
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3710      	adds	r7, #16
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}

08002c26 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002c26:	b480      	push	{r7}
 8002c28:	b083      	sub	sp, #12
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002c2e:	bf00      	nop
 8002c30:	370c      	adds	r7, #12
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr

08002c3a <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002c3a:	b480      	push	{r7}
 8002c3c:	b083      	sub	sp, #12
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8002c42:	bf00      	nop
 8002c44:	370c      	adds	r7, #12
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr

08002c4e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002c4e:	b480      	push	{r7}
 8002c50:	b083      	sub	sp, #12
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002c56:	bf00      	nop
 8002c58:	370c      	adds	r7, #12
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr

08002c62 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002c62:	b480      	push	{r7}
 8002c64:	b083      	sub	sp, #12
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	6078      	str	r0, [r7, #4]
 8002c6a:	460b      	mov	r3, r1
 8002c6c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002c6e:	bf00      	nop
 8002c70:	370c      	adds	r7, #12
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr

08002c7a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002c7a:	b580      	push	{r7, lr}
 8002c7c:	b09c      	sub	sp, #112	@ 0x70
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c86:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d172      	bne.n	8002d7c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8002c96:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002c98:	2200      	movs	r2, #0
 8002c9a:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002c9c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	330c      	adds	r3, #12
 8002ca2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ca4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002ca6:	e853 3f00 	ldrex	r3, [r3]
 8002caa:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002cac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002cae:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002cb2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002cb4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	330c      	adds	r3, #12
 8002cba:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8002cbc:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002cbe:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cc0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002cc2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002cc4:	e841 2300 	strex	r3, r2, [r1]
 8002cc8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002cca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d1e5      	bne.n	8002c9c <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cd0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	3314      	adds	r3, #20
 8002cd6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cda:	e853 3f00 	ldrex	r3, [r3]
 8002cde:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002ce0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ce2:	f023 0301 	bic.w	r3, r3, #1
 8002ce6:	667b      	str	r3, [r7, #100]	@ 0x64
 8002ce8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	3314      	adds	r3, #20
 8002cee:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8002cf0:	647a      	str	r2, [r7, #68]	@ 0x44
 8002cf2:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cf4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002cf6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002cf8:	e841 2300 	strex	r3, r2, [r1]
 8002cfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002cfe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d1e5      	bne.n	8002cd0 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d04:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	3314      	adds	r3, #20
 8002d0a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d0e:	e853 3f00 	ldrex	r3, [r3]
 8002d12:	623b      	str	r3, [r7, #32]
   return(result);
 8002d14:	6a3b      	ldr	r3, [r7, #32]
 8002d16:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002d1a:	663b      	str	r3, [r7, #96]	@ 0x60
 8002d1c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	3314      	adds	r3, #20
 8002d22:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002d24:	633a      	str	r2, [r7, #48]	@ 0x30
 8002d26:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d28:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002d2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002d2c:	e841 2300 	strex	r3, r2, [r1]
 8002d30:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002d32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d1e5      	bne.n	8002d04 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002d38:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002d3a:	2220      	movs	r2, #32
 8002d3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d40:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002d42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d119      	bne.n	8002d7c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d48:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	330c      	adds	r3, #12
 8002d4e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	e853 3f00 	ldrex	r3, [r3]
 8002d56:	60fb      	str	r3, [r7, #12]
   return(result);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	f023 0310 	bic.w	r3, r3, #16
 8002d5e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002d60:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	330c      	adds	r3, #12
 8002d66:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002d68:	61fa      	str	r2, [r7, #28]
 8002d6a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d6c:	69b9      	ldr	r1, [r7, #24]
 8002d6e:	69fa      	ldr	r2, [r7, #28]
 8002d70:	e841 2300 	strex	r3, r2, [r1]
 8002d74:	617b      	str	r3, [r7, #20]
   return(result);
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d1e5      	bne.n	8002d48 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002d7c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002d7e:	2200      	movs	r2, #0
 8002d80:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d82:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d106      	bne.n	8002d98 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002d8a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002d8c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002d8e:	4619      	mov	r1, r3
 8002d90:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8002d92:	f7ff ff66 	bl	8002c62 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002d96:	e002      	b.n	8002d9e <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8002d98:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8002d9a:	f7ff ff44 	bl	8002c26 <HAL_UART_RxCpltCallback>
}
 8002d9e:	bf00      	nop
 8002da0:	3770      	adds	r7, #112	@ 0x70
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}

08002da6 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002da6:	b580      	push	{r7, lr}
 8002da8:	b084      	sub	sp, #16
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002db2:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2201      	movs	r2, #1
 8002db8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d108      	bne.n	8002dd4 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002dc6:	085b      	lsrs	r3, r3, #1
 8002dc8:	b29b      	uxth	r3, r3
 8002dca:	4619      	mov	r1, r3
 8002dcc:	68f8      	ldr	r0, [r7, #12]
 8002dce:	f7ff ff48 	bl	8002c62 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002dd2:	e002      	b.n	8002dda <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8002dd4:	68f8      	ldr	r0, [r7, #12]
 8002dd6:	f7ff ff30 	bl	8002c3a <HAL_UART_RxHalfCpltCallback>
}
 8002dda:	bf00      	nop
 8002ddc:	3710      	adds	r7, #16
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}

08002de2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002de2:	b580      	push	{r7, lr}
 8002de4:	b084      	sub	sp, #16
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002dea:	2300      	movs	r3, #0
 8002dec:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002df2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	695b      	ldr	r3, [r3, #20]
 8002dfa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002dfe:	2b80      	cmp	r3, #128	@ 0x80
 8002e00:	bf0c      	ite	eq
 8002e02:	2301      	moveq	r3, #1
 8002e04:	2300      	movne	r3, #0
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	2b21      	cmp	r3, #33	@ 0x21
 8002e14:	d108      	bne.n	8002e28 <UART_DMAError+0x46>
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d005      	beq.n	8002e28 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8002e22:	68b8      	ldr	r0, [r7, #8]
 8002e24:	f000 f8c2 	bl	8002fac <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	695b      	ldr	r3, [r3, #20]
 8002e2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e32:	2b40      	cmp	r3, #64	@ 0x40
 8002e34:	bf0c      	ite	eq
 8002e36:	2301      	moveq	r3, #1
 8002e38:	2300      	movne	r3, #0
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	2b22      	cmp	r3, #34	@ 0x22
 8002e48:	d108      	bne.n	8002e5c <UART_DMAError+0x7a>
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d005      	beq.n	8002e5c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	2200      	movs	r2, #0
 8002e54:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8002e56:	68b8      	ldr	r0, [r7, #8]
 8002e58:	f000 f8d0 	bl	8002ffc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e60:	f043 0210 	orr.w	r2, r3, #16
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002e68:	68b8      	ldr	r0, [r7, #8]
 8002e6a:	f7ff fef0 	bl	8002c4e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002e6e:	bf00      	nop
 8002e70:	3710      	adds	r7, #16
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
	...

08002e78 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b098      	sub	sp, #96	@ 0x60
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	60f8      	str	r0, [r7, #12]
 8002e80:	60b9      	str	r1, [r7, #8]
 8002e82:	4613      	mov	r3, r2
 8002e84:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8002e86:	68ba      	ldr	r2, [r7, #8]
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	88fa      	ldrh	r2, [r7, #6]
 8002e90:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2200      	movs	r2, #0
 8002e96:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2222      	movs	r2, #34	@ 0x22
 8002e9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ea4:	4a3e      	ldr	r2, [pc, #248]	@ (8002fa0 <UART_Start_Receive_DMA+0x128>)
 8002ea6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002eac:	4a3d      	ldr	r2, [pc, #244]	@ (8002fa4 <UART_Start_Receive_DMA+0x12c>)
 8002eae:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002eb4:	4a3c      	ldr	r2, [pc, #240]	@ (8002fa8 <UART_Start_Receive_DMA+0x130>)
 8002eb6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8002ec0:	f107 0308 	add.w	r3, r7, #8
 8002ec4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	3304      	adds	r3, #4
 8002ed0:	4619      	mov	r1, r3
 8002ed2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	88fb      	ldrh	r3, [r7, #6]
 8002ed8:	f7fe f94e 	bl	8001178 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8002edc:	2300      	movs	r3, #0
 8002ede:	613b      	str	r3, [r7, #16]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	613b      	str	r3, [r7, #16]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	613b      	str	r3, [r7, #16]
 8002ef0:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	691b      	ldr	r3, [r3, #16]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d019      	beq.n	8002f2e <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	330c      	adds	r3, #12
 8002f00:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f04:	e853 3f00 	ldrex	r3, [r3]
 8002f08:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002f0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f10:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	330c      	adds	r3, #12
 8002f18:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002f1a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002f1c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f1e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8002f20:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002f22:	e841 2300 	strex	r3, r2, [r1]
 8002f26:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8002f28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d1e5      	bne.n	8002efa <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	3314      	adds	r3, #20
 8002f34:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f38:	e853 3f00 	ldrex	r3, [r3]
 8002f3c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002f3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f40:	f043 0301 	orr.w	r3, r3, #1
 8002f44:	657b      	str	r3, [r7, #84]	@ 0x54
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	3314      	adds	r3, #20
 8002f4c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002f4e:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002f50:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f52:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8002f54:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002f56:	e841 2300 	strex	r3, r2, [r1]
 8002f5a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002f5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d1e5      	bne.n	8002f2e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	3314      	adds	r3, #20
 8002f68:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f6a:	69bb      	ldr	r3, [r7, #24]
 8002f6c:	e853 3f00 	ldrex	r3, [r3]
 8002f70:	617b      	str	r3, [r7, #20]
   return(result);
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002f78:	653b      	str	r3, [r7, #80]	@ 0x50
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	3314      	adds	r3, #20
 8002f80:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8002f82:	627a      	str	r2, [r7, #36]	@ 0x24
 8002f84:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f86:	6a39      	ldr	r1, [r7, #32]
 8002f88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f8a:	e841 2300 	strex	r3, r2, [r1]
 8002f8e:	61fb      	str	r3, [r7, #28]
   return(result);
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d1e5      	bne.n	8002f62 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8002f96:	2300      	movs	r3, #0
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	3760      	adds	r7, #96	@ 0x60
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}
 8002fa0:	08002c7b 	.word	0x08002c7b
 8002fa4:	08002da7 	.word	0x08002da7
 8002fa8:	08002de3 	.word	0x08002de3

08002fac <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b089      	sub	sp, #36	@ 0x24
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	330c      	adds	r3, #12
 8002fba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	e853 3f00 	ldrex	r3, [r3]
 8002fc2:	60bb      	str	r3, [r7, #8]
   return(result);
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8002fca:	61fb      	str	r3, [r7, #28]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	330c      	adds	r3, #12
 8002fd2:	69fa      	ldr	r2, [r7, #28]
 8002fd4:	61ba      	str	r2, [r7, #24]
 8002fd6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fd8:	6979      	ldr	r1, [r7, #20]
 8002fda:	69ba      	ldr	r2, [r7, #24]
 8002fdc:	e841 2300 	strex	r3, r2, [r1]
 8002fe0:	613b      	str	r3, [r7, #16]
   return(result);
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d1e5      	bne.n	8002fb4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2220      	movs	r2, #32
 8002fec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8002ff0:	bf00      	nop
 8002ff2:	3724      	adds	r7, #36	@ 0x24
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr

08002ffc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b095      	sub	sp, #84	@ 0x54
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	330c      	adds	r3, #12
 800300a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800300c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800300e:	e853 3f00 	ldrex	r3, [r3]
 8003012:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003014:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003016:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800301a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	330c      	adds	r3, #12
 8003022:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003024:	643a      	str	r2, [r7, #64]	@ 0x40
 8003026:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003028:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800302a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800302c:	e841 2300 	strex	r3, r2, [r1]
 8003030:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003032:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003034:	2b00      	cmp	r3, #0
 8003036:	d1e5      	bne.n	8003004 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	3314      	adds	r3, #20
 800303e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003040:	6a3b      	ldr	r3, [r7, #32]
 8003042:	e853 3f00 	ldrex	r3, [r3]
 8003046:	61fb      	str	r3, [r7, #28]
   return(result);
 8003048:	69fb      	ldr	r3, [r7, #28]
 800304a:	f023 0301 	bic.w	r3, r3, #1
 800304e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	3314      	adds	r3, #20
 8003056:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003058:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800305a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800305c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800305e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003060:	e841 2300 	strex	r3, r2, [r1]
 8003064:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003068:	2b00      	cmp	r3, #0
 800306a:	d1e5      	bne.n	8003038 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003070:	2b01      	cmp	r3, #1
 8003072:	d119      	bne.n	80030a8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	330c      	adds	r3, #12
 800307a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	e853 3f00 	ldrex	r3, [r3]
 8003082:	60bb      	str	r3, [r7, #8]
   return(result);
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	f023 0310 	bic.w	r3, r3, #16
 800308a:	647b      	str	r3, [r7, #68]	@ 0x44
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	330c      	adds	r3, #12
 8003092:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003094:	61ba      	str	r2, [r7, #24]
 8003096:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003098:	6979      	ldr	r1, [r7, #20]
 800309a:	69ba      	ldr	r2, [r7, #24]
 800309c:	e841 2300 	strex	r3, r2, [r1]
 80030a0:	613b      	str	r3, [r7, #16]
   return(result);
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d1e5      	bne.n	8003074 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2220      	movs	r2, #32
 80030ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2200      	movs	r2, #0
 80030b4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80030b6:	bf00      	nop
 80030b8:	3754      	adds	r7, #84	@ 0x54
 80030ba:	46bd      	mov	sp, r7
 80030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c0:	4770      	bx	lr
	...

080030c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030c8:	b0c0      	sub	sp, #256	@ 0x100
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	691b      	ldr	r3, [r3, #16]
 80030d8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80030dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030e0:	68d9      	ldr	r1, [r3, #12]
 80030e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	ea40 0301 	orr.w	r3, r0, r1
 80030ec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80030ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030f2:	689a      	ldr	r2, [r3, #8]
 80030f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030f8:	691b      	ldr	r3, [r3, #16]
 80030fa:	431a      	orrs	r2, r3
 80030fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003100:	695b      	ldr	r3, [r3, #20]
 8003102:	431a      	orrs	r2, r3
 8003104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003108:	69db      	ldr	r3, [r3, #28]
 800310a:	4313      	orrs	r3, r2
 800310c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800311c:	f021 010c 	bic.w	r1, r1, #12
 8003120:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800312a:	430b      	orrs	r3, r1
 800312c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800312e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	695b      	ldr	r3, [r3, #20]
 8003136:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800313a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800313e:	6999      	ldr	r1, [r3, #24]
 8003140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	ea40 0301 	orr.w	r3, r0, r1
 800314a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800314c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	4b8f      	ldr	r3, [pc, #572]	@ (8003390 <UART_SetConfig+0x2cc>)
 8003154:	429a      	cmp	r2, r3
 8003156:	d005      	beq.n	8003164 <UART_SetConfig+0xa0>
 8003158:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	4b8d      	ldr	r3, [pc, #564]	@ (8003394 <UART_SetConfig+0x2d0>)
 8003160:	429a      	cmp	r2, r3
 8003162:	d104      	bne.n	800316e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003164:	f7ff f8ec 	bl	8002340 <HAL_RCC_GetPCLK2Freq>
 8003168:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800316c:	e003      	b.n	8003176 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800316e:	f7ff f8d3 	bl	8002318 <HAL_RCC_GetPCLK1Freq>
 8003172:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003176:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800317a:	69db      	ldr	r3, [r3, #28]
 800317c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003180:	f040 810c 	bne.w	800339c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003184:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003188:	2200      	movs	r2, #0
 800318a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800318e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003192:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003196:	4622      	mov	r2, r4
 8003198:	462b      	mov	r3, r5
 800319a:	1891      	adds	r1, r2, r2
 800319c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800319e:	415b      	adcs	r3, r3
 80031a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80031a2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80031a6:	4621      	mov	r1, r4
 80031a8:	eb12 0801 	adds.w	r8, r2, r1
 80031ac:	4629      	mov	r1, r5
 80031ae:	eb43 0901 	adc.w	r9, r3, r1
 80031b2:	f04f 0200 	mov.w	r2, #0
 80031b6:	f04f 0300 	mov.w	r3, #0
 80031ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80031be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80031c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80031c6:	4690      	mov	r8, r2
 80031c8:	4699      	mov	r9, r3
 80031ca:	4623      	mov	r3, r4
 80031cc:	eb18 0303 	adds.w	r3, r8, r3
 80031d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80031d4:	462b      	mov	r3, r5
 80031d6:	eb49 0303 	adc.w	r3, r9, r3
 80031da:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80031de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	2200      	movs	r2, #0
 80031e6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80031ea:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80031ee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80031f2:	460b      	mov	r3, r1
 80031f4:	18db      	adds	r3, r3, r3
 80031f6:	653b      	str	r3, [r7, #80]	@ 0x50
 80031f8:	4613      	mov	r3, r2
 80031fa:	eb42 0303 	adc.w	r3, r2, r3
 80031fe:	657b      	str	r3, [r7, #84]	@ 0x54
 8003200:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003204:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003208:	f7fc ffe6 	bl	80001d8 <__aeabi_uldivmod>
 800320c:	4602      	mov	r2, r0
 800320e:	460b      	mov	r3, r1
 8003210:	4b61      	ldr	r3, [pc, #388]	@ (8003398 <UART_SetConfig+0x2d4>)
 8003212:	fba3 2302 	umull	r2, r3, r3, r2
 8003216:	095b      	lsrs	r3, r3, #5
 8003218:	011c      	lsls	r4, r3, #4
 800321a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800321e:	2200      	movs	r2, #0
 8003220:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003224:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003228:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800322c:	4642      	mov	r2, r8
 800322e:	464b      	mov	r3, r9
 8003230:	1891      	adds	r1, r2, r2
 8003232:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003234:	415b      	adcs	r3, r3
 8003236:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003238:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800323c:	4641      	mov	r1, r8
 800323e:	eb12 0a01 	adds.w	sl, r2, r1
 8003242:	4649      	mov	r1, r9
 8003244:	eb43 0b01 	adc.w	fp, r3, r1
 8003248:	f04f 0200 	mov.w	r2, #0
 800324c:	f04f 0300 	mov.w	r3, #0
 8003250:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003254:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003258:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800325c:	4692      	mov	sl, r2
 800325e:	469b      	mov	fp, r3
 8003260:	4643      	mov	r3, r8
 8003262:	eb1a 0303 	adds.w	r3, sl, r3
 8003266:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800326a:	464b      	mov	r3, r9
 800326c:	eb4b 0303 	adc.w	r3, fp, r3
 8003270:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003274:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	2200      	movs	r2, #0
 800327c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003280:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003284:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003288:	460b      	mov	r3, r1
 800328a:	18db      	adds	r3, r3, r3
 800328c:	643b      	str	r3, [r7, #64]	@ 0x40
 800328e:	4613      	mov	r3, r2
 8003290:	eb42 0303 	adc.w	r3, r2, r3
 8003294:	647b      	str	r3, [r7, #68]	@ 0x44
 8003296:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800329a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800329e:	f7fc ff9b 	bl	80001d8 <__aeabi_uldivmod>
 80032a2:	4602      	mov	r2, r0
 80032a4:	460b      	mov	r3, r1
 80032a6:	4611      	mov	r1, r2
 80032a8:	4b3b      	ldr	r3, [pc, #236]	@ (8003398 <UART_SetConfig+0x2d4>)
 80032aa:	fba3 2301 	umull	r2, r3, r3, r1
 80032ae:	095b      	lsrs	r3, r3, #5
 80032b0:	2264      	movs	r2, #100	@ 0x64
 80032b2:	fb02 f303 	mul.w	r3, r2, r3
 80032b6:	1acb      	subs	r3, r1, r3
 80032b8:	00db      	lsls	r3, r3, #3
 80032ba:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80032be:	4b36      	ldr	r3, [pc, #216]	@ (8003398 <UART_SetConfig+0x2d4>)
 80032c0:	fba3 2302 	umull	r2, r3, r3, r2
 80032c4:	095b      	lsrs	r3, r3, #5
 80032c6:	005b      	lsls	r3, r3, #1
 80032c8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80032cc:	441c      	add	r4, r3
 80032ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80032d2:	2200      	movs	r2, #0
 80032d4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80032d8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80032dc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80032e0:	4642      	mov	r2, r8
 80032e2:	464b      	mov	r3, r9
 80032e4:	1891      	adds	r1, r2, r2
 80032e6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80032e8:	415b      	adcs	r3, r3
 80032ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80032ec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80032f0:	4641      	mov	r1, r8
 80032f2:	1851      	adds	r1, r2, r1
 80032f4:	6339      	str	r1, [r7, #48]	@ 0x30
 80032f6:	4649      	mov	r1, r9
 80032f8:	414b      	adcs	r3, r1
 80032fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80032fc:	f04f 0200 	mov.w	r2, #0
 8003300:	f04f 0300 	mov.w	r3, #0
 8003304:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003308:	4659      	mov	r1, fp
 800330a:	00cb      	lsls	r3, r1, #3
 800330c:	4651      	mov	r1, sl
 800330e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003312:	4651      	mov	r1, sl
 8003314:	00ca      	lsls	r2, r1, #3
 8003316:	4610      	mov	r0, r2
 8003318:	4619      	mov	r1, r3
 800331a:	4603      	mov	r3, r0
 800331c:	4642      	mov	r2, r8
 800331e:	189b      	adds	r3, r3, r2
 8003320:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003324:	464b      	mov	r3, r9
 8003326:	460a      	mov	r2, r1
 8003328:	eb42 0303 	adc.w	r3, r2, r3
 800332c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003330:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	2200      	movs	r2, #0
 8003338:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800333c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003340:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003344:	460b      	mov	r3, r1
 8003346:	18db      	adds	r3, r3, r3
 8003348:	62bb      	str	r3, [r7, #40]	@ 0x28
 800334a:	4613      	mov	r3, r2
 800334c:	eb42 0303 	adc.w	r3, r2, r3
 8003350:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003352:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003356:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800335a:	f7fc ff3d 	bl	80001d8 <__aeabi_uldivmod>
 800335e:	4602      	mov	r2, r0
 8003360:	460b      	mov	r3, r1
 8003362:	4b0d      	ldr	r3, [pc, #52]	@ (8003398 <UART_SetConfig+0x2d4>)
 8003364:	fba3 1302 	umull	r1, r3, r3, r2
 8003368:	095b      	lsrs	r3, r3, #5
 800336a:	2164      	movs	r1, #100	@ 0x64
 800336c:	fb01 f303 	mul.w	r3, r1, r3
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	00db      	lsls	r3, r3, #3
 8003374:	3332      	adds	r3, #50	@ 0x32
 8003376:	4a08      	ldr	r2, [pc, #32]	@ (8003398 <UART_SetConfig+0x2d4>)
 8003378:	fba2 2303 	umull	r2, r3, r2, r3
 800337c:	095b      	lsrs	r3, r3, #5
 800337e:	f003 0207 	and.w	r2, r3, #7
 8003382:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4422      	add	r2, r4
 800338a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800338c:	e106      	b.n	800359c <UART_SetConfig+0x4d8>
 800338e:	bf00      	nop
 8003390:	40011000 	.word	0x40011000
 8003394:	40011400 	.word	0x40011400
 8003398:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800339c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80033a0:	2200      	movs	r2, #0
 80033a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80033a6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80033aa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80033ae:	4642      	mov	r2, r8
 80033b0:	464b      	mov	r3, r9
 80033b2:	1891      	adds	r1, r2, r2
 80033b4:	6239      	str	r1, [r7, #32]
 80033b6:	415b      	adcs	r3, r3
 80033b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80033ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80033be:	4641      	mov	r1, r8
 80033c0:	1854      	adds	r4, r2, r1
 80033c2:	4649      	mov	r1, r9
 80033c4:	eb43 0501 	adc.w	r5, r3, r1
 80033c8:	f04f 0200 	mov.w	r2, #0
 80033cc:	f04f 0300 	mov.w	r3, #0
 80033d0:	00eb      	lsls	r3, r5, #3
 80033d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80033d6:	00e2      	lsls	r2, r4, #3
 80033d8:	4614      	mov	r4, r2
 80033da:	461d      	mov	r5, r3
 80033dc:	4643      	mov	r3, r8
 80033de:	18e3      	adds	r3, r4, r3
 80033e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80033e4:	464b      	mov	r3, r9
 80033e6:	eb45 0303 	adc.w	r3, r5, r3
 80033ea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80033ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80033fa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80033fe:	f04f 0200 	mov.w	r2, #0
 8003402:	f04f 0300 	mov.w	r3, #0
 8003406:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800340a:	4629      	mov	r1, r5
 800340c:	008b      	lsls	r3, r1, #2
 800340e:	4621      	mov	r1, r4
 8003410:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003414:	4621      	mov	r1, r4
 8003416:	008a      	lsls	r2, r1, #2
 8003418:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800341c:	f7fc fedc 	bl	80001d8 <__aeabi_uldivmod>
 8003420:	4602      	mov	r2, r0
 8003422:	460b      	mov	r3, r1
 8003424:	4b60      	ldr	r3, [pc, #384]	@ (80035a8 <UART_SetConfig+0x4e4>)
 8003426:	fba3 2302 	umull	r2, r3, r3, r2
 800342a:	095b      	lsrs	r3, r3, #5
 800342c:	011c      	lsls	r4, r3, #4
 800342e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003432:	2200      	movs	r2, #0
 8003434:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003438:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800343c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003440:	4642      	mov	r2, r8
 8003442:	464b      	mov	r3, r9
 8003444:	1891      	adds	r1, r2, r2
 8003446:	61b9      	str	r1, [r7, #24]
 8003448:	415b      	adcs	r3, r3
 800344a:	61fb      	str	r3, [r7, #28]
 800344c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003450:	4641      	mov	r1, r8
 8003452:	1851      	adds	r1, r2, r1
 8003454:	6139      	str	r1, [r7, #16]
 8003456:	4649      	mov	r1, r9
 8003458:	414b      	adcs	r3, r1
 800345a:	617b      	str	r3, [r7, #20]
 800345c:	f04f 0200 	mov.w	r2, #0
 8003460:	f04f 0300 	mov.w	r3, #0
 8003464:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003468:	4659      	mov	r1, fp
 800346a:	00cb      	lsls	r3, r1, #3
 800346c:	4651      	mov	r1, sl
 800346e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003472:	4651      	mov	r1, sl
 8003474:	00ca      	lsls	r2, r1, #3
 8003476:	4610      	mov	r0, r2
 8003478:	4619      	mov	r1, r3
 800347a:	4603      	mov	r3, r0
 800347c:	4642      	mov	r2, r8
 800347e:	189b      	adds	r3, r3, r2
 8003480:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003484:	464b      	mov	r3, r9
 8003486:	460a      	mov	r2, r1
 8003488:	eb42 0303 	adc.w	r3, r2, r3
 800348c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003490:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	2200      	movs	r2, #0
 8003498:	67bb      	str	r3, [r7, #120]	@ 0x78
 800349a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800349c:	f04f 0200 	mov.w	r2, #0
 80034a0:	f04f 0300 	mov.w	r3, #0
 80034a4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80034a8:	4649      	mov	r1, r9
 80034aa:	008b      	lsls	r3, r1, #2
 80034ac:	4641      	mov	r1, r8
 80034ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80034b2:	4641      	mov	r1, r8
 80034b4:	008a      	lsls	r2, r1, #2
 80034b6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80034ba:	f7fc fe8d 	bl	80001d8 <__aeabi_uldivmod>
 80034be:	4602      	mov	r2, r0
 80034c0:	460b      	mov	r3, r1
 80034c2:	4611      	mov	r1, r2
 80034c4:	4b38      	ldr	r3, [pc, #224]	@ (80035a8 <UART_SetConfig+0x4e4>)
 80034c6:	fba3 2301 	umull	r2, r3, r3, r1
 80034ca:	095b      	lsrs	r3, r3, #5
 80034cc:	2264      	movs	r2, #100	@ 0x64
 80034ce:	fb02 f303 	mul.w	r3, r2, r3
 80034d2:	1acb      	subs	r3, r1, r3
 80034d4:	011b      	lsls	r3, r3, #4
 80034d6:	3332      	adds	r3, #50	@ 0x32
 80034d8:	4a33      	ldr	r2, [pc, #204]	@ (80035a8 <UART_SetConfig+0x4e4>)
 80034da:	fba2 2303 	umull	r2, r3, r2, r3
 80034de:	095b      	lsrs	r3, r3, #5
 80034e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80034e4:	441c      	add	r4, r3
 80034e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80034ea:	2200      	movs	r2, #0
 80034ec:	673b      	str	r3, [r7, #112]	@ 0x70
 80034ee:	677a      	str	r2, [r7, #116]	@ 0x74
 80034f0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80034f4:	4642      	mov	r2, r8
 80034f6:	464b      	mov	r3, r9
 80034f8:	1891      	adds	r1, r2, r2
 80034fa:	60b9      	str	r1, [r7, #8]
 80034fc:	415b      	adcs	r3, r3
 80034fe:	60fb      	str	r3, [r7, #12]
 8003500:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003504:	4641      	mov	r1, r8
 8003506:	1851      	adds	r1, r2, r1
 8003508:	6039      	str	r1, [r7, #0]
 800350a:	4649      	mov	r1, r9
 800350c:	414b      	adcs	r3, r1
 800350e:	607b      	str	r3, [r7, #4]
 8003510:	f04f 0200 	mov.w	r2, #0
 8003514:	f04f 0300 	mov.w	r3, #0
 8003518:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800351c:	4659      	mov	r1, fp
 800351e:	00cb      	lsls	r3, r1, #3
 8003520:	4651      	mov	r1, sl
 8003522:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003526:	4651      	mov	r1, sl
 8003528:	00ca      	lsls	r2, r1, #3
 800352a:	4610      	mov	r0, r2
 800352c:	4619      	mov	r1, r3
 800352e:	4603      	mov	r3, r0
 8003530:	4642      	mov	r2, r8
 8003532:	189b      	adds	r3, r3, r2
 8003534:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003536:	464b      	mov	r3, r9
 8003538:	460a      	mov	r2, r1
 800353a:	eb42 0303 	adc.w	r3, r2, r3
 800353e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003540:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	2200      	movs	r2, #0
 8003548:	663b      	str	r3, [r7, #96]	@ 0x60
 800354a:	667a      	str	r2, [r7, #100]	@ 0x64
 800354c:	f04f 0200 	mov.w	r2, #0
 8003550:	f04f 0300 	mov.w	r3, #0
 8003554:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003558:	4649      	mov	r1, r9
 800355a:	008b      	lsls	r3, r1, #2
 800355c:	4641      	mov	r1, r8
 800355e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003562:	4641      	mov	r1, r8
 8003564:	008a      	lsls	r2, r1, #2
 8003566:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800356a:	f7fc fe35 	bl	80001d8 <__aeabi_uldivmod>
 800356e:	4602      	mov	r2, r0
 8003570:	460b      	mov	r3, r1
 8003572:	4b0d      	ldr	r3, [pc, #52]	@ (80035a8 <UART_SetConfig+0x4e4>)
 8003574:	fba3 1302 	umull	r1, r3, r3, r2
 8003578:	095b      	lsrs	r3, r3, #5
 800357a:	2164      	movs	r1, #100	@ 0x64
 800357c:	fb01 f303 	mul.w	r3, r1, r3
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	011b      	lsls	r3, r3, #4
 8003584:	3332      	adds	r3, #50	@ 0x32
 8003586:	4a08      	ldr	r2, [pc, #32]	@ (80035a8 <UART_SetConfig+0x4e4>)
 8003588:	fba2 2303 	umull	r2, r3, r2, r3
 800358c:	095b      	lsrs	r3, r3, #5
 800358e:	f003 020f 	and.w	r2, r3, #15
 8003592:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4422      	add	r2, r4
 800359a:	609a      	str	r2, [r3, #8]
}
 800359c:	bf00      	nop
 800359e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80035a2:	46bd      	mov	sp, r7
 80035a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035a8:	51eb851f 	.word	0x51eb851f

080035ac <apInit>:
// Global Variables
uint8_t receive_data[8];
uint8_t IN_value [4] = {0, };

// Initialization of app
void apInit() {
 80035ac:	b480      	push	{r7}
 80035ae:	af00      	add	r7, sp, #0

}
 80035b0:	bf00      	nop
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr
	...

080035bc <apMain>:

// New Main Functions
void apMain() {
 80035bc:	b580      	push	{r7, lr}
 80035be:	af00      	add	r7, sp, #0
	// Initialization of UART
	HAL_UART_Receive_DMA(&huart1, receive_data, sizeof(receive_data));
 80035c0:	2208      	movs	r2, #8
 80035c2:	4903      	ldr	r1, [pc, #12]	@ (80035d0 <apMain+0x14>)
 80035c4:	4803      	ldr	r0, [pc, #12]	@ (80035d4 <apMain+0x18>)
 80035c6:	f7ff fb09 	bl	8002bdc <HAL_UART_Receive_DMA>

	while(1) {
		control_motor();
 80035ca:	f000 f805 	bl	80035d8 <control_motor>
 80035ce:	e7fc      	b.n	80035ca <apMain+0xe>
 80035d0:	200001c4 	.word	0x200001c4
 80035d4:	200000b8 	.word	0x200000b8

080035d8 <control_motor>:
	}
}

// Control Motor
void control_motor() {
 80035d8:	b580      	push	{r7, lr}
 80035da:	af00      	add	r7, sp, #0
	// Select IN Values
	select_IN_values();
 80035dc:	f000 f808 	bl	80035f0 <select_IN_values>

	// Enter IN Values to Motor driver
	enter_IN_values();
 80035e0:	f000 f86a 	bl	80036b8 <enter_IN_values>

	// Entr duty of Motor.
	enter_duty_of_motor(100, 100);
 80035e4:	2164      	movs	r1, #100	@ 0x64
 80035e6:	2064      	movs	r0, #100	@ 0x64
 80035e8:	f000 f882 	bl	80036f0 <enter_duty_of_motor>
}
 80035ec:	bf00      	nop
 80035ee:	bd80      	pop	{r7, pc}

080035f0 <select_IN_values>:

// Select IN Values
void select_IN_values() {
 80035f0:	b480      	push	{r7}
 80035f2:	af00      	add	r7, sp, #0
	if(receive_data[5] == 0) {
 80035f4:	4b2e      	ldr	r3, [pc, #184]	@ (80036b0 <select_IN_values+0xc0>)
 80035f6:	795b      	ldrb	r3, [r3, #5]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d153      	bne.n	80036a4 <select_IN_values+0xb4>
		if(receive_data[6] == 0) {
 80035fc:	4b2c      	ldr	r3, [pc, #176]	@ (80036b0 <select_IN_values+0xc0>)
 80035fe:	799b      	ldrb	r3, [r3, #6]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d10c      	bne.n	800361e <select_IN_values+0x2e>
			IN_value[0] = GPIO_PIN_SET;
 8003604:	4b2b      	ldr	r3, [pc, #172]	@ (80036b4 <select_IN_values+0xc4>)
 8003606:	2201      	movs	r2, #1
 8003608:	701a      	strb	r2, [r3, #0]
			IN_value[1] = GPIO_PIN_SET;
 800360a:	4b2a      	ldr	r3, [pc, #168]	@ (80036b4 <select_IN_values+0xc4>)
 800360c:	2201      	movs	r2, #1
 800360e:	705a      	strb	r2, [r3, #1]
			IN_value[2] = GPIO_PIN_SET;
 8003610:	4b28      	ldr	r3, [pc, #160]	@ (80036b4 <select_IN_values+0xc4>)
 8003612:	2201      	movs	r2, #1
 8003614:	709a      	strb	r2, [r3, #2]
			IN_value[3] = GPIO_PIN_SET;
 8003616:	4b27      	ldr	r3, [pc, #156]	@ (80036b4 <select_IN_values+0xc4>)
 8003618:	2201      	movs	r2, #1
 800361a:	70da      	strb	r2, [r3, #3]
			IN_value[1] = GPIO_PIN_RESET;
			IN_value[2] = GPIO_PIN_RESET;
			IN_value[3] = GPIO_PIN_SET;
		}
	}
}
 800361c:	e042      	b.n	80036a4 <select_IN_values+0xb4>
		}else if(receive_data[6] == 1) {
 800361e:	4b24      	ldr	r3, [pc, #144]	@ (80036b0 <select_IN_values+0xc0>)
 8003620:	799b      	ldrb	r3, [r3, #6]
 8003622:	2b01      	cmp	r3, #1
 8003624:	d10c      	bne.n	8003640 <select_IN_values+0x50>
			IN_value[0] = GPIO_PIN_SET;
 8003626:	4b23      	ldr	r3, [pc, #140]	@ (80036b4 <select_IN_values+0xc4>)
 8003628:	2201      	movs	r2, #1
 800362a:	701a      	strb	r2, [r3, #0]
			IN_value[1] = GPIO_PIN_RESET;
 800362c:	4b21      	ldr	r3, [pc, #132]	@ (80036b4 <select_IN_values+0xc4>)
 800362e:	2200      	movs	r2, #0
 8003630:	705a      	strb	r2, [r3, #1]
			IN_value[2] = GPIO_PIN_SET;
 8003632:	4b20      	ldr	r3, [pc, #128]	@ (80036b4 <select_IN_values+0xc4>)
 8003634:	2201      	movs	r2, #1
 8003636:	709a      	strb	r2, [r3, #2]
			IN_value[3] = GPIO_PIN_RESET;
 8003638:	4b1e      	ldr	r3, [pc, #120]	@ (80036b4 <select_IN_values+0xc4>)
 800363a:	2200      	movs	r2, #0
 800363c:	70da      	strb	r2, [r3, #3]
}
 800363e:	e031      	b.n	80036a4 <select_IN_values+0xb4>
		}else if(receive_data[6] == 2) {
 8003640:	4b1b      	ldr	r3, [pc, #108]	@ (80036b0 <select_IN_values+0xc0>)
 8003642:	799b      	ldrb	r3, [r3, #6]
 8003644:	2b02      	cmp	r3, #2
 8003646:	d10c      	bne.n	8003662 <select_IN_values+0x72>
			IN_value[0] = GPIO_PIN_RESET;
 8003648:	4b1a      	ldr	r3, [pc, #104]	@ (80036b4 <select_IN_values+0xc4>)
 800364a:	2200      	movs	r2, #0
 800364c:	701a      	strb	r2, [r3, #0]
			IN_value[1] = GPIO_PIN_SET;
 800364e:	4b19      	ldr	r3, [pc, #100]	@ (80036b4 <select_IN_values+0xc4>)
 8003650:	2201      	movs	r2, #1
 8003652:	705a      	strb	r2, [r3, #1]
			IN_value[2] = GPIO_PIN_RESET;
 8003654:	4b17      	ldr	r3, [pc, #92]	@ (80036b4 <select_IN_values+0xc4>)
 8003656:	2200      	movs	r2, #0
 8003658:	709a      	strb	r2, [r3, #2]
			IN_value[3] = GPIO_PIN_SET;
 800365a:	4b16      	ldr	r3, [pc, #88]	@ (80036b4 <select_IN_values+0xc4>)
 800365c:	2201      	movs	r2, #1
 800365e:	70da      	strb	r2, [r3, #3]
}
 8003660:	e020      	b.n	80036a4 <select_IN_values+0xb4>
		}else if(receive_data[6] == 4) {
 8003662:	4b13      	ldr	r3, [pc, #76]	@ (80036b0 <select_IN_values+0xc0>)
 8003664:	799b      	ldrb	r3, [r3, #6]
 8003666:	2b04      	cmp	r3, #4
 8003668:	d10c      	bne.n	8003684 <select_IN_values+0x94>
			IN_value[0] = GPIO_PIN_RESET;
 800366a:	4b12      	ldr	r3, [pc, #72]	@ (80036b4 <select_IN_values+0xc4>)
 800366c:	2200      	movs	r2, #0
 800366e:	701a      	strb	r2, [r3, #0]
			IN_value[1] = GPIO_PIN_SET;
 8003670:	4b10      	ldr	r3, [pc, #64]	@ (80036b4 <select_IN_values+0xc4>)
 8003672:	2201      	movs	r2, #1
 8003674:	705a      	strb	r2, [r3, #1]
			IN_value[2] = GPIO_PIN_SET;
 8003676:	4b0f      	ldr	r3, [pc, #60]	@ (80036b4 <select_IN_values+0xc4>)
 8003678:	2201      	movs	r2, #1
 800367a:	709a      	strb	r2, [r3, #2]
			IN_value[3] = GPIO_PIN_RESET;
 800367c:	4b0d      	ldr	r3, [pc, #52]	@ (80036b4 <select_IN_values+0xc4>)
 800367e:	2200      	movs	r2, #0
 8003680:	70da      	strb	r2, [r3, #3]
}
 8003682:	e00f      	b.n	80036a4 <select_IN_values+0xb4>
		}else if(receive_data[6] == 8) {
 8003684:	4b0a      	ldr	r3, [pc, #40]	@ (80036b0 <select_IN_values+0xc0>)
 8003686:	799b      	ldrb	r3, [r3, #6]
 8003688:	2b08      	cmp	r3, #8
 800368a:	d10b      	bne.n	80036a4 <select_IN_values+0xb4>
			IN_value[0] = GPIO_PIN_SET;
 800368c:	4b09      	ldr	r3, [pc, #36]	@ (80036b4 <select_IN_values+0xc4>)
 800368e:	2201      	movs	r2, #1
 8003690:	701a      	strb	r2, [r3, #0]
			IN_value[1] = GPIO_PIN_RESET;
 8003692:	4b08      	ldr	r3, [pc, #32]	@ (80036b4 <select_IN_values+0xc4>)
 8003694:	2200      	movs	r2, #0
 8003696:	705a      	strb	r2, [r3, #1]
			IN_value[2] = GPIO_PIN_RESET;
 8003698:	4b06      	ldr	r3, [pc, #24]	@ (80036b4 <select_IN_values+0xc4>)
 800369a:	2200      	movs	r2, #0
 800369c:	709a      	strb	r2, [r3, #2]
			IN_value[3] = GPIO_PIN_SET;
 800369e:	4b05      	ldr	r3, [pc, #20]	@ (80036b4 <select_IN_values+0xc4>)
 80036a0:	2201      	movs	r2, #1
 80036a2:	70da      	strb	r2, [r3, #3]
}
 80036a4:	bf00      	nop
 80036a6:	46bd      	mov	sp, r7
 80036a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ac:	4770      	bx	lr
 80036ae:	bf00      	nop
 80036b0:	200001c4 	.word	0x200001c4
 80036b4:	200001cc 	.word	0x200001cc

080036b8 <enter_IN_values>:

// Enter IN Values
void enter_IN_values() {
 80036b8:	b580      	push	{r7, lr}
 80036ba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 80036bc:	2201      	movs	r2, #1
 80036be:	2120      	movs	r1, #32
 80036c0:	4809      	ldr	r0, [pc, #36]	@ (80036e8 <enter_IN_values+0x30>)
 80036c2:	f7fe f99f 	bl	8001a04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 80036c6:	2200      	movs	r2, #0
 80036c8:	2140      	movs	r1, #64	@ 0x40
 80036ca:	4807      	ldr	r0, [pc, #28]	@ (80036e8 <enter_IN_values+0x30>)
 80036cc:	f7fe f99a 	bl	8001a04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);
 80036d0:	2201      	movs	r2, #1
 80036d2:	2180      	movs	r1, #128	@ 0x80
 80036d4:	4804      	ldr	r0, [pc, #16]	@ (80036e8 <enter_IN_values+0x30>)
 80036d6:	f7fe f995 	bl	8001a04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 0);
 80036da:	2200      	movs	r2, #0
 80036dc:	2140      	movs	r1, #64	@ 0x40
 80036de:	4803      	ldr	r0, [pc, #12]	@ (80036ec <enter_IN_values+0x34>)
 80036e0:	f7fe f990 	bl	8001a04 <HAL_GPIO_WritePin>
}
 80036e4:	bf00      	nop
 80036e6:	bd80      	pop	{r7, pc}
 80036e8:	40020000 	.word	0x40020000
 80036ec:	40020400 	.word	0x40020400

080036f0 <enter_duty_of_motor>:

// Enter Duty of Motor
void enter_duty_of_motor(uint8_t left_duty, uint8_t right_duty) {
 80036f0:	b480      	push	{r7}
 80036f2:	b083      	sub	sp, #12
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	4603      	mov	r3, r0
 80036f8:	460a      	mov	r2, r1
 80036fa:	71fb      	strb	r3, [r7, #7]
 80036fc:	4613      	mov	r3, r2
 80036fe:	71bb      	strb	r3, [r7, #6]
	TIM1->CCR2 = 100;
 8003700:	4b05      	ldr	r3, [pc, #20]	@ (8003718 <enter_duty_of_motor+0x28>)
 8003702:	2264      	movs	r2, #100	@ 0x64
 8003704:	639a      	str	r2, [r3, #56]	@ 0x38
	TIM3->CCR2 = 100;
 8003706:	4b05      	ldr	r3, [pc, #20]	@ (800371c <enter_duty_of_motor+0x2c>)
 8003708:	2264      	movs	r2, #100	@ 0x64
 800370a:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800370c:	bf00      	nop
 800370e:	370c      	adds	r7, #12
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr
 8003718:	40010000 	.word	0x40010000
 800371c:	40000400 	.word	0x40000400

08003720 <memset>:
 8003720:	4402      	add	r2, r0
 8003722:	4603      	mov	r3, r0
 8003724:	4293      	cmp	r3, r2
 8003726:	d100      	bne.n	800372a <memset+0xa>
 8003728:	4770      	bx	lr
 800372a:	f803 1b01 	strb.w	r1, [r3], #1
 800372e:	e7f9      	b.n	8003724 <memset+0x4>

08003730 <__libc_init_array>:
 8003730:	b570      	push	{r4, r5, r6, lr}
 8003732:	4d0d      	ldr	r5, [pc, #52]	@ (8003768 <__libc_init_array+0x38>)
 8003734:	4c0d      	ldr	r4, [pc, #52]	@ (800376c <__libc_init_array+0x3c>)
 8003736:	1b64      	subs	r4, r4, r5
 8003738:	10a4      	asrs	r4, r4, #2
 800373a:	2600      	movs	r6, #0
 800373c:	42a6      	cmp	r6, r4
 800373e:	d109      	bne.n	8003754 <__libc_init_array+0x24>
 8003740:	4d0b      	ldr	r5, [pc, #44]	@ (8003770 <__libc_init_array+0x40>)
 8003742:	4c0c      	ldr	r4, [pc, #48]	@ (8003774 <__libc_init_array+0x44>)
 8003744:	f000 f818 	bl	8003778 <_init>
 8003748:	1b64      	subs	r4, r4, r5
 800374a:	10a4      	asrs	r4, r4, #2
 800374c:	2600      	movs	r6, #0
 800374e:	42a6      	cmp	r6, r4
 8003750:	d105      	bne.n	800375e <__libc_init_array+0x2e>
 8003752:	bd70      	pop	{r4, r5, r6, pc}
 8003754:	f855 3b04 	ldr.w	r3, [r5], #4
 8003758:	4798      	blx	r3
 800375a:	3601      	adds	r6, #1
 800375c:	e7ee      	b.n	800373c <__libc_init_array+0xc>
 800375e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003762:	4798      	blx	r3
 8003764:	3601      	adds	r6, #1
 8003766:	e7f2      	b.n	800374e <__libc_init_array+0x1e>
 8003768:	080037b8 	.word	0x080037b8
 800376c:	080037b8 	.word	0x080037b8
 8003770:	080037b8 	.word	0x080037b8
 8003774:	080037bc 	.word	0x080037bc

08003778 <_init>:
 8003778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800377a:	bf00      	nop
 800377c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800377e:	bc08      	pop	{r3}
 8003780:	469e      	mov	lr, r3
 8003782:	4770      	bx	lr

08003784 <_fini>:
 8003784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003786:	bf00      	nop
 8003788:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800378a:	bc08      	pop	{r3}
 800378c:	469e      	mov	lr, r3
 800378e:	4770      	bx	lr
